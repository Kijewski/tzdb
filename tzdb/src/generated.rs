// SPDX-License-Identifier: MIT-0
//
// GENERATED FILE
// ALL CHANGES MADE IN THIS FILE WILL BE LOST!
//
// MIT No Attribution
//
// Copyright 2022 Ren√© Kijewski <crates.io@k6i.de>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// associated documentation files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge, publish, distribute,
// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

use tz::TimeZoneRef;

#[cfg(feature = "by-name")]
use crate::lower::Lower;

/// All defined time zones statically accessible
pub mod time_zone {
    use super::*;

    /// africa
    pub mod africa {
        use super::*;

        /// Time zone data for Africa/Abidjan,
        pub const ABIDJAN: TimeZoneRef<'static> = tzdata::AFRICA_ABIDJAN;

        /// Time zone data for Africa/Accra,
        pub const ACCRA: TimeZoneRef<'static> = tzdata::AFRICA_ACCRA;

        /// Time zone data for Africa/Addis_Ababa,
        pub const ADDIS_ABABA: TimeZoneRef<'static> = tzdata::AFRICA_ADDIS_ABABA;

        /// Time zone data for Africa/Algiers,
        pub const ALGIERS: TimeZoneRef<'static> = tzdata::AFRICA_ALGIERS;

        /// Time zone data for Africa/Asmara,
        pub const ASMARA: TimeZoneRef<'static> = tzdata::AFRICA_ASMARA;

        /// Time zone data for Africa/Asmera,
        pub const ASMERA: TimeZoneRef<'static> = tzdata::AFRICA_ASMARA;

        /// Time zone data for Africa/Bamako,
        pub const BAMAKO: TimeZoneRef<'static> = tzdata::AFRICA_BAMAKO;

        /// Time zone data for Africa/Bangui,
        pub const BANGUI: TimeZoneRef<'static> = tzdata::AFRICA_BANGUI;

        /// Time zone data for Africa/Banjul,
        pub const BANJUL: TimeZoneRef<'static> = tzdata::AFRICA_BANJUL;

        /// Time zone data for Africa/Bissau,
        pub const BISSAU: TimeZoneRef<'static> = tzdata::AFRICA_BISSAU;

        /// Time zone data for Africa/Blantyre,
        pub const BLANTYRE: TimeZoneRef<'static> = tzdata::AFRICA_BLANTYRE;

        /// Time zone data for Africa/Brazzaville,
        pub const BRAZZAVILLE: TimeZoneRef<'static> = tzdata::AFRICA_BRAZZAVILLE;

        /// Time zone data for Africa/Bujumbura,
        pub const BUJUMBURA: TimeZoneRef<'static> = tzdata::AFRICA_BUJUMBURA;

        /// Time zone data for Africa/Cairo,
        pub const CAIRO: TimeZoneRef<'static> = tzdata::EGYPT;

        /// Time zone data for Africa/Casablanca,
        pub const CASABLANCA: TimeZoneRef<'static> = tzdata::AFRICA_CASABLANCA;

        /// Time zone data for Africa/Ceuta,
        pub const CEUTA: TimeZoneRef<'static> = tzdata::AFRICA_CEUTA;

        /// Time zone data for Africa/Conakry,
        pub const CONAKRY: TimeZoneRef<'static> = tzdata::AFRICA_CONAKRY;

        /// Time zone data for Africa/Dakar,
        pub const DAKAR: TimeZoneRef<'static> = tzdata::AFRICA_DAKAR;

        /// Time zone data for Africa/Dar_es_Salaam,
        pub const DAR_ES_SALAAM: TimeZoneRef<'static> = tzdata::AFRICA_DAR_ES_SALAAM;

        /// Time zone data for Africa/Djibouti,
        pub const DJIBOUTI: TimeZoneRef<'static> = tzdata::AFRICA_DJIBOUTI;

        /// Time zone data for Africa/Douala,
        pub const DOUALA: TimeZoneRef<'static> = tzdata::AFRICA_DOUALA;

        /// Time zone data for Africa/El_Aaiun,
        pub const EL_AAIUN: TimeZoneRef<'static> = tzdata::AFRICA_EL_AAIUN;

        /// Time zone data for Africa/Freetown,
        pub const FREETOWN: TimeZoneRef<'static> = tzdata::AFRICA_FREETOWN;

        /// Time zone data for Africa/Gaborone,
        pub const GABORONE: TimeZoneRef<'static> = tzdata::AFRICA_GABORONE;

        /// Time zone data for Africa/Harare,
        pub const HARARE: TimeZoneRef<'static> = tzdata::AFRICA_HARARE;

        /// Time zone data for Africa/Johannesburg,
        pub const JOHANNESBURG: TimeZoneRef<'static> = tzdata::AFRICA_JOHANNESBURG;

        /// Time zone data for Africa/Juba,
        pub const JUBA: TimeZoneRef<'static> = tzdata::AFRICA_JUBA;

        /// Time zone data for Africa/Kampala,
        pub const KAMPALA: TimeZoneRef<'static> = tzdata::AFRICA_KAMPALA;

        /// Time zone data for Africa/Khartoum,
        pub const KHARTOUM: TimeZoneRef<'static> = tzdata::AFRICA_KHARTOUM;

        /// Time zone data for Africa/Kigali,
        pub const KIGALI: TimeZoneRef<'static> = tzdata::AFRICA_KIGALI;

        /// Time zone data for Africa/Kinshasa,
        pub const KINSHASA: TimeZoneRef<'static> = tzdata::AFRICA_KINSHASA;

        /// Time zone data for Africa/Lagos,
        pub const LAGOS: TimeZoneRef<'static> = tzdata::AFRICA_LAGOS;

        /// Time zone data for Africa/Libreville,
        pub const LIBREVILLE: TimeZoneRef<'static> = tzdata::AFRICA_LIBREVILLE;

        /// Time zone data for Africa/Lome,
        pub const LOME: TimeZoneRef<'static> = tzdata::AFRICA_LOME;

        /// Time zone data for Africa/Luanda,
        pub const LUANDA: TimeZoneRef<'static> = tzdata::AFRICA_LUANDA;

        /// Time zone data for Africa/Lubumbashi,
        pub const LUBUMBASHI: TimeZoneRef<'static> = tzdata::AFRICA_LUBUMBASHI;

        /// Time zone data for Africa/Lusaka,
        pub const LUSAKA: TimeZoneRef<'static> = tzdata::AFRICA_LUSAKA;

        /// Time zone data for Africa/Malabo,
        pub const MALABO: TimeZoneRef<'static> = tzdata::AFRICA_MALABO;

        /// Time zone data for Africa/Maputo,
        pub const MAPUTO: TimeZoneRef<'static> = tzdata::AFRICA_MAPUTO;

        /// Time zone data for Africa/Maseru,
        pub const MASERU: TimeZoneRef<'static> = tzdata::AFRICA_MASERU;

        /// Time zone data for Africa/Mbabane,
        pub const MBABANE: TimeZoneRef<'static> = tzdata::AFRICA_MBABANE;

        /// Time zone data for Africa/Mogadishu,
        pub const MOGADISHU: TimeZoneRef<'static> = tzdata::AFRICA_MOGADISHU;

        /// Time zone data for Africa/Monrovia,
        pub const MONROVIA: TimeZoneRef<'static> = tzdata::AFRICA_MONROVIA;

        /// Time zone data for Africa/Nairobi,
        pub const NAIROBI: TimeZoneRef<'static> = tzdata::AFRICA_NAIROBI;

        /// Time zone data for Africa/Ndjamena,
        pub const NDJAMENA: TimeZoneRef<'static> = tzdata::AFRICA_NDJAMENA;

        /// Time zone data for Africa/Niamey,
        pub const NIAMEY: TimeZoneRef<'static> = tzdata::AFRICA_NIAMEY;

        /// Time zone data for Africa/Nouakchott,
        pub const NOUAKCHOTT: TimeZoneRef<'static> = tzdata::AFRICA_NOUAKCHOTT;

        /// Time zone data for Africa/Ouagadougou,
        pub const OUAGADOUGOU: TimeZoneRef<'static> = tzdata::AFRICA_OUAGADOUGOU;

        /// Time zone data for Africa/Porto-Novo,
        pub const PORTO_NOVO: TimeZoneRef<'static> = tzdata::AFRICA_PORTO_NOVO;

        /// Time zone data for Africa/Sao_Tome,
        pub const SAO_TOME: TimeZoneRef<'static> = tzdata::AFRICA_SAO_TOME;

        /// Time zone data for Africa/Timbuktu,
        pub const TIMBUKTU: TimeZoneRef<'static> = tzdata::AFRICA_TIMBUKTU;

        /// Time zone data for Africa/Tripoli,
        pub const TRIPOLI: TimeZoneRef<'static> = tzdata::LIBYA;

        /// Time zone data for Africa/Tunis,
        pub const TUNIS: TimeZoneRef<'static> = tzdata::AFRICA_TUNIS;

        /// Time zone data for Africa/Windhoek,
        pub const WINDHOEK: TimeZoneRef<'static> = tzdata::AFRICA_WINDHOEK;

        /// Raw, unparsed time zone data for Africa/Abidjan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ABIDJAN: &[u8] = raw_tzdata::AFRICA_ABIDJAN;

        /// Raw, unparsed time zone data for Africa/Accra,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ACCRA: &[u8] = raw_tzdata::AFRICA_ACCRA;

        /// Raw, unparsed time zone data for Africa/Addis_Ababa,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ADDIS_ABABA: &[u8] = raw_tzdata::AFRICA_ADDIS_ABABA;

        /// Raw, unparsed time zone data for Africa/Algiers,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ALGIERS: &[u8] = raw_tzdata::AFRICA_ALGIERS;

        /// Raw, unparsed time zone data for Africa/Asmara,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ASMARA: &[u8] = raw_tzdata::AFRICA_ASMARA;

        /// Raw, unparsed time zone data for Africa/Asmera,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ASMERA: &[u8] = raw_tzdata::AFRICA_ASMARA;

        /// Raw, unparsed time zone data for Africa/Bamako,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BAMAKO: &[u8] = raw_tzdata::AFRICA_BAMAKO;

        /// Raw, unparsed time zone data for Africa/Bangui,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BANGUI: &[u8] = raw_tzdata::AFRICA_BANGUI;

        /// Raw, unparsed time zone data for Africa/Banjul,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BANJUL: &[u8] = raw_tzdata::AFRICA_BANJUL;

        /// Raw, unparsed time zone data for Africa/Bissau,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BISSAU: &[u8] = raw_tzdata::AFRICA_BISSAU;

        /// Raw, unparsed time zone data for Africa/Blantyre,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BLANTYRE: &[u8] = raw_tzdata::AFRICA_BLANTYRE;

        /// Raw, unparsed time zone data for Africa/Brazzaville,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BRAZZAVILLE: &[u8] = raw_tzdata::AFRICA_BRAZZAVILLE;

        /// Raw, unparsed time zone data for Africa/Bujumbura,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BUJUMBURA: &[u8] = raw_tzdata::AFRICA_BUJUMBURA;

        /// Raw, unparsed time zone data for Africa/Cairo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CAIRO: &[u8] = raw_tzdata::EGYPT;

        /// Raw, unparsed time zone data for Africa/Casablanca,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CASABLANCA: &[u8] = raw_tzdata::AFRICA_CASABLANCA;

        /// Raw, unparsed time zone data for Africa/Ceuta,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CEUTA: &[u8] = raw_tzdata::AFRICA_CEUTA;

        /// Raw, unparsed time zone data for Africa/Conakry,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CONAKRY: &[u8] = raw_tzdata::AFRICA_CONAKRY;

        /// Raw, unparsed time zone data for Africa/Dakar,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DAKAR: &[u8] = raw_tzdata::AFRICA_DAKAR;

        /// Raw, unparsed time zone data for Africa/Dar_es_Salaam,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DAR_ES_SALAAM: &[u8] = raw_tzdata::AFRICA_DAR_ES_SALAAM;

        /// Raw, unparsed time zone data for Africa/Djibouti,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DJIBOUTI: &[u8] = raw_tzdata::AFRICA_DJIBOUTI;

        /// Raw, unparsed time zone data for Africa/Douala,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DOUALA: &[u8] = raw_tzdata::AFRICA_DOUALA;

        /// Raw, unparsed time zone data for Africa/El_Aaiun,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EL_AAIUN: &[u8] = raw_tzdata::AFRICA_EL_AAIUN;

        /// Raw, unparsed time zone data for Africa/Freetown,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FREETOWN: &[u8] = raw_tzdata::AFRICA_FREETOWN;

        /// Raw, unparsed time zone data for Africa/Gaborone,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GABORONE: &[u8] = raw_tzdata::AFRICA_GABORONE;

        /// Raw, unparsed time zone data for Africa/Harare,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HARARE: &[u8] = raw_tzdata::AFRICA_HARARE;

        /// Raw, unparsed time zone data for Africa/Johannesburg,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JOHANNESBURG: &[u8] = raw_tzdata::AFRICA_JOHANNESBURG;

        /// Raw, unparsed time zone data for Africa/Juba,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JUBA: &[u8] = raw_tzdata::AFRICA_JUBA;

        /// Raw, unparsed time zone data for Africa/Kampala,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KAMPALA: &[u8] = raw_tzdata::AFRICA_KAMPALA;

        /// Raw, unparsed time zone data for Africa/Khartoum,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KHARTOUM: &[u8] = raw_tzdata::AFRICA_KHARTOUM;

        /// Raw, unparsed time zone data for Africa/Kigali,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KIGALI: &[u8] = raw_tzdata::AFRICA_KIGALI;

        /// Raw, unparsed time zone data for Africa/Kinshasa,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KINSHASA: &[u8] = raw_tzdata::AFRICA_KINSHASA;

        /// Raw, unparsed time zone data for Africa/Lagos,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LAGOS: &[u8] = raw_tzdata::AFRICA_LAGOS;

        /// Raw, unparsed time zone data for Africa/Libreville,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LIBREVILLE: &[u8] = raw_tzdata::AFRICA_LIBREVILLE;

        /// Raw, unparsed time zone data for Africa/Lome,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LOME: &[u8] = raw_tzdata::AFRICA_LOME;

        /// Raw, unparsed time zone data for Africa/Luanda,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LUANDA: &[u8] = raw_tzdata::AFRICA_LUANDA;

        /// Raw, unparsed time zone data for Africa/Lubumbashi,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LUBUMBASHI: &[u8] = raw_tzdata::AFRICA_LUBUMBASHI;

        /// Raw, unparsed time zone data for Africa/Lusaka,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LUSAKA: &[u8] = raw_tzdata::AFRICA_LUSAKA;

        /// Raw, unparsed time zone data for Africa/Malabo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MALABO: &[u8] = raw_tzdata::AFRICA_MALABO;

        /// Raw, unparsed time zone data for Africa/Maputo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MAPUTO: &[u8] = raw_tzdata::AFRICA_MAPUTO;

        /// Raw, unparsed time zone data for Africa/Maseru,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MASERU: &[u8] = raw_tzdata::AFRICA_MASERU;

        /// Raw, unparsed time zone data for Africa/Mbabane,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MBABANE: &[u8] = raw_tzdata::AFRICA_MBABANE;

        /// Raw, unparsed time zone data for Africa/Mogadishu,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MOGADISHU: &[u8] = raw_tzdata::AFRICA_MOGADISHU;

        /// Raw, unparsed time zone data for Africa/Monrovia,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MONROVIA: &[u8] = raw_tzdata::AFRICA_MONROVIA;

        /// Raw, unparsed time zone data for Africa/Nairobi,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NAIROBI: &[u8] = raw_tzdata::AFRICA_NAIROBI;

        /// Raw, unparsed time zone data for Africa/Ndjamena,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NDJAMENA: &[u8] = raw_tzdata::AFRICA_NDJAMENA;

        /// Raw, unparsed time zone data for Africa/Niamey,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NIAMEY: &[u8] = raw_tzdata::AFRICA_NIAMEY;

        /// Raw, unparsed time zone data for Africa/Nouakchott,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NOUAKCHOTT: &[u8] = raw_tzdata::AFRICA_NOUAKCHOTT;

        /// Raw, unparsed time zone data for Africa/Ouagadougou,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_OUAGADOUGOU: &[u8] = raw_tzdata::AFRICA_OUAGADOUGOU;

        /// Raw, unparsed time zone data for Africa/Porto-Novo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PORTO_NOVO: &[u8] = raw_tzdata::AFRICA_PORTO_NOVO;

        /// Raw, unparsed time zone data for Africa/Sao_Tome,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAO_TOME: &[u8] = raw_tzdata::AFRICA_SAO_TOME;

        /// Raw, unparsed time zone data for Africa/Timbuktu,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TIMBUKTU: &[u8] = raw_tzdata::AFRICA_TIMBUKTU;

        /// Raw, unparsed time zone data for Africa/Tripoli,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TRIPOLI: &[u8] = raw_tzdata::LIBYA;

        /// Raw, unparsed time zone data for Africa/Tunis,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TUNIS: &[u8] = raw_tzdata::AFRICA_TUNIS;

        /// Raw, unparsed time zone data for Africa/Windhoek,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_WINDHOEK: &[u8] = raw_tzdata::AFRICA_WINDHOEK;
    }

    /// america
    pub mod america {
        use super::*;

        /// Time zone data for America/Adak,
        pub const ADAK: TimeZoneRef<'static> = tzdata::AMERICA_ADAK;

        /// Time zone data for America/Anchorage,
        pub const ANCHORAGE: TimeZoneRef<'static> = tzdata::AMERICA_ANCHORAGE;

        /// Time zone data for America/Anguilla,
        pub const ANGUILLA: TimeZoneRef<'static> = tzdata::AMERICA_ANGUILLA;

        /// Time zone data for America/Antigua,
        pub const ANTIGUA: TimeZoneRef<'static> = tzdata::AMERICA_ANTIGUA;

        /// Time zone data for America/Araguaina,
        pub const ARAGUAINA: TimeZoneRef<'static> = tzdata::AMERICA_ARAGUAINA;

        /// Time zone data for America/Aruba,
        pub const ARUBA: TimeZoneRef<'static> = tzdata::AMERICA_ARUBA;

        /// Time zone data for America/Asuncion,
        pub const ASUNCION: TimeZoneRef<'static> = tzdata::AMERICA_ASUNCION;

        /// Time zone data for America/Atikokan,
        pub const ATIKOKAN: TimeZoneRef<'static> = tzdata::AMERICA_ATIKOKAN;

        /// Time zone data for America/Atka,
        pub const ATKA: TimeZoneRef<'static> = tzdata::AMERICA_ADAK;

        /// Time zone data for America/Bahia,
        pub const BAHIA: TimeZoneRef<'static> = tzdata::AMERICA_BAHIA;

        /// Time zone data for America/Bahia_Banderas,
        pub const BAHIA_BANDERAS: TimeZoneRef<'static> = tzdata::AMERICA_BAHIA_BANDERAS;

        /// Time zone data for America/Barbados,
        pub const BARBADOS: TimeZoneRef<'static> = tzdata::AMERICA_BARBADOS;

        /// Time zone data for America/Belem,
        pub const BELEM: TimeZoneRef<'static> = tzdata::AMERICA_BELEM;

        /// Time zone data for America/Belize,
        pub const BELIZE: TimeZoneRef<'static> = tzdata::AMERICA_BELIZE;

        /// Time zone data for America/Blanc-Sablon,
        pub const BLANC_SABLON: TimeZoneRef<'static> = tzdata::AMERICA_BLANC_SABLON;

        /// Time zone data for America/Boa_Vista,
        pub const BOA_VISTA: TimeZoneRef<'static> = tzdata::AMERICA_BOA_VISTA;

        /// Time zone data for America/Bogota,
        pub const BOGOTA: TimeZoneRef<'static> = tzdata::AMERICA_BOGOTA;

        /// Time zone data for America/Boise,
        pub const BOISE: TimeZoneRef<'static> = tzdata::AMERICA_BOISE;

        /// Time zone data for America/Buenos_Aires,
        pub const BUENOS_AIRES: TimeZoneRef<'static> = tzdata::AMERICA_BUENOS_AIRES;

        /// Time zone data for America/Cambridge_Bay,
        pub const CAMBRIDGE_BAY: TimeZoneRef<'static> = tzdata::AMERICA_CAMBRIDGE_BAY;

        /// Time zone data for America/Campo_Grande,
        pub const CAMPO_GRANDE: TimeZoneRef<'static> = tzdata::AMERICA_CAMPO_GRANDE;

        /// Time zone data for America/Cancun,
        pub const CANCUN: TimeZoneRef<'static> = tzdata::AMERICA_CANCUN;

        /// Time zone data for America/Caracas,
        pub const CARACAS: TimeZoneRef<'static> = tzdata::AMERICA_CARACAS;

        /// Time zone data for America/Catamarca,
        pub const CATAMARCA: TimeZoneRef<'static> = tzdata::AMERICA_CATAMARCA;

        /// Time zone data for America/Cayenne,
        pub const CAYENNE: TimeZoneRef<'static> = tzdata::AMERICA_CAYENNE;

        /// Time zone data for America/Cayman,
        pub const CAYMAN: TimeZoneRef<'static> = tzdata::AMERICA_CAYMAN;

        /// Time zone data for America/Chicago,
        pub const CHICAGO: TimeZoneRef<'static> = tzdata::AMERICA_CHICAGO;

        /// Time zone data for America/Chihuahua,
        pub const CHIHUAHUA: TimeZoneRef<'static> = tzdata::AMERICA_CHIHUAHUA;

        /// Time zone data for America/Coral_Harbour,
        pub const CORAL_HARBOUR: TimeZoneRef<'static> = tzdata::AMERICA_CORAL_HARBOUR;

        /// Time zone data for America/Cordoba,
        pub const CORDOBA: TimeZoneRef<'static> = tzdata::AMERICA_CORDOBA;

        /// Time zone data for America/Costa_Rica,
        pub const COSTA_RICA: TimeZoneRef<'static> = tzdata::AMERICA_COSTA_RICA;

        /// Time zone data for America/Creston,
        pub const CRESTON: TimeZoneRef<'static> = tzdata::AMERICA_CRESTON;

        /// Time zone data for America/Cuiaba,
        pub const CUIABA: TimeZoneRef<'static> = tzdata::AMERICA_CUIABA;

        /// Time zone data for America/Curacao,
        pub const CURACAO: TimeZoneRef<'static> = tzdata::AMERICA_CURACAO;

        /// Time zone data for America/Danmarkshavn,
        pub const DANMARKSHAVN: TimeZoneRef<'static> = tzdata::AMERICA_DANMARKSHAVN;

        /// Time zone data for America/Dawson,
        pub const DAWSON: TimeZoneRef<'static> = tzdata::AMERICA_DAWSON;

        /// Time zone data for America/Dawson_Creek,
        pub const DAWSON_CREEK: TimeZoneRef<'static> = tzdata::AMERICA_DAWSON_CREEK;

        /// Time zone data for America/Denver,
        pub const DENVER: TimeZoneRef<'static> = tzdata::NAVAJO;

        /// Time zone data for America/Detroit,
        pub const DETROIT: TimeZoneRef<'static> = tzdata::AMERICA_DETROIT;

        /// Time zone data for America/Dominica,
        pub const DOMINICA: TimeZoneRef<'static> = tzdata::AMERICA_DOMINICA;

        /// Time zone data for America/Edmonton,
        pub const EDMONTON: TimeZoneRef<'static> = tzdata::AMERICA_EDMONTON;

        /// Time zone data for America/Eirunepe,
        pub const EIRUNEPE: TimeZoneRef<'static> = tzdata::AMERICA_EIRUNEPE;

        /// Time zone data for America/El_Salvador,
        pub const EL_SALVADOR: TimeZoneRef<'static> = tzdata::AMERICA_EL_SALVADOR;

        /// Time zone data for America/Ensenada,
        pub const ENSENADA: TimeZoneRef<'static> = tzdata::AMERICA_ENSENADA;

        /// Time zone data for America/Fortaleza,
        pub const FORTALEZA: TimeZoneRef<'static> = tzdata::AMERICA_FORTALEZA;

        /// Time zone data for America/Fort_Nelson,
        pub const FORT_NELSON: TimeZoneRef<'static> = tzdata::AMERICA_FORT_NELSON;

        /// Time zone data for America/Fort_Wayne,
        pub const FORT_WAYNE: TimeZoneRef<'static> = tzdata::AMERICA_FORT_WAYNE;

        /// Time zone data for America/Glace_Bay,
        pub const GLACE_BAY: TimeZoneRef<'static> = tzdata::AMERICA_GLACE_BAY;

        /// Time zone data for America/Godthab,
        pub const GODTHAB: TimeZoneRef<'static> = tzdata::AMERICA_GODTHAB;

        /// Time zone data for America/Goose_Bay,
        pub const GOOSE_BAY: TimeZoneRef<'static> = tzdata::AMERICA_GOOSE_BAY;

        /// Time zone data for America/Grand_Turk,
        pub const GRAND_TURK: TimeZoneRef<'static> = tzdata::AMERICA_GRAND_TURK;

        /// Time zone data for America/Grenada,
        pub const GRENADA: TimeZoneRef<'static> = tzdata::AMERICA_GRENADA;

        /// Time zone data for America/Guadeloupe,
        pub const GUADELOUPE: TimeZoneRef<'static> = tzdata::AMERICA_GUADELOUPE;

        /// Time zone data for America/Guatemala,
        pub const GUATEMALA: TimeZoneRef<'static> = tzdata::AMERICA_GUATEMALA;

        /// Time zone data for America/Guayaquil,
        pub const GUAYAQUIL: TimeZoneRef<'static> = tzdata::AMERICA_GUAYAQUIL;

        /// Time zone data for America/Guyana,
        pub const GUYANA: TimeZoneRef<'static> = tzdata::AMERICA_GUYANA;

        /// Time zone data for America/Halifax,
        pub const HALIFAX: TimeZoneRef<'static> = tzdata::AMERICA_HALIFAX;

        /// Time zone data for America/Havana,
        pub const HAVANA: TimeZoneRef<'static> = tzdata::CUBA;

        /// Time zone data for America/Hermosillo,
        pub const HERMOSILLO: TimeZoneRef<'static> = tzdata::AMERICA_HERMOSILLO;

        /// Time zone data for America/Indianapolis,
        pub const INDIANAPOLIS: TimeZoneRef<'static> = tzdata::AMERICA_FORT_WAYNE;

        /// Time zone data for America/Inuvik,
        pub const INUVIK: TimeZoneRef<'static> = tzdata::AMERICA_INUVIK;

        /// Time zone data for America/Iqaluit,
        pub const IQALUIT: TimeZoneRef<'static> = tzdata::AMERICA_IQALUIT;

        /// Time zone data for America/Jamaica,
        pub const JAMAICA: TimeZoneRef<'static> = tzdata::JAMAICA;

        /// Time zone data for America/Jujuy,
        pub const JUJUY: TimeZoneRef<'static> = tzdata::AMERICA_JUJUY;

        /// Time zone data for America/Juneau,
        pub const JUNEAU: TimeZoneRef<'static> = tzdata::AMERICA_JUNEAU;

        /// Time zone data for America/Knox_IN,
        pub const KNOX_IN: TimeZoneRef<'static> = tzdata::AMERICA_KNOX_IN;

        /// Time zone data for America/Kralendijk,
        pub const KRALENDIJK: TimeZoneRef<'static> = tzdata::AMERICA_CURACAO;

        /// Time zone data for America/La_Paz,
        pub const LA_PAZ: TimeZoneRef<'static> = tzdata::AMERICA_LA_PAZ;

        /// Time zone data for America/Lima,
        pub const LIMA: TimeZoneRef<'static> = tzdata::AMERICA_LIMA;

        /// Time zone data for America/Los_Angeles,
        pub const LOS_ANGELES: TimeZoneRef<'static> = tzdata::AMERICA_LOS_ANGELES;

        /// Time zone data for America/Louisville,
        pub const LOUISVILLE: TimeZoneRef<'static> = tzdata::AMERICA_LOUISVILLE;

        /// Time zone data for America/Lower_Princes,
        pub const LOWER_PRINCES: TimeZoneRef<'static> = tzdata::AMERICA_CURACAO;

        /// Time zone data for America/Maceio,
        pub const MACEIO: TimeZoneRef<'static> = tzdata::AMERICA_MACEIO;

        /// Time zone data for America/Managua,
        pub const MANAGUA: TimeZoneRef<'static> = tzdata::AMERICA_MANAGUA;

        /// Time zone data for America/Manaus,
        pub const MANAUS: TimeZoneRef<'static> = tzdata::AMERICA_MANAUS;

        /// Time zone data for America/Marigot,
        pub const MARIGOT: TimeZoneRef<'static> = tzdata::AMERICA_MARIGOT;

        /// Time zone data for America/Martinique,
        pub const MARTINIQUE: TimeZoneRef<'static> = tzdata::AMERICA_MARTINIQUE;

        /// Time zone data for America/Matamoros,
        pub const MATAMOROS: TimeZoneRef<'static> = tzdata::AMERICA_MATAMOROS;

        /// Time zone data for America/Mazatlan,
        pub const MAZATLAN: TimeZoneRef<'static> = tzdata::AMERICA_MAZATLAN;

        /// Time zone data for America/Mendoza,
        pub const MENDOZA: TimeZoneRef<'static> = tzdata::AMERICA_MENDOZA;

        /// Time zone data for America/Menominee,
        pub const MENOMINEE: TimeZoneRef<'static> = tzdata::AMERICA_MENOMINEE;

        /// Time zone data for America/Merida,
        pub const MERIDA: TimeZoneRef<'static> = tzdata::AMERICA_MERIDA;

        /// Time zone data for America/Metlakatla,
        pub const METLAKATLA: TimeZoneRef<'static> = tzdata::AMERICA_METLAKATLA;

        /// Time zone data for America/Mexico_City,
        pub const MEXICO_CITY: TimeZoneRef<'static> = tzdata::AMERICA_MEXICO_CITY;

        /// Time zone data for America/Miquelon,
        pub const MIQUELON: TimeZoneRef<'static> = tzdata::AMERICA_MIQUELON;

        /// Time zone data for America/Moncton,
        pub const MONCTON: TimeZoneRef<'static> = tzdata::AMERICA_MONCTON;

        /// Time zone data for America/Monterrey,
        pub const MONTERREY: TimeZoneRef<'static> = tzdata::AMERICA_MONTERREY;

        /// Time zone data for America/Montevideo,
        pub const MONTEVIDEO: TimeZoneRef<'static> = tzdata::AMERICA_MONTEVIDEO;

        /// Time zone data for America/Montreal,
        pub const MONTREAL: TimeZoneRef<'static> = tzdata::AMERICA_MONTREAL;

        /// Time zone data for America/Montserrat,
        pub const MONTSERRAT: TimeZoneRef<'static> = tzdata::AMERICA_MONTSERRAT;

        /// Time zone data for America/Nassau,
        pub const NASSAU: TimeZoneRef<'static> = tzdata::AMERICA_NASSAU;

        /// Time zone data for America/New_York,
        pub const NEW_YORK: TimeZoneRef<'static> = tzdata::AMERICA_NEW_YORK;

        /// Time zone data for America/Nipigon,
        pub const NIPIGON: TimeZoneRef<'static> = tzdata::AMERICA_NIPIGON;

        /// Time zone data for America/Nome,
        pub const NOME: TimeZoneRef<'static> = tzdata::AMERICA_NOME;

        /// Time zone data for America/Noronha,
        pub const NORONHA: TimeZoneRef<'static> = tzdata::AMERICA_NORONHA;

        /// Time zone data for America/Nuuk,
        pub const NUUK: TimeZoneRef<'static> = tzdata::AMERICA_GODTHAB;

        /// Time zone data for America/Ojinaga,
        pub const OJINAGA: TimeZoneRef<'static> = tzdata::AMERICA_OJINAGA;

        /// Time zone data for America/Panama,
        pub const PANAMA: TimeZoneRef<'static> = tzdata::AMERICA_PANAMA;

        /// Time zone data for America/Pangnirtung,
        pub const PANGNIRTUNG: TimeZoneRef<'static> = tzdata::AMERICA_PANGNIRTUNG;

        /// Time zone data for America/Paramaribo,
        pub const PARAMARIBO: TimeZoneRef<'static> = tzdata::AMERICA_PARAMARIBO;

        /// Time zone data for America/Phoenix,
        pub const PHOENIX: TimeZoneRef<'static> = tzdata::AMERICA_PHOENIX;

        /// Time zone data for America/Porto_Acre,
        pub const PORTO_ACRE: TimeZoneRef<'static> = tzdata::AMERICA_PORTO_ACRE;

        /// Time zone data for America/Porto_Velho,
        pub const PORTO_VELHO: TimeZoneRef<'static> = tzdata::AMERICA_PORTO_VELHO;

        /// Time zone data for America/Port-au-Prince,
        pub const PORT_AU_PRINCE: TimeZoneRef<'static> = tzdata::AMERICA_PORT_AU_PRINCE;

        /// Time zone data for America/Port_of_Spain,
        pub const PORT_OF_SPAIN: TimeZoneRef<'static> = tzdata::AMERICA_MARIGOT;

        /// Time zone data for America/Puerto_Rico,
        pub const PUERTO_RICO: TimeZoneRef<'static> = tzdata::AMERICA_PUERTO_RICO;

        /// Time zone data for America/Punta_Arenas,
        pub const PUNTA_ARENAS: TimeZoneRef<'static> = tzdata::AMERICA_PUNTA_ARENAS;

        /// Time zone data for America/Rainy_River,
        pub const RAINY_RIVER: TimeZoneRef<'static> = tzdata::AMERICA_RAINY_RIVER;

        /// Time zone data for America/Rankin_Inlet,
        pub const RANKIN_INLET: TimeZoneRef<'static> = tzdata::AMERICA_RANKIN_INLET;

        /// Time zone data for America/Recife,
        pub const RECIFE: TimeZoneRef<'static> = tzdata::AMERICA_RECIFE;

        /// Time zone data for America/Regina,
        pub const REGINA: TimeZoneRef<'static> = tzdata::AMERICA_REGINA;

        /// Time zone data for America/Resolute,
        pub const RESOLUTE: TimeZoneRef<'static> = tzdata::AMERICA_RESOLUTE;

        /// Time zone data for America/Rio_Branco,
        pub const RIO_BRANCO: TimeZoneRef<'static> = tzdata::AMERICA_PORTO_ACRE;

        /// Time zone data for America/Rosario,
        pub const ROSARIO: TimeZoneRef<'static> = tzdata::AMERICA_ROSARIO;

        /// Time zone data for America/Santarem,
        pub const SANTAREM: TimeZoneRef<'static> = tzdata::AMERICA_SANTAREM;

        /// Time zone data for America/Santa_Isabel,
        pub const SANTA_ISABEL: TimeZoneRef<'static> = tzdata::AMERICA_SANTA_ISABEL;

        /// Time zone data for America/Santiago,
        pub const SANTIAGO: TimeZoneRef<'static> = tzdata::AMERICA_SANTIAGO;

        /// Time zone data for America/Santo_Domingo,
        pub const SANTO_DOMINGO: TimeZoneRef<'static> = tzdata::AMERICA_SANTO_DOMINGO;

        /// Time zone data for America/Sao_Paulo,
        pub const SAO_PAULO: TimeZoneRef<'static> = tzdata::AMERICA_SAO_PAULO;

        /// Time zone data for America/Scoresbysund,
        pub const SCORESBYSUND: TimeZoneRef<'static> = tzdata::AMERICA_SCORESBYSUND;

        /// Time zone data for America/Shiprock,
        pub const SHIPROCK: TimeZoneRef<'static> = tzdata::NAVAJO;

        /// Time zone data for America/Sitka,
        pub const SITKA: TimeZoneRef<'static> = tzdata::AMERICA_SITKA;

        /// Time zone data for America/St_Barthelemy,
        pub const ST_BARTHELEMY: TimeZoneRef<'static> = tzdata::AMERICA_MARIGOT;

        /// Time zone data for America/St_Johns,
        pub const ST_JOHNS: TimeZoneRef<'static> = tzdata::AMERICA_ST_JOHNS;

        /// Time zone data for America/St_Kitts,
        pub const ST_KITTS: TimeZoneRef<'static> = tzdata::AMERICA_ST_KITTS;

        /// Time zone data for America/St_Lucia,
        pub const ST_LUCIA: TimeZoneRef<'static> = tzdata::AMERICA_ST_LUCIA;

        /// Time zone data for America/St_Thomas,
        pub const ST_THOMAS: TimeZoneRef<'static> = tzdata::AMERICA_ST_THOMAS;

        /// Time zone data for America/St_Vincent,
        pub const ST_VINCENT: TimeZoneRef<'static> = tzdata::AMERICA_ST_VINCENT;

        /// Time zone data for America/Swift_Current,
        pub const SWIFT_CURRENT: TimeZoneRef<'static> = tzdata::AMERICA_SWIFT_CURRENT;

        /// Time zone data for America/Tegucigalpa,
        pub const TEGUCIGALPA: TimeZoneRef<'static> = tzdata::AMERICA_TEGUCIGALPA;

        /// Time zone data for America/Thule,
        pub const THULE: TimeZoneRef<'static> = tzdata::AMERICA_THULE;

        /// Time zone data for America/Thunder_Bay,
        pub const THUNDER_BAY: TimeZoneRef<'static> = tzdata::AMERICA_THUNDER_BAY;

        /// Time zone data for America/Tijuana,
        pub const TIJUANA: TimeZoneRef<'static> = tzdata::AMERICA_SANTA_ISABEL;

        /// Time zone data for America/Toronto,
        pub const TORONTO: TimeZoneRef<'static> = tzdata::AMERICA_TORONTO;

        /// Time zone data for America/Tortola,
        pub const TORTOLA: TimeZoneRef<'static> = tzdata::AMERICA_TORTOLA;

        /// Time zone data for America/Vancouver,
        pub const VANCOUVER: TimeZoneRef<'static> = tzdata::AMERICA_VANCOUVER;

        /// Time zone data for America/Virgin,
        pub const VIRGIN: TimeZoneRef<'static> = tzdata::AMERICA_ST_THOMAS;

        /// Time zone data for America/Whitehorse,
        pub const WHITEHORSE: TimeZoneRef<'static> = tzdata::AMERICA_WHITEHORSE;

        /// Time zone data for America/Winnipeg,
        pub const WINNIPEG: TimeZoneRef<'static> = tzdata::AMERICA_WINNIPEG;

        /// Time zone data for America/Yakutat,
        pub const YAKUTAT: TimeZoneRef<'static> = tzdata::AMERICA_YAKUTAT;

        /// Time zone data for America/Yellowknife,
        pub const YELLOWKNIFE: TimeZoneRef<'static> = tzdata::AMERICA_YELLOWKNIFE;

        /// Raw, unparsed time zone data for America/Adak,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ADAK: &[u8] = raw_tzdata::AMERICA_ADAK;

        /// Raw, unparsed time zone data for America/Anchorage,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ANCHORAGE: &[u8] = raw_tzdata::AMERICA_ANCHORAGE;

        /// Raw, unparsed time zone data for America/Anguilla,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ANGUILLA: &[u8] = raw_tzdata::AMERICA_ANGUILLA;

        /// Raw, unparsed time zone data for America/Antigua,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ANTIGUA: &[u8] = raw_tzdata::AMERICA_ANTIGUA;

        /// Raw, unparsed time zone data for America/Araguaina,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ARAGUAINA: &[u8] = raw_tzdata::AMERICA_ARAGUAINA;

        /// Raw, unparsed time zone data for America/Aruba,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ARUBA: &[u8] = raw_tzdata::AMERICA_ARUBA;

        /// Raw, unparsed time zone data for America/Asuncion,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ASUNCION: &[u8] = raw_tzdata::AMERICA_ASUNCION;

        /// Raw, unparsed time zone data for America/Atikokan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ATIKOKAN: &[u8] = raw_tzdata::AMERICA_ATIKOKAN;

        /// Raw, unparsed time zone data for America/Atka,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ATKA: &[u8] = raw_tzdata::AMERICA_ADAK;

        /// Raw, unparsed time zone data for America/Bahia,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BAHIA: &[u8] = raw_tzdata::AMERICA_BAHIA;

        /// Raw, unparsed time zone data for America/Bahia_Banderas,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BAHIA_BANDERAS: &[u8] = raw_tzdata::AMERICA_BAHIA_BANDERAS;

        /// Raw, unparsed time zone data for America/Barbados,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BARBADOS: &[u8] = raw_tzdata::AMERICA_BARBADOS;

        /// Raw, unparsed time zone data for America/Belem,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BELEM: &[u8] = raw_tzdata::AMERICA_BELEM;

        /// Raw, unparsed time zone data for America/Belize,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BELIZE: &[u8] = raw_tzdata::AMERICA_BELIZE;

        /// Raw, unparsed time zone data for America/Blanc-Sablon,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BLANC_SABLON: &[u8] = raw_tzdata::AMERICA_BLANC_SABLON;

        /// Raw, unparsed time zone data for America/Boa_Vista,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BOA_VISTA: &[u8] = raw_tzdata::AMERICA_BOA_VISTA;

        /// Raw, unparsed time zone data for America/Bogota,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BOGOTA: &[u8] = raw_tzdata::AMERICA_BOGOTA;

        /// Raw, unparsed time zone data for America/Boise,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BOISE: &[u8] = raw_tzdata::AMERICA_BOISE;

        /// Raw, unparsed time zone data for America/Buenos_Aires,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BUENOS_AIRES: &[u8] = raw_tzdata::AMERICA_BUENOS_AIRES;

        /// Raw, unparsed time zone data for America/Cambridge_Bay,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CAMBRIDGE_BAY: &[u8] = raw_tzdata::AMERICA_CAMBRIDGE_BAY;

        /// Raw, unparsed time zone data for America/Campo_Grande,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CAMPO_GRANDE: &[u8] = raw_tzdata::AMERICA_CAMPO_GRANDE;

        /// Raw, unparsed time zone data for America/Cancun,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CANCUN: &[u8] = raw_tzdata::AMERICA_CANCUN;

        /// Raw, unparsed time zone data for America/Caracas,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CARACAS: &[u8] = raw_tzdata::AMERICA_CARACAS;

        /// Raw, unparsed time zone data for America/Catamarca,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CATAMARCA: &[u8] = raw_tzdata::AMERICA_CATAMARCA;

        /// Raw, unparsed time zone data for America/Cayenne,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CAYENNE: &[u8] = raw_tzdata::AMERICA_CAYENNE;

        /// Raw, unparsed time zone data for America/Cayman,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CAYMAN: &[u8] = raw_tzdata::AMERICA_CAYMAN;

        /// Raw, unparsed time zone data for America/Chicago,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHICAGO: &[u8] = raw_tzdata::AMERICA_CHICAGO;

        /// Raw, unparsed time zone data for America/Chihuahua,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHIHUAHUA: &[u8] = raw_tzdata::AMERICA_CHIHUAHUA;

        /// Raw, unparsed time zone data for America/Coral_Harbour,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CORAL_HARBOUR: &[u8] = raw_tzdata::AMERICA_CORAL_HARBOUR;

        /// Raw, unparsed time zone data for America/Cordoba,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CORDOBA: &[u8] = raw_tzdata::AMERICA_CORDOBA;

        /// Raw, unparsed time zone data for America/Costa_Rica,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_COSTA_RICA: &[u8] = raw_tzdata::AMERICA_COSTA_RICA;

        /// Raw, unparsed time zone data for America/Creston,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CRESTON: &[u8] = raw_tzdata::AMERICA_CRESTON;

        /// Raw, unparsed time zone data for America/Cuiaba,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CUIABA: &[u8] = raw_tzdata::AMERICA_CUIABA;

        /// Raw, unparsed time zone data for America/Curacao,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CURACAO: &[u8] = raw_tzdata::AMERICA_CURACAO;

        /// Raw, unparsed time zone data for America/Danmarkshavn,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DANMARKSHAVN: &[u8] = raw_tzdata::AMERICA_DANMARKSHAVN;

        /// Raw, unparsed time zone data for America/Dawson,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DAWSON: &[u8] = raw_tzdata::AMERICA_DAWSON;

        /// Raw, unparsed time zone data for America/Dawson_Creek,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DAWSON_CREEK: &[u8] = raw_tzdata::AMERICA_DAWSON_CREEK;

        /// Raw, unparsed time zone data for America/Denver,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DENVER: &[u8] = raw_tzdata::NAVAJO;

        /// Raw, unparsed time zone data for America/Detroit,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DETROIT: &[u8] = raw_tzdata::AMERICA_DETROIT;

        /// Raw, unparsed time zone data for America/Dominica,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DOMINICA: &[u8] = raw_tzdata::AMERICA_DOMINICA;

        /// Raw, unparsed time zone data for America/Edmonton,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EDMONTON: &[u8] = raw_tzdata::AMERICA_EDMONTON;

        /// Raw, unparsed time zone data for America/Eirunepe,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EIRUNEPE: &[u8] = raw_tzdata::AMERICA_EIRUNEPE;

        /// Raw, unparsed time zone data for America/El_Salvador,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EL_SALVADOR: &[u8] = raw_tzdata::AMERICA_EL_SALVADOR;

        /// Raw, unparsed time zone data for America/Ensenada,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ENSENADA: &[u8] = raw_tzdata::AMERICA_ENSENADA;

        /// Raw, unparsed time zone data for America/Fortaleza,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FORTALEZA: &[u8] = raw_tzdata::AMERICA_FORTALEZA;

        /// Raw, unparsed time zone data for America/Fort_Nelson,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FORT_NELSON: &[u8] = raw_tzdata::AMERICA_FORT_NELSON;

        /// Raw, unparsed time zone data for America/Fort_Wayne,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FORT_WAYNE: &[u8] = raw_tzdata::AMERICA_FORT_WAYNE;

        /// Raw, unparsed time zone data for America/Glace_Bay,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GLACE_BAY: &[u8] = raw_tzdata::AMERICA_GLACE_BAY;

        /// Raw, unparsed time zone data for America/Godthab,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GODTHAB: &[u8] = raw_tzdata::AMERICA_GODTHAB;

        /// Raw, unparsed time zone data for America/Goose_Bay,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GOOSE_BAY: &[u8] = raw_tzdata::AMERICA_GOOSE_BAY;

        /// Raw, unparsed time zone data for America/Grand_Turk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GRAND_TURK: &[u8] = raw_tzdata::AMERICA_GRAND_TURK;

        /// Raw, unparsed time zone data for America/Grenada,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GRENADA: &[u8] = raw_tzdata::AMERICA_GRENADA;

        /// Raw, unparsed time zone data for America/Guadeloupe,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GUADELOUPE: &[u8] = raw_tzdata::AMERICA_GUADELOUPE;

        /// Raw, unparsed time zone data for America/Guatemala,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GUATEMALA: &[u8] = raw_tzdata::AMERICA_GUATEMALA;

        /// Raw, unparsed time zone data for America/Guayaquil,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GUAYAQUIL: &[u8] = raw_tzdata::AMERICA_GUAYAQUIL;

        /// Raw, unparsed time zone data for America/Guyana,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GUYANA: &[u8] = raw_tzdata::AMERICA_GUYANA;

        /// Raw, unparsed time zone data for America/Halifax,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HALIFAX: &[u8] = raw_tzdata::AMERICA_HALIFAX;

        /// Raw, unparsed time zone data for America/Havana,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HAVANA: &[u8] = raw_tzdata::CUBA;

        /// Raw, unparsed time zone data for America/Hermosillo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HERMOSILLO: &[u8] = raw_tzdata::AMERICA_HERMOSILLO;

        /// Raw, unparsed time zone data for America/Indianapolis,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_INDIANAPOLIS: &[u8] = raw_tzdata::AMERICA_FORT_WAYNE;

        /// Raw, unparsed time zone data for America/Inuvik,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_INUVIK: &[u8] = raw_tzdata::AMERICA_INUVIK;

        /// Raw, unparsed time zone data for America/Iqaluit,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_IQALUIT: &[u8] = raw_tzdata::AMERICA_IQALUIT;

        /// Raw, unparsed time zone data for America/Jamaica,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JAMAICA: &[u8] = raw_tzdata::JAMAICA;

        /// Raw, unparsed time zone data for America/Jujuy,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JUJUY: &[u8] = raw_tzdata::AMERICA_JUJUY;

        /// Raw, unparsed time zone data for America/Juneau,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JUNEAU: &[u8] = raw_tzdata::AMERICA_JUNEAU;

        /// Raw, unparsed time zone data for America/Knox_IN,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KNOX_IN: &[u8] = raw_tzdata::AMERICA_KNOX_IN;

        /// Raw, unparsed time zone data for America/Kralendijk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KRALENDIJK: &[u8] = raw_tzdata::AMERICA_CURACAO;

        /// Raw, unparsed time zone data for America/La_Paz,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LA_PAZ: &[u8] = raw_tzdata::AMERICA_LA_PAZ;

        /// Raw, unparsed time zone data for America/Lima,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LIMA: &[u8] = raw_tzdata::AMERICA_LIMA;

        /// Raw, unparsed time zone data for America/Los_Angeles,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LOS_ANGELES: &[u8] = raw_tzdata::AMERICA_LOS_ANGELES;

        /// Raw, unparsed time zone data for America/Louisville,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LOUISVILLE: &[u8] = raw_tzdata::AMERICA_LOUISVILLE;

        /// Raw, unparsed time zone data for America/Lower_Princes,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LOWER_PRINCES: &[u8] = raw_tzdata::AMERICA_CURACAO;

        /// Raw, unparsed time zone data for America/Maceio,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MACEIO: &[u8] = raw_tzdata::AMERICA_MACEIO;

        /// Raw, unparsed time zone data for America/Managua,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MANAGUA: &[u8] = raw_tzdata::AMERICA_MANAGUA;

        /// Raw, unparsed time zone data for America/Manaus,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MANAUS: &[u8] = raw_tzdata::AMERICA_MANAUS;

        /// Raw, unparsed time zone data for America/Marigot,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MARIGOT: &[u8] = raw_tzdata::AMERICA_MARIGOT;

        /// Raw, unparsed time zone data for America/Martinique,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MARTINIQUE: &[u8] = raw_tzdata::AMERICA_MARTINIQUE;

        /// Raw, unparsed time zone data for America/Matamoros,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MATAMOROS: &[u8] = raw_tzdata::AMERICA_MATAMOROS;

        /// Raw, unparsed time zone data for America/Mazatlan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MAZATLAN: &[u8] = raw_tzdata::AMERICA_MAZATLAN;

        /// Raw, unparsed time zone data for America/Mendoza,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MENDOZA: &[u8] = raw_tzdata::AMERICA_MENDOZA;

        /// Raw, unparsed time zone data for America/Menominee,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MENOMINEE: &[u8] = raw_tzdata::AMERICA_MENOMINEE;

        /// Raw, unparsed time zone data for America/Merida,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MERIDA: &[u8] = raw_tzdata::AMERICA_MERIDA;

        /// Raw, unparsed time zone data for America/Metlakatla,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_METLAKATLA: &[u8] = raw_tzdata::AMERICA_METLAKATLA;

        /// Raw, unparsed time zone data for America/Mexico_City,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MEXICO_CITY: &[u8] = raw_tzdata::AMERICA_MEXICO_CITY;

        /// Raw, unparsed time zone data for America/Miquelon,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MIQUELON: &[u8] = raw_tzdata::AMERICA_MIQUELON;

        /// Raw, unparsed time zone data for America/Moncton,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MONCTON: &[u8] = raw_tzdata::AMERICA_MONCTON;

        /// Raw, unparsed time zone data for America/Monterrey,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MONTERREY: &[u8] = raw_tzdata::AMERICA_MONTERREY;

        /// Raw, unparsed time zone data for America/Montevideo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MONTEVIDEO: &[u8] = raw_tzdata::AMERICA_MONTEVIDEO;

        /// Raw, unparsed time zone data for America/Montreal,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MONTREAL: &[u8] = raw_tzdata::AMERICA_MONTREAL;

        /// Raw, unparsed time zone data for America/Montserrat,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MONTSERRAT: &[u8] = raw_tzdata::AMERICA_MONTSERRAT;

        /// Raw, unparsed time zone data for America/Nassau,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NASSAU: &[u8] = raw_tzdata::AMERICA_NASSAU;

        /// Raw, unparsed time zone data for America/New_York,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NEW_YORK: &[u8] = raw_tzdata::AMERICA_NEW_YORK;

        /// Raw, unparsed time zone data for America/Nipigon,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NIPIGON: &[u8] = raw_tzdata::AMERICA_NIPIGON;

        /// Raw, unparsed time zone data for America/Nome,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NOME: &[u8] = raw_tzdata::AMERICA_NOME;

        /// Raw, unparsed time zone data for America/Noronha,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NORONHA: &[u8] = raw_tzdata::AMERICA_NORONHA;

        /// Raw, unparsed time zone data for America/Nuuk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NUUK: &[u8] = raw_tzdata::AMERICA_GODTHAB;

        /// Raw, unparsed time zone data for America/Ojinaga,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_OJINAGA: &[u8] = raw_tzdata::AMERICA_OJINAGA;

        /// Raw, unparsed time zone data for America/Panama,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PANAMA: &[u8] = raw_tzdata::AMERICA_PANAMA;

        /// Raw, unparsed time zone data for America/Pangnirtung,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PANGNIRTUNG: &[u8] = raw_tzdata::AMERICA_PANGNIRTUNG;

        /// Raw, unparsed time zone data for America/Paramaribo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PARAMARIBO: &[u8] = raw_tzdata::AMERICA_PARAMARIBO;

        /// Raw, unparsed time zone data for America/Phoenix,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PHOENIX: &[u8] = raw_tzdata::AMERICA_PHOENIX;

        /// Raw, unparsed time zone data for America/Porto_Acre,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PORTO_ACRE: &[u8] = raw_tzdata::AMERICA_PORTO_ACRE;

        /// Raw, unparsed time zone data for America/Porto_Velho,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PORTO_VELHO: &[u8] = raw_tzdata::AMERICA_PORTO_VELHO;

        /// Raw, unparsed time zone data for America/Port-au-Prince,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PORT_AU_PRINCE: &[u8] = raw_tzdata::AMERICA_PORT_AU_PRINCE;

        /// Raw, unparsed time zone data for America/Port_of_Spain,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PORT_OF_SPAIN: &[u8] = raw_tzdata::AMERICA_MARIGOT;

        /// Raw, unparsed time zone data for America/Puerto_Rico,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PUERTO_RICO: &[u8] = raw_tzdata::AMERICA_PUERTO_RICO;

        /// Raw, unparsed time zone data for America/Punta_Arenas,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PUNTA_ARENAS: &[u8] = raw_tzdata::AMERICA_PUNTA_ARENAS;

        /// Raw, unparsed time zone data for America/Rainy_River,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_RAINY_RIVER: &[u8] = raw_tzdata::AMERICA_RAINY_RIVER;

        /// Raw, unparsed time zone data for America/Rankin_Inlet,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_RANKIN_INLET: &[u8] = raw_tzdata::AMERICA_RANKIN_INLET;

        /// Raw, unparsed time zone data for America/Recife,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_RECIFE: &[u8] = raw_tzdata::AMERICA_RECIFE;

        /// Raw, unparsed time zone data for America/Regina,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_REGINA: &[u8] = raw_tzdata::AMERICA_REGINA;

        /// Raw, unparsed time zone data for America/Resolute,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_RESOLUTE: &[u8] = raw_tzdata::AMERICA_RESOLUTE;

        /// Raw, unparsed time zone data for America/Rio_Branco,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_RIO_BRANCO: &[u8] = raw_tzdata::AMERICA_PORTO_ACRE;

        /// Raw, unparsed time zone data for America/Rosario,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ROSARIO: &[u8] = raw_tzdata::AMERICA_ROSARIO;

        /// Raw, unparsed time zone data for America/Santarem,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SANTAREM: &[u8] = raw_tzdata::AMERICA_SANTAREM;

        /// Raw, unparsed time zone data for America/Santa_Isabel,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SANTA_ISABEL: &[u8] = raw_tzdata::AMERICA_SANTA_ISABEL;

        /// Raw, unparsed time zone data for America/Santiago,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SANTIAGO: &[u8] = raw_tzdata::AMERICA_SANTIAGO;

        /// Raw, unparsed time zone data for America/Santo_Domingo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SANTO_DOMINGO: &[u8] = raw_tzdata::AMERICA_SANTO_DOMINGO;

        /// Raw, unparsed time zone data for America/Sao_Paulo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAO_PAULO: &[u8] = raw_tzdata::AMERICA_SAO_PAULO;

        /// Raw, unparsed time zone data for America/Scoresbysund,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SCORESBYSUND: &[u8] = raw_tzdata::AMERICA_SCORESBYSUND;

        /// Raw, unparsed time zone data for America/Shiprock,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SHIPROCK: &[u8] = raw_tzdata::NAVAJO;

        /// Raw, unparsed time zone data for America/Sitka,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SITKA: &[u8] = raw_tzdata::AMERICA_SITKA;

        /// Raw, unparsed time zone data for America/St_Barthelemy,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ST_BARTHELEMY: &[u8] = raw_tzdata::AMERICA_MARIGOT;

        /// Raw, unparsed time zone data for America/St_Johns,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ST_JOHNS: &[u8] = raw_tzdata::AMERICA_ST_JOHNS;

        /// Raw, unparsed time zone data for America/St_Kitts,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ST_KITTS: &[u8] = raw_tzdata::AMERICA_ST_KITTS;

        /// Raw, unparsed time zone data for America/St_Lucia,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ST_LUCIA: &[u8] = raw_tzdata::AMERICA_ST_LUCIA;

        /// Raw, unparsed time zone data for America/St_Thomas,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ST_THOMAS: &[u8] = raw_tzdata::AMERICA_ST_THOMAS;

        /// Raw, unparsed time zone data for America/St_Vincent,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ST_VINCENT: &[u8] = raw_tzdata::AMERICA_ST_VINCENT;

        /// Raw, unparsed time zone data for America/Swift_Current,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SWIFT_CURRENT: &[u8] = raw_tzdata::AMERICA_SWIFT_CURRENT;

        /// Raw, unparsed time zone data for America/Tegucigalpa,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TEGUCIGALPA: &[u8] = raw_tzdata::AMERICA_TEGUCIGALPA;

        /// Raw, unparsed time zone data for America/Thule,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_THULE: &[u8] = raw_tzdata::AMERICA_THULE;

        /// Raw, unparsed time zone data for America/Thunder_Bay,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_THUNDER_BAY: &[u8] = raw_tzdata::AMERICA_THUNDER_BAY;

        /// Raw, unparsed time zone data for America/Tijuana,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TIJUANA: &[u8] = raw_tzdata::AMERICA_SANTA_ISABEL;

        /// Raw, unparsed time zone data for America/Toronto,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TORONTO: &[u8] = raw_tzdata::AMERICA_TORONTO;

        /// Raw, unparsed time zone data for America/Tortola,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TORTOLA: &[u8] = raw_tzdata::AMERICA_TORTOLA;

        /// Raw, unparsed time zone data for America/Vancouver,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VANCOUVER: &[u8] = raw_tzdata::AMERICA_VANCOUVER;

        /// Raw, unparsed time zone data for America/Virgin,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VIRGIN: &[u8] = raw_tzdata::AMERICA_ST_THOMAS;

        /// Raw, unparsed time zone data for America/Whitehorse,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_WHITEHORSE: &[u8] = raw_tzdata::AMERICA_WHITEHORSE;

        /// Raw, unparsed time zone data for America/Winnipeg,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_WINNIPEG: &[u8] = raw_tzdata::AMERICA_WINNIPEG;

        /// Raw, unparsed time zone data for America/Yakutat,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_YAKUTAT: &[u8] = raw_tzdata::AMERICA_YAKUTAT;

        /// Raw, unparsed time zone data for America/Yellowknife,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_YELLOWKNIFE: &[u8] = raw_tzdata::AMERICA_YELLOWKNIFE;
    }

    /// antarctica
    pub mod antarctica {
        use super::*;

        /// Time zone data for Antarctica/Casey,
        pub const CASEY: TimeZoneRef<'static> = tzdata::ANTARCTICA_CASEY;

        /// Time zone data for Antarctica/Davis,
        pub const DAVIS: TimeZoneRef<'static> = tzdata::ANTARCTICA_DAVIS;

        /// Time zone data for Antarctica/DumontDUrville,
        pub const DUMONT_D_URVILLE: TimeZoneRef<'static> = tzdata::ANTARCTICA_DUMONT_D_URVILLE;

        /// Time zone data for Antarctica/Macquarie,
        pub const MACQUARIE: TimeZoneRef<'static> = tzdata::ANTARCTICA_MACQUARIE;

        /// Time zone data for Antarctica/Mawson,
        pub const MAWSON: TimeZoneRef<'static> = tzdata::ANTARCTICA_MAWSON;

        /// Time zone data for Antarctica/McMurdo,
        pub const MC_MURDO: TimeZoneRef<'static> = tzdata::ANTARCTICA_MC_MURDO;

        /// Time zone data for Antarctica/Palmer,
        pub const PALMER: TimeZoneRef<'static> = tzdata::ANTARCTICA_PALMER;

        /// Time zone data for Antarctica/Rothera,
        pub const ROTHERA: TimeZoneRef<'static> = tzdata::ANTARCTICA_ROTHERA;

        /// Time zone data for Antarctica/South_Pole,
        pub const SOUTH_POLE: TimeZoneRef<'static> = tzdata::ANTARCTICA_MC_MURDO;

        /// Time zone data for Antarctica/Syowa,
        pub const SYOWA: TimeZoneRef<'static> = tzdata::ANTARCTICA_SYOWA;

        /// Time zone data for Antarctica/Troll,
        pub const TROLL: TimeZoneRef<'static> = tzdata::ANTARCTICA_TROLL;

        /// Time zone data for Antarctica/Vostok,
        pub const VOSTOK: TimeZoneRef<'static> = tzdata::ANTARCTICA_VOSTOK;

        /// Raw, unparsed time zone data for Antarctica/Casey,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CASEY: &[u8] = raw_tzdata::ANTARCTICA_CASEY;

        /// Raw, unparsed time zone data for Antarctica/Davis,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DAVIS: &[u8] = raw_tzdata::ANTARCTICA_DAVIS;

        /// Raw, unparsed time zone data for Antarctica/DumontDUrville,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DUMONT_D_URVILLE: &[u8] = raw_tzdata::ANTARCTICA_DUMONT_D_URVILLE;

        /// Raw, unparsed time zone data for Antarctica/Macquarie,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MACQUARIE: &[u8] = raw_tzdata::ANTARCTICA_MACQUARIE;

        /// Raw, unparsed time zone data for Antarctica/Mawson,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MAWSON: &[u8] = raw_tzdata::ANTARCTICA_MAWSON;

        /// Raw, unparsed time zone data for Antarctica/McMurdo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MC_MURDO: &[u8] = raw_tzdata::ANTARCTICA_MC_MURDO;

        /// Raw, unparsed time zone data for Antarctica/Palmer,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PALMER: &[u8] = raw_tzdata::ANTARCTICA_PALMER;

        /// Raw, unparsed time zone data for Antarctica/Rothera,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ROTHERA: &[u8] = raw_tzdata::ANTARCTICA_ROTHERA;

        /// Raw, unparsed time zone data for Antarctica/South_Pole,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SOUTH_POLE: &[u8] = raw_tzdata::ANTARCTICA_MC_MURDO;

        /// Raw, unparsed time zone data for Antarctica/Syowa,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SYOWA: &[u8] = raw_tzdata::ANTARCTICA_SYOWA;

        /// Raw, unparsed time zone data for Antarctica/Troll,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TROLL: &[u8] = raw_tzdata::ANTARCTICA_TROLL;

        /// Raw, unparsed time zone data for Antarctica/Vostok,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VOSTOK: &[u8] = raw_tzdata::ANTARCTICA_VOSTOK;
    }

    /// arctic
    pub mod arctic {
        use super::*;

        /// Time zone data for Arctic/Longyearbyen,
        pub const LONGYEARBYEN: TimeZoneRef<'static> = tzdata::ARCTIC_LONGYEARBYEN;

        /// Raw, unparsed time zone data for Arctic/Longyearbyen,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LONGYEARBYEN: &[u8] = raw_tzdata::ARCTIC_LONGYEARBYEN;
    }

    /// asia
    pub mod asia {
        use super::*;

        /// Time zone data for Asia/Aden,
        pub const ADEN: TimeZoneRef<'static> = tzdata::ASIA_ADEN;

        /// Time zone data for Asia/Almaty,
        pub const ALMATY: TimeZoneRef<'static> = tzdata::ASIA_ALMATY;

        /// Time zone data for Asia/Amman,
        pub const AMMAN: TimeZoneRef<'static> = tzdata::ASIA_AMMAN;

        /// Time zone data for Asia/Anadyr,
        pub const ANADYR: TimeZoneRef<'static> = tzdata::ASIA_ANADYR;

        /// Time zone data for Asia/Aqtau,
        pub const AQTAU: TimeZoneRef<'static> = tzdata::ASIA_AQTAU;

        /// Time zone data for Asia/Aqtobe,
        pub const AQTOBE: TimeZoneRef<'static> = tzdata::ASIA_AQTOBE;

        /// Time zone data for Asia/Ashgabat,
        pub const ASHGABAT: TimeZoneRef<'static> = tzdata::ASIA_ASHGABAT;

        /// Time zone data for Asia/Ashkhabad,
        pub const ASHKHABAD: TimeZoneRef<'static> = tzdata::ASIA_ASHGABAT;

        /// Time zone data for Asia/Atyrau,
        pub const ATYRAU: TimeZoneRef<'static> = tzdata::ASIA_ATYRAU;

        /// Time zone data for Asia/Baghdad,
        pub const BAGHDAD: TimeZoneRef<'static> = tzdata::ASIA_BAGHDAD;

        /// Time zone data for Asia/Bahrain,
        pub const BAHRAIN: TimeZoneRef<'static> = tzdata::ASIA_BAHRAIN;

        /// Time zone data for Asia/Baku,
        pub const BAKU: TimeZoneRef<'static> = tzdata::ASIA_BAKU;

        /// Time zone data for Asia/Bangkok,
        pub const BANGKOK: TimeZoneRef<'static> = tzdata::ASIA_BANGKOK;

        /// Time zone data for Asia/Barnaul,
        pub const BARNAUL: TimeZoneRef<'static> = tzdata::ASIA_BARNAUL;

        /// Time zone data for Asia/Beirut,
        pub const BEIRUT: TimeZoneRef<'static> = tzdata::ASIA_BEIRUT;

        /// Time zone data for Asia/Bishkek,
        pub const BISHKEK: TimeZoneRef<'static> = tzdata::ASIA_BISHKEK;

        /// Time zone data for Asia/Brunei,
        pub const BRUNEI: TimeZoneRef<'static> = tzdata::ASIA_BRUNEI;

        /// Time zone data for Asia/Calcutta,
        pub const CALCUTTA: TimeZoneRef<'static> = tzdata::ASIA_CALCUTTA;

        /// Time zone data for Asia/Chita,
        pub const CHITA: TimeZoneRef<'static> = tzdata::ASIA_CHITA;

        /// Time zone data for Asia/Choibalsan,
        pub const CHOIBALSAN: TimeZoneRef<'static> = tzdata::ASIA_CHOIBALSAN;

        /// Time zone data for Asia/Chongqing,
        pub const CHONGQING: TimeZoneRef<'static> = tzdata::ASIA_CHONGQING;

        /// Time zone data for Asia/Chungking,
        pub const CHUNGKING: TimeZoneRef<'static> = tzdata::ASIA_CHONGQING;

        /// Time zone data for Asia/Colombo,
        pub const COLOMBO: TimeZoneRef<'static> = tzdata::ASIA_COLOMBO;

        /// Time zone data for Asia/Dacca,
        pub const DACCA: TimeZoneRef<'static> = tzdata::ASIA_DACCA;

        /// Time zone data for Asia/Damascus,
        pub const DAMASCUS: TimeZoneRef<'static> = tzdata::ASIA_DAMASCUS;

        /// Time zone data for Asia/Dhaka,
        pub const DHAKA: TimeZoneRef<'static> = tzdata::ASIA_DACCA;

        /// Time zone data for Asia/Dili,
        pub const DILI: TimeZoneRef<'static> = tzdata::ASIA_DILI;

        /// Time zone data for Asia/Dubai,
        pub const DUBAI: TimeZoneRef<'static> = tzdata::ASIA_DUBAI;

        /// Time zone data for Asia/Dushanbe,
        pub const DUSHANBE: TimeZoneRef<'static> = tzdata::ASIA_DUSHANBE;

        /// Time zone data for Asia/Famagusta,
        pub const FAMAGUSTA: TimeZoneRef<'static> = tzdata::ASIA_FAMAGUSTA;

        /// Time zone data for Asia/Gaza,
        pub const GAZA: TimeZoneRef<'static> = tzdata::ASIA_GAZA;

        /// Time zone data for Asia/Hanoi,
        pub const HANOI: TimeZoneRef<'static> = tzdata::ASIA_HANOI;

        /// Time zone data for Asia/Harbin,
        pub const HARBIN: TimeZoneRef<'static> = tzdata::ASIA_HARBIN;

        /// Time zone data for Asia/Hebron,
        pub const HEBRON: TimeZoneRef<'static> = tzdata::ASIA_HEBRON;

        /// Time zone data for Asia/Hong_Kong,
        pub const HONG_KONG: TimeZoneRef<'static> = tzdata::HONGKONG;

        /// Time zone data for Asia/Hovd,
        pub const HOVD: TimeZoneRef<'static> = tzdata::ASIA_HOVD;

        /// Time zone data for Asia/Ho_Chi_Minh,
        pub const HO_CHI_MINH: TimeZoneRef<'static> = tzdata::ASIA_HO_CHI_MINH;

        /// Time zone data for Asia/Irkutsk,
        pub const IRKUTSK: TimeZoneRef<'static> = tzdata::ASIA_IRKUTSK;

        /// Time zone data for Asia/Istanbul,
        pub const ISTANBUL: TimeZoneRef<'static> = tzdata::TURKEY;

        /// Time zone data for Asia/Jakarta,
        pub const JAKARTA: TimeZoneRef<'static> = tzdata::ASIA_JAKARTA;

        /// Time zone data for Asia/Jayapura,
        pub const JAYAPURA: TimeZoneRef<'static> = tzdata::ASIA_JAYAPURA;

        /// Time zone data for Asia/Jerusalem,
        pub const JERUSALEM: TimeZoneRef<'static> = tzdata::ISRAEL;

        /// Time zone data for Asia/Kabul,
        pub const KABUL: TimeZoneRef<'static> = tzdata::ASIA_KABUL;

        /// Time zone data for Asia/Kamchatka,
        pub const KAMCHATKA: TimeZoneRef<'static> = tzdata::ASIA_KAMCHATKA;

        /// Time zone data for Asia/Karachi,
        pub const KARACHI: TimeZoneRef<'static> = tzdata::ASIA_KARACHI;

        /// Time zone data for Asia/Kashgar,
        pub const KASHGAR: TimeZoneRef<'static> = tzdata::ASIA_KASHGAR;

        /// Time zone data for Asia/Kathmandu,
        pub const KATHMANDU: TimeZoneRef<'static> = tzdata::ASIA_KATHMANDU;

        /// Time zone data for Asia/Katmandu,
        pub const KATMANDU: TimeZoneRef<'static> = tzdata::ASIA_KATHMANDU;

        /// Time zone data for Asia/Khandyga,
        pub const KHANDYGA: TimeZoneRef<'static> = tzdata::ASIA_KHANDYGA;

        /// Time zone data for Asia/Kolkata,
        pub const KOLKATA: TimeZoneRef<'static> = tzdata::ASIA_CALCUTTA;

        /// Time zone data for Asia/Krasnoyarsk,
        pub const KRASNOYARSK: TimeZoneRef<'static> = tzdata::ASIA_KRASNOYARSK;

        /// Time zone data for Asia/Kuala_Lumpur,
        pub const KUALA_LUMPUR: TimeZoneRef<'static> = tzdata::ASIA_KUALA_LUMPUR;

        /// Time zone data for Asia/Kuching,
        pub const KUCHING: TimeZoneRef<'static> = tzdata::ASIA_KUCHING;

        /// Time zone data for Asia/Kuwait,
        pub const KUWAIT: TimeZoneRef<'static> = tzdata::ASIA_KUWAIT;

        /// Time zone data for Asia/Macao,
        pub const MACAO: TimeZoneRef<'static> = tzdata::ASIA_MACAO;

        /// Time zone data for Asia/Macau,
        pub const MACAU: TimeZoneRef<'static> = tzdata::ASIA_MACAO;

        /// Time zone data for Asia/Magadan,
        pub const MAGADAN: TimeZoneRef<'static> = tzdata::ASIA_MAGADAN;

        /// Time zone data for Asia/Makassar,
        pub const MAKASSAR: TimeZoneRef<'static> = tzdata::ASIA_MAKASSAR;

        /// Time zone data for Asia/Manila,
        pub const MANILA: TimeZoneRef<'static> = tzdata::ASIA_MANILA;

        /// Time zone data for Asia/Muscat,
        pub const MUSCAT: TimeZoneRef<'static> = tzdata::ASIA_MUSCAT;

        /// Time zone data for Asia/Nicosia,
        pub const NICOSIA: TimeZoneRef<'static> = tzdata::ASIA_NICOSIA;

        /// Time zone data for Asia/Novokuznetsk,
        pub const NOVOKUZNETSK: TimeZoneRef<'static> = tzdata::ASIA_NOVOKUZNETSK;

        /// Time zone data for Asia/Novosibirsk,
        pub const NOVOSIBIRSK: TimeZoneRef<'static> = tzdata::ASIA_NOVOSIBIRSK;

        /// Time zone data for Asia/Omsk,
        pub const OMSK: TimeZoneRef<'static> = tzdata::ASIA_OMSK;

        /// Time zone data for Asia/Oral,
        pub const ORAL: TimeZoneRef<'static> = tzdata::ASIA_ORAL;

        /// Time zone data for Asia/Phnom_Penh,
        pub const PHNOM_PENH: TimeZoneRef<'static> = tzdata::ASIA_PHNOM_PENH;

        /// Time zone data for Asia/Pontianak,
        pub const PONTIANAK: TimeZoneRef<'static> = tzdata::ASIA_PONTIANAK;

        /// Time zone data for Asia/Pyongyang,
        pub const PYONGYANG: TimeZoneRef<'static> = tzdata::ASIA_PYONGYANG;

        /// Time zone data for Asia/Qatar,
        pub const QATAR: TimeZoneRef<'static> = tzdata::ASIA_QATAR;

        /// Time zone data for Asia/Qostanay,
        pub const QOSTANAY: TimeZoneRef<'static> = tzdata::ASIA_QOSTANAY;

        /// Time zone data for Asia/Qyzylorda,
        pub const QYZYLORDA: TimeZoneRef<'static> = tzdata::ASIA_QYZYLORDA;

        /// Time zone data for Asia/Rangoon,
        pub const RANGOON: TimeZoneRef<'static> = tzdata::ASIA_RANGOON;

        /// Time zone data for Asia/Riyadh,
        pub const RIYADH: TimeZoneRef<'static> = tzdata::ASIA_RIYADH;

        /// Time zone data for Asia/Saigon,
        pub const SAIGON: TimeZoneRef<'static> = tzdata::ASIA_HO_CHI_MINH;

        /// Time zone data for Asia/Sakhalin,
        pub const SAKHALIN: TimeZoneRef<'static> = tzdata::ASIA_SAKHALIN;

        /// Time zone data for Asia/Samarkand,
        pub const SAMARKAND: TimeZoneRef<'static> = tzdata::ASIA_SAMARKAND;

        /// Time zone data for Asia/Seoul,
        pub const SEOUL: TimeZoneRef<'static> = tzdata::ROK;

        /// Time zone data for Asia/Shanghai,
        pub const SHANGHAI: TimeZoneRef<'static> = tzdata::PRC;

        /// Time zone data for Asia/Singapore,
        pub const SINGAPORE: TimeZoneRef<'static> = tzdata::SINGAPORE;

        /// Time zone data for Asia/Srednekolymsk,
        pub const SREDNEKOLYMSK: TimeZoneRef<'static> = tzdata::ASIA_SREDNEKOLYMSK;

        /// Time zone data for Asia/Taipei,
        pub const TAIPEI: TimeZoneRef<'static> = tzdata::ROC;

        /// Time zone data for Asia/Tashkent,
        pub const TASHKENT: TimeZoneRef<'static> = tzdata::ASIA_TASHKENT;

        /// Time zone data for Asia/Tbilisi,
        pub const TBILISI: TimeZoneRef<'static> = tzdata::ASIA_TBILISI;

        /// Time zone data for Asia/Tehran,
        pub const TEHRAN: TimeZoneRef<'static> = tzdata::IRAN;

        /// Time zone data for Asia/Tel_Aviv,
        pub const TEL_AVIV: TimeZoneRef<'static> = tzdata::ASIA_TEL_AVIV;

        /// Time zone data for Asia/Thimbu,
        pub const THIMBU: TimeZoneRef<'static> = tzdata::ASIA_THIMBU;

        /// Time zone data for Asia/Thimphu,
        pub const THIMPHU: TimeZoneRef<'static> = tzdata::ASIA_THIMBU;

        /// Time zone data for Asia/Tokyo,
        pub const TOKYO: TimeZoneRef<'static> = tzdata::JAPAN;

        /// Time zone data for Asia/Tomsk,
        pub const TOMSK: TimeZoneRef<'static> = tzdata::ASIA_TOMSK;

        /// Time zone data for Asia/Ujung_Pandang,
        pub const UJUNG_PANDANG: TimeZoneRef<'static> = tzdata::ASIA_MAKASSAR;

        /// Time zone data for Asia/Ulaanbaatar,
        pub const ULAANBAATAR: TimeZoneRef<'static> = tzdata::ASIA_ULAANBAATAR;

        /// Time zone data for Asia/Ulan_Bator,
        pub const ULAN_BATOR: TimeZoneRef<'static> = tzdata::ASIA_ULAANBAATAR;

        /// Time zone data for Asia/Urumqi,
        pub const URUMQI: TimeZoneRef<'static> = tzdata::ASIA_URUMQI;

        /// Time zone data for Asia/Ust-Nera,
        pub const UST_NERA: TimeZoneRef<'static> = tzdata::ASIA_UST_NERA;

        /// Time zone data for Asia/Vientiane,
        pub const VIENTIANE: TimeZoneRef<'static> = tzdata::ASIA_VIENTIANE;

        /// Time zone data for Asia/Vladivostok,
        pub const VLADIVOSTOK: TimeZoneRef<'static> = tzdata::ASIA_VLADIVOSTOK;

        /// Time zone data for Asia/Yakutsk,
        pub const YAKUTSK: TimeZoneRef<'static> = tzdata::ASIA_YAKUTSK;

        /// Time zone data for Asia/Yangon,
        pub const YANGON: TimeZoneRef<'static> = tzdata::ASIA_RANGOON;

        /// Time zone data for Asia/Yekaterinburg,
        pub const YEKATERINBURG: TimeZoneRef<'static> = tzdata::ASIA_YEKATERINBURG;

        /// Time zone data for Asia/Yerevan,
        pub const YEREVAN: TimeZoneRef<'static> = tzdata::ASIA_YEREVAN;

        /// Raw, unparsed time zone data for Asia/Aden,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ADEN: &[u8] = raw_tzdata::ASIA_ADEN;

        /// Raw, unparsed time zone data for Asia/Almaty,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ALMATY: &[u8] = raw_tzdata::ASIA_ALMATY;

        /// Raw, unparsed time zone data for Asia/Amman,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_AMMAN: &[u8] = raw_tzdata::ASIA_AMMAN;

        /// Raw, unparsed time zone data for Asia/Anadyr,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ANADYR: &[u8] = raw_tzdata::ASIA_ANADYR;

        /// Raw, unparsed time zone data for Asia/Aqtau,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_AQTAU: &[u8] = raw_tzdata::ASIA_AQTAU;

        /// Raw, unparsed time zone data for Asia/Aqtobe,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_AQTOBE: &[u8] = raw_tzdata::ASIA_AQTOBE;

        /// Raw, unparsed time zone data for Asia/Ashgabat,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ASHGABAT: &[u8] = raw_tzdata::ASIA_ASHGABAT;

        /// Raw, unparsed time zone data for Asia/Ashkhabad,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ASHKHABAD: &[u8] = raw_tzdata::ASIA_ASHGABAT;

        /// Raw, unparsed time zone data for Asia/Atyrau,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ATYRAU: &[u8] = raw_tzdata::ASIA_ATYRAU;

        /// Raw, unparsed time zone data for Asia/Baghdad,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BAGHDAD: &[u8] = raw_tzdata::ASIA_BAGHDAD;

        /// Raw, unparsed time zone data for Asia/Bahrain,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BAHRAIN: &[u8] = raw_tzdata::ASIA_BAHRAIN;

        /// Raw, unparsed time zone data for Asia/Baku,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BAKU: &[u8] = raw_tzdata::ASIA_BAKU;

        /// Raw, unparsed time zone data for Asia/Bangkok,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BANGKOK: &[u8] = raw_tzdata::ASIA_BANGKOK;

        /// Raw, unparsed time zone data for Asia/Barnaul,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BARNAUL: &[u8] = raw_tzdata::ASIA_BARNAUL;

        /// Raw, unparsed time zone data for Asia/Beirut,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BEIRUT: &[u8] = raw_tzdata::ASIA_BEIRUT;

        /// Raw, unparsed time zone data for Asia/Bishkek,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BISHKEK: &[u8] = raw_tzdata::ASIA_BISHKEK;

        /// Raw, unparsed time zone data for Asia/Brunei,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BRUNEI: &[u8] = raw_tzdata::ASIA_BRUNEI;

        /// Raw, unparsed time zone data for Asia/Calcutta,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CALCUTTA: &[u8] = raw_tzdata::ASIA_CALCUTTA;

        /// Raw, unparsed time zone data for Asia/Chita,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHITA: &[u8] = raw_tzdata::ASIA_CHITA;

        /// Raw, unparsed time zone data for Asia/Choibalsan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHOIBALSAN: &[u8] = raw_tzdata::ASIA_CHOIBALSAN;

        /// Raw, unparsed time zone data for Asia/Chongqing,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHONGQING: &[u8] = raw_tzdata::ASIA_CHONGQING;

        /// Raw, unparsed time zone data for Asia/Chungking,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHUNGKING: &[u8] = raw_tzdata::ASIA_CHONGQING;

        /// Raw, unparsed time zone data for Asia/Colombo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_COLOMBO: &[u8] = raw_tzdata::ASIA_COLOMBO;

        /// Raw, unparsed time zone data for Asia/Dacca,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DACCA: &[u8] = raw_tzdata::ASIA_DACCA;

        /// Raw, unparsed time zone data for Asia/Damascus,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DAMASCUS: &[u8] = raw_tzdata::ASIA_DAMASCUS;

        /// Raw, unparsed time zone data for Asia/Dhaka,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DHAKA: &[u8] = raw_tzdata::ASIA_DACCA;

        /// Raw, unparsed time zone data for Asia/Dili,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DILI: &[u8] = raw_tzdata::ASIA_DILI;

        /// Raw, unparsed time zone data for Asia/Dubai,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DUBAI: &[u8] = raw_tzdata::ASIA_DUBAI;

        /// Raw, unparsed time zone data for Asia/Dushanbe,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DUSHANBE: &[u8] = raw_tzdata::ASIA_DUSHANBE;

        /// Raw, unparsed time zone data for Asia/Famagusta,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FAMAGUSTA: &[u8] = raw_tzdata::ASIA_FAMAGUSTA;

        /// Raw, unparsed time zone data for Asia/Gaza,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GAZA: &[u8] = raw_tzdata::ASIA_GAZA;

        /// Raw, unparsed time zone data for Asia/Hanoi,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HANOI: &[u8] = raw_tzdata::ASIA_HANOI;

        /// Raw, unparsed time zone data for Asia/Harbin,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HARBIN: &[u8] = raw_tzdata::ASIA_HARBIN;

        /// Raw, unparsed time zone data for Asia/Hebron,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HEBRON: &[u8] = raw_tzdata::ASIA_HEBRON;

        /// Raw, unparsed time zone data for Asia/Hong_Kong,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HONG_KONG: &[u8] = raw_tzdata::HONGKONG;

        /// Raw, unparsed time zone data for Asia/Hovd,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HOVD: &[u8] = raw_tzdata::ASIA_HOVD;

        /// Raw, unparsed time zone data for Asia/Ho_Chi_Minh,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HO_CHI_MINH: &[u8] = raw_tzdata::ASIA_HO_CHI_MINH;

        /// Raw, unparsed time zone data for Asia/Irkutsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_IRKUTSK: &[u8] = raw_tzdata::ASIA_IRKUTSK;

        /// Raw, unparsed time zone data for Asia/Istanbul,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ISTANBUL: &[u8] = raw_tzdata::TURKEY;

        /// Raw, unparsed time zone data for Asia/Jakarta,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JAKARTA: &[u8] = raw_tzdata::ASIA_JAKARTA;

        /// Raw, unparsed time zone data for Asia/Jayapura,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JAYAPURA: &[u8] = raw_tzdata::ASIA_JAYAPURA;

        /// Raw, unparsed time zone data for Asia/Jerusalem,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JERUSALEM: &[u8] = raw_tzdata::ISRAEL;

        /// Raw, unparsed time zone data for Asia/Kabul,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KABUL: &[u8] = raw_tzdata::ASIA_KABUL;

        /// Raw, unparsed time zone data for Asia/Kamchatka,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KAMCHATKA: &[u8] = raw_tzdata::ASIA_KAMCHATKA;

        /// Raw, unparsed time zone data for Asia/Karachi,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KARACHI: &[u8] = raw_tzdata::ASIA_KARACHI;

        /// Raw, unparsed time zone data for Asia/Kashgar,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KASHGAR: &[u8] = raw_tzdata::ASIA_KASHGAR;

        /// Raw, unparsed time zone data for Asia/Kathmandu,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KATHMANDU: &[u8] = raw_tzdata::ASIA_KATHMANDU;

        /// Raw, unparsed time zone data for Asia/Katmandu,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KATMANDU: &[u8] = raw_tzdata::ASIA_KATHMANDU;

        /// Raw, unparsed time zone data for Asia/Khandyga,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KHANDYGA: &[u8] = raw_tzdata::ASIA_KHANDYGA;

        /// Raw, unparsed time zone data for Asia/Kolkata,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KOLKATA: &[u8] = raw_tzdata::ASIA_CALCUTTA;

        /// Raw, unparsed time zone data for Asia/Krasnoyarsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KRASNOYARSK: &[u8] = raw_tzdata::ASIA_KRASNOYARSK;

        /// Raw, unparsed time zone data for Asia/Kuala_Lumpur,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KUALA_LUMPUR: &[u8] = raw_tzdata::ASIA_KUALA_LUMPUR;

        /// Raw, unparsed time zone data for Asia/Kuching,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KUCHING: &[u8] = raw_tzdata::ASIA_KUCHING;

        /// Raw, unparsed time zone data for Asia/Kuwait,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KUWAIT: &[u8] = raw_tzdata::ASIA_KUWAIT;

        /// Raw, unparsed time zone data for Asia/Macao,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MACAO: &[u8] = raw_tzdata::ASIA_MACAO;

        /// Raw, unparsed time zone data for Asia/Macau,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MACAU: &[u8] = raw_tzdata::ASIA_MACAO;

        /// Raw, unparsed time zone data for Asia/Magadan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MAGADAN: &[u8] = raw_tzdata::ASIA_MAGADAN;

        /// Raw, unparsed time zone data for Asia/Makassar,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MAKASSAR: &[u8] = raw_tzdata::ASIA_MAKASSAR;

        /// Raw, unparsed time zone data for Asia/Manila,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MANILA: &[u8] = raw_tzdata::ASIA_MANILA;

        /// Raw, unparsed time zone data for Asia/Muscat,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MUSCAT: &[u8] = raw_tzdata::ASIA_MUSCAT;

        /// Raw, unparsed time zone data for Asia/Nicosia,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NICOSIA: &[u8] = raw_tzdata::ASIA_NICOSIA;

        /// Raw, unparsed time zone data for Asia/Novokuznetsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NOVOKUZNETSK: &[u8] = raw_tzdata::ASIA_NOVOKUZNETSK;

        /// Raw, unparsed time zone data for Asia/Novosibirsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NOVOSIBIRSK: &[u8] = raw_tzdata::ASIA_NOVOSIBIRSK;

        /// Raw, unparsed time zone data for Asia/Omsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_OMSK: &[u8] = raw_tzdata::ASIA_OMSK;

        /// Raw, unparsed time zone data for Asia/Oral,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ORAL: &[u8] = raw_tzdata::ASIA_ORAL;

        /// Raw, unparsed time zone data for Asia/Phnom_Penh,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PHNOM_PENH: &[u8] = raw_tzdata::ASIA_PHNOM_PENH;

        /// Raw, unparsed time zone data for Asia/Pontianak,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PONTIANAK: &[u8] = raw_tzdata::ASIA_PONTIANAK;

        /// Raw, unparsed time zone data for Asia/Pyongyang,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PYONGYANG: &[u8] = raw_tzdata::ASIA_PYONGYANG;

        /// Raw, unparsed time zone data for Asia/Qatar,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_QATAR: &[u8] = raw_tzdata::ASIA_QATAR;

        /// Raw, unparsed time zone data for Asia/Qostanay,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_QOSTANAY: &[u8] = raw_tzdata::ASIA_QOSTANAY;

        /// Raw, unparsed time zone data for Asia/Qyzylorda,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_QYZYLORDA: &[u8] = raw_tzdata::ASIA_QYZYLORDA;

        /// Raw, unparsed time zone data for Asia/Rangoon,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_RANGOON: &[u8] = raw_tzdata::ASIA_RANGOON;

        /// Raw, unparsed time zone data for Asia/Riyadh,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_RIYADH: &[u8] = raw_tzdata::ASIA_RIYADH;

        /// Raw, unparsed time zone data for Asia/Saigon,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAIGON: &[u8] = raw_tzdata::ASIA_HO_CHI_MINH;

        /// Raw, unparsed time zone data for Asia/Sakhalin,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAKHALIN: &[u8] = raw_tzdata::ASIA_SAKHALIN;

        /// Raw, unparsed time zone data for Asia/Samarkand,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAMARKAND: &[u8] = raw_tzdata::ASIA_SAMARKAND;

        /// Raw, unparsed time zone data for Asia/Seoul,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SEOUL: &[u8] = raw_tzdata::ROK;

        /// Raw, unparsed time zone data for Asia/Shanghai,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SHANGHAI: &[u8] = raw_tzdata::PRC;

        /// Raw, unparsed time zone data for Asia/Singapore,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SINGAPORE: &[u8] = raw_tzdata::SINGAPORE;

        /// Raw, unparsed time zone data for Asia/Srednekolymsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SREDNEKOLYMSK: &[u8] = raw_tzdata::ASIA_SREDNEKOLYMSK;

        /// Raw, unparsed time zone data for Asia/Taipei,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TAIPEI: &[u8] = raw_tzdata::ROC;

        /// Raw, unparsed time zone data for Asia/Tashkent,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TASHKENT: &[u8] = raw_tzdata::ASIA_TASHKENT;

        /// Raw, unparsed time zone data for Asia/Tbilisi,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TBILISI: &[u8] = raw_tzdata::ASIA_TBILISI;

        /// Raw, unparsed time zone data for Asia/Tehran,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TEHRAN: &[u8] = raw_tzdata::IRAN;

        /// Raw, unparsed time zone data for Asia/Tel_Aviv,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TEL_AVIV: &[u8] = raw_tzdata::ASIA_TEL_AVIV;

        /// Raw, unparsed time zone data for Asia/Thimbu,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_THIMBU: &[u8] = raw_tzdata::ASIA_THIMBU;

        /// Raw, unparsed time zone data for Asia/Thimphu,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_THIMPHU: &[u8] = raw_tzdata::ASIA_THIMBU;

        /// Raw, unparsed time zone data for Asia/Tokyo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TOKYO: &[u8] = raw_tzdata::JAPAN;

        /// Raw, unparsed time zone data for Asia/Tomsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TOMSK: &[u8] = raw_tzdata::ASIA_TOMSK;

        /// Raw, unparsed time zone data for Asia/Ujung_Pandang,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_UJUNG_PANDANG: &[u8] = raw_tzdata::ASIA_MAKASSAR;

        /// Raw, unparsed time zone data for Asia/Ulaanbaatar,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ULAANBAATAR: &[u8] = raw_tzdata::ASIA_ULAANBAATAR;

        /// Raw, unparsed time zone data for Asia/Ulan_Bator,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ULAN_BATOR: &[u8] = raw_tzdata::ASIA_ULAANBAATAR;

        /// Raw, unparsed time zone data for Asia/Urumqi,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_URUMQI: &[u8] = raw_tzdata::ASIA_URUMQI;

        /// Raw, unparsed time zone data for Asia/Ust-Nera,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_UST_NERA: &[u8] = raw_tzdata::ASIA_UST_NERA;

        /// Raw, unparsed time zone data for Asia/Vientiane,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VIENTIANE: &[u8] = raw_tzdata::ASIA_VIENTIANE;

        /// Raw, unparsed time zone data for Asia/Vladivostok,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VLADIVOSTOK: &[u8] = raw_tzdata::ASIA_VLADIVOSTOK;

        /// Raw, unparsed time zone data for Asia/Yakutsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_YAKUTSK: &[u8] = raw_tzdata::ASIA_YAKUTSK;

        /// Raw, unparsed time zone data for Asia/Yangon,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_YANGON: &[u8] = raw_tzdata::ASIA_RANGOON;

        /// Raw, unparsed time zone data for Asia/Yekaterinburg,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_YEKATERINBURG: &[u8] = raw_tzdata::ASIA_YEKATERINBURG;

        /// Raw, unparsed time zone data for Asia/Yerevan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_YEREVAN: &[u8] = raw_tzdata::ASIA_YEREVAN;
    }

    /// atlantic
    pub mod atlantic {
        use super::*;

        /// Time zone data for Atlantic/Azores,
        pub const AZORES: TimeZoneRef<'static> = tzdata::ATLANTIC_AZORES;

        /// Time zone data for Atlantic/Bermuda,
        pub const BERMUDA: TimeZoneRef<'static> = tzdata::ATLANTIC_BERMUDA;

        /// Time zone data for Atlantic/Canary,
        pub const CANARY: TimeZoneRef<'static> = tzdata::ATLANTIC_CANARY;

        /// Time zone data for Atlantic/Cape_Verde,
        pub const CAPE_VERDE: TimeZoneRef<'static> = tzdata::ATLANTIC_CAPE_VERDE;

        /// Time zone data for Atlantic/Faeroe,
        pub const FAEROE: TimeZoneRef<'static> = tzdata::ATLANTIC_FAEROE;

        /// Time zone data for Atlantic/Faroe,
        pub const FAROE: TimeZoneRef<'static> = tzdata::ATLANTIC_FAEROE;

        /// Time zone data for Atlantic/Jan_Mayen,
        pub const JAN_MAYEN: TimeZoneRef<'static> = tzdata::ATLANTIC_JAN_MAYEN;

        /// Time zone data for Atlantic/Madeira,
        pub const MADEIRA: TimeZoneRef<'static> = tzdata::ATLANTIC_MADEIRA;

        /// Time zone data for Atlantic/Reykjavik,
        pub const REYKJAVIK: TimeZoneRef<'static> = tzdata::ICELAND;

        /// Time zone data for Atlantic/South_Georgia,
        pub const SOUTH_GEORGIA: TimeZoneRef<'static> = tzdata::ATLANTIC_SOUTH_GEORGIA;

        /// Time zone data for Atlantic/Stanley,
        pub const STANLEY: TimeZoneRef<'static> = tzdata::ATLANTIC_STANLEY;

        /// Time zone data for Atlantic/St_Helena,
        pub const ST_HELENA: TimeZoneRef<'static> = tzdata::ATLANTIC_ST_HELENA;

        /// Raw, unparsed time zone data for Atlantic/Azores,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_AZORES: &[u8] = raw_tzdata::ATLANTIC_AZORES;

        /// Raw, unparsed time zone data for Atlantic/Bermuda,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BERMUDA: &[u8] = raw_tzdata::ATLANTIC_BERMUDA;

        /// Raw, unparsed time zone data for Atlantic/Canary,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CANARY: &[u8] = raw_tzdata::ATLANTIC_CANARY;

        /// Raw, unparsed time zone data for Atlantic/Cape_Verde,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CAPE_VERDE: &[u8] = raw_tzdata::ATLANTIC_CAPE_VERDE;

        /// Raw, unparsed time zone data for Atlantic/Faeroe,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FAEROE: &[u8] = raw_tzdata::ATLANTIC_FAEROE;

        /// Raw, unparsed time zone data for Atlantic/Faroe,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FAROE: &[u8] = raw_tzdata::ATLANTIC_FAEROE;

        /// Raw, unparsed time zone data for Atlantic/Jan_Mayen,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JAN_MAYEN: &[u8] = raw_tzdata::ATLANTIC_JAN_MAYEN;

        /// Raw, unparsed time zone data for Atlantic/Madeira,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MADEIRA: &[u8] = raw_tzdata::ATLANTIC_MADEIRA;

        /// Raw, unparsed time zone data for Atlantic/Reykjavik,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_REYKJAVIK: &[u8] = raw_tzdata::ICELAND;

        /// Raw, unparsed time zone data for Atlantic/South_Georgia,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SOUTH_GEORGIA: &[u8] = raw_tzdata::ATLANTIC_SOUTH_GEORGIA;

        /// Raw, unparsed time zone data for Atlantic/Stanley,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_STANLEY: &[u8] = raw_tzdata::ATLANTIC_STANLEY;

        /// Raw, unparsed time zone data for Atlantic/St_Helena,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ST_HELENA: &[u8] = raw_tzdata::ATLANTIC_ST_HELENA;
    }

    /// australia
    pub mod australia {
        use super::*;

        /// Time zone data for Australia/ACT,
        pub const ACT: TimeZoneRef<'static> = tzdata::AUSTRALIA_ACT;

        /// Time zone data for Australia/Adelaide,
        pub const ADELAIDE: TimeZoneRef<'static> = tzdata::AUSTRALIA_ADELAIDE;

        /// Time zone data for Australia/Brisbane,
        pub const BRISBANE: TimeZoneRef<'static> = tzdata::AUSTRALIA_BRISBANE;

        /// Time zone data for Australia/Broken_Hill,
        pub const BROKEN_HILL: TimeZoneRef<'static> = tzdata::AUSTRALIA_BROKEN_HILL;

        /// Time zone data for Australia/Canberra,
        pub const CANBERRA: TimeZoneRef<'static> = tzdata::AUSTRALIA_ACT;

        /// Time zone data for Australia/Currie,
        pub const CURRIE: TimeZoneRef<'static> = tzdata::AUSTRALIA_CURRIE;

        /// Time zone data for Australia/Darwin,
        pub const DARWIN: TimeZoneRef<'static> = tzdata::AUSTRALIA_DARWIN;

        /// Time zone data for Australia/Eucla,
        pub const EUCLA: TimeZoneRef<'static> = tzdata::AUSTRALIA_EUCLA;

        /// Time zone data for Australia/Hobart,
        pub const HOBART: TimeZoneRef<'static> = tzdata::AUSTRALIA_HOBART;

        /// Time zone data for Australia/LHI,
        pub const LHI: TimeZoneRef<'static> = tzdata::AUSTRALIA_LHI;

        /// Time zone data for Australia/Lindeman,
        pub const LINDEMAN: TimeZoneRef<'static> = tzdata::AUSTRALIA_LINDEMAN;

        /// Time zone data for Australia/Lord_Howe,
        pub const LORD_HOWE: TimeZoneRef<'static> = tzdata::AUSTRALIA_LHI;

        /// Time zone data for Australia/Melbourne,
        pub const MELBOURNE: TimeZoneRef<'static> = tzdata::AUSTRALIA_MELBOURNE;

        /// Time zone data for Australia/North,
        pub const NORTH: TimeZoneRef<'static> = tzdata::AUSTRALIA_DARWIN;

        /// Time zone data for Australia/NSW,
        pub const NSW: TimeZoneRef<'static> = tzdata::AUSTRALIA_ACT;

        /// Time zone data for Australia/Perth,
        pub const PERTH: TimeZoneRef<'static> = tzdata::AUSTRALIA_PERTH;

        /// Time zone data for Australia/Queensland,
        pub const QUEENSLAND: TimeZoneRef<'static> = tzdata::AUSTRALIA_BRISBANE;

        /// Time zone data for Australia/South,
        pub const SOUTH: TimeZoneRef<'static> = tzdata::AUSTRALIA_ADELAIDE;

        /// Time zone data for Australia/Sydney,
        pub const SYDNEY: TimeZoneRef<'static> = tzdata::AUSTRALIA_ACT;

        /// Time zone data for Australia/Tasmania,
        pub const TASMANIA: TimeZoneRef<'static> = tzdata::AUSTRALIA_HOBART;

        /// Time zone data for Australia/Victoria,
        pub const VICTORIA: TimeZoneRef<'static> = tzdata::AUSTRALIA_MELBOURNE;

        /// Time zone data for Australia/West,
        pub const WEST: TimeZoneRef<'static> = tzdata::AUSTRALIA_PERTH;

        /// Time zone data for Australia/Yancowinna,
        pub const YANCOWINNA: TimeZoneRef<'static> = tzdata::AUSTRALIA_BROKEN_HILL;

        /// Raw, unparsed time zone data for Australia/ACT,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ACT: &[u8] = raw_tzdata::AUSTRALIA_ACT;

        /// Raw, unparsed time zone data for Australia/Adelaide,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ADELAIDE: &[u8] = raw_tzdata::AUSTRALIA_ADELAIDE;

        /// Raw, unparsed time zone data for Australia/Brisbane,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BRISBANE: &[u8] = raw_tzdata::AUSTRALIA_BRISBANE;

        /// Raw, unparsed time zone data for Australia/Broken_Hill,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BROKEN_HILL: &[u8] = raw_tzdata::AUSTRALIA_BROKEN_HILL;

        /// Raw, unparsed time zone data for Australia/Canberra,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CANBERRA: &[u8] = raw_tzdata::AUSTRALIA_ACT;

        /// Raw, unparsed time zone data for Australia/Currie,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CURRIE: &[u8] = raw_tzdata::AUSTRALIA_CURRIE;

        /// Raw, unparsed time zone data for Australia/Darwin,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DARWIN: &[u8] = raw_tzdata::AUSTRALIA_DARWIN;

        /// Raw, unparsed time zone data for Australia/Eucla,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EUCLA: &[u8] = raw_tzdata::AUSTRALIA_EUCLA;

        /// Raw, unparsed time zone data for Australia/Hobart,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HOBART: &[u8] = raw_tzdata::AUSTRALIA_HOBART;

        /// Raw, unparsed time zone data for Australia/LHI,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LHI: &[u8] = raw_tzdata::AUSTRALIA_LHI;

        /// Raw, unparsed time zone data for Australia/Lindeman,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LINDEMAN: &[u8] = raw_tzdata::AUSTRALIA_LINDEMAN;

        /// Raw, unparsed time zone data for Australia/Lord_Howe,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LORD_HOWE: &[u8] = raw_tzdata::AUSTRALIA_LHI;

        /// Raw, unparsed time zone data for Australia/Melbourne,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MELBOURNE: &[u8] = raw_tzdata::AUSTRALIA_MELBOURNE;

        /// Raw, unparsed time zone data for Australia/North,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NORTH: &[u8] = raw_tzdata::AUSTRALIA_DARWIN;

        /// Raw, unparsed time zone data for Australia/NSW,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NSW: &[u8] = raw_tzdata::AUSTRALIA_ACT;

        /// Raw, unparsed time zone data for Australia/Perth,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PERTH: &[u8] = raw_tzdata::AUSTRALIA_PERTH;

        /// Raw, unparsed time zone data for Australia/Queensland,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_QUEENSLAND: &[u8] = raw_tzdata::AUSTRALIA_BRISBANE;

        /// Raw, unparsed time zone data for Australia/South,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SOUTH: &[u8] = raw_tzdata::AUSTRALIA_ADELAIDE;

        /// Raw, unparsed time zone data for Australia/Sydney,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SYDNEY: &[u8] = raw_tzdata::AUSTRALIA_ACT;

        /// Raw, unparsed time zone data for Australia/Tasmania,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TASMANIA: &[u8] = raw_tzdata::AUSTRALIA_HOBART;

        /// Raw, unparsed time zone data for Australia/Victoria,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VICTORIA: &[u8] = raw_tzdata::AUSTRALIA_MELBOURNE;

        /// Raw, unparsed time zone data for Australia/West,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_WEST: &[u8] = raw_tzdata::AUSTRALIA_PERTH;

        /// Raw, unparsed time zone data for Australia/Yancowinna,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_YANCOWINNA: &[u8] = raw_tzdata::AUSTRALIA_BROKEN_HILL;
    }

    /// brazil
    pub mod brazil {
        use super::*;

        /// Time zone data for Brazil/Acre,
        pub const ACRE: TimeZoneRef<'static> = tzdata::AMERICA_PORTO_ACRE;

        /// Time zone data for Brazil/DeNoronha,
        pub const DE_NORONHA: TimeZoneRef<'static> = tzdata::AMERICA_NORONHA;

        /// Time zone data for Brazil/East,
        pub const EAST: TimeZoneRef<'static> = tzdata::AMERICA_SAO_PAULO;

        /// Time zone data for Brazil/West,
        pub const WEST: TimeZoneRef<'static> = tzdata::AMERICA_MANAUS;

        /// Raw, unparsed time zone data for Brazil/Acre,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ACRE: &[u8] = raw_tzdata::AMERICA_PORTO_ACRE;

        /// Raw, unparsed time zone data for Brazil/DeNoronha,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DE_NORONHA: &[u8] = raw_tzdata::AMERICA_NORONHA;

        /// Raw, unparsed time zone data for Brazil/East,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EAST: &[u8] = raw_tzdata::AMERICA_SAO_PAULO;

        /// Raw, unparsed time zone data for Brazil/West,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_WEST: &[u8] = raw_tzdata::AMERICA_MANAUS;
    }

    /// canada
    pub mod canada {
        use super::*;

        /// Time zone data for Canada/Atlantic,
        pub const ATLANTIC: TimeZoneRef<'static> = tzdata::AMERICA_HALIFAX;

        /// Time zone data for Canada/Central,
        pub const CENTRAL: TimeZoneRef<'static> = tzdata::AMERICA_WINNIPEG;

        /// Time zone data for Canada/Eastern,
        pub const EASTERN: TimeZoneRef<'static> = tzdata::AMERICA_TORONTO;

        /// Time zone data for Canada/Mountain,
        pub const MOUNTAIN: TimeZoneRef<'static> = tzdata::AMERICA_EDMONTON;

        /// Time zone data for Canada/Newfoundland,
        pub const NEWFOUNDLAND: TimeZoneRef<'static> = tzdata::AMERICA_ST_JOHNS;

        /// Time zone data for Canada/Pacific,
        pub const PACIFIC: TimeZoneRef<'static> = tzdata::AMERICA_VANCOUVER;

        /// Time zone data for Canada/Saskatchewan,
        pub const SASKATCHEWAN: TimeZoneRef<'static> = tzdata::AMERICA_REGINA;

        /// Time zone data for Canada/Yukon,
        pub const YUKON: TimeZoneRef<'static> = tzdata::AMERICA_WHITEHORSE;

        /// Raw, unparsed time zone data for Canada/Atlantic,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ATLANTIC: &[u8] = raw_tzdata::AMERICA_HALIFAX;

        /// Raw, unparsed time zone data for Canada/Central,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CENTRAL: &[u8] = raw_tzdata::AMERICA_WINNIPEG;

        /// Raw, unparsed time zone data for Canada/Eastern,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EASTERN: &[u8] = raw_tzdata::AMERICA_TORONTO;

        /// Raw, unparsed time zone data for Canada/Mountain,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MOUNTAIN: &[u8] = raw_tzdata::AMERICA_EDMONTON;

        /// Raw, unparsed time zone data for Canada/Newfoundland,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NEWFOUNDLAND: &[u8] = raw_tzdata::AMERICA_ST_JOHNS;

        /// Raw, unparsed time zone data for Canada/Pacific,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PACIFIC: &[u8] = raw_tzdata::AMERICA_VANCOUVER;

        /// Raw, unparsed time zone data for Canada/Saskatchewan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SASKATCHEWAN: &[u8] = raw_tzdata::AMERICA_REGINA;

        /// Raw, unparsed time zone data for Canada/Yukon,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_YUKON: &[u8] = raw_tzdata::AMERICA_WHITEHORSE;
    }

    /// chile
    pub mod chile {
        use super::*;

        /// Time zone data for Chile/Continental,
        pub const CONTINENTAL: TimeZoneRef<'static> = tzdata::AMERICA_SANTIAGO;

        /// Time zone data for Chile/EasterIsland,
        pub const EASTER_ISLAND: TimeZoneRef<'static> = tzdata::CHILE_EASTER_ISLAND;

        /// Raw, unparsed time zone data for Chile/Continental,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CONTINENTAL: &[u8] = raw_tzdata::AMERICA_SANTIAGO;

        /// Raw, unparsed time zone data for Chile/EasterIsland,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EASTER_ISLAND: &[u8] = raw_tzdata::CHILE_EASTER_ISLAND;
    }

    /// etc
    pub mod etc {
        use super::*;

        /// Time zone data for Etc/GMT,
        pub const GMT: TimeZoneRef<'static> = tzdata::GMT;

        /// Time zone data for Etc/GMT0,
        pub const GMT_0: TimeZoneRef<'static> = tzdata::GMT;

        /// Time zone data for Etc/GMT-0,
        pub const GMT_MINUS_0: TimeZoneRef<'static> = tzdata::GMT;

        /// Time zone data for Etc/GMT-1,
        pub const GMT_MINUS_1: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_1;

        /// Time zone data for Etc/GMT-10,
        pub const GMT_MINUS_10: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_10;

        /// Time zone data for Etc/GMT-11,
        pub const GMT_MINUS_11: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_11;

        /// Time zone data for Etc/GMT-12,
        pub const GMT_MINUS_12: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_12;

        /// Time zone data for Etc/GMT-13,
        pub const GMT_MINUS_13: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_13;

        /// Time zone data for Etc/GMT-14,
        pub const GMT_MINUS_14: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_14;

        /// Time zone data for Etc/GMT-2,
        pub const GMT_MINUS_2: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_2;

        /// Time zone data for Etc/GMT-3,
        pub const GMT_MINUS_3: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_3;

        /// Time zone data for Etc/GMT-4,
        pub const GMT_MINUS_4: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_4;

        /// Time zone data for Etc/GMT-5,
        pub const GMT_MINUS_5: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_5;

        /// Time zone data for Etc/GMT-6,
        pub const GMT_MINUS_6: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_6;

        /// Time zone data for Etc/GMT-7,
        pub const GMT_MINUS_7: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_7;

        /// Time zone data for Etc/GMT-8,
        pub const GMT_MINUS_8: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_8;

        /// Time zone data for Etc/GMT-9,
        pub const GMT_MINUS_9: TimeZoneRef<'static> = tzdata::ETC_GMT_MINUS_9;

        /// Time zone data for Etc/GMT+0,
        pub const GMT_PLUS_0: TimeZoneRef<'static> = tzdata::GMT;

        /// Time zone data for Etc/GMT+1,
        pub const GMT_PLUS_1: TimeZoneRef<'static> = tzdata::ATLANTIC_JAN_MAYEN;

        /// Time zone data for Etc/GMT+10,
        pub const GMT_PLUS_10: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_10;

        /// Time zone data for Etc/GMT+11,
        pub const GMT_PLUS_11: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_11;

        /// Time zone data for Etc/GMT+12,
        pub const GMT_PLUS_12: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_12;

        /// Time zone data for Etc/GMT+2,
        pub const GMT_PLUS_2: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_2;

        /// Time zone data for Etc/GMT+3,
        pub const GMT_PLUS_3: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_3;

        /// Time zone data for Etc/GMT+4,
        pub const GMT_PLUS_4: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_4;

        /// Time zone data for Etc/GMT+5,
        pub const GMT_PLUS_5: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_5;

        /// Time zone data for Etc/GMT+6,
        pub const GMT_PLUS_6: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_6;

        /// Time zone data for Etc/GMT+7,
        pub const GMT_PLUS_7: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_7;

        /// Time zone data for Etc/GMT+8,
        pub const GMT_PLUS_8: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_8;

        /// Time zone data for Etc/GMT+9,
        pub const GMT_PLUS_9: TimeZoneRef<'static> = tzdata::ETC_GMT_PLUS_9;

        /// Time zone data for Etc/Greenwich,
        pub const GREENWICH: TimeZoneRef<'static> = tzdata::GMT;

        /// Time zone data for etc/localtime,
        pub const LOCALTIME: TimeZoneRef<'static> = tzdata::GMT;

        /// Time zone data for Etc/UCT,
        pub const UCT: TimeZoneRef<'static> = tzdata::UCT;

        /// Time zone data for Etc/Universal,
        pub const UNIVERSAL: TimeZoneRef<'static> = tzdata::UCT;

        /// Time zone data for Etc/UTC,
        pub const UTC: TimeZoneRef<'static> = tzdata::UCT;

        /// Time zone data for Etc/Zulu,
        pub const ZULU: TimeZoneRef<'static> = tzdata::UCT;

        /// Raw, unparsed time zone data for Etc/GMT,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT: &[u8] = raw_tzdata::GMT;

        /// Raw, unparsed time zone data for Etc/GMT0,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_0: &[u8] = raw_tzdata::GMT;

        /// Raw, unparsed time zone data for Etc/GMT-0,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_0: &[u8] = raw_tzdata::GMT;

        /// Raw, unparsed time zone data for Etc/GMT-1,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_1: &[u8] = raw_tzdata::ETC_GMT_MINUS_1;

        /// Raw, unparsed time zone data for Etc/GMT-10,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_10: &[u8] = raw_tzdata::ETC_GMT_MINUS_10;

        /// Raw, unparsed time zone data for Etc/GMT-11,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_11: &[u8] = raw_tzdata::ETC_GMT_MINUS_11;

        /// Raw, unparsed time zone data for Etc/GMT-12,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_12: &[u8] = raw_tzdata::ETC_GMT_MINUS_12;

        /// Raw, unparsed time zone data for Etc/GMT-13,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_13: &[u8] = raw_tzdata::ETC_GMT_MINUS_13;

        /// Raw, unparsed time zone data for Etc/GMT-14,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_14: &[u8] = raw_tzdata::ETC_GMT_MINUS_14;

        /// Raw, unparsed time zone data for Etc/GMT-2,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_2: &[u8] = raw_tzdata::ETC_GMT_MINUS_2;

        /// Raw, unparsed time zone data for Etc/GMT-3,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_3: &[u8] = raw_tzdata::ETC_GMT_MINUS_3;

        /// Raw, unparsed time zone data for Etc/GMT-4,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_4: &[u8] = raw_tzdata::ETC_GMT_MINUS_4;

        /// Raw, unparsed time zone data for Etc/GMT-5,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_5: &[u8] = raw_tzdata::ETC_GMT_MINUS_5;

        /// Raw, unparsed time zone data for Etc/GMT-6,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_6: &[u8] = raw_tzdata::ETC_GMT_MINUS_6;

        /// Raw, unparsed time zone data for Etc/GMT-7,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_7: &[u8] = raw_tzdata::ETC_GMT_MINUS_7;

        /// Raw, unparsed time zone data for Etc/GMT-8,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_8: &[u8] = raw_tzdata::ETC_GMT_MINUS_8;

        /// Raw, unparsed time zone data for Etc/GMT-9,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_MINUS_9: &[u8] = raw_tzdata::ETC_GMT_MINUS_9;

        /// Raw, unparsed time zone data for Etc/GMT+0,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_0: &[u8] = raw_tzdata::GMT;

        /// Raw, unparsed time zone data for Etc/GMT+1,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_1: &[u8] = raw_tzdata::ATLANTIC_JAN_MAYEN;

        /// Raw, unparsed time zone data for Etc/GMT+10,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_10: &[u8] = raw_tzdata::ETC_GMT_PLUS_10;

        /// Raw, unparsed time zone data for Etc/GMT+11,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_11: &[u8] = raw_tzdata::ETC_GMT_PLUS_11;

        /// Raw, unparsed time zone data for Etc/GMT+12,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_12: &[u8] = raw_tzdata::ETC_GMT_PLUS_12;

        /// Raw, unparsed time zone data for Etc/GMT+2,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_2: &[u8] = raw_tzdata::ETC_GMT_PLUS_2;

        /// Raw, unparsed time zone data for Etc/GMT+3,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_3: &[u8] = raw_tzdata::ETC_GMT_PLUS_3;

        /// Raw, unparsed time zone data for Etc/GMT+4,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_4: &[u8] = raw_tzdata::ETC_GMT_PLUS_4;

        /// Raw, unparsed time zone data for Etc/GMT+5,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_5: &[u8] = raw_tzdata::ETC_GMT_PLUS_5;

        /// Raw, unparsed time zone data for Etc/GMT+6,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_6: &[u8] = raw_tzdata::ETC_GMT_PLUS_6;

        /// Raw, unparsed time zone data for Etc/GMT+7,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_7: &[u8] = raw_tzdata::ETC_GMT_PLUS_7;

        /// Raw, unparsed time zone data for Etc/GMT+8,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_8: &[u8] = raw_tzdata::ETC_GMT_PLUS_8;

        /// Raw, unparsed time zone data for Etc/GMT+9,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GMT_PLUS_9: &[u8] = raw_tzdata::ETC_GMT_PLUS_9;

        /// Raw, unparsed time zone data for Etc/Greenwich,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GREENWICH: &[u8] = raw_tzdata::GMT;

        /// Raw, unparsed time zone data for etc/localtime,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LOCALTIME: &[u8] = raw_tzdata::GMT;

        /// Raw, unparsed time zone data for Etc/UCT,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_UCT: &[u8] = raw_tzdata::UCT;

        /// Raw, unparsed time zone data for Etc/Universal,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_UNIVERSAL: &[u8] = raw_tzdata::UCT;

        /// Raw, unparsed time zone data for Etc/UTC,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_UTC: &[u8] = raw_tzdata::UCT;

        /// Raw, unparsed time zone data for Etc/Zulu,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ZULU: &[u8] = raw_tzdata::UCT;
    }

    /// europe
    pub mod europe {
        use super::*;

        /// Time zone data for Europe/Amsterdam,
        pub const AMSTERDAM: TimeZoneRef<'static> = tzdata::EUROPE_AMSTERDAM;

        /// Time zone data for Europe/Andorra,
        pub const ANDORRA: TimeZoneRef<'static> = tzdata::EUROPE_ANDORRA;

        /// Time zone data for Europe/Astrakhan,
        pub const ASTRAKHAN: TimeZoneRef<'static> = tzdata::EUROPE_ASTRAKHAN;

        /// Time zone data for Europe/Athens,
        pub const ATHENS: TimeZoneRef<'static> = tzdata::EUROPE_ATHENS;

        /// Time zone data for Europe/Belfast,
        pub const BELFAST: TimeZoneRef<'static> = tzdata::EUROPE_BELFAST;

        /// Time zone data for Europe/Belgrade,
        pub const BELGRADE: TimeZoneRef<'static> = tzdata::EUROPE_BELGRADE;

        /// Time zone data for Europe/Berlin,
        pub const BERLIN: TimeZoneRef<'static> = tzdata::EUROPE_BERLIN;

        /// Time zone data for Europe/Bratislava,
        pub const BRATISLAVA: TimeZoneRef<'static> = tzdata::EUROPE_BRATISLAVA;

        /// Time zone data for Europe/Brussels,
        pub const BRUSSELS: TimeZoneRef<'static> = tzdata::EUROPE_BRUSSELS;

        /// Time zone data for Europe/Bucharest,
        pub const BUCHAREST: TimeZoneRef<'static> = tzdata::EUROPE_BUCHAREST;

        /// Time zone data for Europe/Budapest,
        pub const BUDAPEST: TimeZoneRef<'static> = tzdata::EUROPE_BUDAPEST;

        /// Time zone data for Europe/Busingen,
        pub const BUSINGEN: TimeZoneRef<'static> = tzdata::EUROPE_BUSINGEN;

        /// Time zone data for Europe/Chisinau,
        pub const CHISINAU: TimeZoneRef<'static> = tzdata::EUROPE_CHISINAU;

        /// Time zone data for Europe/Copenhagen,
        pub const COPENHAGEN: TimeZoneRef<'static> = tzdata::EUROPE_COPENHAGEN;

        /// Time zone data for Europe/Dublin,
        pub const DUBLIN: TimeZoneRef<'static> = tzdata::EIRE;

        /// Time zone data for Europe/Gibraltar,
        pub const GIBRALTAR: TimeZoneRef<'static> = tzdata::EUROPE_GIBRALTAR;

        /// Time zone data for Europe/Guernsey,
        pub const GUERNSEY: TimeZoneRef<'static> = tzdata::EUROPE_GUERNSEY;

        /// Time zone data for Europe/Helsinki,
        pub const HELSINKI: TimeZoneRef<'static> = tzdata::EUROPE_HELSINKI;

        /// Time zone data for Europe/Isle_of_Man,
        pub const ISLE_OF_MAN: TimeZoneRef<'static> = tzdata::EUROPE_ISLE_OF_MAN;

        /// Time zone data for Europe/Istanbul,
        pub const ISTANBUL: TimeZoneRef<'static> = tzdata::TURKEY;

        /// Time zone data for Europe/Jersey,
        pub const JERSEY: TimeZoneRef<'static> = tzdata::EUROPE_JERSEY;

        /// Time zone data for Europe/Kaliningrad,
        pub const KALININGRAD: TimeZoneRef<'static> = tzdata::EUROPE_KALININGRAD;

        /// Time zone data for Europe/Kiev,
        pub const KIEV: TimeZoneRef<'static> = tzdata::EUROPE_KIEV;

        /// Time zone data for Europe/Kirov,
        pub const KIROV: TimeZoneRef<'static> = tzdata::EUROPE_KIROV;

        /// Time zone data for Europe/Lisbon,
        pub const LISBON: TimeZoneRef<'static> = tzdata::PORTUGAL;

        /// Time zone data for Europe/Ljubljana,
        pub const LJUBLJANA: TimeZoneRef<'static> = tzdata::EUROPE_LJUBLJANA;

        /// Time zone data for Europe/London,
        pub const LONDON: TimeZoneRef<'static> = tzdata::GB;

        /// Time zone data for Europe/Luxembourg,
        pub const LUXEMBOURG: TimeZoneRef<'static> = tzdata::EUROPE_LUXEMBOURG;

        /// Time zone data for Europe/Madrid,
        pub const MADRID: TimeZoneRef<'static> = tzdata::EUROPE_MADRID;

        /// Time zone data for Europe/Malta,
        pub const MALTA: TimeZoneRef<'static> = tzdata::EUROPE_MALTA;

        /// Time zone data for Europe/Mariehamn,
        pub const MARIEHAMN: TimeZoneRef<'static> = tzdata::EUROPE_HELSINKI;

        /// Time zone data for Europe/Minsk,
        pub const MINSK: TimeZoneRef<'static> = tzdata::EUROPE_MINSK;

        /// Time zone data for Europe/Monaco,
        pub const MONACO: TimeZoneRef<'static> = tzdata::EUROPE_MONACO;

        /// Time zone data for Europe/Moscow,
        pub const MOSCOW: TimeZoneRef<'static> = tzdata::W_SU;

        /// Time zone data for Europe/Nicosia,
        pub const NICOSIA: TimeZoneRef<'static> = tzdata::ASIA_NICOSIA;

        /// Time zone data for Europe/Oslo,
        pub const OSLO: TimeZoneRef<'static> = tzdata::ARCTIC_LONGYEARBYEN;

        /// Time zone data for Europe/Paris,
        pub const PARIS: TimeZoneRef<'static> = tzdata::EUROPE_PARIS;

        /// Time zone data for Europe/Podgorica,
        pub const PODGORICA: TimeZoneRef<'static> = tzdata::EUROPE_BELGRADE;

        /// Time zone data for Europe/Prague,
        pub const PRAGUE: TimeZoneRef<'static> = tzdata::EUROPE_BRATISLAVA;

        /// Time zone data for Europe/Riga,
        pub const RIGA: TimeZoneRef<'static> = tzdata::EUROPE_RIGA;

        /// Time zone data for Europe/Rome,
        pub const ROME: TimeZoneRef<'static> = tzdata::EUROPE_ROME;

        /// Time zone data for Europe/Samara,
        pub const SAMARA: TimeZoneRef<'static> = tzdata::EUROPE_SAMARA;

        /// Time zone data for Europe/San_Marino,
        pub const SAN_MARINO: TimeZoneRef<'static> = tzdata::EUROPE_ROME;

        /// Time zone data for Europe/Sarajevo,
        pub const SARAJEVO: TimeZoneRef<'static> = tzdata::EUROPE_SARAJEVO;

        /// Time zone data for Europe/Saratov,
        pub const SARATOV: TimeZoneRef<'static> = tzdata::EUROPE_SARATOV;

        /// Time zone data for Europe/Simferopol,
        pub const SIMFEROPOL: TimeZoneRef<'static> = tzdata::EUROPE_SIMFEROPOL;

        /// Time zone data for Europe/Skopje,
        pub const SKOPJE: TimeZoneRef<'static> = tzdata::EUROPE_SKOPJE;

        /// Time zone data for Europe/Sofia,
        pub const SOFIA: TimeZoneRef<'static> = tzdata::EUROPE_SOFIA;

        /// Time zone data for Europe/Stockholm,
        pub const STOCKHOLM: TimeZoneRef<'static> = tzdata::EUROPE_STOCKHOLM;

        /// Time zone data for Europe/Tallinn,
        pub const TALLINN: TimeZoneRef<'static> = tzdata::EUROPE_TALLINN;

        /// Time zone data for Europe/Tirane,
        pub const TIRANE: TimeZoneRef<'static> = tzdata::EUROPE_TIRANE;

        /// Time zone data for Europe/Tiraspol,
        pub const TIRASPOL: TimeZoneRef<'static> = tzdata::EUROPE_TIRASPOL;

        /// Time zone data for Europe/Ulyanovsk,
        pub const ULYANOVSK: TimeZoneRef<'static> = tzdata::EUROPE_ULYANOVSK;

        /// Time zone data for Europe/Uzhgorod,
        pub const UZHGOROD: TimeZoneRef<'static> = tzdata::EUROPE_UZHGOROD;

        /// Time zone data for Europe/Vaduz,
        pub const VADUZ: TimeZoneRef<'static> = tzdata::EUROPE_VADUZ;

        /// Time zone data for Europe/Vatican,
        pub const VATICAN: TimeZoneRef<'static> = tzdata::EUROPE_ROME;

        /// Time zone data for Europe/Vienna,
        pub const VIENNA: TimeZoneRef<'static> = tzdata::EUROPE_VIENNA;

        /// Time zone data for Europe/Vilnius,
        pub const VILNIUS: TimeZoneRef<'static> = tzdata::EUROPE_VILNIUS;

        /// Time zone data for Europe/Volgograd,
        pub const VOLGOGRAD: TimeZoneRef<'static> = tzdata::EUROPE_VOLGOGRAD;

        /// Time zone data for Europe/Warsaw,
        pub const WARSAW: TimeZoneRef<'static> = tzdata::POLAND;

        /// Time zone data for Europe/Zagreb,
        pub const ZAGREB: TimeZoneRef<'static> = tzdata::EUROPE_ZAGREB;

        /// Time zone data for Europe/Zaporozhye,
        pub const ZAPOROZHYE: TimeZoneRef<'static> = tzdata::EUROPE_ZAPOROZHYE;

        /// Time zone data for Europe/Zurich,
        pub const ZURICH: TimeZoneRef<'static> = tzdata::EUROPE_BUSINGEN;

        /// Raw, unparsed time zone data for Europe/Amsterdam,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_AMSTERDAM: &[u8] = raw_tzdata::EUROPE_AMSTERDAM;

        /// Raw, unparsed time zone data for Europe/Andorra,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ANDORRA: &[u8] = raw_tzdata::EUROPE_ANDORRA;

        /// Raw, unparsed time zone data for Europe/Astrakhan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ASTRAKHAN: &[u8] = raw_tzdata::EUROPE_ASTRAKHAN;

        /// Raw, unparsed time zone data for Europe/Athens,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ATHENS: &[u8] = raw_tzdata::EUROPE_ATHENS;

        /// Raw, unparsed time zone data for Europe/Belfast,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BELFAST: &[u8] = raw_tzdata::EUROPE_BELFAST;

        /// Raw, unparsed time zone data for Europe/Belgrade,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BELGRADE: &[u8] = raw_tzdata::EUROPE_BELGRADE;

        /// Raw, unparsed time zone data for Europe/Berlin,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BERLIN: &[u8] = raw_tzdata::EUROPE_BERLIN;

        /// Raw, unparsed time zone data for Europe/Bratislava,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BRATISLAVA: &[u8] = raw_tzdata::EUROPE_BRATISLAVA;

        /// Raw, unparsed time zone data for Europe/Brussels,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BRUSSELS: &[u8] = raw_tzdata::EUROPE_BRUSSELS;

        /// Raw, unparsed time zone data for Europe/Bucharest,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BUCHAREST: &[u8] = raw_tzdata::EUROPE_BUCHAREST;

        /// Raw, unparsed time zone data for Europe/Budapest,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BUDAPEST: &[u8] = raw_tzdata::EUROPE_BUDAPEST;

        /// Raw, unparsed time zone data for Europe/Busingen,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BUSINGEN: &[u8] = raw_tzdata::EUROPE_BUSINGEN;

        /// Raw, unparsed time zone data for Europe/Chisinau,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHISINAU: &[u8] = raw_tzdata::EUROPE_CHISINAU;

        /// Raw, unparsed time zone data for Europe/Copenhagen,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_COPENHAGEN: &[u8] = raw_tzdata::EUROPE_COPENHAGEN;

        /// Raw, unparsed time zone data for Europe/Dublin,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_DUBLIN: &[u8] = raw_tzdata::EIRE;

        /// Raw, unparsed time zone data for Europe/Gibraltar,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GIBRALTAR: &[u8] = raw_tzdata::EUROPE_GIBRALTAR;

        /// Raw, unparsed time zone data for Europe/Guernsey,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GUERNSEY: &[u8] = raw_tzdata::EUROPE_GUERNSEY;

        /// Raw, unparsed time zone data for Europe/Helsinki,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HELSINKI: &[u8] = raw_tzdata::EUROPE_HELSINKI;

        /// Raw, unparsed time zone data for Europe/Isle_of_Man,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ISLE_OF_MAN: &[u8] = raw_tzdata::EUROPE_ISLE_OF_MAN;

        /// Raw, unparsed time zone data for Europe/Istanbul,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ISTANBUL: &[u8] = raw_tzdata::TURKEY;

        /// Raw, unparsed time zone data for Europe/Jersey,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JERSEY: &[u8] = raw_tzdata::EUROPE_JERSEY;

        /// Raw, unparsed time zone data for Europe/Kaliningrad,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KALININGRAD: &[u8] = raw_tzdata::EUROPE_KALININGRAD;

        /// Raw, unparsed time zone data for Europe/Kiev,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KIEV: &[u8] = raw_tzdata::EUROPE_KIEV;

        /// Raw, unparsed time zone data for Europe/Kirov,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KIROV: &[u8] = raw_tzdata::EUROPE_KIROV;

        /// Raw, unparsed time zone data for Europe/Lisbon,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LISBON: &[u8] = raw_tzdata::PORTUGAL;

        /// Raw, unparsed time zone data for Europe/Ljubljana,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LJUBLJANA: &[u8] = raw_tzdata::EUROPE_LJUBLJANA;

        /// Raw, unparsed time zone data for Europe/London,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LONDON: &[u8] = raw_tzdata::GB;

        /// Raw, unparsed time zone data for Europe/Luxembourg,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_LUXEMBOURG: &[u8] = raw_tzdata::EUROPE_LUXEMBOURG;

        /// Raw, unparsed time zone data for Europe/Madrid,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MADRID: &[u8] = raw_tzdata::EUROPE_MADRID;

        /// Raw, unparsed time zone data for Europe/Malta,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MALTA: &[u8] = raw_tzdata::EUROPE_MALTA;

        /// Raw, unparsed time zone data for Europe/Mariehamn,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MARIEHAMN: &[u8] = raw_tzdata::EUROPE_HELSINKI;

        /// Raw, unparsed time zone data for Europe/Minsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MINSK: &[u8] = raw_tzdata::EUROPE_MINSK;

        /// Raw, unparsed time zone data for Europe/Monaco,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MONACO: &[u8] = raw_tzdata::EUROPE_MONACO;

        /// Raw, unparsed time zone data for Europe/Moscow,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MOSCOW: &[u8] = raw_tzdata::W_SU;

        /// Raw, unparsed time zone data for Europe/Nicosia,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NICOSIA: &[u8] = raw_tzdata::ASIA_NICOSIA;

        /// Raw, unparsed time zone data for Europe/Oslo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_OSLO: &[u8] = raw_tzdata::ARCTIC_LONGYEARBYEN;

        /// Raw, unparsed time zone data for Europe/Paris,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PARIS: &[u8] = raw_tzdata::EUROPE_PARIS;

        /// Raw, unparsed time zone data for Europe/Podgorica,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PODGORICA: &[u8] = raw_tzdata::EUROPE_BELGRADE;

        /// Raw, unparsed time zone data for Europe/Prague,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PRAGUE: &[u8] = raw_tzdata::EUROPE_BRATISLAVA;

        /// Raw, unparsed time zone data for Europe/Riga,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_RIGA: &[u8] = raw_tzdata::EUROPE_RIGA;

        /// Raw, unparsed time zone data for Europe/Rome,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ROME: &[u8] = raw_tzdata::EUROPE_ROME;

        /// Raw, unparsed time zone data for Europe/Samara,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAMARA: &[u8] = raw_tzdata::EUROPE_SAMARA;

        /// Raw, unparsed time zone data for Europe/San_Marino,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAN_MARINO: &[u8] = raw_tzdata::EUROPE_ROME;

        /// Raw, unparsed time zone data for Europe/Sarajevo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SARAJEVO: &[u8] = raw_tzdata::EUROPE_SARAJEVO;

        /// Raw, unparsed time zone data for Europe/Saratov,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SARATOV: &[u8] = raw_tzdata::EUROPE_SARATOV;

        /// Raw, unparsed time zone data for Europe/Simferopol,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SIMFEROPOL: &[u8] = raw_tzdata::EUROPE_SIMFEROPOL;

        /// Raw, unparsed time zone data for Europe/Skopje,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SKOPJE: &[u8] = raw_tzdata::EUROPE_SKOPJE;

        /// Raw, unparsed time zone data for Europe/Sofia,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SOFIA: &[u8] = raw_tzdata::EUROPE_SOFIA;

        /// Raw, unparsed time zone data for Europe/Stockholm,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_STOCKHOLM: &[u8] = raw_tzdata::EUROPE_STOCKHOLM;

        /// Raw, unparsed time zone data for Europe/Tallinn,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TALLINN: &[u8] = raw_tzdata::EUROPE_TALLINN;

        /// Raw, unparsed time zone data for Europe/Tirane,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TIRANE: &[u8] = raw_tzdata::EUROPE_TIRANE;

        /// Raw, unparsed time zone data for Europe/Tiraspol,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TIRASPOL: &[u8] = raw_tzdata::EUROPE_TIRASPOL;

        /// Raw, unparsed time zone data for Europe/Ulyanovsk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ULYANOVSK: &[u8] = raw_tzdata::EUROPE_ULYANOVSK;

        /// Raw, unparsed time zone data for Europe/Uzhgorod,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_UZHGOROD: &[u8] = raw_tzdata::EUROPE_UZHGOROD;

        /// Raw, unparsed time zone data for Europe/Vaduz,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VADUZ: &[u8] = raw_tzdata::EUROPE_VADUZ;

        /// Raw, unparsed time zone data for Europe/Vatican,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VATICAN: &[u8] = raw_tzdata::EUROPE_ROME;

        /// Raw, unparsed time zone data for Europe/Vienna,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VIENNA: &[u8] = raw_tzdata::EUROPE_VIENNA;

        /// Raw, unparsed time zone data for Europe/Vilnius,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VILNIUS: &[u8] = raw_tzdata::EUROPE_VILNIUS;

        /// Raw, unparsed time zone data for Europe/Volgograd,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_VOLGOGRAD: &[u8] = raw_tzdata::EUROPE_VOLGOGRAD;

        /// Raw, unparsed time zone data for Europe/Warsaw,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_WARSAW: &[u8] = raw_tzdata::POLAND;

        /// Raw, unparsed time zone data for Europe/Zagreb,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ZAGREB: &[u8] = raw_tzdata::EUROPE_ZAGREB;

        /// Raw, unparsed time zone data for Europe/Zaporozhye,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ZAPOROZHYE: &[u8] = raw_tzdata::EUROPE_ZAPOROZHYE;

        /// Raw, unparsed time zone data for Europe/Zurich,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ZURICH: &[u8] = raw_tzdata::EUROPE_BUSINGEN;
    }

    /// indian
    pub mod indian {
        use super::*;

        /// Time zone data for Indian/Antananarivo,
        pub const ANTANANARIVO: TimeZoneRef<'static> = tzdata::INDIAN_ANTANANARIVO;

        /// Time zone data for Indian/Chagos,
        pub const CHAGOS: TimeZoneRef<'static> = tzdata::INDIAN_CHAGOS;

        /// Time zone data for Indian/Christmas,
        pub const CHRISTMAS: TimeZoneRef<'static> = tzdata::INDIAN_CHRISTMAS;

        /// Time zone data for Indian/Cocos,
        pub const COCOS: TimeZoneRef<'static> = tzdata::INDIAN_COCOS;

        /// Time zone data for Indian/Comoro,
        pub const COMORO: TimeZoneRef<'static> = tzdata::INDIAN_COMORO;

        /// Time zone data for Indian/Kerguelen,
        pub const KERGUELEN: TimeZoneRef<'static> = tzdata::INDIAN_KERGUELEN;

        /// Time zone data for Indian/Mahe,
        pub const MAHE: TimeZoneRef<'static> = tzdata::INDIAN_MAHE;

        /// Time zone data for Indian/Maldives,
        pub const MALDIVES: TimeZoneRef<'static> = tzdata::INDIAN_MALDIVES;

        /// Time zone data for Indian/Mauritius,
        pub const MAURITIUS: TimeZoneRef<'static> = tzdata::INDIAN_MAURITIUS;

        /// Time zone data for Indian/Mayotte,
        pub const MAYOTTE: TimeZoneRef<'static> = tzdata::INDIAN_MAYOTTE;

        /// Time zone data for Indian/Reunion,
        pub const REUNION: TimeZoneRef<'static> = tzdata::INDIAN_REUNION;

        /// Raw, unparsed time zone data for Indian/Antananarivo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ANTANANARIVO: &[u8] = raw_tzdata::INDIAN_ANTANANARIVO;

        /// Raw, unparsed time zone data for Indian/Chagos,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHAGOS: &[u8] = raw_tzdata::INDIAN_CHAGOS;

        /// Raw, unparsed time zone data for Indian/Christmas,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHRISTMAS: &[u8] = raw_tzdata::INDIAN_CHRISTMAS;

        /// Raw, unparsed time zone data for Indian/Cocos,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_COCOS: &[u8] = raw_tzdata::INDIAN_COCOS;

        /// Raw, unparsed time zone data for Indian/Comoro,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_COMORO: &[u8] = raw_tzdata::INDIAN_COMORO;

        /// Raw, unparsed time zone data for Indian/Kerguelen,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KERGUELEN: &[u8] = raw_tzdata::INDIAN_KERGUELEN;

        /// Raw, unparsed time zone data for Indian/Mahe,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MAHE: &[u8] = raw_tzdata::INDIAN_MAHE;

        /// Raw, unparsed time zone data for Indian/Maldives,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MALDIVES: &[u8] = raw_tzdata::INDIAN_MALDIVES;

        /// Raw, unparsed time zone data for Indian/Mauritius,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MAURITIUS: &[u8] = raw_tzdata::INDIAN_MAURITIUS;

        /// Raw, unparsed time zone data for Indian/Mayotte,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MAYOTTE: &[u8] = raw_tzdata::INDIAN_MAYOTTE;

        /// Raw, unparsed time zone data for Indian/Reunion,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_REUNION: &[u8] = raw_tzdata::INDIAN_REUNION;
    }

    /// mexico
    pub mod mexico {
        use super::*;

        /// Time zone data for Mexico/BajaNorte,
        pub const BAJA_NORTE: TimeZoneRef<'static> = tzdata::AMERICA_SANTA_ISABEL;

        /// Time zone data for Mexico/BajaSur,
        pub const BAJA_SUR: TimeZoneRef<'static> = tzdata::AMERICA_MAZATLAN;

        /// Time zone data for Mexico/General,
        pub const GENERAL: TimeZoneRef<'static> = tzdata::AMERICA_MEXICO_CITY;

        /// Raw, unparsed time zone data for Mexico/BajaNorte,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BAJA_NORTE: &[u8] = raw_tzdata::AMERICA_SANTA_ISABEL;

        /// Raw, unparsed time zone data for Mexico/BajaSur,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BAJA_SUR: &[u8] = raw_tzdata::AMERICA_MAZATLAN;

        /// Raw, unparsed time zone data for Mexico/General,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GENERAL: &[u8] = raw_tzdata::AMERICA_MEXICO_CITY;
    }

    /// pacific
    pub mod pacific {
        use super::*;

        /// Time zone data for Pacific/Apia,
        pub const APIA: TimeZoneRef<'static> = tzdata::PACIFIC_APIA;

        /// Time zone data for Pacific/Auckland,
        pub const AUCKLAND: TimeZoneRef<'static> = tzdata::NZ;

        /// Time zone data for Pacific/Bougainville,
        pub const BOUGAINVILLE: TimeZoneRef<'static> = tzdata::PACIFIC_BOUGAINVILLE;

        /// Time zone data for Pacific/Chatham,
        pub const CHATHAM: TimeZoneRef<'static> = tzdata::NZ_CHAT;

        /// Time zone data for Pacific/Chuuk,
        pub const CHUUK: TimeZoneRef<'static> = tzdata::PACIFIC_CHUUK;

        /// Time zone data for Pacific/Easter,
        pub const EASTER: TimeZoneRef<'static> = tzdata::CHILE_EASTER_ISLAND;

        /// Time zone data for Pacific/Efate,
        pub const EFATE: TimeZoneRef<'static> = tzdata::PACIFIC_EFATE;

        /// Time zone data for Pacific/Enderbury,
        pub const ENDERBURY: TimeZoneRef<'static> = tzdata::PACIFIC_ENDERBURY;

        /// Time zone data for Pacific/Fakaofo,
        pub const FAKAOFO: TimeZoneRef<'static> = tzdata::PACIFIC_FAKAOFO;

        /// Time zone data for Pacific/Fiji,
        pub const FIJI: TimeZoneRef<'static> = tzdata::PACIFIC_FIJI;

        /// Time zone data for Pacific/Funafuti,
        pub const FUNAFUTI: TimeZoneRef<'static> = tzdata::PACIFIC_FUNAFUTI;

        /// Time zone data for Pacific/Galapagos,
        pub const GALAPAGOS: TimeZoneRef<'static> = tzdata::PACIFIC_GALAPAGOS;

        /// Time zone data for Pacific/Gambier,
        pub const GAMBIER: TimeZoneRef<'static> = tzdata::PACIFIC_GAMBIER;

        /// Time zone data for Pacific/Guadalcanal,
        pub const GUADALCANAL: TimeZoneRef<'static> = tzdata::PACIFIC_GUADALCANAL;

        /// Time zone data for Pacific/Guam,
        pub const GUAM: TimeZoneRef<'static> = tzdata::PACIFIC_GUAM;

        /// Time zone data for Pacific/Honolulu,
        pub const HONOLULU: TimeZoneRef<'static> = tzdata::PACIFIC_HONOLULU;

        /// Time zone data for Pacific/Johnston,
        pub const JOHNSTON: TimeZoneRef<'static> = tzdata::HST;

        /// Time zone data for Pacific/Kanton,
        pub const KANTON: TimeZoneRef<'static> = tzdata::PACIFIC_KANTON;

        /// Time zone data for Pacific/Kiritimati,
        pub const KIRITIMATI: TimeZoneRef<'static> = tzdata::PACIFIC_KIRITIMATI;

        /// Time zone data for Pacific/Kosrae,
        pub const KOSRAE: TimeZoneRef<'static> = tzdata::PACIFIC_KOSRAE;

        /// Time zone data for Pacific/Kwajalein,
        pub const KWAJALEIN: TimeZoneRef<'static> = tzdata::KWAJALEIN;

        /// Time zone data for Pacific/Majuro,
        pub const MAJURO: TimeZoneRef<'static> = tzdata::PACIFIC_MAJURO;

        /// Time zone data for Pacific/Marquesas,
        pub const MARQUESAS: TimeZoneRef<'static> = tzdata::PACIFIC_MARQUESAS;

        /// Time zone data for Pacific/Midway,
        pub const MIDWAY: TimeZoneRef<'static> = tzdata::PACIFIC_MIDWAY;

        /// Time zone data for Pacific/Nauru,
        pub const NAURU: TimeZoneRef<'static> = tzdata::PACIFIC_NAURU;

        /// Time zone data for Pacific/Niue,
        pub const NIUE: TimeZoneRef<'static> = tzdata::PACIFIC_NIUE;

        /// Time zone data for Pacific/Norfolk,
        pub const NORFOLK: TimeZoneRef<'static> = tzdata::PACIFIC_NORFOLK;

        /// Time zone data for Pacific/Noumea,
        pub const NOUMEA: TimeZoneRef<'static> = tzdata::PACIFIC_NOUMEA;

        /// Time zone data for Pacific/Pago_Pago,
        pub const PAGO_PAGO: TimeZoneRef<'static> = tzdata::PACIFIC_PAGO_PAGO;

        /// Time zone data for Pacific/Palau,
        pub const PALAU: TimeZoneRef<'static> = tzdata::PACIFIC_PALAU;

        /// Time zone data for Pacific/Pitcairn,
        pub const PITCAIRN: TimeZoneRef<'static> = tzdata::PACIFIC_PITCAIRN;

        /// Time zone data for Pacific/Pohnpei,
        pub const POHNPEI: TimeZoneRef<'static> = tzdata::PACIFIC_POHNPEI;

        /// Time zone data for Pacific/Ponape,
        pub const PONAPE: TimeZoneRef<'static> = tzdata::PACIFIC_POHNPEI;

        /// Time zone data for Pacific/Port_Moresby,
        pub const PORT_MORESBY: TimeZoneRef<'static> = tzdata::PACIFIC_PORT_MORESBY;

        /// Time zone data for Pacific/Rarotonga,
        pub const RAROTONGA: TimeZoneRef<'static> = tzdata::PACIFIC_RAROTONGA;

        /// Time zone data for Pacific/Saipan,
        pub const SAIPAN: TimeZoneRef<'static> = tzdata::PACIFIC_SAIPAN;

        /// Time zone data for Pacific/Samoa,
        pub const SAMOA: TimeZoneRef<'static> = tzdata::PACIFIC_PAGO_PAGO;

        /// Time zone data for Pacific/Tahiti,
        pub const TAHITI: TimeZoneRef<'static> = tzdata::PACIFIC_TAHITI;

        /// Time zone data for Pacific/Tarawa,
        pub const TARAWA: TimeZoneRef<'static> = tzdata::PACIFIC_TARAWA;

        /// Time zone data for Pacific/Tongatapu,
        pub const TONGATAPU: TimeZoneRef<'static> = tzdata::PACIFIC_TONGATAPU;

        /// Time zone data for Pacific/Truk,
        pub const TRUK: TimeZoneRef<'static> = tzdata::PACIFIC_CHUUK;

        /// Time zone data for Pacific/Wake,
        pub const WAKE: TimeZoneRef<'static> = tzdata::PACIFIC_WAKE;

        /// Time zone data for Pacific/Wallis,
        pub const WALLIS: TimeZoneRef<'static> = tzdata::PACIFIC_WALLIS;

        /// Time zone data for Pacific/Yap,
        pub const YAP: TimeZoneRef<'static> = tzdata::PACIFIC_CHUUK;

        /// Raw, unparsed time zone data for Pacific/Apia,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_APIA: &[u8] = raw_tzdata::PACIFIC_APIA;

        /// Raw, unparsed time zone data for Pacific/Auckland,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_AUCKLAND: &[u8] = raw_tzdata::NZ;

        /// Raw, unparsed time zone data for Pacific/Bougainville,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_BOUGAINVILLE: &[u8] = raw_tzdata::PACIFIC_BOUGAINVILLE;

        /// Raw, unparsed time zone data for Pacific/Chatham,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHATHAM: &[u8] = raw_tzdata::NZ_CHAT;

        /// Raw, unparsed time zone data for Pacific/Chuuk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CHUUK: &[u8] = raw_tzdata::PACIFIC_CHUUK;

        /// Raw, unparsed time zone data for Pacific/Easter,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EASTER: &[u8] = raw_tzdata::CHILE_EASTER_ISLAND;

        /// Raw, unparsed time zone data for Pacific/Efate,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EFATE: &[u8] = raw_tzdata::PACIFIC_EFATE;

        /// Raw, unparsed time zone data for Pacific/Enderbury,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ENDERBURY: &[u8] = raw_tzdata::PACIFIC_ENDERBURY;

        /// Raw, unparsed time zone data for Pacific/Fakaofo,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FAKAOFO: &[u8] = raw_tzdata::PACIFIC_FAKAOFO;

        /// Raw, unparsed time zone data for Pacific/Fiji,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FIJI: &[u8] = raw_tzdata::PACIFIC_FIJI;

        /// Raw, unparsed time zone data for Pacific/Funafuti,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_FUNAFUTI: &[u8] = raw_tzdata::PACIFIC_FUNAFUTI;

        /// Raw, unparsed time zone data for Pacific/Galapagos,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GALAPAGOS: &[u8] = raw_tzdata::PACIFIC_GALAPAGOS;

        /// Raw, unparsed time zone data for Pacific/Gambier,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GAMBIER: &[u8] = raw_tzdata::PACIFIC_GAMBIER;

        /// Raw, unparsed time zone data for Pacific/Guadalcanal,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GUADALCANAL: &[u8] = raw_tzdata::PACIFIC_GUADALCANAL;

        /// Raw, unparsed time zone data for Pacific/Guam,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_GUAM: &[u8] = raw_tzdata::PACIFIC_GUAM;

        /// Raw, unparsed time zone data for Pacific/Honolulu,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HONOLULU: &[u8] = raw_tzdata::PACIFIC_HONOLULU;

        /// Raw, unparsed time zone data for Pacific/Johnston,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_JOHNSTON: &[u8] = raw_tzdata::HST;

        /// Raw, unparsed time zone data for Pacific/Kanton,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KANTON: &[u8] = raw_tzdata::PACIFIC_KANTON;

        /// Raw, unparsed time zone data for Pacific/Kiritimati,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KIRITIMATI: &[u8] = raw_tzdata::PACIFIC_KIRITIMATI;

        /// Raw, unparsed time zone data for Pacific/Kosrae,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KOSRAE: &[u8] = raw_tzdata::PACIFIC_KOSRAE;

        /// Raw, unparsed time zone data for Pacific/Kwajalein,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_KWAJALEIN: &[u8] = raw_tzdata::KWAJALEIN;

        /// Raw, unparsed time zone data for Pacific/Majuro,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MAJURO: &[u8] = raw_tzdata::PACIFIC_MAJURO;

        /// Raw, unparsed time zone data for Pacific/Marquesas,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MARQUESAS: &[u8] = raw_tzdata::PACIFIC_MARQUESAS;

        /// Raw, unparsed time zone data for Pacific/Midway,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MIDWAY: &[u8] = raw_tzdata::PACIFIC_MIDWAY;

        /// Raw, unparsed time zone data for Pacific/Nauru,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NAURU: &[u8] = raw_tzdata::PACIFIC_NAURU;

        /// Raw, unparsed time zone data for Pacific/Niue,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NIUE: &[u8] = raw_tzdata::PACIFIC_NIUE;

        /// Raw, unparsed time zone data for Pacific/Norfolk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NORFOLK: &[u8] = raw_tzdata::PACIFIC_NORFOLK;

        /// Raw, unparsed time zone data for Pacific/Noumea,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_NOUMEA: &[u8] = raw_tzdata::PACIFIC_NOUMEA;

        /// Raw, unparsed time zone data for Pacific/Pago_Pago,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PAGO_PAGO: &[u8] = raw_tzdata::PACIFIC_PAGO_PAGO;

        /// Raw, unparsed time zone data for Pacific/Palau,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PALAU: &[u8] = raw_tzdata::PACIFIC_PALAU;

        /// Raw, unparsed time zone data for Pacific/Pitcairn,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PITCAIRN: &[u8] = raw_tzdata::PACIFIC_PITCAIRN;

        /// Raw, unparsed time zone data for Pacific/Pohnpei,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_POHNPEI: &[u8] = raw_tzdata::PACIFIC_POHNPEI;

        /// Raw, unparsed time zone data for Pacific/Ponape,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PONAPE: &[u8] = raw_tzdata::PACIFIC_POHNPEI;

        /// Raw, unparsed time zone data for Pacific/Port_Moresby,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PORT_MORESBY: &[u8] = raw_tzdata::PACIFIC_PORT_MORESBY;

        /// Raw, unparsed time zone data for Pacific/Rarotonga,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_RAROTONGA: &[u8] = raw_tzdata::PACIFIC_RAROTONGA;

        /// Raw, unparsed time zone data for Pacific/Saipan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAIPAN: &[u8] = raw_tzdata::PACIFIC_SAIPAN;

        /// Raw, unparsed time zone data for Pacific/Samoa,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAMOA: &[u8] = raw_tzdata::PACIFIC_PAGO_PAGO;

        /// Raw, unparsed time zone data for Pacific/Tahiti,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TAHITI: &[u8] = raw_tzdata::PACIFIC_TAHITI;

        /// Raw, unparsed time zone data for Pacific/Tarawa,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TARAWA: &[u8] = raw_tzdata::PACIFIC_TARAWA;

        /// Raw, unparsed time zone data for Pacific/Tongatapu,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TONGATAPU: &[u8] = raw_tzdata::PACIFIC_TONGATAPU;

        /// Raw, unparsed time zone data for Pacific/Truk,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_TRUK: &[u8] = raw_tzdata::PACIFIC_CHUUK;

        /// Raw, unparsed time zone data for Pacific/Wake,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_WAKE: &[u8] = raw_tzdata::PACIFIC_WAKE;

        /// Raw, unparsed time zone data for Pacific/Wallis,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_WALLIS: &[u8] = raw_tzdata::PACIFIC_WALLIS;

        /// Raw, unparsed time zone data for Pacific/Yap,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_YAP: &[u8] = raw_tzdata::PACIFIC_CHUUK;
    }

    /// us
    pub mod us {
        use super::*;

        /// Time zone data for US/Alaska,
        pub const ALASKA: TimeZoneRef<'static> = tzdata::AMERICA_ANCHORAGE;

        /// Time zone data for US/Aleutian,
        pub const ALEUTIAN: TimeZoneRef<'static> = tzdata::AMERICA_ADAK;

        /// Time zone data for US/Arizona,
        pub const ARIZONA: TimeZoneRef<'static> = tzdata::AMERICA_PHOENIX;

        /// Time zone data for US/Central,
        pub const CENTRAL: TimeZoneRef<'static> = tzdata::AMERICA_CHICAGO;

        /// Time zone data for US/Eastern,
        pub const EASTERN: TimeZoneRef<'static> = tzdata::AMERICA_NEW_YORK;

        /// Time zone data for US/East-Indiana,
        pub const EAST_INDIANA: TimeZoneRef<'static> = tzdata::AMERICA_FORT_WAYNE;

        /// Time zone data for US/Hawaii,
        pub const HAWAII: TimeZoneRef<'static> = tzdata::PACIFIC_HONOLULU;

        /// Time zone data for US/Indiana-Starke,
        pub const INDIANA_STARKE: TimeZoneRef<'static> = tzdata::AMERICA_KNOX_IN;

        /// Time zone data for US/Michigan,
        pub const MICHIGAN: TimeZoneRef<'static> = tzdata::AMERICA_DETROIT;

        /// Time zone data for US/Mountain,
        pub const MOUNTAIN: TimeZoneRef<'static> = tzdata::NAVAJO;

        /// Time zone data for US/Pacific,
        pub const PACIFIC: TimeZoneRef<'static> = tzdata::AMERICA_LOS_ANGELES;

        /// Time zone data for US/Samoa,
        pub const SAMOA: TimeZoneRef<'static> = tzdata::PACIFIC_PAGO_PAGO;

        /// Raw, unparsed time zone data for US/Alaska,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ALASKA: &[u8] = raw_tzdata::AMERICA_ANCHORAGE;

        /// Raw, unparsed time zone data for US/Aleutian,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ALEUTIAN: &[u8] = raw_tzdata::AMERICA_ADAK;

        /// Raw, unparsed time zone data for US/Arizona,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_ARIZONA: &[u8] = raw_tzdata::AMERICA_PHOENIX;

        /// Raw, unparsed time zone data for US/Central,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_CENTRAL: &[u8] = raw_tzdata::AMERICA_CHICAGO;

        /// Raw, unparsed time zone data for US/Eastern,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EASTERN: &[u8] = raw_tzdata::AMERICA_NEW_YORK;

        /// Raw, unparsed time zone data for US/East-Indiana,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_EAST_INDIANA: &[u8] = raw_tzdata::AMERICA_FORT_WAYNE;

        /// Raw, unparsed time zone data for US/Hawaii,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_HAWAII: &[u8] = raw_tzdata::PACIFIC_HONOLULU;

        /// Raw, unparsed time zone data for US/Indiana-Starke,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_INDIANA_STARKE: &[u8] = raw_tzdata::AMERICA_KNOX_IN;

        /// Raw, unparsed time zone data for US/Michigan,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MICHIGAN: &[u8] = raw_tzdata::AMERICA_DETROIT;

        /// Raw, unparsed time zone data for US/Mountain,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_MOUNTAIN: &[u8] = raw_tzdata::NAVAJO;

        /// Raw, unparsed time zone data for US/Pacific,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_PACIFIC: &[u8] = raw_tzdata::AMERICA_LOS_ANGELES;

        /// Raw, unparsed time zone data for US/Samoa,
        #[cfg(feature = "binary")]
        #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
        pub const RAW_SAMOA: &[u8] = raw_tzdata::PACIFIC_PAGO_PAGO;
    }

    /// Time zone data for CET,
    pub const CET: TimeZoneRef<'static> = tzdata::CET;

    /// Time zone data for CST6CDT,
    pub const CST_6_CDT: TimeZoneRef<'static> = tzdata::CST_6_CDT;

    /// Time zone data for Cuba,
    pub const CUBA: TimeZoneRef<'static> = tzdata::CUBA;

    /// Time zone data for EET,
    pub const EET: TimeZoneRef<'static> = tzdata::EET;

    /// Time zone data for Egypt,
    pub const EGYPT: TimeZoneRef<'static> = tzdata::EGYPT;

    /// Time zone data for Eire,
    pub const EIRE: TimeZoneRef<'static> = tzdata::EIRE;

    /// Time zone data for EST,
    pub const EST: TimeZoneRef<'static> = tzdata::EST;

    /// Time zone data for EST5EDT,
    pub const EST_5_EDT: TimeZoneRef<'static> = tzdata::EST_5_EDT;

    /// Time zone data for Factory,
    pub const FACTORY: TimeZoneRef<'static> = tzdata::FACTORY;

    /// Time zone data for GB,
    pub const GB: TimeZoneRef<'static> = tzdata::GB;

    /// Time zone data for GB-Eire,
    pub const GB_EIRE: TimeZoneRef<'static> = tzdata::GB;

    /// Time zone data for GMT,
    pub const GMT: TimeZoneRef<'static> = tzdata::GMT;

    /// Time zone data for GMT0,
    pub const GMT_0: TimeZoneRef<'static> = tzdata::GMT;

    /// Time zone data for GMT-0,
    pub const GMT_MINUS_0: TimeZoneRef<'static> = tzdata::GMT;

    /// Time zone data for GMT+0,
    pub const GMT_PLUS_0: TimeZoneRef<'static> = tzdata::GMT;

    /// Time zone data for Greenwich,
    pub const GREENWICH: TimeZoneRef<'static> = tzdata::GMT;

    /// Time zone data for Hongkong,
    pub const HONGKONG: TimeZoneRef<'static> = tzdata::HONGKONG;

    /// Time zone data for HST,
    pub const HST: TimeZoneRef<'static> = tzdata::HST;

    /// Time zone data for Iceland,
    pub const ICELAND: TimeZoneRef<'static> = tzdata::ICELAND;

    /// Time zone data for Iran,
    pub const IRAN: TimeZoneRef<'static> = tzdata::IRAN;

    /// Time zone data for Israel,
    pub const ISRAEL: TimeZoneRef<'static> = tzdata::ISRAEL;

    /// Time zone data for Jamaica,
    pub const JAMAICA: TimeZoneRef<'static> = tzdata::JAMAICA;

    /// Time zone data for Japan,
    pub const JAPAN: TimeZoneRef<'static> = tzdata::JAPAN;

    /// Time zone data for Kwajalein,
    pub const KWAJALEIN: TimeZoneRef<'static> = tzdata::KWAJALEIN;

    /// Time zone data for Libya,
    pub const LIBYA: TimeZoneRef<'static> = tzdata::LIBYA;

    /// Time zone data for MET,
    pub const MET: TimeZoneRef<'static> = tzdata::MET;

    /// Time zone data for MST,
    pub const MST: TimeZoneRef<'static> = tzdata::MST;

    /// Time zone data for MST7MDT,
    pub const MST_7_MDT: TimeZoneRef<'static> = tzdata::MST_7_MDT;

    /// Time zone data for Navajo,
    pub const NAVAJO: TimeZoneRef<'static> = tzdata::NAVAJO;

    /// Time zone data for NZ,
    pub const NZ: TimeZoneRef<'static> = tzdata::NZ;

    /// Time zone data for NZ-CHAT,
    pub const NZ_CHAT: TimeZoneRef<'static> = tzdata::NZ_CHAT;

    /// Time zone data for Poland,
    pub const POLAND: TimeZoneRef<'static> = tzdata::POLAND;

    /// Time zone data for Portugal,
    pub const PORTUGAL: TimeZoneRef<'static> = tzdata::PORTUGAL;

    /// Time zone data for PRC,
    pub const PRC: TimeZoneRef<'static> = tzdata::PRC;

    /// Time zone data for PST8PDT,
    pub const PST_8_PDT: TimeZoneRef<'static> = tzdata::PST_8_PDT;

    /// Time zone data for ROC,
    pub const ROC: TimeZoneRef<'static> = tzdata::ROC;

    /// Time zone data for ROK,
    pub const ROK: TimeZoneRef<'static> = tzdata::ROK;

    /// Time zone data for Singapore,
    pub const SINGAPORE: TimeZoneRef<'static> = tzdata::SINGAPORE;

    /// Time zone data for Turkey,
    pub const TURKEY: TimeZoneRef<'static> = tzdata::TURKEY;

    /// Time zone data for UCT,
    pub const UCT: TimeZoneRef<'static> = tzdata::UCT;

    /// Time zone data for Universal,
    pub const UNIVERSAL: TimeZoneRef<'static> = tzdata::UCT;

    /// Time zone data for UTC,
    pub const UTC: TimeZoneRef<'static> = tzdata::UCT;

    /// Time zone data for WET,
    pub const WET: TimeZoneRef<'static> = tzdata::WET;

    /// Time zone data for W-SU,
    pub const W_SU: TimeZoneRef<'static> = tzdata::W_SU;

    /// Time zone data for Zulu,
    pub const ZULU: TimeZoneRef<'static> = tzdata::UCT;

    /// Raw, unparsed time zone data for CET,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_CET: &[u8] = raw_tzdata::CET;

    /// Raw, unparsed time zone data for CST6CDT,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_CST_6_CDT: &[u8] = raw_tzdata::CST_6_CDT;

    /// Raw, unparsed time zone data for Cuba,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_CUBA: &[u8] = raw_tzdata::CUBA;

    /// Raw, unparsed time zone data for EET,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_EET: &[u8] = raw_tzdata::EET;

    /// Raw, unparsed time zone data for Egypt,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_EGYPT: &[u8] = raw_tzdata::EGYPT;

    /// Raw, unparsed time zone data for Eire,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_EIRE: &[u8] = raw_tzdata::EIRE;

    /// Raw, unparsed time zone data for EST,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_EST: &[u8] = raw_tzdata::EST;

    /// Raw, unparsed time zone data for EST5EDT,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_EST_5_EDT: &[u8] = raw_tzdata::EST_5_EDT;

    /// Raw, unparsed time zone data for Factory,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_FACTORY: &[u8] = raw_tzdata::FACTORY;

    /// Raw, unparsed time zone data for GB,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_GB: &[u8] = raw_tzdata::GB;

    /// Raw, unparsed time zone data for GB-Eire,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_GB_EIRE: &[u8] = raw_tzdata::GB;

    /// Raw, unparsed time zone data for GMT,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_GMT: &[u8] = raw_tzdata::GMT;

    /// Raw, unparsed time zone data for GMT0,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_GMT_0: &[u8] = raw_tzdata::GMT;

    /// Raw, unparsed time zone data for GMT-0,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_GMT_MINUS_0: &[u8] = raw_tzdata::GMT;

    /// Raw, unparsed time zone data for GMT+0,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_GMT_PLUS_0: &[u8] = raw_tzdata::GMT;

    /// Raw, unparsed time zone data for Greenwich,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_GREENWICH: &[u8] = raw_tzdata::GMT;

    /// Raw, unparsed time zone data for Hongkong,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_HONGKONG: &[u8] = raw_tzdata::HONGKONG;

    /// Raw, unparsed time zone data for HST,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_HST: &[u8] = raw_tzdata::HST;

    /// Raw, unparsed time zone data for Iceland,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_ICELAND: &[u8] = raw_tzdata::ICELAND;

    /// Raw, unparsed time zone data for Iran,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_IRAN: &[u8] = raw_tzdata::IRAN;

    /// Raw, unparsed time zone data for Israel,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_ISRAEL: &[u8] = raw_tzdata::ISRAEL;

    /// Raw, unparsed time zone data for Jamaica,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_JAMAICA: &[u8] = raw_tzdata::JAMAICA;

    /// Raw, unparsed time zone data for Japan,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_JAPAN: &[u8] = raw_tzdata::JAPAN;

    /// Raw, unparsed time zone data for Kwajalein,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_KWAJALEIN: &[u8] = raw_tzdata::KWAJALEIN;

    /// Raw, unparsed time zone data for Libya,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_LIBYA: &[u8] = raw_tzdata::LIBYA;

    /// Raw, unparsed time zone data for MET,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_MET: &[u8] = raw_tzdata::MET;

    /// Raw, unparsed time zone data for MST,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_MST: &[u8] = raw_tzdata::MST;

    /// Raw, unparsed time zone data for MST7MDT,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_MST_7_MDT: &[u8] = raw_tzdata::MST_7_MDT;

    /// Raw, unparsed time zone data for Navajo,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_NAVAJO: &[u8] = raw_tzdata::NAVAJO;

    /// Raw, unparsed time zone data for NZ,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_NZ: &[u8] = raw_tzdata::NZ;

    /// Raw, unparsed time zone data for NZ-CHAT,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_NZ_CHAT: &[u8] = raw_tzdata::NZ_CHAT;

    /// Raw, unparsed time zone data for Poland,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_POLAND: &[u8] = raw_tzdata::POLAND;

    /// Raw, unparsed time zone data for Portugal,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_PORTUGAL: &[u8] = raw_tzdata::PORTUGAL;

    /// Raw, unparsed time zone data for PRC,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_PRC: &[u8] = raw_tzdata::PRC;

    /// Raw, unparsed time zone data for PST8PDT,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_PST_8_PDT: &[u8] = raw_tzdata::PST_8_PDT;

    /// Raw, unparsed time zone data for ROC,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_ROC: &[u8] = raw_tzdata::ROC;

    /// Raw, unparsed time zone data for ROK,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_ROK: &[u8] = raw_tzdata::ROK;

    /// Raw, unparsed time zone data for Singapore,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_SINGAPORE: &[u8] = raw_tzdata::SINGAPORE;

    /// Raw, unparsed time zone data for Turkey,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_TURKEY: &[u8] = raw_tzdata::TURKEY;

    /// Raw, unparsed time zone data for UCT,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_UCT: &[u8] = raw_tzdata::UCT;

    /// Raw, unparsed time zone data for Universal,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_UNIVERSAL: &[u8] = raw_tzdata::UCT;

    /// Raw, unparsed time zone data for UTC,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_UTC: &[u8] = raw_tzdata::UCT;

    /// Raw, unparsed time zone data for WET,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_WET: &[u8] = raw_tzdata::WET;

    /// Raw, unparsed time zone data for W-SU,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_W_SU: &[u8] = raw_tzdata::W_SU;

    /// Raw, unparsed time zone data for Zulu,
    #[cfg(feature = "binary")]
    #[cfg_attr(feature = "docsrs", doc(cfg(feature = "binary")))]
    pub const RAW_ZULU: &[u8] = raw_tzdata::UCT;
}

#[cfg(feature = "by-name")]
pub(crate) const TIME_ZONES_BY_NAME: phf::Map<Lower, &'static TimeZoneRef<'static>> = ::phf::Map {
    key: 12913932095322966823,
    disps: &[
        (0, 45),
        (0, 3),
        (0, 60),
        (0, 338),
        (0, 22),
        (0, 1),
        (0, 4),
        (1, 363),
        (0, 0),
        (0, 1),
        (1, 3),
        (0, 74),
        (3, 498),
        (0, 0),
        (0, 4),
        (0, 172),
        (0, 37),
        (0, 15),
        (0, 0),
        (0, 11),
        (0, 140),
        (4, 157),
        (0, 0),
        (0, 0),
        (0, 12),
        (0, 10),
        (0, 29),
        (0, 248),
        (0, 14),
        (0, 124),
        (0, 164),
        (0, 109),
        (0, 18),
        (0, 163),
        (0, 0),
        (0, 17),
        (1, 18),
        (0, 10),
        (2, 441),
        (1, 29),
        (0, 40),
        (0, 152),
        (0, 226),
        (0, 2),
        (0, 350),
        (0, 0),
        (0, 39),
        (4, 316),
        (0, 23),
        (0, 21),
        (0, 64),
        (0, 1),
        (0, 348),
        (0, 38),
        (8, 176),
        (2, 74),
        (2, 50),
        (0, 332),
        (9, 334),
        (0, 153),
        (1, 37),
        (0, 1),
        (0, 28),
        (3, 538),
        (0, 86),
        (0, 254),
        (5, 236),
        (5, 98),
        (3, 96),
        (0, 0),
        (0, 200),
        (1, 59),
        (17, 393),
        (4, 564),
        (1, 278),
        (0, 0),
        (1, 25),
        (18, 238),
        (11, 142),
        (12, 192),
        (0, 68),
        (0, 68),
        (0, 58),
        (0, 0),
        (0, 123),
        (6, 437),
        (19, 335),
        (0, 92),
        (0, 30),
        (0, 154),
        (4, 518),
        (0, 130),
        (0, 47),
        (1, 442),
        (2, 71),
        (0, 58),
        (35, 434),
        (0, 19),
        (0, 4),
        (0, 97),
        (1, 226),
        (9, 159),
        (0, 119),
        (7, 504),
        (0, 106),
        (82, 159),
        (0, 223),
        (6, 151),
        (1, 137),
        (0, 78),
        (0, 45),
        (4, 220),
        (1, 418),
        (0, 1),
        (0, 0),
    ],
    entries: &[
        (
            Lower([
                0x6f65732f61697361,
                0x2020202020206c75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ROK,
        ),
        (
            Lower([
                0x6564612f61697361,
                0x202020202020206e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_ADEN,
        ),
        (
            Lower([
                0x6b2f616369726661,
                0x206d756f74726168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_KHARTOUM,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020656669636572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_RECIFE,
        ),
        (
            Lower([
                0x662f616369726661,
                0x206e776f74656572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_FREETOWN,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x756873696461676f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_MOGADISHU,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20207a61707f616c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_LA_PAZ,
        ),
        (
            Lower([
                0x632f65706f727565,
                0x2075616e69736968,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_CHISINAU,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x206169766f726e6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_MONROVIA,
        ),
        (
            Lower([
                0x766f6e2f61697361,
                0x7374656e7a756b6f,
                0x202020202020206b,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_NOVOKUZNETSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6f69636e757361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ASUNCION,
        ),
        (
            Lower([
                0x30746d672f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x69727f6174736f63,
                0x2020202020206163,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_COSTA_RICA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61732d636e616c62,
                0x202020206e6f6c62,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BLANC_SABLON,
        ),
        (
            Lower([
                0x6b2f65706f727565,
                0x72676e696e696c61,
                0x2020202020206461,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_KALININGRAD,
        ),
        (
            Lower([
                0x2d747361652f7375,
                0x20616e6169646e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_FORT_WAYNE,
        ),
        (
            Lower([
                0x77756b2f61697361,
                0x2020202020746961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KUWAIT,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x7473657261686375,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BUCHAREST,
        ),
        (
            Lower([
                0x63756b2f61697361,
                0x20202020676e6968,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KUCHING,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20746174756b6179,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_YAKUTAT,
        ),
        (
            Lower([
                0x7572622f61697361,
                0x202020202069656e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_BRUNEI,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202075617373616e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_NASSAU,
        ),
        (
            Lower([
                0x632f616369726661,
                0x202079726b616e6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_CONAKRY,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61627f65736f6f67,
                0x2020202020202079,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GOOSE_BAY,
        ),
        (
            Lower([
                0x6e2f616369726661,
                0x20616e656d616a64,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_NDJAMENA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e69617567617261,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ARAGUAINA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x697f6e696b6e6172,
                0x2020202074656c6e,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_RANKIN_INLET,
        ),
        (
            Lower([
                0x746e756f6d2f7375,
                0x20202020206e6961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::NAVAJO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x73697f61746e6173,
                0x202020206c656261,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SANTA_ISABEL,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202035,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_5,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x61636c6164617567,
                0x20202020206c616e,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_GUADALCANAL,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x65767f657061632f,
                0x2020202020656472,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_CAPE_VERDE,
        ),
        (
            Lower([
                0x2020202020207a6e,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::NZ,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6f647f6f746e6173,
                0x2020206f676e696d,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SANTO_DOMINGO,
        ),
        (
            Lower([
                0x73756d2f61697361,
                0x2020202020746163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_MUSCAT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2d75612d74726f70,
                0x202065636e697270,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PORT_AU_PRINCE,
        ),
        (
            Lower([
                0x6873612f61697361,
                0x202064616261686b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_ASHGABAT,
        ),
        (
            Lower([
                0x6c61677574726f70,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PORTUGAL,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e616c74617a616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MAZATLAN,
        ),
        (
            Lower([
                0x6361642f61697361,
                0x2020202020206163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_DACCA,
        ),
        (
            Lower([
                0x2074647038747370,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PST_8_PDT,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202035,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_5,
        ),
        (
            Lower([
                0x6b2f65706f727565,
                0x20202020766f7269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_KIROV,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020657a696c6562,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BELIZE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x69656c616a61776b,
                0x202020202020206e,
                0x2020202020202020,
            ]),
            &tzdata::KWAJALEIN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x616c6c6975676e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ANGUILLA,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x202020207a756461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_VADUZ,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20202020616b7461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ADAK,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x76616c7369746172,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BRATISLAVA,
        ),
        (
            Lower([
                0x6e61682f61697361,
                0x202020202020696f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_HANOI,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020617761726174,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_TARAWA,
        ),
        (
            Lower([
                0x2020202020746565,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EET,
        ),
        (
            Lower([
                0x742f616369726661,
                0x2020202073696e75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_TUNIS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6164616e65736e65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ENSENADA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20202079756a756a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_JUJUY,
        ),
        (
            Lower([
                0x6d2f6164616e6163,
                0x206e6961746e756f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_EDMONTON,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6e616d7361742f61,
                0x2020202020206169,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_HOBART,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20207375616e616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MANAUS,
        ),
        (
            Lower([
                0x7471612f61697361,
                0x202020202065626f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_AQTOBE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6f726f6d6174616d,
                0x2020202020202073,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MATAMOROS,
        ),
        (
            Lower([
                0x2020202030746d67,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x632f6164616e6163,
                0x20206c6172746e65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_WINNIPEG,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6163696e696d6f64,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_DOMINICA,
        ),
        (
            Lower([
                0x69617761682f7375,
                0x2020202020202069,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_HONOLULU,
        ),
        (
            Lower([
                0x642f616369726661,
                0x202020616c61756f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_DOUALA,
        ),
        (
            Lower([
                0x69656c616a61776b,
                0x202020202020206e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::KWAJALEIN,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x616d69746972696b,
                0x2020202020206974,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_KIRITIMATI,
        ),
        (
            Lower([
                0x702f65706f727565,
                0x2020206575676172,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BRATISLAVA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x68747261627f7473,
                0x202020796d656c65,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MARIGOT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616261697563,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CUIABA,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x646172676f676c6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_VOLGOGRAD,
        ),
        (
            Lower([
                0x792f6164616e6163,
                0x202020206e6f6b75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_WHITEHORSE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x6761707f6f676170,
                0x202020202020206f,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_PAGO_PAGO,
        ),
        (
            Lower([
                0x696c617274737561,
                0x756f626c656d2f61,
                0x2020202020656e72,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_MELBOURNE,
        ),
        (
            Lower([
                0x692f65706f727565,
                0x6d7f666f7f656c73,
                0x2020202020206e61,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ISLE_OF_MAN,
        ),
        (
            Lower([
                0x612f65706f727565,
                0x20206172726f646e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ANDORRA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x207469756c617169,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_IQALUIT,
        ),
        (
            Lower([
                0x696c617274737561,
                0x2020207463612f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_ACT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616d616e6170,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PANAMA,
        ),
        (
            Lower([
                0x2074646535747365,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EST_5_EDT,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202033,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_3,
        ),
        (
            Lower([
                0x6968742f61697361,
                0x202020207568706d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_THIMBU,
        ),
        (
            Lower([
                0x6b61792f61697361,
                0x202020206b737475,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_YAKUTSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2073616361726163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CARACAS,
        ),
        (
            Lower([
                0x20657269652d6267,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GB,
        ),
        (
            Lower([
                0x736f712f61697361,
                0x20202079616e6174,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_QOSTANAY,
        ),
        (
            Lower([
                0x696c617274737561,
                0x206874726f6e2f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_DARWIN,
        ),
        (
            Lower([
                0x2020202061627563,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::CUBA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x65676e617f736f6c,
                0x202020202073656c,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_LOS_ANGELES,
        ),
        (
            Lower([
                0x7969722f61697361,
                0x2020202020686461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_RIYADH,
        ),
        (
            Lower([
                0x7261622f61697361,
                0x202020206c75616e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_BARNAUL,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2074696f72746564,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_DETROIT,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020206b757274,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_CHUUK,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x2020202020656d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_LOME,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6167696375676574,
                0x202020202061706c,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_TEGUCIGALPA,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x756c756c6f6e6f68,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_HONOLULU,
        ),
        (
            Lower([
                0x72656a2f61697361,
                0x20206d656c617375,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ISRAEL,
        ),
        (
            Lower([
                0x6c6f6b2f61697361,
                0x202020206174616b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_CALCUTTA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x756f6c6564617567,
                0x2020202020206570,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GUADELOUPE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7568617568696863,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CHIHUAHUA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x676570696e6e6977,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_WINNIPEG,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202037,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_7,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x69727f796e696172,
                0x2020202020726576,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_RAINY_RIVER,
        ),
        (
            Lower([
                0x672f6f636978656d,
                0x20206c6172656e65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MEXICO_CITY,
        ),
        (
            Lower([
                0x696c617274737561,
                0x20202069686c2f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_LHI,
        ),
        (
            Lower([
                0x2020202020637270,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PRC,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c69767369756f6c,
                0x202020202020656c,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_LOUISVILLE,
        ),
        (
            Lower([
                0x6861622f61697361,
                0x202020206e696172,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_BAHRAIN,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202031,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_1,
        ),
        (
            Lower([
                0x2074646d3774736d,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::MST_7_MDT,
        ),
        (
            Lower([
                0x622f616369726661,
                0x2020206c756a6e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_BANJUL,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20206e6170696173,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_SAIPAN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2061686e6f726f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_NORONHA,
        ),
        (
            Lower([
                0x672f65706f727565,
                0x207965736e726575,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_GUERNSEY,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6f6c657571696d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MIQUELON,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020206574616665,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_EFATE,
        ),
        (
            Lower([
                0x632f6e6169646e69,
                0x20202020736f636f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_COCOS,
        ),
        (
            Lower([
                0x6569762f61697361,
                0x2020656e6169746e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_VIENTIANE,
        ),
        (
            Lower([
                0x7261682f61697361,
                0x20202020206e6962,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_HARBIN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020206162757261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ARUBA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x637f6e6f73776164,
                0x202020206b656572,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_DAWSON_CREEK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x726f6d7f74726f70,
                0x2020202079627365,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_PORT_MORESBY,
        ),
        (
            Lower([
                0x7974612f61697361,
                0x2020202020756172,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_ATYRAU,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020656172736f6b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_KOSRAE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x72707f7265776f6c,
                0x2020207365636e69,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CURACAO,
        ),
        (
            Lower([
                0x202020202074736d,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::MST,
        ),
        (
            Lower([
                0x732f616369726661,
                0x20656d6f747f6f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_SAO_TOME,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20656e6e65796163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CAYENNE,
        ),
        (
            Lower([
                0x616e612f61697361,
                0x2020202020727964,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_ANADYR,
        ),
        (
            Lower([
                0x772f65706f727565,
                0x2020207761737261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::POLAND,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202061656d756f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_NOUMEA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7f7265646e756874,
                0x2020202020796162,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_THUNDER_BAY,
        ),
        (
            Lower([
                0x6b61732f61697361,
                0x2020206e696c6168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_SAKHALIN,
        ),
        (
            Lower([
                0x676e6f6b676e6f68,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::HONGKONG,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x63617f6f74726f70,
                0x2020202020206572,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PORTO_ACRE,
        ),
        (
            Lower([
                0x61726f2f61697361,
                0x202020202020206c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_ORAL,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x2020206172616d61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_SAMARA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6b776f6c6c6579,
                0x2020202020656669,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_YELLOWKNIFE,
        ),
        (
            Lower([
                0x67616d2f61697361,
                0x202020206e616461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_MAGADAN,
        ),
        (
            Lower([
                0x6e6f702f61697361,
                0x20206b616e616974,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_PONTIANAK,
        ),
        (
            Lower([
                0x696c617274737561,
                0x776f636e61792f61,
                0x20202020616e6e69,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_BROKEN_HILL,
        ),
        (
            Lower([
                0x696c617274737561,
                0x736e656575712f61,
                0x20202020646e616c,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_BRISBANE,
        ),
        (
            Lower([
                0x6d616b2f61697361,
                0x2020616b74616863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KAMCHATKA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202061646972656d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MERIDA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206f696563616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MACEIO,
        ),
        (
            Lower([
                0x766f682f61697361,
                0x2020202020202064,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_HOVD,
        ),
        (
            Lower([
                0x612f65706f727565,
                0x202020736e656874,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ATHENS,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x206d616874616863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::NZ_CHAT,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202073696c6c6177,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_WALLIS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206e75636e6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CANCUN,
        ),
        (
            Lower([
                0x616c752f61697361,
                0x7261746161626e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_ULAANBAATAR,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6d657261746e6173,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SANTAREM,
        ),
        (
            Lower([
                0x7473752f61697361,
                0x2020206172656e2d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_UST_NERA,
        ),
        (
            Lower([
                0x6e6f682f61697361,
                0x2020676e6f6b7f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::HONGKONG,
        ),
        (
            Lower([
                0x696c617274737561,
                0x69616c6564612f61,
                0x2020202020206564,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_ADELAIDE,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x757163616d2f6163,
                0x2020202065697261,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_MACQUARIE,
        ),
        (
            Lower([
                0x2020202020746563,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::CET,
        ),
        (
            Lower([
                0x6f2f65706f727565,
                0x20202020206f6c73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ARCTIC_LONGYEARBYEN,
        ),
        (
            Lower([
                0x202079656b727574,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::TURKEY,
        ),
        (
            Lower([
                0x2020202020746577,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::WET,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x2020656f7261662f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_FAEROE,
        ),
        (
            Lower([
                0x7473692f61697361,
                0x2020206c75626e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::TURKEY,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x79616d7f6e616a2f,
                0x2020202020206e65,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_JAN_MAYEN,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20206f72756a616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_MAJURO,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6162736972622f61,
                0x202020202020656e,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_BRISBANE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202061746f676f62,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BOGOTA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020206169686162,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BAHIA,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x6f676170616c6167,
                0x2020202020202073,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_GALAPAGOS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20616369616d616a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::JAMAICA,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x2020206f63616e6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_MONACO,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202038,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_8,
        ),
        (
            Lower([
                0x702f65706f727565,
                0x2020202073697261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_PARIS,
        ),
        (
            Lower([
                0x6c2f636974637261,
                0x6272616579676e6f,
                0x20202020206e6579,
                0x2020202020202020,
            ]),
            &tzdata::ARCTIC_LONGYEARBYEN,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203131,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_11,
        ),
        (
            Lower([
                0x6275642f61697361,
                0x2020202020206961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_DUBAI,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206f616361727563,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CURACAO,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20206570616e6f70,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_POHNPEI,
        ),
        (
            Lower([
                0x612f616369726661,
                0x2020202061726363,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_ACCRA,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x2020206469726461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_MADRID,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206e6967726976,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ST_THOMAS,
        ),
        (
            Lower([
                0x6c2f65706f727565,
                0x616e616a6c62756a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_LJUBLJANA,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202032,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_2,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206e697f786f6e6b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_KNOX_IN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6761726f68636e61,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ANCHORAGE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020202061697061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_APIA,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x766e696167756f62,
                0x20202020656c6c69,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_BOUGAINVILLE,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x2020207572657361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_MASERU,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616e61797567,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GUYANA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2061626f64726f63,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CORDOBA,
        ),
        (
            Lower([
                0x2020646e616c6f70,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::POLAND,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6b726f797f77656e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_NEW_YORK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2061756769746e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ANTIGUA,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202032,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_2,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x616d6f68747f7473,
                0x2020202020202073,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ST_THOMAS,
        ),
        (
            Lower([
                0x632f616369726661,
                0x2020202061747565,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_CEUTA,
        ),
        (
            Lower([
                0x766f6e2f61697361,
                0x6b7372696269736f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_NOVOSIBIRSK,
        ),
        (
            Lower([
                0x6b2f616369726661,
                0x2020616c61706d61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_KAMPALA,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x2020206e696c7265,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BERLIN,
        ),
        (
            Lower([
                0x6b616d2f61697361,
                0x2020207261737361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_MAKASSAR,
        ),
        (
            Lower([
                0x73616b2f61697361,
                0x2020202072616768,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KASHGAR,
        ),
        (
            Lower([
                0x6e68702f61697361,
                0x20686e65707f6d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_PHNOM_PENH,
        ),
        (
            Lower([
                0x2020202075732d77,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::W_SU,
        ),
        (
            Lower([
                0x61636f6c2f637465,
                0x202020656d69746c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x7a79712f61697361,
                0x20206164726f6c79,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_QYZYLORDA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206f676163696863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CHICAGO,
        ),
        (
            Lower([
                0x61652f656c696863,
                0x616c736972657473,
                0x202020202020646e,
                0x2020202020202020,
            ]),
            &tzdata::CHILE_EASTER_ISLAND,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x20656f726561662f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_FAEROE,
        ),
        (
            Lower([
                0x6761622f61697361,
                0x2020202064616468,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_BAGHDAD,
        ),
        (
            Lower([
                0x6169646e692f7375,
                0x6b726174732d616e,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_KNOX_IN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e616b6f6b697461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ATIKOKAN,
        ),
        (
            Lower([
                0x61726b2f61697361,
                0x6b737261796f6e73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KRASNOYARSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x72726573746e6f6d,
                0x2020202020207461,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MONTSERRAT,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x73697661642f6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_DAVIS,
        ),
        (
            Lower([
                0x6e69732f61697361,
                0x202065726f706167,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::SINGAPORE,
        ),
        (
            Lower([
                0x616c762f61697361,
                0x6b6f74736f766964,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_VLADIVOSTOK,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202030,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x6164756d7265622f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_BERMUDA,
        ),
        (
            Lower([
                0x6b61622f61697361,
                0x2020202020202075,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_BAKU,
        ),
        (
            Lower([
                0x6d2f6e6169646e69,
                0x20206574746f7961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_MAYOTTE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6570656e75726965,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_EIRUNEPE,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x20736c6573737572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BRUSSELS,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20202020656b6177,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_WAKE,
        ),
        (
            Lower([
                0x692f65706f727565,
                0x206c75626e617473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::TURKEY,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6874756f732f6163,
                0x202020656c6f707f,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_MC_MURDO,
        ),
        (
            Lower([
                0x696c617274737561,
                0x2020747365772f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_PERTH,
        ),
        (
            Lower([
                0x6e2f616369726661,
                0x746f68636b61756f,
                0x2020202020202074,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_NOUAKCHOTT,
        ),
        (
            Lower([
                0x6b6f742f61697361,
                0x2020202020206f79,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::JAPAN,
        ),
        (
            Lower([
                0x6f68632f61697361,
                0x2020676e6971676e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_CHONGQING,
        ),
        (
            Lower([
                0x652f616369726661,
                0x206e756961617f6c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_EL_AAIUN,
        ),
        (
            Lower([
                0x6d61642f61697361,
                0x2020207375637361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_DAMASCUS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61627f6169686162,
                0x202073617265646e,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BAHIA_BANDERAS,
        ),
        (
            Lower([
                0x6b65792f61697361,
                0x75626e6972657461,
                0x2020202020206772,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_YEKATERINBURG,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x202020206169666f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_SOFIA,
        ),
        (
            Lower([
                0x20646e616c656369,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ICELAND,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x736b72616d6e6164,
                0x202020206e766168,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_DANMARKSHAVN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c616d6574617567,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GUATEMALA,
        ),
        (
            Lower([
                0x20746168632d7a6e,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::NZ_CHAT,
        ),
        (
            Lower([
                0x6962742f61697361,
                0x202020206973696c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_TBILISI,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x20207375696e6c69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_VILNIUS,
        ),
        (
            Lower([
                0x632f6e6169646e69,
                0x2020206f726f6d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_COMORO,
        ),
        (
            Lower([
                0x6c2f65706f727565,
                0x2020206e6f646e6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GB,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x677f6874756f732f,
                0x2020616967726f65,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_SOUTH_GEORGIA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206e6f74636e6f6d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MONCTON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20786166696c6168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_HALIFAX,
        ),
        (
            Lower([
                0x6e2f616369726661,
                0x202069626f726961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_NAIROBI,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61766c61737f6c65,
                0x2020202020726f64,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_EL_SALVADOR,
        ),
        (
            Lower([
                0x7265792f61697361,
                0x202020206e617665,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_YEREVAN,
        ),
        (
            Lower([
                0x2020202020746d67,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x69747566616e7566,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_FUNAFUTI,
        ),
        (
            Lower([
                0x6873612f61697361,
                0x2020207461626167,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_ASHGABAT,
        ),
        (
            Lower([
                0x20206c6561727369,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ISRAEL,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20207265766e6564,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::NAVAJO,
        ),
        (
            Lower([
                0x2020202020747368,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::HST,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020206d656c6562,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BELEM,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616e61766168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::CUBA,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6e656b6f72622f61,
                0x2020206c6c69687f,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_BROKEN_HILL,
        ),
        (
            Lower([
                0x65747361652f7375,
                0x2020202020206e72,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_NEW_YORK,
        ),
        (
            Lower([
                0x63616d2f61697361,
                0x2020202020206f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_MACAO,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202037,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_7,
        ),
        (
            Lower([
                0x616f6d61732f7375,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_PAGO_PAGO,
        ),
        (
            Lower([
                0x612f616369726661,
                0x6162617f73696464,
                0x2020202020206162,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_ADDIS_ABABA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7961777f74726f66,
                0x202020202020656e,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_FORT_WAYNE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x206f666f616b6166,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_FAKAOFO,
        ),
        (
            Lower([
                0x642f6c697a617262,
                0x61686e6f726f6e65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_NORONHA,
        ),
        (
            Lower([
                0x612f6c697a617262,
                0x2020202020657263,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PORTO_ACRE,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x20202020736f6761,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_LAGOS,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020206d617567,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_GUAM,
        ),
        (
            Lower([
                0x632f65706f727565,
                0x656761686e65706f,
                0x202020202020206e,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_COPENHAGEN,
        ),
        (
            Lower([
                0x74616b2f61697361,
                0x20202075646e616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KATHMANDU,
        ),
        (
            Lower([
                0x207463752f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::UCT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x637f6f636978656d,
                0x2020202020797469,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MEXICO_CITY,
        ),
        (
            Lower([
                0x6d6c612f61697361,
                0x2020202020797461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_ALMATY,
        ),
        (
            Lower([
                0x702f6164616e6163,
                0x2020636966696361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_VANCOUVER,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202020206b75756e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GODTHAB,
        ),
        (
            Lower([
                0x6c2f65706f727565,
                0x72756f626d657875,
                0x2020202020202067,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_LUXEMBOURG,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x656c65687f74732f,
                0x202020202020616e,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_ST_HELENA,
        ),
        (
            Lower([
                0x6b72692f61697361,
                0x202020206b737475,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_IRKUTSK,
        ),
        (
            Lower([
                0x642f616369726661,
                0x206974756f62696a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_DJIBOUTI,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6372616d61746163,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CATAMARCA,
        ),
        (
            Lower([
                0x6e2f616369726661,
                0x20202079656d6169,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_NIAMEY,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x206e65676e697375,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BUSINGEN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x737474696b7f7473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ST_KITTS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x69646e656c61726b,
                0x2020202020206b6a,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CURACAO,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x687361626d756275,
                0x2020202020202069,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_LUBUMBASHI,
        ),
        (
            Lower([
                0x622f6f636978656d,
                0x6574726f6e616a61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SANTA_ISABEL,
        ),
        (
            Lower([
                0x2020202065726965,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EIRE,
        ),
        (
            Lower([
                0x722f65706f727565,
                0x2020202020616769,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_RIGA,
        ),
        (
            Lower([
                0x61686b2f61697361,
                0x202020616779646e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KHANDYGA,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x207972616e61632f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_CANARY,
        ),
        (
            Lower([
                0x20616369616d616a,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::JAMAICA,
        ),
        (
            Lower([
                0x6b2f65706f727565,
                0x2020202020766569,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_KIEV,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7472696e676e6170,
                0x2020202020676e75,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PANGNIRTUNG,
        ),
        (
            Lower([
                0x632f6e6169646e69,
                0x202020736f676168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_CHAGOS,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020203231,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_12,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x6e6d616865697261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_HELSINKI,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6f7377616d2f6163,
                0x202020202020206e,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_MAWSON,
        ),
        (
            Lower([
                0x682f616369726661,
                0x2020206572617261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_HARARE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6574756c6f736572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_RESOLUTE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x6e6f74736e686f6a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::HST,
        ),
        (
            Lower([
                0x202020302d746d67,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x696c617274737561,
                0x7265626e61632f61,
                0x2020202020206172,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_ACT,
        ),
        (
            Lower([
                0x7369622f61697361,
                0x202020206b656b68,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_BISHKEK,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6e6f6d75642f6163,
                0x6c6c697672756474,
                0x2020202020202065,
            ]),
            &tzdata::ANTARCTICA_DUMONT_D_URVILLE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6576756f636e6176,
                0x2020202020202072,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_VANCOUVER,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c616572746e6f6d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MONTREAL,
        ),
        (
            Lower([
                0x6168642f61697361,
                0x202020202020616b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_DACCA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c69736f6d726568,
                0x2020202020206f6c,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_HERMOSILLO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2062616874646f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GODTHAB,
        ),
        (
            Lower([
                0x6b616a2f61697361,
                0x2020202061747261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_JAKARTA,
        ),
        (
            Lower([
                0x612f616369726661,
                0x2020206172616d73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_ASMARA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x72617f61746e7570,
                0x2020202073616e65,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PUNTA_ARENAS,
        ),
        (
            Lower([
                0x736d6f2f61697361,
                0x202020202020206b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_OMSK,
        ),
        (
            Lower([
                0x7461712f61697361,
                0x2020202020207261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_QATAR,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202038,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_8,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206e6f7473657263,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CRESTON,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202039,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_9,
        ),
        (
            Lower([
                0x612f65706f727565,
                0x6d6164726574736d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_AMSTERDAM,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c7561707f6f6173,
                0x202020202020206f,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SAO_PAULO,
        ),
        (
            Lower([
                0x6572732f61697361,
                0x6d796c6f6b656e64,
                0x2020202020206b73,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_SREDNEKOLYMSK,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203231,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_12,
        ),
        (
            Lower([
                0x656572672f637465,
                0x202020686369776e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x72677f6f706d6163,
                0x2020202065646e61,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CAMPO_GRANDE,
        ),
        (
            Lower([
                0x6e616d2f61697361,
                0x2020202020616c69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_MANILA,
        ),
        (
            Lower([
                0x696c617274737561,
                0x20202077736e2f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_ACT,
        ),
        (
            Lower([
                0x682f65706f727565,
                0x20696b6e69736c65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_HELSINKI,
        ),
        (
            Lower([
                0x6d6f742f61697361,
                0x2020202020206b73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_TOMSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x65767f6f74726f70,
                0x20202020206f686c,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PORTO_VELHO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61627f6563616c67,
                0x2020202020202079,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GLACE_BAY,
        ),
        (
            Lower([
                0x632f616369726661,
                0x202020206f726961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EGYPT,
        ),
        (
            Lower([
                0x696863696d2f7375,
                0x20202020206e6167,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_DETROIT,
        ),
        (
            Lower([
                0x6f7a6972612f7375,
                0x202020202020616e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PHOENIX,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202020656c756874,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_THULE,
        ),
        (
            Lower([
                0x612f616369726661,
                0x20206e616a646962,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_ABIDJAN,
        ),
        (
            Lower([
                0x206374752f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::UCT,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x79657361632f6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_CASEY,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x79656c6e6174732f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_STANLEY,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6e69777261642f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_DARWIN,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x20206e6163697461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ROME,
        ),
        (
            Lower([
                0x6c2f65706f727565,
                0x2020206e6f627369,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PORTUGAL,
        ),
        (
            Lower([
                0x6f2f616369726661,
                0x67756f6461676175,
                0x202020202020756f,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_OUAGADOUGOU,
        ),
        (
            Lower([
                0x6f68632f61697361,
                0x206e61736c616269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_CHOIBALSAN,
        ),
        (
            Lower([
                0x6c65742f61697361,
                0x202020766976617f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_TEL_AVIV,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206e616d796163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CAYMAN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x70616e6169646e69,
                0x2020202073696c6f,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_FORT_WAYNE,
        ),
        (
            Lower([
                0x7a2f65706f727565,
                0x2020206265726761,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ZAGREB,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20617a6f646e656d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MENDOZA,
        ),
        (
            Lower([
                0x6c69642f61697361,
                0x2020202020202069,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_DILI,
        ),
        (
            Lower([
                0x6d6d612f61697361,
                0x2020202020206e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_AMMAN,
        ),
        (
            Lower([
                0x7f6f682f61697361,
                0x686e696d7f696863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_HO_CHI_MINH,
        ),
        (
            Lower([
                0x2020202020747365,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EST,
        ),
        (
            Lower([
                0x7375642f61697361,
                0x20202065626e6168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_DUSHANBE,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6569727275632f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_CURRIE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20202020616d696c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_LIMA,
        ),
        (
            Lower([
                0x72746e65632f7375,
                0x2020202020206c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CHICAGO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61687f6c61726f63,
                0x20202072756f6272,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CORAL_HARBOUR,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x2020202061746c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_MALTA,
        ),
        (
            Lower([
                0x732f6164616e6163,
                0x65686374616b7361,
                0x20202020206e6177,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_REGINA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20207561656e756a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_JUNEAU,
        ),
        (
            Lower([
                0x20746d672f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x65727265746e6f6d,
                0x2020202020202079,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MONTERREY,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203431,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_14,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x6e6972616d7f6e61,
                0x202020202020206f,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ROME,
        ),
        (
            Lower([
                0x2020207470796765,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EGYPT,
        ),
        (
            Lower([
                0x696c617274737561,
                0x79656e6479732f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_ACT,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x6172696564616d2f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_MADEIRA,
        ),
        (
            Lower([
                0x696c617274737561,
                0x2068747265702f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_PERTH,
        ),
        (
            Lower([
                0x6965622f61697361,
                0x2020202020747572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_BEIRUT,
        ),
        (
            Lower([
                0x6b2f616369726661,
                0x2061736168736e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_KINSHASA,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020206575696e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_NIUE,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x2074736570616475,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BUDAPEST,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x676e6f746f726172,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_RAROTONGA,
        ),
        (
            Lower([
                0x742f616369726661,
                0x2020696c6f706972,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::LIBYA,
        ),
        (
            Lower([
                0x6a2f65706f727565,
                0x2020207965737265,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_JERSEY,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20746f676972616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MARIGOT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x616963756c7f7473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ST_LUCIA,
        ),
        (
            Lower([
                0x202020206e617269,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::IRAN,
        ),
        (
            Lower([
                0x6961742f61697361,
                0x2020202020696570,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ROC,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x202020616b617375,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_LUSAKA,
        ),
        (
            Lower([
                0x6d2f6e6169646e69,
                0x2020202020656861,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_MAHE,
        ),
        (
            Lower([
                0x696c617274737561,
                0x20616c6375652f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_EUCLA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202020206b616461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ADAK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7f666f7f74726f70,
                0x2020206e69617073,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MARIGOT,
        ),
        (
            Lower([
                0x62616b2f61697361,
                0x2020202020206c75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KABUL,
        ),
        (
            Lower([
                0x63616d2f61697361,
                0x2020202020207561,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_MACAO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20616e61756a6974,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SANTA_ISABEL,
        ),
        (
            Lower([
                0x702f616369726661,
                0x766f6e2d6f74726f,
                0x202020202020206f,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_PORTO_NOVO,
        ),
        (
            Lower([
                0x6168732f61697361,
                0x202020696168676e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PRC,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x6c6c697665726269,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_LIBREVILLE,
        ),
        (
            Lower([
                0x742f65706f727565,
                0x202020656e617269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_TIRANE,
        ),
        (
            Lower([
                0x7a2f65706f727565,
                0x2020206863697275,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BUSINGEN,
        ),
        (
            Lower([
                0x612f616369726661,
                0x202073726569676c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_ALGIERS,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x6f706f7265666d69,
                0x202020202020206c,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_SIMFEROPOL,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x617365757172616d,
                0x2020202020202073,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_MARQUESAS,
        ),
        (
            Lower([
                0x622f616369726661,
                0x2020206f6b616d61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_BAMAKO,
        ),
        (
            Lower([
                0x696c617274737561,
                0x687f64726f6c2f61,
                0x202020202065776f,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_LHI,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x2020206f62616c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_MALABO,
        ),
        (
            Lower([
                0x6e2f6164616e6163,
                0x6c646e756f667765,
                0x2020202020646e61,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ST_JOHNS,
        ),
        (
            Lower([
                0x7475656c612f7375,
                0x20202020206e6169,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ADAK,
        ),
        (
            Lower([
                0x672f65706f727565,
                0x7261746c61726269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_GIBRALTAR,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6f74736f762f6163,
                0x202020202020206b,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_VOSTOK,
        ),
        (
            Lower([
                0x642f616369726661,
                0x61737f73657f7261,
                0x202020206d61616c,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_DAR_ES_SALAAM,
        ),
        (
            Lower([
                0x63696e2f61697361,
                0x202020206169736f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_NICOSIA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6975716179617567,
                0x202020202020206c,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GUAYAQUIL,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206167616e696a6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_OJINAGA,
        ),
        (
            Lower([
                0x2020202020746375,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::UCT,
        ),
        (
            Lower([
                0x6b2f616369726661,
                0x202020696c616769,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_KIGALI,
        ),
        (
            Lower([
                0x6b2f6e6169646e69,
                0x6e656c6575677265,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_KERGUELEN,
        ),
        (
            Lower([
                0x672f616369726661,
                0x20656e6f726f6261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_GABORONE,
        ),
        (
            Lower([
                0x696c617274737561,
                0x206874756f732f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_ADELAIDE,
        ),
        (
            Lower([
                0x756a752f61697361,
                0x61646e61707f676e,
                0x202020202020676e,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_MAKASSAR,
        ),
        (
            Lower([
                0x6961732f61697361,
                0x20202020206e6f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_HO_CHI_MINH,
        ),
        (
            Lower([
                0x642f65706f727565,
                0x2020206e696c6275,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EIRE,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6c6c6f72742f6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_TROLL,
        ),
        (
            Lower([
                0x612f6e6169646e69,
                0x72616e616e61746e,
                0x20202020206f7669,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_ANTANANARIVO,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020757275616e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_NAURU,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202036,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_6,
        ),
        (
            Lower([
                0x612f6164616e6163,
                0x206369746e616c74,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_HALIFAX,
        ),
        (
            Lower([
                0x6173726576696e75,
                0x202020202020206c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::UCT,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x2065646172676c65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BELGRADE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020202020706179,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_CHUUK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20726569626d6167,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_GAMBIER,
        ),
        (
            Lower([
                0x772f6c697a617262,
                0x2020202020747365,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MANAUS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206e6f676970696e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_NIPIGON,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x2020766f74617261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_SARATOV,
        ),
        (
            Lower([
                0x726f7061676e6973,
                0x2020202020202065,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::SINGAPORE,
        ),
        (
            Lower([
                0x6d61662f61697361,
                0x2020617473756761,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_FAMAGUSTA,
        ),
        (
            Lower([
                0x652f6c697a617262,
                0x2020202020747361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SAO_PAULO,
        ),
        (
            Lower([
                0x612f65706f727565,
                0x6e61686b61727473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ASTRAKHAN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x726f686574696877,
                0x2020202020206573,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_WHITEHORSE,
        ),
        (
            Lower([
                0x622f616369726661,
                0x2020207561737369,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_BISSAU,
        ),
        (
            Lower([
                0x6c6f632f61697361,
                0x202020206f626d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_COLOMBO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6f676169746e6173,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SANTIAGO,
        ),
        (
            Lower([
                0x6b73616c612f7375,
                0x2020202020202061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ANCHORAGE,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x207365726f7a612f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_AZORES,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x202020206b736e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_MINSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x67646972626d6163,
                0x2020207961627f65,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_CAMBRIDGE_BAY,
        ),
        (
            Lower([
                0x6c61632f61697361,
                0x2020206174747563,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_CALCUTTA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206b6976756e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_INUVIK,
        ),
        (
            Lower([
                0x6e2f65706f727565,
                0x20206169736f6369,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_NICOSIA,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x656d6c61702f6163,
                0x2020202020202072,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_PALMER,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202034,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_4,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x64697665746e6f6d,
                0x2020202020206f65,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MONTEVIDEO,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202034,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_4,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20202020696a6966,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_FIJI,
        ),
        (
            Lower([
                0x76696e752f637465,
                0x2020206c61737265,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::UCT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x617f736f6e657562,
                0x2020202073657269,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BUENOS_AIRES,
        ),
        (
            Lower([
                0x722f6e6169646e69,
                0x20206e6f696e7565,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_REUNION,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x76616a6b7965722f,
                0x2020202020206b69,
                0x2020202020202020,
            ]),
            &tzdata::ICELAND,
        ),
        (
            Lower([
                0x642f616369726661,
                0x2020202072616b61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_DAKAR,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x74616b616c74656d,
                0x202020202020616c,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_METLAKATLA,
        ),
        (
            Lower([
                0x742f616369726661,
                0x2075746b75626d69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_TIMBUKTU,
        ),
        (
            Lower([
                0x202020202074656d,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::MET,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020203131,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_11,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x206b6c6f66726f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_NORFOLK,
        ),
        (
            Lower([
                0x20202020756c757a,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::UCT,
        ),
        (
            Lower([
                0x6e61622f61697361,
                0x202020206b6f6b67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_BANGKOK,
        ),
        (
            Lower([
                0x20206f6a6176616e,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::NAVAJO,
        ),
        (
            Lower([
                0x622f616369726661,
                0x617275626d756a75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_BUJUMBURA,
        ),
        (
            Lower([
                0x622f616369726661,
                0x2020206975676e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_BANGUI,
        ),
        (
            Lower([
                0x72616b2f61697361,
                0x2020202069686361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KARACHI,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x206965706e686f70,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_POHNPEI,
        ),
        (
            Lower([
                0x6a2f616369726661,
                0x2020202020616275,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_JUBA,
        ),
        (
            Lower([
                0x2020206e6170616a,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::JAPAN,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x6d6c6f686b636f74,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_STOCKHOLM,
        ),
        (
            Lower([
                0x6369776e65657267,
                0x2020202020202068,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x736e686f6a7f7473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ST_JOHNS,
        ),
        (
            Lower([
                0x6f632f656c696863,
                0x61746e656e69746e,
                0x202020202020206c,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SANTIAGO,
        ),
        (
            Lower([
                0x7568632f61697361,
                0x2020676e696b676e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_CHONGQING,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x6e72696163746970,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_PITCAIRN,
        ),
        (
            Lower([
                0x74616b2f61697361,
                0x202075646e616d68,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KATHMANDU,
        ),
        (
            Lower([
                0x6265682f61697361,
                0x20202020206e6f72,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_HEBRON,
        ),
        (
            Lower([
                0x2079726f74636166,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::FACTORY,
        ),
        (
            Lower([
                0x756c757a2f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::UCT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6f746e6f6d6465,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_EDMONTON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20617567616e616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MANAGUA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020206573696f62,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BOISE,
        ),
        (
            Lower([
                0x7a2f65706f727565,
                0x79687a6f726f7061,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ZAPOROZHYE,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x202020656a706f6b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_SKOPJE,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202036,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_6,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202020616b746973,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SITKA,
        ),
        (
            Lower([
                0x6968742f61697361,
                0x202020202075626d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_THIMBU,
        ),
        (
            Lower([
                0x6f79702f61697361,
                0x2020676e6179676e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_PYONGYANG,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20206e6f746e616b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_KANTON,
        ),
        (
            Lower([
                0x7361742f61697361,
                0x202020746e656b68,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_TASHKENT,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6568746f722f6163,
                0x2020202020206172,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_ROTHERA,
        ),
        (
            Lower([
                0x6865742f61697361,
                0x20202020206e6172,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::IRAN,
        ),
        (
            Lower([
                0x2020202020636f72,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ROC,
        ),
        (
            Lower([
                0x6d61732f61697361,
                0x2020646e616b7261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_SAMARKAND,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x646e616c6b637561,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::NZ,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x61776f79732f6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_SYOWA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20202020656d6f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_NOME,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x656e696d6f6e656d,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MENOMINEE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x7275627265646e65,
                0x2020202020202079,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_ENDERBURY,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203031,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_10,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6b636f7270696873,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::NAVAJO,
        ),
        (
            Lower([
                0x622f616369726661,
                0x6c6976617a7a6172,
                0x202020202020656c,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_BRAZZAVILLE,
        ),
        (
            Lower([
                0x752f65706f727565,
                0x6b73766f6e61796c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ULYANOVSK,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020203031,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_PLUS_10,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x727f6f7472657570,
                0x20202020206f6369,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PUERTO_RICO,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x2020747361666c65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BELFAST,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x70617461676e6f74,
                0x2020202020202075,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_TONGATAPU,
        ),
        (
            Lower([
                0x632f6e6169646e69,
                0x73616d7473697268,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_CHRISTMAS,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x72756d636d2f6163,
                0x2020202020206f64,
                0x2020202020202020,
            ]),
            &tzdata::ANTARCTICA_MC_MURDO,
        ),
        (
            Lower([
                0x61756b2f61697361,
                0x75706d756c7f616c,
                0x2020202020202072,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_KUALA_LUMPUR,
        ),
        (
            Lower([
                0x6a2f616369726661,
                0x6273656e6e61686f,
                0x2020202020677275,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_JOHANNESBURG,
        ),
        (
            Lower([
                0x752f65706f727565,
                0x20646f726f67687a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_UZHGOROD,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c656e7f74726f66,
                0x20202020206e6f73,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_FORT_NELSON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x736f646162726162,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BARBADOS,
        ),
        (
            Lower([
                0x616c752f61697361,
                0x20726f7461627f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_ULAANBAATAR,
        ),
        (
            Lower([
                0x202020617962696c,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::LIBYA,
        ),
        (
            Lower([
                0x7572752f61697361,
                0x202020202069716d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_URUMQI,
        ),
        (
            Lower([
                0x772f616369726661,
                0x206b656f68646e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_WINDHOEK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202079617764696d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_MIDWAY,
        ),
        (
            Lower([
                0x696c617274737561,
                0x726f746369762f61,
                0x2020202020206169,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_MELBOURNE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x71696e697472616d,
                0x2020202020206575,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MARTINIQUE,
        ),
        (
            Lower([
                0x696c617274737561,
                0x747261626f682f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_HOBART,
        ),
        (
            Lower([
                0x742f65706f727565,
                0x20206e6e696c6c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_TALLINN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x79627365726f6373,
                0x20202020646e7573,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SCORESBYSUND,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616e69676572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_REGINA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x747369767f616f62,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_BOA_VISTA,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202039,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_9,
        ),
        (
            Lower([
                0x202020302b746d67,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206164616e657267,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GRENADA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7a656c6174726f66,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_FORTALEZA,
        ),
        (
            Lower([
                0x632f616369726661,
                0x636e616c62617361,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_CASABLANCA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2078696e656f6870,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PHOENIX,
        ),
        (
            Lower([
                0x79616a2f61697361,
                0x2020206172757061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_JAYAPURA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206f697261736f72,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ROSARIO,
        ),
        (
            Lower([
                0x66696361702f7375,
                0x2020202020206369,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_LOS_ANGELES,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020697469686174,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_TAHITI,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202033,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_3,
        ),
        (
            Lower([
                0x6d2f6e6169646e69,
                0x7375697469727561,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_MAURITIUS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6972616d61726170,
                0x2020202020206f62,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PARAMARIBO,
        ),
        (
            Lower([
                0x622f6f636978656d,
                0x2020727573616a61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_MAZATLAN,
        ),
        (
            Lower([
                0x742f65706f727565,
                0x206c6f7073617269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_TIRASPOL,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x2020206f74757061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_MAPUTO,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202031,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ATLANTIC_JAN_MAYEN,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020616f6d6173,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_PAGO_PAGO,
        ),
        (
            Lower([
                0x702f65706f727565,
                0x616369726f67646f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_BELGRADE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20616c6f74726f74,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_TORTOLA,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x202020616e6e6569,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_VIENNA,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x202020776f63736f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::W_SU,
        ),
        (
            Lower([
                0x622f616369726661,
                0x20657279746e616c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_BLANTYRE,
        ),
        (
            Lower([
                0x2074646336747363,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::CST_6_CDT,
        ),
        (
            Lower([
                0x2020202020637475,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::UCT,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020206b75756863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_CHUUK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20202075616c6170,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::PACIFIC_PALAU,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202030,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6172627f6f6972,
                0x2020202020206f63,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_PORTO_ACRE,
        ),
        (
            Lower([
                0x7a61672f61697361,
                0x2020202020202061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_GAZA,
        ),
        (
            Lower([
                0x6d2f6e6169646e69,
                0x2073657669646c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::INDIAN_MALDIVES,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6d65646e696c2f61,
                0x2020202020206e61,
                0x2020202020202020,
            ]),
            &tzdata::AUSTRALIA_LINDEMAN,
        ),
        (
            Lower([
                0x7471612f61697361,
                0x2020202020207561,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_AQTAU,
        ),
        (
            Lower([
                0x722f65706f727565,
                0x2020202020656d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_ROME,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206f746e6f726f74,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_TORONTO,
        ),
        (
            Lower([
                0x652f6164616e6163,
                0x20206e7265747361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_TORONTO,
        ),
        (
            Lower([
                0x6e61792f61697361,
                0x20202020206e6f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_RANGOON,
        ),
        (
            Lower([
                0x2020202020206267,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::GB,
        ),
        (
            Lower([
                0x20202020206b6f72,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ROK,
        ),
        (
            Lower([
                0x612f616369726661,
                0x2020206172656d73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_ASMARA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x65636e69767f7473,
                0x202020202020746e,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_ST_VINCENT,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x20202061646e6175,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_LUANDA,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x2020656e61626162,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AFRICA_MBABANE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x75747f646e617267,
                0x2020202020206b72,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_GRAND_TURK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020726574736165,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::CHILE_EASTER_ISLAND,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203331,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ETC_GMT_MINUS_13,
        ),
        (
            Lower([
                0x6968632f61697361,
                0x2020202020206174,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_CHITA,
        ),
        (
            Lower([
                0x6e61722f61697361,
                0x202020206e6f6f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::ASIA_RANGOON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206e6f73776164,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_DAWSON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x75637f7466697773,
                0x202020746e657272,
                0x2020202020202020,
            ]),
            &tzdata::AMERICA_SWIFT_CURRENT,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x206f76656a617261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            &tzdata::EUROPE_SARAJEVO,
        ),
    ],
};

#[cfg(all(feature = "binary", feature = "by-name"))]
pub(crate) const RAW_TIME_ZONES_BY_NAME: phf::Map<Lower, &'static [u8]> = ::phf::Map {
    key: 12913932095322966823,
    disps: &[
        (0, 45),
        (0, 3),
        (0, 60),
        (0, 338),
        (0, 22),
        (0, 1),
        (0, 4),
        (1, 363),
        (0, 0),
        (0, 1),
        (1, 3),
        (0, 74),
        (3, 498),
        (0, 0),
        (0, 4),
        (0, 172),
        (0, 37),
        (0, 15),
        (0, 0),
        (0, 11),
        (0, 140),
        (4, 157),
        (0, 0),
        (0, 0),
        (0, 12),
        (0, 10),
        (0, 29),
        (0, 248),
        (0, 14),
        (0, 124),
        (0, 164),
        (0, 109),
        (0, 18),
        (0, 163),
        (0, 0),
        (0, 17),
        (1, 18),
        (0, 10),
        (2, 441),
        (1, 29),
        (0, 40),
        (0, 152),
        (0, 226),
        (0, 2),
        (0, 350),
        (0, 0),
        (0, 39),
        (4, 316),
        (0, 23),
        (0, 21),
        (0, 64),
        (0, 1),
        (0, 348),
        (0, 38),
        (8, 176),
        (2, 74),
        (2, 50),
        (0, 332),
        (9, 334),
        (0, 153),
        (1, 37),
        (0, 1),
        (0, 28),
        (3, 538),
        (0, 86),
        (0, 254),
        (5, 236),
        (5, 98),
        (3, 96),
        (0, 0),
        (0, 200),
        (1, 59),
        (17, 393),
        (4, 564),
        (1, 278),
        (0, 0),
        (1, 25),
        (18, 238),
        (11, 142),
        (12, 192),
        (0, 68),
        (0, 68),
        (0, 58),
        (0, 0),
        (0, 123),
        (6, 437),
        (19, 335),
        (0, 92),
        (0, 30),
        (0, 154),
        (4, 518),
        (0, 130),
        (0, 47),
        (1, 442),
        (2, 71),
        (0, 58),
        (35, 434),
        (0, 19),
        (0, 4),
        (0, 97),
        (1, 226),
        (9, 159),
        (0, 119),
        (7, 504),
        (0, 106),
        (82, 159),
        (0, 223),
        (6, 151),
        (1, 137),
        (0, 78),
        (0, 45),
        (4, 220),
        (1, 418),
        (0, 1),
        (0, 0),
    ],
    entries: &[
        (
            Lower([
                0x6f65732f61697361,
                0x2020202020206c75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ROK,
        ),
        (
            Lower([
                0x6564612f61697361,
                0x202020202020206e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_ADEN,
        ),
        (
            Lower([
                0x6b2f616369726661,
                0x206d756f74726168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_KHARTOUM,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020656669636572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_RECIFE,
        ),
        (
            Lower([
                0x662f616369726661,
                0x206e776f74656572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_FREETOWN,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x756873696461676f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_MOGADISHU,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20207a61707f616c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_LA_PAZ,
        ),
        (
            Lower([
                0x632f65706f727565,
                0x2075616e69736968,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_CHISINAU,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x206169766f726e6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_MONROVIA,
        ),
        (
            Lower([
                0x766f6e2f61697361,
                0x7374656e7a756b6f,
                0x202020202020206b,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_NOVOKUZNETSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6f69636e757361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ASUNCION,
        ),
        (
            Lower([
                0x30746d672f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x69727f6174736f63,
                0x2020202020206163,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_COSTA_RICA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61732d636e616c62,
                0x202020206e6f6c62,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BLANC_SABLON,
        ),
        (
            Lower([
                0x6b2f65706f727565,
                0x72676e696e696c61,
                0x2020202020206461,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_KALININGRAD,
        ),
        (
            Lower([
                0x2d747361652f7375,
                0x20616e6169646e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_FORT_WAYNE,
        ),
        (
            Lower([
                0x77756b2f61697361,
                0x2020202020746961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KUWAIT,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x7473657261686375,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BUCHAREST,
        ),
        (
            Lower([
                0x63756b2f61697361,
                0x20202020676e6968,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KUCHING,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20746174756b6179,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_YAKUTAT,
        ),
        (
            Lower([
                0x7572622f61697361,
                0x202020202069656e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_BRUNEI,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202075617373616e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_NASSAU,
        ),
        (
            Lower([
                0x632f616369726661,
                0x202079726b616e6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_CONAKRY,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61627f65736f6f67,
                0x2020202020202079,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GOOSE_BAY,
        ),
        (
            Lower([
                0x6e2f616369726661,
                0x20616e656d616a64,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_NDJAMENA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e69617567617261,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ARAGUAINA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x697f6e696b6e6172,
                0x2020202074656c6e,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_RANKIN_INLET,
        ),
        (
            Lower([
                0x746e756f6d2f7375,
                0x20202020206e6961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::NAVAJO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x73697f61746e6173,
                0x202020206c656261,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SANTA_ISABEL,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202035,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_5,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x61636c6164617567,
                0x20202020206c616e,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_GUADALCANAL,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x65767f657061632f,
                0x2020202020656472,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_CAPE_VERDE,
        ),
        (
            Lower([
                0x2020202020207a6e,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::NZ,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6f647f6f746e6173,
                0x2020206f676e696d,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SANTO_DOMINGO,
        ),
        (
            Lower([
                0x73756d2f61697361,
                0x2020202020746163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_MUSCAT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2d75612d74726f70,
                0x202065636e697270,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PORT_AU_PRINCE,
        ),
        (
            Lower([
                0x6873612f61697361,
                0x202064616261686b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_ASHGABAT,
        ),
        (
            Lower([
                0x6c61677574726f70,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PORTUGAL,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e616c74617a616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MAZATLAN,
        ),
        (
            Lower([
                0x6361642f61697361,
                0x2020202020206163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_DACCA,
        ),
        (
            Lower([
                0x2074647038747370,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PST_8_PDT,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202035,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_5,
        ),
        (
            Lower([
                0x6b2f65706f727565,
                0x20202020766f7269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_KIROV,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020657a696c6562,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BELIZE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x69656c616a61776b,
                0x202020202020206e,
                0x2020202020202020,
            ]),
            raw_tzdata::KWAJALEIN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x616c6c6975676e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ANGUILLA,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x202020207a756461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_VADUZ,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20202020616b7461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ADAK,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x76616c7369746172,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BRATISLAVA,
        ),
        (
            Lower([
                0x6e61682f61697361,
                0x202020202020696f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_HANOI,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020617761726174,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_TARAWA,
        ),
        (
            Lower([
                0x2020202020746565,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EET,
        ),
        (
            Lower([
                0x742f616369726661,
                0x2020202073696e75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_TUNIS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6164616e65736e65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ENSENADA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20202079756a756a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_JUJUY,
        ),
        (
            Lower([
                0x6d2f6164616e6163,
                0x206e6961746e756f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_EDMONTON,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6e616d7361742f61,
                0x2020202020206169,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_HOBART,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20207375616e616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MANAUS,
        ),
        (
            Lower([
                0x7471612f61697361,
                0x202020202065626f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_AQTOBE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6f726f6d6174616d,
                0x2020202020202073,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MATAMOROS,
        ),
        (
            Lower([
                0x2020202030746d67,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x632f6164616e6163,
                0x20206c6172746e65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_WINNIPEG,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6163696e696d6f64,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_DOMINICA,
        ),
        (
            Lower([
                0x69617761682f7375,
                0x2020202020202069,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_HONOLULU,
        ),
        (
            Lower([
                0x642f616369726661,
                0x202020616c61756f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_DOUALA,
        ),
        (
            Lower([
                0x69656c616a61776b,
                0x202020202020206e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::KWAJALEIN,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x616d69746972696b,
                0x2020202020206974,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_KIRITIMATI,
        ),
        (
            Lower([
                0x702f65706f727565,
                0x2020206575676172,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BRATISLAVA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x68747261627f7473,
                0x202020796d656c65,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MARIGOT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616261697563,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CUIABA,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x646172676f676c6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_VOLGOGRAD,
        ),
        (
            Lower([
                0x792f6164616e6163,
                0x202020206e6f6b75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_WHITEHORSE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x6761707f6f676170,
                0x202020202020206f,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_PAGO_PAGO,
        ),
        (
            Lower([
                0x696c617274737561,
                0x756f626c656d2f61,
                0x2020202020656e72,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_MELBOURNE,
        ),
        (
            Lower([
                0x692f65706f727565,
                0x6d7f666f7f656c73,
                0x2020202020206e61,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ISLE_OF_MAN,
        ),
        (
            Lower([
                0x612f65706f727565,
                0x20206172726f646e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ANDORRA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x207469756c617169,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_IQALUIT,
        ),
        (
            Lower([
                0x696c617274737561,
                0x2020207463612f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_ACT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616d616e6170,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PANAMA,
        ),
        (
            Lower([
                0x2074646535747365,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EST_5_EDT,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202033,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_3,
        ),
        (
            Lower([
                0x6968742f61697361,
                0x202020207568706d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_THIMBU,
        ),
        (
            Lower([
                0x6b61792f61697361,
                0x202020206b737475,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_YAKUTSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2073616361726163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CARACAS,
        ),
        (
            Lower([
                0x20657269652d6267,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GB,
        ),
        (
            Lower([
                0x736f712f61697361,
                0x20202079616e6174,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_QOSTANAY,
        ),
        (
            Lower([
                0x696c617274737561,
                0x206874726f6e2f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_DARWIN,
        ),
        (
            Lower([
                0x2020202061627563,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::CUBA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x65676e617f736f6c,
                0x202020202073656c,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_LOS_ANGELES,
        ),
        (
            Lower([
                0x7969722f61697361,
                0x2020202020686461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_RIYADH,
        ),
        (
            Lower([
                0x7261622f61697361,
                0x202020206c75616e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_BARNAUL,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2074696f72746564,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_DETROIT,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020206b757274,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_CHUUK,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x2020202020656d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_LOME,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6167696375676574,
                0x202020202061706c,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_TEGUCIGALPA,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x756c756c6f6e6f68,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_HONOLULU,
        ),
        (
            Lower([
                0x72656a2f61697361,
                0x20206d656c617375,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ISRAEL,
        ),
        (
            Lower([
                0x6c6f6b2f61697361,
                0x202020206174616b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_CALCUTTA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x756f6c6564617567,
                0x2020202020206570,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GUADELOUPE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7568617568696863,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CHIHUAHUA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x676570696e6e6977,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_WINNIPEG,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202037,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_7,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x69727f796e696172,
                0x2020202020726576,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_RAINY_RIVER,
        ),
        (
            Lower([
                0x672f6f636978656d,
                0x20206c6172656e65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MEXICO_CITY,
        ),
        (
            Lower([
                0x696c617274737561,
                0x20202069686c2f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_LHI,
        ),
        (
            Lower([
                0x2020202020637270,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PRC,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c69767369756f6c,
                0x202020202020656c,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_LOUISVILLE,
        ),
        (
            Lower([
                0x6861622f61697361,
                0x202020206e696172,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_BAHRAIN,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202031,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_1,
        ),
        (
            Lower([
                0x2074646d3774736d,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::MST_7_MDT,
        ),
        (
            Lower([
                0x622f616369726661,
                0x2020206c756a6e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_BANJUL,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20206e6170696173,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_SAIPAN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2061686e6f726f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_NORONHA,
        ),
        (
            Lower([
                0x672f65706f727565,
                0x207965736e726575,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_GUERNSEY,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6f6c657571696d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MIQUELON,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020206574616665,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_EFATE,
        ),
        (
            Lower([
                0x632f6e6169646e69,
                0x20202020736f636f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_COCOS,
        ),
        (
            Lower([
                0x6569762f61697361,
                0x2020656e6169746e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_VIENTIANE,
        ),
        (
            Lower([
                0x7261682f61697361,
                0x20202020206e6962,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_HARBIN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020206162757261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ARUBA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x637f6e6f73776164,
                0x202020206b656572,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_DAWSON_CREEK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x726f6d7f74726f70,
                0x2020202079627365,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_PORT_MORESBY,
        ),
        (
            Lower([
                0x7974612f61697361,
                0x2020202020756172,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_ATYRAU,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020656172736f6b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_KOSRAE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x72707f7265776f6c,
                0x2020207365636e69,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CURACAO,
        ),
        (
            Lower([
                0x202020202074736d,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::MST,
        ),
        (
            Lower([
                0x732f616369726661,
                0x20656d6f747f6f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_SAO_TOME,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20656e6e65796163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CAYENNE,
        ),
        (
            Lower([
                0x616e612f61697361,
                0x2020202020727964,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_ANADYR,
        ),
        (
            Lower([
                0x772f65706f727565,
                0x2020207761737261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::POLAND,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202061656d756f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_NOUMEA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7f7265646e756874,
                0x2020202020796162,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_THUNDER_BAY,
        ),
        (
            Lower([
                0x6b61732f61697361,
                0x2020206e696c6168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_SAKHALIN,
        ),
        (
            Lower([
                0x676e6f6b676e6f68,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::HONGKONG,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x63617f6f74726f70,
                0x2020202020206572,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PORTO_ACRE,
        ),
        (
            Lower([
                0x61726f2f61697361,
                0x202020202020206c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_ORAL,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x2020206172616d61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_SAMARA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6b776f6c6c6579,
                0x2020202020656669,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_YELLOWKNIFE,
        ),
        (
            Lower([
                0x67616d2f61697361,
                0x202020206e616461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_MAGADAN,
        ),
        (
            Lower([
                0x6e6f702f61697361,
                0x20206b616e616974,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_PONTIANAK,
        ),
        (
            Lower([
                0x696c617274737561,
                0x776f636e61792f61,
                0x20202020616e6e69,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_BROKEN_HILL,
        ),
        (
            Lower([
                0x696c617274737561,
                0x736e656575712f61,
                0x20202020646e616c,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_BRISBANE,
        ),
        (
            Lower([
                0x6d616b2f61697361,
                0x2020616b74616863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KAMCHATKA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202061646972656d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MERIDA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206f696563616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MACEIO,
        ),
        (
            Lower([
                0x766f682f61697361,
                0x2020202020202064,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_HOVD,
        ),
        (
            Lower([
                0x612f65706f727565,
                0x202020736e656874,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ATHENS,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x206d616874616863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::NZ_CHAT,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202073696c6c6177,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_WALLIS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206e75636e6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CANCUN,
        ),
        (
            Lower([
                0x616c752f61697361,
                0x7261746161626e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_ULAANBAATAR,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6d657261746e6173,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SANTAREM,
        ),
        (
            Lower([
                0x7473752f61697361,
                0x2020206172656e2d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_UST_NERA,
        ),
        (
            Lower([
                0x6e6f682f61697361,
                0x2020676e6f6b7f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::HONGKONG,
        ),
        (
            Lower([
                0x696c617274737561,
                0x69616c6564612f61,
                0x2020202020206564,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_ADELAIDE,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x757163616d2f6163,
                0x2020202065697261,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_MACQUARIE,
        ),
        (
            Lower([
                0x2020202020746563,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::CET,
        ),
        (
            Lower([
                0x6f2f65706f727565,
                0x20202020206f6c73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ARCTIC_LONGYEARBYEN,
        ),
        (
            Lower([
                0x202079656b727574,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::TURKEY,
        ),
        (
            Lower([
                0x2020202020746577,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::WET,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x2020656f7261662f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_FAEROE,
        ),
        (
            Lower([
                0x7473692f61697361,
                0x2020206c75626e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::TURKEY,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x79616d7f6e616a2f,
                0x2020202020206e65,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_JAN_MAYEN,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20206f72756a616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_MAJURO,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6162736972622f61,
                0x202020202020656e,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_BRISBANE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202061746f676f62,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BOGOTA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020206169686162,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BAHIA,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x6f676170616c6167,
                0x2020202020202073,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_GALAPAGOS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20616369616d616a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::JAMAICA,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x2020206f63616e6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_MONACO,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202038,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_8,
        ),
        (
            Lower([
                0x702f65706f727565,
                0x2020202073697261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_PARIS,
        ),
        (
            Lower([
                0x6c2f636974637261,
                0x6272616579676e6f,
                0x20202020206e6579,
                0x2020202020202020,
            ]),
            raw_tzdata::ARCTIC_LONGYEARBYEN,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203131,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_11,
        ),
        (
            Lower([
                0x6275642f61697361,
                0x2020202020206961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_DUBAI,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206f616361727563,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CURACAO,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20206570616e6f70,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_POHNPEI,
        ),
        (
            Lower([
                0x612f616369726661,
                0x2020202061726363,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_ACCRA,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x2020206469726461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_MADRID,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206e6967726976,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ST_THOMAS,
        ),
        (
            Lower([
                0x6c2f65706f727565,
                0x616e616a6c62756a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_LJUBLJANA,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202032,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_2,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206e697f786f6e6b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_KNOX_IN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6761726f68636e61,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ANCHORAGE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020202061697061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_APIA,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x766e696167756f62,
                0x20202020656c6c69,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_BOUGAINVILLE,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x2020207572657361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_MASERU,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616e61797567,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GUYANA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2061626f64726f63,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CORDOBA,
        ),
        (
            Lower([
                0x2020646e616c6f70,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::POLAND,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6b726f797f77656e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_NEW_YORK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2061756769746e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ANTIGUA,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202032,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_2,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x616d6f68747f7473,
                0x2020202020202073,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ST_THOMAS,
        ),
        (
            Lower([
                0x632f616369726661,
                0x2020202061747565,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_CEUTA,
        ),
        (
            Lower([
                0x766f6e2f61697361,
                0x6b7372696269736f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_NOVOSIBIRSK,
        ),
        (
            Lower([
                0x6b2f616369726661,
                0x2020616c61706d61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_KAMPALA,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x2020206e696c7265,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BERLIN,
        ),
        (
            Lower([
                0x6b616d2f61697361,
                0x2020207261737361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_MAKASSAR,
        ),
        (
            Lower([
                0x73616b2f61697361,
                0x2020202072616768,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KASHGAR,
        ),
        (
            Lower([
                0x6e68702f61697361,
                0x20686e65707f6d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_PHNOM_PENH,
        ),
        (
            Lower([
                0x2020202075732d77,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::W_SU,
        ),
        (
            Lower([
                0x61636f6c2f637465,
                0x202020656d69746c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x7a79712f61697361,
                0x20206164726f6c79,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_QYZYLORDA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206f676163696863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CHICAGO,
        ),
        (
            Lower([
                0x61652f656c696863,
                0x616c736972657473,
                0x202020202020646e,
                0x2020202020202020,
            ]),
            raw_tzdata::CHILE_EASTER_ISLAND,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x20656f726561662f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_FAEROE,
        ),
        (
            Lower([
                0x6761622f61697361,
                0x2020202064616468,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_BAGHDAD,
        ),
        (
            Lower([
                0x6169646e692f7375,
                0x6b726174732d616e,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_KNOX_IN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e616b6f6b697461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ATIKOKAN,
        ),
        (
            Lower([
                0x61726b2f61697361,
                0x6b737261796f6e73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KRASNOYARSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x72726573746e6f6d,
                0x2020202020207461,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MONTSERRAT,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x73697661642f6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_DAVIS,
        ),
        (
            Lower([
                0x6e69732f61697361,
                0x202065726f706167,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::SINGAPORE,
        ),
        (
            Lower([
                0x616c762f61697361,
                0x6b6f74736f766964,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_VLADIVOSTOK,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202030,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x6164756d7265622f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_BERMUDA,
        ),
        (
            Lower([
                0x6b61622f61697361,
                0x2020202020202075,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_BAKU,
        ),
        (
            Lower([
                0x6d2f6e6169646e69,
                0x20206574746f7961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_MAYOTTE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6570656e75726965,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_EIRUNEPE,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x20736c6573737572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BRUSSELS,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20202020656b6177,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_WAKE,
        ),
        (
            Lower([
                0x692f65706f727565,
                0x206c75626e617473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::TURKEY,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6874756f732f6163,
                0x202020656c6f707f,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_MC_MURDO,
        ),
        (
            Lower([
                0x696c617274737561,
                0x2020747365772f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_PERTH,
        ),
        (
            Lower([
                0x6e2f616369726661,
                0x746f68636b61756f,
                0x2020202020202074,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_NOUAKCHOTT,
        ),
        (
            Lower([
                0x6b6f742f61697361,
                0x2020202020206f79,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::JAPAN,
        ),
        (
            Lower([
                0x6f68632f61697361,
                0x2020676e6971676e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_CHONGQING,
        ),
        (
            Lower([
                0x652f616369726661,
                0x206e756961617f6c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_EL_AAIUN,
        ),
        (
            Lower([
                0x6d61642f61697361,
                0x2020207375637361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_DAMASCUS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61627f6169686162,
                0x202073617265646e,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BAHIA_BANDERAS,
        ),
        (
            Lower([
                0x6b65792f61697361,
                0x75626e6972657461,
                0x2020202020206772,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_YEKATERINBURG,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x202020206169666f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_SOFIA,
        ),
        (
            Lower([
                0x20646e616c656369,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ICELAND,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x736b72616d6e6164,
                0x202020206e766168,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_DANMARKSHAVN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c616d6574617567,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GUATEMALA,
        ),
        (
            Lower([
                0x20746168632d7a6e,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::NZ_CHAT,
        ),
        (
            Lower([
                0x6962742f61697361,
                0x202020206973696c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_TBILISI,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x20207375696e6c69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_VILNIUS,
        ),
        (
            Lower([
                0x632f6e6169646e69,
                0x2020206f726f6d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_COMORO,
        ),
        (
            Lower([
                0x6c2f65706f727565,
                0x2020206e6f646e6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GB,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x677f6874756f732f,
                0x2020616967726f65,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_SOUTH_GEORGIA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206e6f74636e6f6d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MONCTON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20786166696c6168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_HALIFAX,
        ),
        (
            Lower([
                0x6e2f616369726661,
                0x202069626f726961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_NAIROBI,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61766c61737f6c65,
                0x2020202020726f64,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_EL_SALVADOR,
        ),
        (
            Lower([
                0x7265792f61697361,
                0x202020206e617665,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_YEREVAN,
        ),
        (
            Lower([
                0x2020202020746d67,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x69747566616e7566,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_FUNAFUTI,
        ),
        (
            Lower([
                0x6873612f61697361,
                0x2020207461626167,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_ASHGABAT,
        ),
        (
            Lower([
                0x20206c6561727369,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ISRAEL,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20207265766e6564,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::NAVAJO,
        ),
        (
            Lower([
                0x2020202020747368,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::HST,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020206d656c6562,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BELEM,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616e61766168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::CUBA,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6e656b6f72622f61,
                0x2020206c6c69687f,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_BROKEN_HILL,
        ),
        (
            Lower([
                0x65747361652f7375,
                0x2020202020206e72,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_NEW_YORK,
        ),
        (
            Lower([
                0x63616d2f61697361,
                0x2020202020206f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_MACAO,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202037,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_7,
        ),
        (
            Lower([
                0x616f6d61732f7375,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_PAGO_PAGO,
        ),
        (
            Lower([
                0x612f616369726661,
                0x6162617f73696464,
                0x2020202020206162,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_ADDIS_ABABA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7961777f74726f66,
                0x202020202020656e,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_FORT_WAYNE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x206f666f616b6166,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_FAKAOFO,
        ),
        (
            Lower([
                0x642f6c697a617262,
                0x61686e6f726f6e65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_NORONHA,
        ),
        (
            Lower([
                0x612f6c697a617262,
                0x2020202020657263,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PORTO_ACRE,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x20202020736f6761,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_LAGOS,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020206d617567,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_GUAM,
        ),
        (
            Lower([
                0x632f65706f727565,
                0x656761686e65706f,
                0x202020202020206e,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_COPENHAGEN,
        ),
        (
            Lower([
                0x74616b2f61697361,
                0x20202075646e616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KATHMANDU,
        ),
        (
            Lower([
                0x207463752f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::UCT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x637f6f636978656d,
                0x2020202020797469,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MEXICO_CITY,
        ),
        (
            Lower([
                0x6d6c612f61697361,
                0x2020202020797461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_ALMATY,
        ),
        (
            Lower([
                0x702f6164616e6163,
                0x2020636966696361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_VANCOUVER,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202020206b75756e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GODTHAB,
        ),
        (
            Lower([
                0x6c2f65706f727565,
                0x72756f626d657875,
                0x2020202020202067,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_LUXEMBOURG,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x656c65687f74732f,
                0x202020202020616e,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_ST_HELENA,
        ),
        (
            Lower([
                0x6b72692f61697361,
                0x202020206b737475,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_IRKUTSK,
        ),
        (
            Lower([
                0x642f616369726661,
                0x206974756f62696a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_DJIBOUTI,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6372616d61746163,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CATAMARCA,
        ),
        (
            Lower([
                0x6e2f616369726661,
                0x20202079656d6169,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_NIAMEY,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x206e65676e697375,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BUSINGEN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x737474696b7f7473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ST_KITTS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x69646e656c61726b,
                0x2020202020206b6a,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CURACAO,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x687361626d756275,
                0x2020202020202069,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_LUBUMBASHI,
        ),
        (
            Lower([
                0x622f6f636978656d,
                0x6574726f6e616a61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SANTA_ISABEL,
        ),
        (
            Lower([
                0x2020202065726965,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EIRE,
        ),
        (
            Lower([
                0x722f65706f727565,
                0x2020202020616769,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_RIGA,
        ),
        (
            Lower([
                0x61686b2f61697361,
                0x202020616779646e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KHANDYGA,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x207972616e61632f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_CANARY,
        ),
        (
            Lower([
                0x20616369616d616a,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::JAMAICA,
        ),
        (
            Lower([
                0x6b2f65706f727565,
                0x2020202020766569,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_KIEV,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7472696e676e6170,
                0x2020202020676e75,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PANGNIRTUNG,
        ),
        (
            Lower([
                0x632f6e6169646e69,
                0x202020736f676168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_CHAGOS,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020203231,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_12,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x6e6d616865697261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_HELSINKI,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6f7377616d2f6163,
                0x202020202020206e,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_MAWSON,
        ),
        (
            Lower([
                0x682f616369726661,
                0x2020206572617261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_HARARE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6574756c6f736572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_RESOLUTE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x6e6f74736e686f6a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::HST,
        ),
        (
            Lower([
                0x202020302d746d67,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x696c617274737561,
                0x7265626e61632f61,
                0x2020202020206172,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_ACT,
        ),
        (
            Lower([
                0x7369622f61697361,
                0x202020206b656b68,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_BISHKEK,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6e6f6d75642f6163,
                0x6c6c697672756474,
                0x2020202020202065,
            ]),
            raw_tzdata::ANTARCTICA_DUMONT_D_URVILLE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6576756f636e6176,
                0x2020202020202072,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_VANCOUVER,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c616572746e6f6d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MONTREAL,
        ),
        (
            Lower([
                0x6168642f61697361,
                0x202020202020616b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_DACCA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c69736f6d726568,
                0x2020202020206f6c,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_HERMOSILLO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2062616874646f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GODTHAB,
        ),
        (
            Lower([
                0x6b616a2f61697361,
                0x2020202061747261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_JAKARTA,
        ),
        (
            Lower([
                0x612f616369726661,
                0x2020206172616d73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_ASMARA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x72617f61746e7570,
                0x2020202073616e65,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PUNTA_ARENAS,
        ),
        (
            Lower([
                0x736d6f2f61697361,
                0x202020202020206b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_OMSK,
        ),
        (
            Lower([
                0x7461712f61697361,
                0x2020202020207261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_QATAR,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202038,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_8,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206e6f7473657263,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CRESTON,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202039,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_9,
        ),
        (
            Lower([
                0x612f65706f727565,
                0x6d6164726574736d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_AMSTERDAM,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c7561707f6f6173,
                0x202020202020206f,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SAO_PAULO,
        ),
        (
            Lower([
                0x6572732f61697361,
                0x6d796c6f6b656e64,
                0x2020202020206b73,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_SREDNEKOLYMSK,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203231,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_12,
        ),
        (
            Lower([
                0x656572672f637465,
                0x202020686369776e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x72677f6f706d6163,
                0x2020202065646e61,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CAMPO_GRANDE,
        ),
        (
            Lower([
                0x6e616d2f61697361,
                0x2020202020616c69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_MANILA,
        ),
        (
            Lower([
                0x696c617274737561,
                0x20202077736e2f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_ACT,
        ),
        (
            Lower([
                0x682f65706f727565,
                0x20696b6e69736c65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_HELSINKI,
        ),
        (
            Lower([
                0x6d6f742f61697361,
                0x2020202020206b73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_TOMSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x65767f6f74726f70,
                0x20202020206f686c,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PORTO_VELHO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61627f6563616c67,
                0x2020202020202079,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GLACE_BAY,
        ),
        (
            Lower([
                0x632f616369726661,
                0x202020206f726961,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EGYPT,
        ),
        (
            Lower([
                0x696863696d2f7375,
                0x20202020206e6167,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_DETROIT,
        ),
        (
            Lower([
                0x6f7a6972612f7375,
                0x202020202020616e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PHOENIX,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202020656c756874,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_THULE,
        ),
        (
            Lower([
                0x612f616369726661,
                0x20206e616a646962,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_ABIDJAN,
        ),
        (
            Lower([
                0x206374752f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::UCT,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x79657361632f6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_CASEY,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x79656c6e6174732f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_STANLEY,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6e69777261642f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_DARWIN,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x20206e6163697461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ROME,
        ),
        (
            Lower([
                0x6c2f65706f727565,
                0x2020206e6f627369,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PORTUGAL,
        ),
        (
            Lower([
                0x6f2f616369726661,
                0x67756f6461676175,
                0x202020202020756f,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_OUAGADOUGOU,
        ),
        (
            Lower([
                0x6f68632f61697361,
                0x206e61736c616269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_CHOIBALSAN,
        ),
        (
            Lower([
                0x6c65742f61697361,
                0x202020766976617f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_TEL_AVIV,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206e616d796163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CAYMAN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x70616e6169646e69,
                0x2020202073696c6f,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_FORT_WAYNE,
        ),
        (
            Lower([
                0x7a2f65706f727565,
                0x2020206265726761,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ZAGREB,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20617a6f646e656d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MENDOZA,
        ),
        (
            Lower([
                0x6c69642f61697361,
                0x2020202020202069,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_DILI,
        ),
        (
            Lower([
                0x6d6d612f61697361,
                0x2020202020206e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_AMMAN,
        ),
        (
            Lower([
                0x7f6f682f61697361,
                0x686e696d7f696863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_HO_CHI_MINH,
        ),
        (
            Lower([
                0x2020202020747365,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EST,
        ),
        (
            Lower([
                0x7375642f61697361,
                0x20202065626e6168,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_DUSHANBE,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6569727275632f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_CURRIE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20202020616d696c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_LIMA,
        ),
        (
            Lower([
                0x72746e65632f7375,
                0x2020202020206c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CHICAGO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x61687f6c61726f63,
                0x20202072756f6272,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CORAL_HARBOUR,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x2020202061746c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_MALTA,
        ),
        (
            Lower([
                0x732f6164616e6163,
                0x65686374616b7361,
                0x20202020206e6177,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_REGINA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20207561656e756a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_JUNEAU,
        ),
        (
            Lower([
                0x20746d672f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x65727265746e6f6d,
                0x2020202020202079,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MONTERREY,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203431,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_14,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x6e6972616d7f6e61,
                0x202020202020206f,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ROME,
        ),
        (
            Lower([
                0x2020207470796765,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EGYPT,
        ),
        (
            Lower([
                0x696c617274737561,
                0x79656e6479732f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_ACT,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x6172696564616d2f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_MADEIRA,
        ),
        (
            Lower([
                0x696c617274737561,
                0x2068747265702f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_PERTH,
        ),
        (
            Lower([
                0x6965622f61697361,
                0x2020202020747572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_BEIRUT,
        ),
        (
            Lower([
                0x6b2f616369726661,
                0x2061736168736e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_KINSHASA,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020206575696e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_NIUE,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x2074736570616475,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BUDAPEST,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x676e6f746f726172,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_RAROTONGA,
        ),
        (
            Lower([
                0x742f616369726661,
                0x2020696c6f706972,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::LIBYA,
        ),
        (
            Lower([
                0x6a2f65706f727565,
                0x2020207965737265,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_JERSEY,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20746f676972616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MARIGOT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x616963756c7f7473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ST_LUCIA,
        ),
        (
            Lower([
                0x202020206e617269,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::IRAN,
        ),
        (
            Lower([
                0x6961742f61697361,
                0x2020202020696570,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ROC,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x202020616b617375,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_LUSAKA,
        ),
        (
            Lower([
                0x6d2f6e6169646e69,
                0x2020202020656861,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_MAHE,
        ),
        (
            Lower([
                0x696c617274737561,
                0x20616c6375652f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_EUCLA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202020206b616461,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ADAK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7f666f7f74726f70,
                0x2020206e69617073,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MARIGOT,
        ),
        (
            Lower([
                0x62616b2f61697361,
                0x2020202020206c75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KABUL,
        ),
        (
            Lower([
                0x63616d2f61697361,
                0x2020202020207561,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_MACAO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20616e61756a6974,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SANTA_ISABEL,
        ),
        (
            Lower([
                0x702f616369726661,
                0x766f6e2d6f74726f,
                0x202020202020206f,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_PORTO_NOVO,
        ),
        (
            Lower([
                0x6168732f61697361,
                0x202020696168676e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PRC,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x6c6c697665726269,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_LIBREVILLE,
        ),
        (
            Lower([
                0x742f65706f727565,
                0x202020656e617269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_TIRANE,
        ),
        (
            Lower([
                0x7a2f65706f727565,
                0x2020206863697275,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BUSINGEN,
        ),
        (
            Lower([
                0x612f616369726661,
                0x202073726569676c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_ALGIERS,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x6f706f7265666d69,
                0x202020202020206c,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_SIMFEROPOL,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x617365757172616d,
                0x2020202020202073,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_MARQUESAS,
        ),
        (
            Lower([
                0x622f616369726661,
                0x2020206f6b616d61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_BAMAKO,
        ),
        (
            Lower([
                0x696c617274737561,
                0x687f64726f6c2f61,
                0x202020202065776f,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_LHI,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x2020206f62616c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_MALABO,
        ),
        (
            Lower([
                0x6e2f6164616e6163,
                0x6c646e756f667765,
                0x2020202020646e61,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ST_JOHNS,
        ),
        (
            Lower([
                0x7475656c612f7375,
                0x20202020206e6169,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ADAK,
        ),
        (
            Lower([
                0x672f65706f727565,
                0x7261746c61726269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_GIBRALTAR,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6f74736f762f6163,
                0x202020202020206b,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_VOSTOK,
        ),
        (
            Lower([
                0x642f616369726661,
                0x61737f73657f7261,
                0x202020206d61616c,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_DAR_ES_SALAAM,
        ),
        (
            Lower([
                0x63696e2f61697361,
                0x202020206169736f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_NICOSIA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6975716179617567,
                0x202020202020206c,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GUAYAQUIL,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206167616e696a6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_OJINAGA,
        ),
        (
            Lower([
                0x2020202020746375,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::UCT,
        ),
        (
            Lower([
                0x6b2f616369726661,
                0x202020696c616769,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_KIGALI,
        ),
        (
            Lower([
                0x6b2f6e6169646e69,
                0x6e656c6575677265,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_KERGUELEN,
        ),
        (
            Lower([
                0x672f616369726661,
                0x20656e6f726f6261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_GABORONE,
        ),
        (
            Lower([
                0x696c617274737561,
                0x206874756f732f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_ADELAIDE,
        ),
        (
            Lower([
                0x756a752f61697361,
                0x61646e61707f676e,
                0x202020202020676e,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_MAKASSAR,
        ),
        (
            Lower([
                0x6961732f61697361,
                0x20202020206e6f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_HO_CHI_MINH,
        ),
        (
            Lower([
                0x642f65706f727565,
                0x2020206e696c6275,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EIRE,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6c6c6f72742f6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_TROLL,
        ),
        (
            Lower([
                0x612f6e6169646e69,
                0x72616e616e61746e,
                0x20202020206f7669,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_ANTANANARIVO,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020757275616e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_NAURU,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202036,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_6,
        ),
        (
            Lower([
                0x612f6164616e6163,
                0x206369746e616c74,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_HALIFAX,
        ),
        (
            Lower([
                0x6173726576696e75,
                0x202020202020206c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::UCT,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x2065646172676c65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BELGRADE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020202020706179,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_CHUUK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20726569626d6167,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_GAMBIER,
        ),
        (
            Lower([
                0x772f6c697a617262,
                0x2020202020747365,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MANAUS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206e6f676970696e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_NIPIGON,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x2020766f74617261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_SARATOV,
        ),
        (
            Lower([
                0x726f7061676e6973,
                0x2020202020202065,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::SINGAPORE,
        ),
        (
            Lower([
                0x6d61662f61697361,
                0x2020617473756761,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_FAMAGUSTA,
        ),
        (
            Lower([
                0x652f6c697a617262,
                0x2020202020747361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SAO_PAULO,
        ),
        (
            Lower([
                0x612f65706f727565,
                0x6e61686b61727473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ASTRAKHAN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x726f686574696877,
                0x2020202020206573,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_WHITEHORSE,
        ),
        (
            Lower([
                0x622f616369726661,
                0x2020207561737369,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_BISSAU,
        ),
        (
            Lower([
                0x6c6f632f61697361,
                0x202020206f626d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_COLOMBO,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6f676169746e6173,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SANTIAGO,
        ),
        (
            Lower([
                0x6b73616c612f7375,
                0x2020202020202061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ANCHORAGE,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x207365726f7a612f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_AZORES,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x202020206b736e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_MINSK,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x67646972626d6163,
                0x2020207961627f65,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_CAMBRIDGE_BAY,
        ),
        (
            Lower([
                0x6c61632f61697361,
                0x2020206174747563,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_CALCUTTA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206b6976756e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_INUVIK,
        ),
        (
            Lower([
                0x6e2f65706f727565,
                0x20206169736f6369,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_NICOSIA,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x656d6c61702f6163,
                0x2020202020202072,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_PALMER,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202034,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_4,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x64697665746e6f6d,
                0x2020202020206f65,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MONTEVIDEO,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202034,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_4,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20202020696a6966,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_FIJI,
        ),
        (
            Lower([
                0x76696e752f637465,
                0x2020206c61737265,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::UCT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x617f736f6e657562,
                0x2020202073657269,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BUENOS_AIRES,
        ),
        (
            Lower([
                0x722f6e6169646e69,
                0x20206e6f696e7565,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_REUNION,
        ),
        (
            Lower([
                0x6369746e616c7461,
                0x76616a6b7965722f,
                0x2020202020206b69,
                0x2020202020202020,
            ]),
            raw_tzdata::ICELAND,
        ),
        (
            Lower([
                0x642f616369726661,
                0x2020202072616b61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_DAKAR,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x74616b616c74656d,
                0x202020202020616c,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_METLAKATLA,
        ),
        (
            Lower([
                0x742f616369726661,
                0x2075746b75626d69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_TIMBUKTU,
        ),
        (
            Lower([
                0x202020202074656d,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::MET,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020203131,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_11,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x206b6c6f66726f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_NORFOLK,
        ),
        (
            Lower([
                0x20202020756c757a,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::UCT,
        ),
        (
            Lower([
                0x6e61622f61697361,
                0x202020206b6f6b67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_BANGKOK,
        ),
        (
            Lower([
                0x20206f6a6176616e,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::NAVAJO,
        ),
        (
            Lower([
                0x622f616369726661,
                0x617275626d756a75,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_BUJUMBURA,
        ),
        (
            Lower([
                0x622f616369726661,
                0x2020206975676e61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_BANGUI,
        ),
        (
            Lower([
                0x72616b2f61697361,
                0x2020202069686361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KARACHI,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x206965706e686f70,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_POHNPEI,
        ),
        (
            Lower([
                0x6a2f616369726661,
                0x2020202020616275,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_JUBA,
        ),
        (
            Lower([
                0x2020206e6170616a,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::JAPAN,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x6d6c6f686b636f74,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_STOCKHOLM,
        ),
        (
            Lower([
                0x6369776e65657267,
                0x2020202020202068,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x736e686f6a7f7473,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ST_JOHNS,
        ),
        (
            Lower([
                0x6f632f656c696863,
                0x61746e656e69746e,
                0x202020202020206c,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SANTIAGO,
        ),
        (
            Lower([
                0x7568632f61697361,
                0x2020676e696b676e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_CHONGQING,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x6e72696163746970,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_PITCAIRN,
        ),
        (
            Lower([
                0x74616b2f61697361,
                0x202075646e616d68,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KATHMANDU,
        ),
        (
            Lower([
                0x6265682f61697361,
                0x20202020206e6f72,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_HEBRON,
        ),
        (
            Lower([
                0x2079726f74636166,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::FACTORY,
        ),
        (
            Lower([
                0x756c757a2f637465,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::UCT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6f746e6f6d6465,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_EDMONTON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20617567616e616d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MANAGUA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020206573696f62,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BOISE,
        ),
        (
            Lower([
                0x7a2f65706f727565,
                0x79687a6f726f7061,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ZAPOROZHYE,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x202020656a706f6b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_SKOPJE,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202036,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_6,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x202020616b746973,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SITKA,
        ),
        (
            Lower([
                0x6968742f61697361,
                0x202020202075626d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_THIMBU,
        ),
        (
            Lower([
                0x6f79702f61697361,
                0x2020676e6179676e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_PYONGYANG,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20206e6f746e616b,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_KANTON,
        ),
        (
            Lower([
                0x7361742f61697361,
                0x202020746e656b68,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_TASHKENT,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x6568746f722f6163,
                0x2020202020206172,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_ROTHERA,
        ),
        (
            Lower([
                0x6865742f61697361,
                0x20202020206e6172,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::IRAN,
        ),
        (
            Lower([
                0x2020202020636f72,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ROC,
        ),
        (
            Lower([
                0x6d61732f61697361,
                0x2020646e616b7261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_SAMARKAND,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x646e616c6b637561,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::NZ,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x61776f79732f6163,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_SYOWA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20202020656d6f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_NOME,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x656e696d6f6e656d,
                0x2020202020202065,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MENOMINEE,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x7275627265646e65,
                0x2020202020202079,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_ENDERBURY,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203031,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_10,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6b636f7270696873,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::NAVAJO,
        ),
        (
            Lower([
                0x622f616369726661,
                0x6c6976617a7a6172,
                0x202020202020656c,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_BRAZZAVILLE,
        ),
        (
            Lower([
                0x752f65706f727565,
                0x6b73766f6e61796c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ULYANOVSK,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020203031,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_PLUS_10,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x727f6f7472657570,
                0x20202020206f6369,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PUERTO_RICO,
        ),
        (
            Lower([
                0x622f65706f727565,
                0x2020747361666c65,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BELFAST,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x70617461676e6f74,
                0x2020202020202075,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_TONGATAPU,
        ),
        (
            Lower([
                0x632f6e6169646e69,
                0x73616d7473697268,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_CHRISTMAS,
        ),
        (
            Lower([
                0x6974637261746e61,
                0x72756d636d2f6163,
                0x2020202020206f64,
                0x2020202020202020,
            ]),
            raw_tzdata::ANTARCTICA_MC_MURDO,
        ),
        (
            Lower([
                0x61756b2f61697361,
                0x75706d756c7f616c,
                0x2020202020202072,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_KUALA_LUMPUR,
        ),
        (
            Lower([
                0x6a2f616369726661,
                0x6273656e6e61686f,
                0x2020202020677275,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_JOHANNESBURG,
        ),
        (
            Lower([
                0x752f65706f727565,
                0x20646f726f67687a,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_UZHGOROD,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6c656e7f74726f66,
                0x20202020206e6f73,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_FORT_NELSON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x736f646162726162,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BARBADOS,
        ),
        (
            Lower([
                0x616c752f61697361,
                0x20726f7461627f6e,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_ULAANBAATAR,
        ),
        (
            Lower([
                0x202020617962696c,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::LIBYA,
        ),
        (
            Lower([
                0x7572752f61697361,
                0x202020202069716d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_URUMQI,
        ),
        (
            Lower([
                0x772f616369726661,
                0x206b656f68646e69,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_WINDHOEK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202079617764696d,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_MIDWAY,
        ),
        (
            Lower([
                0x696c617274737561,
                0x726f746369762f61,
                0x2020202020206169,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_MELBOURNE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x71696e697472616d,
                0x2020202020206575,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MARTINIQUE,
        ),
        (
            Lower([
                0x696c617274737561,
                0x747261626f682f61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_HOBART,
        ),
        (
            Lower([
                0x742f65706f727565,
                0x20206e6e696c6c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_TALLINN,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x79627365726f6373,
                0x20202020646e7573,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SCORESBYSUND,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2020616e69676572,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_REGINA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x747369767f616f62,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_BOA_VISTA,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202039,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_9,
        ),
        (
            Lower([
                0x202020302b746d67,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206164616e657267,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GRENADA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x7a656c6174726f66,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_FORTALEZA,
        ),
        (
            Lower([
                0x632f616369726661,
                0x636e616c62617361,
                0x2020202020202061,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_CASABLANCA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x2078696e656f6870,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PHOENIX,
        ),
        (
            Lower([
                0x79616a2f61697361,
                0x2020206172757061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_JAYAPURA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206f697261736f72,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ROSARIO,
        ),
        (
            Lower([
                0x66696361702f7375,
                0x2020202020206369,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_LOS_ANGELES,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020697469686174,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_TAHITI,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020202033,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_3,
        ),
        (
            Lower([
                0x6d2f6e6169646e69,
                0x7375697469727561,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_MAURITIUS,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6972616d61726170,
                0x2020202020206f62,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PARAMARIBO,
        ),
        (
            Lower([
                0x622f6f636978656d,
                0x2020727573616a61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_MAZATLAN,
        ),
        (
            Lower([
                0x742f65706f727565,
                0x206c6f7073617269,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_TIRASPOL,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x2020206f74757061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_MAPUTO,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202031,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ATLANTIC_JAN_MAYEN,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x202020616f6d6173,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_PAGO_PAGO,
        ),
        (
            Lower([
                0x702f65706f727565,
                0x616369726f67646f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_BELGRADE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20616c6f74726f74,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_TORTOLA,
        ),
        (
            Lower([
                0x762f65706f727565,
                0x202020616e6e6569,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_VIENNA,
        ),
        (
            Lower([
                0x6d2f65706f727565,
                0x202020776f63736f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::W_SU,
        ),
        (
            Lower([
                0x622f616369726661,
                0x20657279746e616c,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_BLANTYRE,
        ),
        (
            Lower([
                0x2074646336747363,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::CST_6_CDT,
        ),
        (
            Lower([
                0x2020202020637475,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::UCT,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020206b75756863,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_CHUUK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x20202075616c6170,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::PACIFIC_PALAU,
        ),
        (
            Lower([
                0x2b746d672f637465,
                0x2020202020202030,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GMT,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x6e6172627f6f6972,
                0x2020202020206f63,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_PORTO_ACRE,
        ),
        (
            Lower([
                0x7a61672f61697361,
                0x2020202020202061,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_GAZA,
        ),
        (
            Lower([
                0x6d2f6e6169646e69,
                0x2073657669646c61,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::INDIAN_MALDIVES,
        ),
        (
            Lower([
                0x696c617274737561,
                0x6d65646e696c2f61,
                0x2020202020206e61,
                0x2020202020202020,
            ]),
            raw_tzdata::AUSTRALIA_LINDEMAN,
        ),
        (
            Lower([
                0x7471612f61697361,
                0x2020202020207561,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_AQTAU,
        ),
        (
            Lower([
                0x722f65706f727565,
                0x2020202020656d6f,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_ROME,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x206f746e6f726f74,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_TORONTO,
        ),
        (
            Lower([
                0x652f6164616e6163,
                0x20206e7265747361,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_TORONTO,
        ),
        (
            Lower([
                0x6e61792f61697361,
                0x20202020206e6f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_RANGOON,
        ),
        (
            Lower([
                0x2020202020206267,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::GB,
        ),
        (
            Lower([
                0x20202020206b6f72,
                0x2020202020202020,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ROK,
        ),
        (
            Lower([
                0x612f616369726661,
                0x2020206172656d73,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_ASMARA,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x65636e69767f7473,
                0x202020202020746e,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_ST_VINCENT,
        ),
        (
            Lower([
                0x6c2f616369726661,
                0x20202061646e6175,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_LUANDA,
        ),
        (
            Lower([
                0x6d2f616369726661,
                0x2020656e61626162,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AFRICA_MBABANE,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x75747f646e617267,
                0x2020202020206b72,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_GRAND_TURK,
        ),
        (
            Lower([
                0x2f63696669636170,
                0x2020726574736165,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::CHILE_EASTER_ISLAND,
        ),
        (
            Lower([
                0x2d746d672f637465,
                0x2020202020203331,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ETC_GMT_MINUS_13,
        ),
        (
            Lower([
                0x6968632f61697361,
                0x2020202020206174,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_CHITA,
        ),
        (
            Lower([
                0x6e61722f61697361,
                0x202020206e6f6f67,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::ASIA_RANGOON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x20206e6f73776164,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_DAWSON,
        ),
        (
            Lower([
                0x2f61636972656d61,
                0x75637f7466697773,
                0x202020746e657272,
                0x2020202020202020,
            ]),
            raw_tzdata::AMERICA_SWIFT_CURRENT,
        ),
        (
            Lower([
                0x732f65706f727565,
                0x206f76656a617261,
                0x2020202020202020,
                0x2020202020202020,
            ]),
            raw_tzdata::EUROPE_SARAJEVO,
        ),
    ],
};

#[cfg(feature = "list")]
pub(crate) const TIME_ZONES_LIST: [&str; 571] = [
    "Africa/Abidjan",
    "Africa/Accra",
    "Africa/Addis_Ababa",
    "Africa/Algiers",
    "Africa/Asmara",
    "Africa/Asmera",
    "Africa/Bamako",
    "Africa/Bangui",
    "Africa/Banjul",
    "Africa/Bissau",
    "Africa/Blantyre",
    "Africa/Brazzaville",
    "Africa/Bujumbura",
    "Africa/Cairo",
    "Africa/Casablanca",
    "Africa/Ceuta",
    "Africa/Conakry",
    "Africa/Dakar",
    "Africa/Dar_es_Salaam",
    "Africa/Djibouti",
    "Africa/Douala",
    "Africa/El_Aaiun",
    "Africa/Freetown",
    "Africa/Gaborone",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Africa/Juba",
    "Africa/Kampala",
    "Africa/Khartoum",
    "Africa/Kigali",
    "Africa/Kinshasa",
    "Africa/Lagos",
    "Africa/Libreville",
    "Africa/Lome",
    "Africa/Luanda",
    "Africa/Lubumbashi",
    "Africa/Lusaka",
    "Africa/Malabo",
    "Africa/Maputo",
    "Africa/Maseru",
    "Africa/Mbabane",
    "Africa/Mogadishu",
    "Africa/Monrovia",
    "Africa/Nairobi",
    "Africa/Ndjamena",
    "Africa/Niamey",
    "Africa/Nouakchott",
    "Africa/Ouagadougou",
    "Africa/Porto-Novo",
    "Africa/Sao_Tome",
    "Africa/Timbuktu",
    "Africa/Tripoli",
    "Africa/Tunis",
    "Africa/Windhoek",
    "America/Adak",
    "America/Anchorage",
    "America/Anguilla",
    "America/Antigua",
    "America/Araguaina",
    "America/Aruba",
    "America/Asuncion",
    "America/Atikokan",
    "America/Atka",
    "America/Bahia",
    "America/Bahia_Banderas",
    "America/Barbados",
    "America/Belem",
    "America/Belize",
    "America/Blanc-Sablon",
    "America/Boa_Vista",
    "America/Bogota",
    "America/Boise",
    "America/Buenos_Aires",
    "America/Cambridge_Bay",
    "America/Campo_Grande",
    "America/Cancun",
    "America/Caracas",
    "America/Catamarca",
    "America/Cayenne",
    "America/Cayman",
    "America/Chicago",
    "America/Chihuahua",
    "America/Coral_Harbour",
    "America/Cordoba",
    "America/Costa_Rica",
    "America/Creston",
    "America/Cuiaba",
    "America/Curacao",
    "America/Danmarkshavn",
    "America/Dawson",
    "America/Dawson_Creek",
    "America/Denver",
    "America/Detroit",
    "America/Dominica",
    "America/Edmonton",
    "America/Eirunepe",
    "America/El_Salvador",
    "America/Ensenada",
    "America/Fort_Nelson",
    "America/Fort_Wayne",
    "America/Fortaleza",
    "America/Glace_Bay",
    "America/Godthab",
    "America/Goose_Bay",
    "America/Grand_Turk",
    "America/Grenada",
    "America/Guadeloupe",
    "America/Guatemala",
    "America/Guayaquil",
    "America/Guyana",
    "America/Halifax",
    "America/Havana",
    "America/Hermosillo",
    "America/Indianapolis",
    "America/Inuvik",
    "America/Iqaluit",
    "America/Jamaica",
    "America/Jujuy",
    "America/Juneau",
    "America/Knox_IN",
    "America/Kralendijk",
    "America/La_Paz",
    "America/Lima",
    "America/Los_Angeles",
    "America/Louisville",
    "America/Lower_Princes",
    "America/Maceio",
    "America/Managua",
    "America/Manaus",
    "America/Marigot",
    "America/Martinique",
    "America/Matamoros",
    "America/Mazatlan",
    "America/Mendoza",
    "America/Menominee",
    "America/Merida",
    "America/Metlakatla",
    "America/Mexico_City",
    "America/Miquelon",
    "America/Moncton",
    "America/Monterrey",
    "America/Montevideo",
    "America/Montreal",
    "America/Montserrat",
    "America/Nassau",
    "America/New_York",
    "America/Nipigon",
    "America/Nome",
    "America/Noronha",
    "America/Nuuk",
    "America/Ojinaga",
    "America/Panama",
    "America/Pangnirtung",
    "America/Paramaribo",
    "America/Phoenix",
    "America/Port-au-Prince",
    "America/Port_of_Spain",
    "America/Porto_Acre",
    "America/Porto_Velho",
    "America/Puerto_Rico",
    "America/Punta_Arenas",
    "America/Rainy_River",
    "America/Rankin_Inlet",
    "America/Recife",
    "America/Regina",
    "America/Resolute",
    "America/Rio_Branco",
    "America/Rosario",
    "America/Santa_Isabel",
    "America/Santarem",
    "America/Santiago",
    "America/Santo_Domingo",
    "America/Sao_Paulo",
    "America/Scoresbysund",
    "America/Shiprock",
    "America/Sitka",
    "America/St_Barthelemy",
    "America/St_Johns",
    "America/St_Kitts",
    "America/St_Lucia",
    "America/St_Thomas",
    "America/St_Vincent",
    "America/Swift_Current",
    "America/Tegucigalpa",
    "America/Thule",
    "America/Thunder_Bay",
    "America/Tijuana",
    "America/Toronto",
    "America/Tortola",
    "America/Vancouver",
    "America/Virgin",
    "America/Whitehorse",
    "America/Winnipeg",
    "America/Yakutat",
    "America/Yellowknife",
    "Antarctica/Casey",
    "Antarctica/Davis",
    "Antarctica/DumontDUrville",
    "Antarctica/Macquarie",
    "Antarctica/Mawson",
    "Antarctica/McMurdo",
    "Antarctica/Palmer",
    "Antarctica/Rothera",
    "Antarctica/South_Pole",
    "Antarctica/Syowa",
    "Antarctica/Troll",
    "Antarctica/Vostok",
    "Arctic/Longyearbyen",
    "Asia/Aden",
    "Asia/Almaty",
    "Asia/Amman",
    "Asia/Anadyr",
    "Asia/Aqtau",
    "Asia/Aqtobe",
    "Asia/Ashgabat",
    "Asia/Ashkhabad",
    "Asia/Atyrau",
    "Asia/Baghdad",
    "Asia/Bahrain",
    "Asia/Baku",
    "Asia/Bangkok",
    "Asia/Barnaul",
    "Asia/Beirut",
    "Asia/Bishkek",
    "Asia/Brunei",
    "Asia/Calcutta",
    "Asia/Chita",
    "Asia/Choibalsan",
    "Asia/Chongqing",
    "Asia/Chungking",
    "Asia/Colombo",
    "Asia/Dacca",
    "Asia/Damascus",
    "Asia/Dhaka",
    "Asia/Dili",
    "Asia/Dubai",
    "Asia/Dushanbe",
    "Asia/Famagusta",
    "Asia/Gaza",
    "Asia/Hanoi",
    "Asia/Harbin",
    "Asia/Hebron",
    "Asia/Ho_Chi_Minh",
    "Asia/Hong_Kong",
    "Asia/Hovd",
    "Asia/Irkutsk",
    "Asia/Istanbul",
    "Asia/Jakarta",
    "Asia/Jayapura",
    "Asia/Jerusalem",
    "Asia/Kabul",
    "Asia/Kamchatka",
    "Asia/Karachi",
    "Asia/Kashgar",
    "Asia/Kathmandu",
    "Asia/Katmandu",
    "Asia/Khandyga",
    "Asia/Kolkata",
    "Asia/Krasnoyarsk",
    "Asia/Kuala_Lumpur",
    "Asia/Kuching",
    "Asia/Kuwait",
    "Asia/Macao",
    "Asia/Macau",
    "Asia/Magadan",
    "Asia/Makassar",
    "Asia/Manila",
    "Asia/Muscat",
    "Asia/Nicosia",
    "Asia/Novokuznetsk",
    "Asia/Novosibirsk",
    "Asia/Omsk",
    "Asia/Oral",
    "Asia/Phnom_Penh",
    "Asia/Pontianak",
    "Asia/Pyongyang",
    "Asia/Qatar",
    "Asia/Qostanay",
    "Asia/Qyzylorda",
    "Asia/Rangoon",
    "Asia/Riyadh",
    "Asia/Saigon",
    "Asia/Sakhalin",
    "Asia/Samarkand",
    "Asia/Seoul",
    "Asia/Shanghai",
    "Asia/Singapore",
    "Asia/Srednekolymsk",
    "Asia/Taipei",
    "Asia/Tashkent",
    "Asia/Tbilisi",
    "Asia/Tehran",
    "Asia/Tel_Aviv",
    "Asia/Thimbu",
    "Asia/Thimphu",
    "Asia/Tokyo",
    "Asia/Tomsk",
    "Asia/Ujung_Pandang",
    "Asia/Ulaanbaatar",
    "Asia/Ulan_Bator",
    "Asia/Urumqi",
    "Asia/Ust-Nera",
    "Asia/Vientiane",
    "Asia/Vladivostok",
    "Asia/Yakutsk",
    "Asia/Yangon",
    "Asia/Yekaterinburg",
    "Asia/Yerevan",
    "Atlantic/Azores",
    "Atlantic/Bermuda",
    "Atlantic/Canary",
    "Atlantic/Cape_Verde",
    "Atlantic/Faeroe",
    "Atlantic/Faroe",
    "Atlantic/Jan_Mayen",
    "Atlantic/Madeira",
    "Atlantic/Reykjavik",
    "Atlantic/South_Georgia",
    "Atlantic/St_Helena",
    "Atlantic/Stanley",
    "Australia/ACT",
    "Australia/Adelaide",
    "Australia/Brisbane",
    "Australia/Broken_Hill",
    "Australia/Canberra",
    "Australia/Currie",
    "Australia/Darwin",
    "Australia/Eucla",
    "Australia/Hobart",
    "Australia/LHI",
    "Australia/Lindeman",
    "Australia/Lord_Howe",
    "Australia/Melbourne",
    "Australia/North",
    "Australia/NSW",
    "Australia/Perth",
    "Australia/Queensland",
    "Australia/South",
    "Australia/Sydney",
    "Australia/Tasmania",
    "Australia/Victoria",
    "Australia/West",
    "Australia/Yancowinna",
    "Brazil/Acre",
    "Brazil/DeNoronha",
    "Brazil/East",
    "Brazil/West",
    "Canada/Atlantic",
    "Canada/Central",
    "Canada/Eastern",
    "Canada/Mountain",
    "Canada/Newfoundland",
    "Canada/Pacific",
    "Canada/Saskatchewan",
    "Canada/Yukon",
    "CET",
    "Chile/Continental",
    "Chile/EasterIsland",
    "CST6CDT",
    "Cuba",
    "EET",
    "Egypt",
    "Eire",
    "EST",
    "EST5EDT",
    "Etc/GMT",
    "Etc/GMT+0",
    "Etc/GMT+1",
    "Etc/GMT+10",
    "Etc/GMT+11",
    "Etc/GMT+12",
    "Etc/GMT+2",
    "Etc/GMT+3",
    "Etc/GMT+4",
    "Etc/GMT+5",
    "Etc/GMT+6",
    "Etc/GMT+7",
    "Etc/GMT+8",
    "Etc/GMT+9",
    "Etc/GMT-0",
    "Etc/GMT-1",
    "Etc/GMT-10",
    "Etc/GMT-11",
    "Etc/GMT-12",
    "Etc/GMT-13",
    "Etc/GMT-14",
    "Etc/GMT-2",
    "Etc/GMT-3",
    "Etc/GMT-4",
    "Etc/GMT-5",
    "Etc/GMT-6",
    "Etc/GMT-7",
    "Etc/GMT-8",
    "Etc/GMT-9",
    "Etc/GMT0",
    "Etc/Greenwich",
    "etc/localtime",
    "Etc/UCT",
    "Etc/Universal",
    "Etc/UTC",
    "Etc/Zulu",
    "Europe/Amsterdam",
    "Europe/Andorra",
    "Europe/Astrakhan",
    "Europe/Athens",
    "Europe/Belfast",
    "Europe/Belgrade",
    "Europe/Berlin",
    "Europe/Bratislava",
    "Europe/Brussels",
    "Europe/Bucharest",
    "Europe/Budapest",
    "Europe/Busingen",
    "Europe/Chisinau",
    "Europe/Copenhagen",
    "Europe/Dublin",
    "Europe/Gibraltar",
    "Europe/Guernsey",
    "Europe/Helsinki",
    "Europe/Isle_of_Man",
    "Europe/Istanbul",
    "Europe/Jersey",
    "Europe/Kaliningrad",
    "Europe/Kiev",
    "Europe/Kirov",
    "Europe/Lisbon",
    "Europe/Ljubljana",
    "Europe/London",
    "Europe/Luxembourg",
    "Europe/Madrid",
    "Europe/Malta",
    "Europe/Mariehamn",
    "Europe/Minsk",
    "Europe/Monaco",
    "Europe/Moscow",
    "Europe/Nicosia",
    "Europe/Oslo",
    "Europe/Paris",
    "Europe/Podgorica",
    "Europe/Prague",
    "Europe/Riga",
    "Europe/Rome",
    "Europe/Samara",
    "Europe/San_Marino",
    "Europe/Sarajevo",
    "Europe/Saratov",
    "Europe/Simferopol",
    "Europe/Skopje",
    "Europe/Sofia",
    "Europe/Stockholm",
    "Europe/Tallinn",
    "Europe/Tirane",
    "Europe/Tiraspol",
    "Europe/Ulyanovsk",
    "Europe/Uzhgorod",
    "Europe/Vaduz",
    "Europe/Vatican",
    "Europe/Vienna",
    "Europe/Vilnius",
    "Europe/Volgograd",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Zaporozhye",
    "Europe/Zurich",
    "Factory",
    "GB",
    "GB-Eire",
    "GMT",
    "GMT+0",
    "GMT-0",
    "GMT0",
    "Greenwich",
    "Hongkong",
    "HST",
    "Iceland",
    "Indian/Antananarivo",
    "Indian/Chagos",
    "Indian/Christmas",
    "Indian/Cocos",
    "Indian/Comoro",
    "Indian/Kerguelen",
    "Indian/Mahe",
    "Indian/Maldives",
    "Indian/Mauritius",
    "Indian/Mayotte",
    "Indian/Reunion",
    "Iran",
    "Israel",
    "Jamaica",
    "Japan",
    "Kwajalein",
    "Libya",
    "MET",
    "Mexico/BajaNorte",
    "Mexico/BajaSur",
    "Mexico/General",
    "MST",
    "MST7MDT",
    "Navajo",
    "NZ",
    "NZ-CHAT",
    "Pacific/Apia",
    "Pacific/Auckland",
    "Pacific/Bougainville",
    "Pacific/Chatham",
    "Pacific/Chuuk",
    "Pacific/Easter",
    "Pacific/Efate",
    "Pacific/Enderbury",
    "Pacific/Fakaofo",
    "Pacific/Fiji",
    "Pacific/Funafuti",
    "Pacific/Galapagos",
    "Pacific/Gambier",
    "Pacific/Guadalcanal",
    "Pacific/Guam",
    "Pacific/Honolulu",
    "Pacific/Johnston",
    "Pacific/Kanton",
    "Pacific/Kiritimati",
    "Pacific/Kosrae",
    "Pacific/Kwajalein",
    "Pacific/Majuro",
    "Pacific/Marquesas",
    "Pacific/Midway",
    "Pacific/Nauru",
    "Pacific/Niue",
    "Pacific/Norfolk",
    "Pacific/Noumea",
    "Pacific/Pago_Pago",
    "Pacific/Palau",
    "Pacific/Pitcairn",
    "Pacific/Pohnpei",
    "Pacific/Ponape",
    "Pacific/Port_Moresby",
    "Pacific/Rarotonga",
    "Pacific/Saipan",
    "Pacific/Samoa",
    "Pacific/Tahiti",
    "Pacific/Tarawa",
    "Pacific/Tongatapu",
    "Pacific/Truk",
    "Pacific/Wake",
    "Pacific/Wallis",
    "Pacific/Yap",
    "Poland",
    "Portugal",
    "PRC",
    "PST8PDT",
    "ROC",
    "ROK",
    "Singapore",
    "Turkey",
    "UCT",
    "Universal",
    "US/Alaska",
    "US/Aleutian",
    "US/Arizona",
    "US/Central",
    "US/East-Indiana",
    "US/Eastern",
    "US/Hawaii",
    "US/Indiana-Starke",
    "US/Michigan",
    "US/Mountain",
    "US/Pacific",
    "US/Samoa",
    "UTC",
    "W-SU",
    "WET",
    "Zulu",
];

mod tzdata {
    use tz::timezone::*;

    pub(crate) const AFRICA_ABIDJAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1830383032, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-968, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_ACCRA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1709337548, 2),
            Transition::new(-1581206400, 1),
            Transition::new(-1577917200, 2),
            Transition::new(-1556834400, 1),
            Transition::new(-1546294800, 2),
            Transition::new(-1525298400, 1),
            Transition::new(-1514758800, 2),
            Transition::new(-1493762400, 1),
            Transition::new(-1483222800, 2),
            Transition::new(-1462226400, 1),
            Transition::new(-1451686800, 2),
            Transition::new(-1430604000, 1),
            Transition::new(-1420064400, 2),
            Transition::new(-1399068000, 1),
            Transition::new(-1388528400, 2),
            Transition::new(-1367532000, 1),
            Transition::new(-1356992400, 2),
            Transition::new(-1335996000, 1),
            Transition::new(-1325456400, 2),
            Transition::new(-1304373600, 1),
            Transition::new(-1293834000, 2),
            Transition::new(-1272837600, 1),
            Transition::new(-1262298000, 2),
            Transition::new(-1241301600, 1),
            Transition::new(-1230762000, 2),
            Transition::new(-1209765600, 1),
            Transition::new(-1199226000, 2),
            Transition::new(-1178143200, 1),
            Transition::new(-1167603600, 2),
            Transition::new(-1146607200, 1),
            Transition::new(-1136067600, 2),
            Transition::new(-1115071200, 1),
            Transition::new(-1104531600, 2),
            Transition::new(-1083535200, 1),
            Transition::new(-1072995600, 2),
            Transition::new(-1051912800, 1),
            Transition::new(-1041373200, 2),
            Transition::new(-1020376800, 1),
            Transition::new(-1009837200, 2),
            Transition::new(-988840800, 1),
            Transition::new(-978301200, 2),
            Transition::new(-957304800, 1),
            Transition::new(-946765200, 2),
            Transition::new(-936309600, 1),
            Transition::new(-915142800, 2),
            Transition::new(-904773600, 1),
            Transition::new(-883606800, 2),
            Transition::new(-880329600, 3),
            Transition::new(-756952200, 2),
            Transition::new(-610149600, 4),
            Transition::new(-599610600, 2),
            Transition::new(-578613600, 4),
            Transition::new(-568074600, 2),
            Transition::new(-546991200, 4),
            Transition::new(-536452200, 2),
            Transition::new(-515455200, 4),
            Transition::new(-504916200, 2),
            Transition::new(-483919200, 4),
            Transition::new(-473380200, 2),
            Transition::new(-452383200, 4),
            Transition::new(-441844200, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-52, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(1200, true, Some(b"+0020")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(1800, false, Some(b"+0030")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(1800, true, Some(b"+0030")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_ADDIS_ABABA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3155682888, 1),
            Transition::new(-1062210920, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(9288, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9320, false, Some(b"ADMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_ALGIERS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2486592732, 1),
            Transition::new(-1855958961, 3),
            Transition::new(-1689814800, 2),
            Transition::new(-1680397200, 3),
            Transition::new(-1665363600, 2),
            Transition::new(-1648342800, 3),
            Transition::new(-1635123600, 2),
            Transition::new(-1616893200, 3),
            Transition::new(-1604278800, 2),
            Transition::new(-1585443600, 3),
            Transition::new(-1574038800, 2),
            Transition::new(-1552266000, 3),
            Transition::new(-1539997200, 2),
            Transition::new(-1531443600, 3),
            Transition::new(-956365200, 2),
            Transition::new(-950486400, 3),
            Transition::new(-942012000, 5),
            Transition::new(-812502000, 4),
            Transition::new(-796262400, 5),
            Transition::new(-781052400, 4),
            Transition::new(-766630800, 5),
            Transition::new(-733280400, 3),
            Transition::new(-439430400, 5),
            Transition::new(-212029200, 3),
            Transition::new(41468400, 2),
            Transition::new(54774000, 3),
            Transition::new(231724800, 2),
            Transition::new(246236400, 5),
            Transition::new(259545600, 4),
            Transition::new(275274000, 5),
            Transition::new(309740400, 3),
            Transition::new(325468800, 2),
            Transition::new(341802000, 3),
            Transition::new(357523200, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(732, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(561, false, Some(b"PMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_ASMARA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3155682932, 1),
            Transition::new(-2524530932, 2),
            Transition::new(-1062210920, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(9332, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9332, false, Some(b"AMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9320, false, Some(b"ADMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_BAMAKO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830382080, 1),
            Transition::new(-1131235200, 2),
            Transition::new(-300841200, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-1920, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_BANGUI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1830388460, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(4460, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_BANJUL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830380004, 1),
            Transition::new(-1159829604, 2),
            Transition::new(-880930800, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-3996, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3996, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_BISSAU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830380400, 1),
            Transition::new(157770000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-3740, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_BLANTYRE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1844302800, 1),
            Transition::new(-1751682070, 2),
            Transition::new(-1404440460, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(8400, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(8470, false, Some(b"ZMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(8460, false, Some(b"ZMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_BRAZZAVILLE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1830387668, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(3668, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_BUJUMBURA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2524528648, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(7048, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_CASABLANCA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1773012580, 2),
            Transition::new(-956361600, 1),
            Transition::new(-950490000, 2),
            Transition::new(-942019200, 1),
            Transition::new(-761187600, 2),
            Transition::new(-617241600, 1),
            Transition::new(-605149200, 2),
            Transition::new(-81432000, 1),
            Transition::new(-71110800, 2),
            Transition::new(141264000, 1),
            Transition::new(147222000, 2),
            Transition::new(199756800, 1),
            Transition::new(207702000, 2),
            Transition::new(231292800, 1),
            Transition::new(244249200, 2),
            Transition::new(265507200, 1),
            Transition::new(271033200, 2),
            Transition::new(448243200, 3),
            Transition::new(504918000, 2),
            Transition::new(1212278400, 1),
            Transition::new(1220223600, 2),
            Transition::new(1243814400, 1),
            Transition::new(1250809200, 2),
            Transition::new(1272758400, 1),
            Transition::new(1281222000, 2),
            Transition::new(1301788800, 1),
            Transition::new(1312066800, 2),
            Transition::new(1335664800, 1),
            Transition::new(1342749600, 2),
            Transition::new(1345428000, 1),
            Transition::new(1348970400, 2),
            Transition::new(1367114400, 1),
            Transition::new(1373162400, 2),
            Transition::new(1376100000, 1),
            Transition::new(1382839200, 2),
            Transition::new(1396144800, 1),
            Transition::new(1403920800, 2),
            Transition::new(1406944800, 1),
            Transition::new(1414288800, 2),
            Transition::new(1427594400, 1),
            Transition::new(1434247200, 2),
            Transition::new(1437271200, 1),
            Transition::new(1445738400, 2),
            Transition::new(1459044000, 1),
            Transition::new(1465092000, 2),
            Transition::new(1468116000, 1),
            Transition::new(1477792800, 2),
            Transition::new(1490493600, 1),
            Transition::new(1495332000, 2),
            Transition::new(1498960800, 1),
            Transition::new(1509242400, 2),
            Transition::new(1521943200, 1),
            Transition::new(1526176800, 2),
            Transition::new(1529200800, 1),
            Transition::new(1540692000, 3),
            Transition::new(1557021600, 4),
            Transition::new(1560045600, 3),
            Transition::new(1587261600, 4),
            Transition::new(1590890400, 3),
            Transition::new(1618106400, 4),
            Transition::new(1621130400, 3),
            Transition::new(1648346400, 4),
            Transition::new(1651975200, 3),
            Transition::new(1679191200, 4),
            Transition::new(1682820000, 3),
            Transition::new(1710036000, 4),
            Transition::new(1713060000, 3),
            Transition::new(1740276000, 4),
            Transition::new(1743904800, 3),
            Transition::new(1771120800, 4),
            Transition::new(1774144800, 3),
            Transition::new(1801965600, 4),
            Transition::new(1804989600, 3),
            Transition::new(1832205600, 4),
            Transition::new(1835834400, 3),
            Transition::new(1863050400, 4),
            Transition::new(1866074400, 3),
            Transition::new(1893290400, 4),
            Transition::new(1896919200, 3),
            Transition::new(1924135200, 4),
            Transition::new(1927764000, 3),
            Transition::new(1954980000, 4),
            Transition::new(1958004000, 3),
            Transition::new(1985220000, 4),
            Transition::new(1988848800, 3),
            Transition::new(2016064800, 4),
            Transition::new(2019088800, 3),
            Transition::new(2046304800, 4),
            Transition::new(2049933600, 3),
            Transition::new(2077149600, 4),
            Transition::new(2080778400, 3),
            Transition::new(2107994400, 4),
            Transition::new(2111018400, 3),
            Transition::new(2138234400, 4),
            Transition::new(2141863200, 3),
            Transition::new(2169079200, 4),
            Transition::new(2172708000, 3),
            Transition::new(2199924000, 4),
            Transition::new(2202948000, 3),
            Transition::new(2230164000, 4),
            Transition::new(2233792800, 3),
            Transition::new(2261008800, 4),
            Transition::new(2264032800, 3),
            Transition::new(2291248800, 4),
            Transition::new(2294877600, 3),
            Transition::new(2322093600, 4),
            Transition::new(2325722400, 3),
            Transition::new(2352938400, 4),
            Transition::new(2355962400, 3),
            Transition::new(2383178400, 4),
            Transition::new(2386807200, 3),
            Transition::new(2414023200, 4),
            Transition::new(2417652000, 3),
            Transition::new(2444868000, 4),
            Transition::new(2447892000, 3),
            Transition::new(2475108000, 4),
            Transition::new(2478736800, 3),
            Transition::new(2505952800, 4),
            Transition::new(2508976800, 3),
            Transition::new(2536192800, 4),
            Transition::new(2539821600, 3),
            Transition::new(2567037600, 4),
            Transition::new(2570666400, 3),
            Transition::new(2597882400, 4),
            Transition::new(2600906400, 3),
            Transition::new(2628122400, 4),
            Transition::new(2631751200, 3),
            Transition::new(2658967200, 4),
            Transition::new(2662596000, 3),
            Transition::new(2689812000, 4),
            Transition::new(2692836000, 3),
            Transition::new(2720052000, 4),
            Transition::new(2723680800, 3),
            Transition::new(2750896800, 4),
            Transition::new(2753920800, 3),
            Transition::new(2781136800, 4),
            Transition::new(2784765600, 3),
            Transition::new(2811981600, 4),
            Transition::new(2815610400, 3),
            Transition::new(2842826400, 4),
            Transition::new(2845850400, 3),
            Transition::new(2873066400, 4),
            Transition::new(2876695200, 3),
            Transition::new(2903911200, 4),
            Transition::new(2907540000, 3),
            Transition::new(2934756000, 4),
            Transition::new(2937780000, 3),
            Transition::new(2964996000, 4),
            Transition::new(2968624800, 3),
            Transition::new(2995840800, 4),
            Transition::new(2998864800, 3),
            Transition::new(3026080800, 4),
            Transition::new(3029709600, 3),
            Transition::new(3056925600, 4),
            Transition::new(3060554400, 3),
            Transition::new(3087770400, 4),
            Transition::new(3090794400, 3),
            Transition::new(3118010400, 4),
            Transition::new(3121639200, 3),
            Transition::new(3148855200, 4),
            Transition::new(3152484000, 3),
            Transition::new(3179700000, 4),
            Transition::new(3182724000, 3),
            Transition::new(3209940000, 4),
            Transition::new(3213568800, 3),
            Transition::new(3240784800, 4),
            Transition::new(3243808800, 3),
            Transition::new(3271024800, 4),
            Transition::new(3274653600, 3),
            Transition::new(3301869600, 4),
            Transition::new(3305498400, 3),
            Transition::new(3332714400, 4),
            Transition::new(3335738400, 3),
            Transition::new(3362954400, 4),
            Transition::new(3366583200, 3),
            Transition::new(3393799200, 4),
            Transition::new(3397428000, 3),
            Transition::new(3424644000, 4),
            Transition::new(3427668000, 3),
            Transition::new(3454884000, 4),
            Transition::new(3458512800, 3),
            Transition::new(3485728800, 4),
            Transition::new(3488752800, 3),
            Transition::new(3515968800, 4),
            Transition::new(3519597600, 3),
            Transition::new(3546813600, 4),
            Transition::new(3550442400, 3),
            Transition::new(3577658400, 4),
            Transition::new(3580682400, 3),
            Transition::new(3607898400, 4),
            Transition::new(3611527200, 3),
            Transition::new(3638743200, 4),
            Transition::new(3642372000, 3),
            Transition::new(3669588000, 4),
            Transition::new(3672612000, 3),
            Transition::new(3699828000, 4),
            Transition::new(3703456800, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-1820, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"+01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"+00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"+01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, true, Some(b"+00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"+01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_CEUTA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177452800, 1),
            Transition::new(-1630112400, 2),
            Transition::new(-1616810400, 1),
            Transition::new(-1442451600, 2),
            Transition::new(-1427673600, 1),
            Transition::new(-1379293200, 2),
            Transition::new(-1364774400, 1),
            Transition::new(-1348448400, 2),
            Transition::new(-1333324800, 1),
            Transition::new(-1316390400, 2),
            Transition::new(-1301270400, 1),
            Transition::new(-81432000, 2),
            Transition::new(-71110800, 1),
            Transition::new(141264000, 2),
            Transition::new(147222000, 1),
            Transition::new(199756800, 2),
            Transition::new(207702000, 1),
            Transition::new(231292800, 2),
            Transition::new(244249200, 1),
            Transition::new(265507200, 2),
            Transition::new(271033200, 1),
            Transition::new(448243200, 3),
            Transition::new(512528400, 4),
            Transition::new(528253200, 3),
            Transition::new(543978000, 4),
            Transition::new(559702800, 3),
            Transition::new(575427600, 4),
            Transition::new(591152400, 3),
            Transition::new(606877200, 4),
            Transition::new(622602000, 3),
            Transition::new(638326800, 4),
            Transition::new(654656400, 3),
            Transition::new(670381200, 4),
            Transition::new(686106000, 3),
            Transition::new(701830800, 4),
            Transition::new(717555600, 3),
            Transition::new(733280400, 4),
            Transition::new(749005200, 3),
            Transition::new(764730000, 4),
            Transition::new(780454800, 3),
            Transition::new(796179600, 4),
            Transition::new(811904400, 3),
            Transition::new(828234000, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-1276, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_CONAKRY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830380708, 1),
            Transition::new(-1131235200, 2),
            Transition::new(-315615600, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-3292, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_DAKAR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830379816, 1),
            Transition::new(-902098800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-4184, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_DAR_ES_SALAAM: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1230777428, 1),
            Transition::new(-694321200, 2),
            Transition::new(-284006700, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(9428, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9900, false, Some(b"+0245")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_DJIBOUTI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1846291956, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(10356, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_DOUALA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1830386328, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(2328, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_EL_AAIUN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1136070432, 1),
            Transition::new(198291600, 3),
            Transition::new(199756800, 2),
            Transition::new(207702000, 3),
            Transition::new(231292800, 2),
            Transition::new(244249200, 3),
            Transition::new(265507200, 2),
            Transition::new(271033200, 3),
            Transition::new(1212278400, 2),
            Transition::new(1220223600, 3),
            Transition::new(1243814400, 2),
            Transition::new(1250809200, 3),
            Transition::new(1272758400, 2),
            Transition::new(1281222000, 3),
            Transition::new(1301788800, 2),
            Transition::new(1312066800, 3),
            Transition::new(1335664800, 2),
            Transition::new(1342749600, 3),
            Transition::new(1345428000, 2),
            Transition::new(1348970400, 3),
            Transition::new(1367114400, 2),
            Transition::new(1373162400, 3),
            Transition::new(1376100000, 2),
            Transition::new(1382839200, 3),
            Transition::new(1396144800, 2),
            Transition::new(1403920800, 3),
            Transition::new(1406944800, 2),
            Transition::new(1414288800, 3),
            Transition::new(1427594400, 2),
            Transition::new(1434247200, 3),
            Transition::new(1437271200, 2),
            Transition::new(1445738400, 3),
            Transition::new(1459044000, 2),
            Transition::new(1465092000, 3),
            Transition::new(1468116000, 2),
            Transition::new(1477792800, 3),
            Transition::new(1490493600, 2),
            Transition::new(1495332000, 3),
            Transition::new(1498960800, 2),
            Transition::new(1509242400, 3),
            Transition::new(1521943200, 2),
            Transition::new(1526176800, 3),
            Transition::new(1529200800, 2),
            Transition::new(1540692000, 5),
            Transition::new(1557021600, 4),
            Transition::new(1560045600, 5),
            Transition::new(1587261600, 4),
            Transition::new(1590890400, 5),
            Transition::new(1618106400, 4),
            Transition::new(1621130400, 5),
            Transition::new(1648346400, 4),
            Transition::new(1651975200, 5),
            Transition::new(1679191200, 4),
            Transition::new(1682820000, 5),
            Transition::new(1710036000, 4),
            Transition::new(1713060000, 5),
            Transition::new(1740276000, 4),
            Transition::new(1743904800, 5),
            Transition::new(1771120800, 4),
            Transition::new(1774144800, 5),
            Transition::new(1801965600, 4),
            Transition::new(1804989600, 5),
            Transition::new(1832205600, 4),
            Transition::new(1835834400, 5),
            Transition::new(1863050400, 4),
            Transition::new(1866074400, 5),
            Transition::new(1893290400, 4),
            Transition::new(1896919200, 5),
            Transition::new(1924135200, 4),
            Transition::new(1927764000, 5),
            Transition::new(1954980000, 4),
            Transition::new(1958004000, 5),
            Transition::new(1985220000, 4),
            Transition::new(1988848800, 5),
            Transition::new(2016064800, 4),
            Transition::new(2019088800, 5),
            Transition::new(2046304800, 4),
            Transition::new(2049933600, 5),
            Transition::new(2077149600, 4),
            Transition::new(2080778400, 5),
            Transition::new(2107994400, 4),
            Transition::new(2111018400, 5),
            Transition::new(2138234400, 4),
            Transition::new(2141863200, 5),
            Transition::new(2169079200, 4),
            Transition::new(2172708000, 5),
            Transition::new(2199924000, 4),
            Transition::new(2202948000, 5),
            Transition::new(2230164000, 4),
            Transition::new(2233792800, 5),
            Transition::new(2261008800, 4),
            Transition::new(2264032800, 5),
            Transition::new(2291248800, 4),
            Transition::new(2294877600, 5),
            Transition::new(2322093600, 4),
            Transition::new(2325722400, 5),
            Transition::new(2352938400, 4),
            Transition::new(2355962400, 5),
            Transition::new(2383178400, 4),
            Transition::new(2386807200, 5),
            Transition::new(2414023200, 4),
            Transition::new(2417652000, 5),
            Transition::new(2444868000, 4),
            Transition::new(2447892000, 5),
            Transition::new(2475108000, 4),
            Transition::new(2478736800, 5),
            Transition::new(2505952800, 4),
            Transition::new(2508976800, 5),
            Transition::new(2536192800, 4),
            Transition::new(2539821600, 5),
            Transition::new(2567037600, 4),
            Transition::new(2570666400, 5),
            Transition::new(2597882400, 4),
            Transition::new(2600906400, 5),
            Transition::new(2628122400, 4),
            Transition::new(2631751200, 5),
            Transition::new(2658967200, 4),
            Transition::new(2662596000, 5),
            Transition::new(2689812000, 4),
            Transition::new(2692836000, 5),
            Transition::new(2720052000, 4),
            Transition::new(2723680800, 5),
            Transition::new(2750896800, 4),
            Transition::new(2753920800, 5),
            Transition::new(2781136800, 4),
            Transition::new(2784765600, 5),
            Transition::new(2811981600, 4),
            Transition::new(2815610400, 5),
            Transition::new(2842826400, 4),
            Transition::new(2845850400, 5),
            Transition::new(2873066400, 4),
            Transition::new(2876695200, 5),
            Transition::new(2903911200, 4),
            Transition::new(2907540000, 5),
            Transition::new(2934756000, 4),
            Transition::new(2937780000, 5),
            Transition::new(2964996000, 4),
            Transition::new(2968624800, 5),
            Transition::new(2995840800, 4),
            Transition::new(2998864800, 5),
            Transition::new(3026080800, 4),
            Transition::new(3029709600, 5),
            Transition::new(3056925600, 4),
            Transition::new(3060554400, 5),
            Transition::new(3087770400, 4),
            Transition::new(3090794400, 5),
            Transition::new(3118010400, 4),
            Transition::new(3121639200, 5),
            Transition::new(3148855200, 4),
            Transition::new(3152484000, 5),
            Transition::new(3179700000, 4),
            Transition::new(3182724000, 5),
            Transition::new(3209940000, 4),
            Transition::new(3213568800, 5),
            Transition::new(3240784800, 4),
            Transition::new(3243808800, 5),
            Transition::new(3271024800, 4),
            Transition::new(3274653600, 5),
            Transition::new(3301869600, 4),
            Transition::new(3305498400, 5),
            Transition::new(3332714400, 4),
            Transition::new(3335738400, 5),
            Transition::new(3362954400, 4),
            Transition::new(3366583200, 5),
            Transition::new(3393799200, 4),
            Transition::new(3397428000, 5),
            Transition::new(3424644000, 4),
            Transition::new(3427668000, 5),
            Transition::new(3454884000, 4),
            Transition::new(3458512800, 5),
            Transition::new(3485728800, 4),
            Transition::new(3488752800, 5),
            Transition::new(3515968800, 4),
            Transition::new(3519597600, 5),
            Transition::new(3546813600, 4),
            Transition::new(3550442400, 5),
            Transition::new(3577658400, 4),
            Transition::new(3580682400, 5),
            Transition::new(3607898400, 4),
            Transition::new(3611527200, 5),
            Transition::new(3638743200, 4),
            Transition::new(3642372000, 5),
            Transition::new(3669588000, 4),
            Transition::new(3672612000, 5),
            Transition::new(3699828000, 4),
            Transition::new(3703456800, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-3168, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"+01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"+00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, true, Some(b"+00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"+01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"+01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_FREETOWN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2776979220, 1),
            Transition::new(-1783120020, 3),
            Transition::new(-1170284400, 2),
            Transition::new(-1159831200, 3),
            Transition::new(-1146610800, 2),
            Transition::new(-1128295200, 3),
            Transition::new(-1115074800, 2),
            Transition::new(-1096759200, 3),
            Transition::new(-1083538800, 2),
            Transition::new(-1065136800, 3),
            Transition::new(-1051916400, 2),
            Transition::new(-1033600800, 3),
            Transition::new(-1020380400, 2),
            Transition::new(-1002064800, 3),
            Transition::new(-988844400, 2),
            Transition::new(-965258400, 3),
            Transition::new(-957308400, 2),
            Transition::new(-956964000, 3),
            Transition::new(-885769200, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-3180, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3180, false, Some(b"FMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-2400, true, Some(b"-0040")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(1200, true, Some(b"+01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(2400, false, Some(b"XXX")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(1200, true, Some(b"+01")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::Julian0WithLeap(match Julian0WithLeap::new(0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                    RuleDay::Julian1WithoutLeap(match Julian1WithoutLeap::new(365) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    85200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_GABORONE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2682294220, 1),
            Transition::new(-2109288600, 2),
            Transition::new(-829526400, 3),
            Transition::new(-813805200, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(6220, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5400, false, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"CAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_HARARE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2109290652, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(7452, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_JOHANNESBURG: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2458173120, 1),
            Transition::new(-2109288600, 3),
            Transition::new(-860976000, 2),
            Transition::new(-845254800, 3),
            Transition::new(-829526400, 2),
            Transition::new(-813805200, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(6720, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5400, false, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_JUBA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1230775588, 2),
            Transition::new(10360800, 1),
            Transition::new(24786000, 2),
            Transition::new(41810400, 1),
            Transition::new(56322000, 2),
            Transition::new(73432800, 1),
            Transition::new(87944400, 2),
            Transition::new(104882400, 1),
            Transition::new(119480400, 2),
            Transition::new(136332000, 1),
            Transition::new(151016400, 2),
            Transition::new(167781600, 1),
            Transition::new(182552400, 2),
            Transition::new(199231200, 1),
            Transition::new(214174800, 2),
            Transition::new(230680800, 1),
            Transition::new(245710800, 2),
            Transition::new(262735200, 1),
            Transition::new(277246800, 2),
            Transition::new(294184800, 1),
            Transition::new(308782800, 2),
            Transition::new(325634400, 1),
            Transition::new(340405200, 2),
            Transition::new(357084000, 1),
            Transition::new(371941200, 2),
            Transition::new(388533600, 1),
            Transition::new(403477200, 2),
            Transition::new(419983200, 1),
            Transition::new(435013200, 2),
            Transition::new(452037600, 1),
            Transition::new(466635600, 2),
            Transition::new(483487200, 1),
            Transition::new(498171600, 2),
            Transition::new(947930400, 3),
            Transition::new(1612126800, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(7588, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"CAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_KAMPALA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1309745380, 1),
            Transition::new(-1262314800, 2),
            Transition::new(-694319400, 3),
            Transition::new(-410237100, 1),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(7780, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9000, false, Some(b"+0230")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9900, false, Some(b"+0245")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_KHARTOUM: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1230775808, 2),
            Transition::new(10360800, 1),
            Transition::new(24786000, 2),
            Transition::new(41810400, 1),
            Transition::new(56322000, 2),
            Transition::new(73432800, 1),
            Transition::new(87944400, 2),
            Transition::new(104882400, 1),
            Transition::new(119480400, 2),
            Transition::new(136332000, 1),
            Transition::new(151016400, 2),
            Transition::new(167781600, 1),
            Transition::new(182552400, 2),
            Transition::new(199231200, 1),
            Transition::new(214174800, 2),
            Transition::new(230680800, 1),
            Transition::new(245710800, 2),
            Transition::new(262735200, 1),
            Transition::new(277246800, 2),
            Transition::new(294184800, 1),
            Transition::new(308782800, 2),
            Transition::new(325634400, 1),
            Transition::new(340405200, 2),
            Transition::new(357084000, 1),
            Transition::new(371941200, 2),
            Transition::new(388533600, 1),
            Transition::new(403477200, 2),
            Transition::new(419983200, 1),
            Transition::new(435013200, 2),
            Transition::new(452037600, 1),
            Transition::new(466635600, 2),
            Transition::new(483487200, 1),
            Transition::new(498171600, 2),
            Transition::new(947930400, 3),
            Transition::new(1509483600, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(7808, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"CAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_KIGALI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1091498416, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(7216, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_KINSHASA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2276643672, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(3672, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_LAGOS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2035584815, 1),
            Transition::new(-1940889600, 0),
            Transition::new(-1767226415, 2),
            Transition::new(-1588465800, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(815, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(1800, false, Some(b"+0030")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_LIBREVILLE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1830386268, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(2268, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_LOME: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2429827492, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(292, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_LUANDA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2461452776, 1),
            Transition::new(-1830387600, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(3176, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3124, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_LUBUMBASHI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2276646592, 1),
            Transition::new(-1567990800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(6592, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_LUSAKA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2109289988, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(6788, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_MALABO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830386108, 1),
            Transition::new(-190857600, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(2108, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_MAPUTO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2109291020, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(7820, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_MASERU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2109289800, 1),
            Transition::new(-829526400, 2),
            Transition::new(-813805200, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(6600, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_MBABANE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2109290664, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(7464, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_MOGADISHU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2403572488, 1),
            Transition::new(-1230778800, 2),
            Transition::new(-410236200, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(10888, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9000, false, Some(b"+0230")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_MONROVIA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2776979812, 1),
            Transition::new(-1604359012, 2),
            Transition::new(63593070, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-2588, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-2588, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-2670, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_NAIROBI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1946168836, 1),
            Transition::new(-1309746600, 2),
            Transition::new(-1261969200, 1),
            Transition::new(-1041388200, 3),
            Transition::new(-865305900, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(8836, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9000, false, Some(b"+0230")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9900, false, Some(b"+0245")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_NDJAMENA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830387612, 1),
            Transition::new(308703600, 2),
            Transition::new(321314400, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(3612, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"WAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_NIAMEY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830384508, 1),
            Transition::new(-1131231600, 2),
            Transition::new(-315619200, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(508, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_NOUAKCHOTT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830380172, 1),
            Transition::new(-1131235200, 2),
            Transition::new(-286930800, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-3828, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_OUAGADOUGOU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1830383636, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-364, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_PORTO_NOVO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830384628, 1),
            Transition::new(-1131235200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(628, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_SAO_TOME: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713912016, 1),
            Transition::new(-1830384000, 2),
            Transition::new(1514768400, 3),
            Transition::new(1546304400, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(1616, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-2205, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_TIMBUKTU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1830383276, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-724, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_TUNIS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2797202444, 1),
            Transition::new(-1855958961, 3),
            Transition::new(-969242400, 2),
            Transition::new(-950493600, 3),
            Transition::new(-941940000, 2),
            Transition::new(-891136800, 3),
            Transition::new(-877827600, 2),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 2),
            Transition::new(-842918400, 3),
            Transition::new(-842223600, 2),
            Transition::new(-828230400, 3),
            Transition::new(-812502000, 2),
            Transition::new(-796269600, 3),
            Transition::new(-781052400, 2),
            Transition::new(-766634400, 3),
            Transition::new(231202800, 2),
            Transition::new(243903600, 3),
            Transition::new(262825200, 2),
            Transition::new(276044400, 3),
            Transition::new(581122800, 2),
            Transition::new(591145200, 3),
            Transition::new(606870000, 2),
            Transition::new(622594800, 3),
            Transition::new(641516400, 2),
            Transition::new(654649200, 3),
            Transition::new(1114902000, 2),
            Transition::new(1128038400, 3),
            Transition::new(1143334800, 2),
            Transition::new(1162083600, 3),
            Transition::new(1174784400, 2),
            Transition::new(1193533200, 3),
            Transition::new(1206838800, 2),
            Transition::new(1224982800, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(2444, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(561, false, Some(b"PMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AFRICA_WINDHOEK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2458170504, 1),
            Transition::new(-2109288600, 2),
            Transition::new(-860976000, 3),
            Transition::new(-845254800, 2),
            Transition::new(637970400, 5),
            Transition::new(764200800, 4),
            Transition::new(778640400, 5),
            Transition::new(796780800, 4),
            Transition::new(810090000, 5),
            Transition::new(828835200, 4),
            Transition::new(841539600, 5),
            Transition::new(860284800, 4),
            Transition::new(873594000, 5),
            Transition::new(891734400, 4),
            Transition::new(905043600, 5),
            Transition::new(923184000, 4),
            Transition::new(936493200, 5),
            Transition::new(954633600, 4),
            Transition::new(967942800, 5),
            Transition::new(986083200, 4),
            Transition::new(999392400, 5),
            Transition::new(1018137600, 4),
            Transition::new(1030842000, 5),
            Transition::new(1049587200, 4),
            Transition::new(1062896400, 5),
            Transition::new(1081036800, 4),
            Transition::new(1094346000, 5),
            Transition::new(1112486400, 4),
            Transition::new(1125795600, 5),
            Transition::new(1143936000, 4),
            Transition::new(1157245200, 5),
            Transition::new(1175385600, 4),
            Transition::new(1188694800, 5),
            Transition::new(1207440000, 4),
            Transition::new(1220749200, 5),
            Transition::new(1238889600, 4),
            Transition::new(1252198800, 5),
            Transition::new(1270339200, 4),
            Transition::new(1283648400, 5),
            Transition::new(1301788800, 4),
            Transition::new(1315098000, 5),
            Transition::new(1333238400, 4),
            Transition::new(1346547600, 5),
            Transition::new(1365292800, 4),
            Transition::new(1377997200, 5),
            Transition::new(1396742400, 4),
            Transition::new(1410051600, 5),
            Transition::new(1428192000, 4),
            Transition::new(1441501200, 5),
            Transition::new(1459641600, 4),
            Transition::new(1472950800, 5),
            Transition::new(1491091200, 4),
            Transition::new(1504400400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(4104, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5400, false, Some(b"+0130")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"SAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"CAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ADAK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3225223727, 1),
            Transition::new(-2188944802, 2),
            Transition::new(-880196400, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765374400, 2),
            Transition::new(-86878800, 5),
            Transition::new(-21466800, 6),
            Transition::new(-5745600, 5),
            Transition::new(9982800, 6),
            Transition::new(25704000, 5),
            Transition::new(41432400, 6),
            Transition::new(57758400, 5),
            Transition::new(73486800, 6),
            Transition::new(89208000, 5),
            Transition::new(104936400, 6),
            Transition::new(120657600, 5),
            Transition::new(126709200, 6),
            Transition::new(152107200, 5),
            Transition::new(162392400, 6),
            Transition::new(183556800, 5),
            Transition::new(199285200, 6),
            Transition::new(215611200, 5),
            Transition::new(230734800, 6),
            Transition::new(247060800, 5),
            Transition::new(262789200, 6),
            Transition::new(278510400, 5),
            Transition::new(294238800, 6),
            Transition::new(309960000, 5),
            Transition::new(325688400, 6),
            Transition::new(341409600, 5),
            Transition::new(357138000, 6),
            Transition::new(372859200, 5),
            Transition::new(388587600, 6),
            Transition::new(404913600, 5),
            Transition::new(420037200, 6),
            Transition::new(436363200, 7),
            Transition::new(439034400, 9),
            Transition::new(452088000, 8),
            Transition::new(467809200, 9),
            Transition::new(483537600, 8),
            Transition::new(499258800, 9),
            Transition::new(514987200, 8),
            Transition::new(530708400, 9),
            Transition::new(544622400, 8),
            Transition::new(562158000, 9),
            Transition::new(576072000, 8),
            Transition::new(594212400, 9),
            Transition::new(607521600, 8),
            Transition::new(625662000, 9),
            Transition::new(638971200, 8),
            Transition::new(657111600, 9),
            Transition::new(671025600, 8),
            Transition::new(688561200, 9),
            Transition::new(702475200, 8),
            Transition::new(720010800, 9),
            Transition::new(733924800, 8),
            Transition::new(752065200, 9),
            Transition::new(765374400, 8),
            Transition::new(783514800, 9),
            Transition::new(796824000, 8),
            Transition::new(814964400, 9),
            Transition::new(828878400, 8),
            Transition::new(846414000, 9),
            Transition::new(860328000, 8),
            Transition::new(877863600, 9),
            Transition::new(891777600, 8),
            Transition::new(909313200, 9),
            Transition::new(923227200, 8),
            Transition::new(941367600, 9),
            Transition::new(954676800, 8),
            Transition::new(972817200, 9),
            Transition::new(986126400, 8),
            Transition::new(1004266800, 9),
            Transition::new(1018180800, 8),
            Transition::new(1035716400, 9),
            Transition::new(1049630400, 8),
            Transition::new(1067166000, 9),
            Transition::new(1081080000, 8),
            Transition::new(1099220400, 9),
            Transition::new(1112529600, 8),
            Transition::new(1130670000, 9),
            Transition::new(1143979200, 8),
            Transition::new(1162119600, 9),
            Transition::new(1173614400, 8),
        ],
        &{
            const V: [LocalTimeType; 10] = [
                match LocalTimeType::new(44002, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-42398, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"NST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, true, Some(b"NWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, true, Some(b"NPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, true, Some(b"BDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, false, Some(b"AHST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, true, Some(b"HDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, false, Some(b"HST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-36000, false, Some(b"HST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-32400, true, Some(b"HDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ANCHORAGE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3225223727, 1),
            Transition::new(-2188951224, 2),
            Transition::new(-880200000, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765378000, 2),
            Transition::new(-86882400, 5),
            Transition::new(-21470400, 6),
            Transition::new(-5749200, 5),
            Transition::new(9979200, 6),
            Transition::new(25700400, 5),
            Transition::new(41428800, 6),
            Transition::new(57754800, 5),
            Transition::new(73483200, 6),
            Transition::new(89204400, 5),
            Transition::new(104932800, 6),
            Transition::new(120654000, 5),
            Transition::new(126705600, 6),
            Transition::new(152103600, 5),
            Transition::new(162388800, 6),
            Transition::new(183553200, 5),
            Transition::new(199281600, 6),
            Transition::new(215607600, 5),
            Transition::new(230731200, 6),
            Transition::new(247057200, 5),
            Transition::new(262785600, 6),
            Transition::new(278506800, 5),
            Transition::new(294235200, 6),
            Transition::new(309956400, 5),
            Transition::new(325684800, 6),
            Transition::new(341406000, 5),
            Transition::new(357134400, 6),
            Transition::new(372855600, 5),
            Transition::new(388584000, 6),
            Transition::new(404910000, 5),
            Transition::new(420033600, 6),
            Transition::new(436359600, 7),
            Transition::new(439030800, 9),
            Transition::new(452084400, 8),
            Transition::new(467805600, 9),
            Transition::new(483534000, 8),
            Transition::new(499255200, 9),
            Transition::new(514983600, 8),
            Transition::new(530704800, 9),
            Transition::new(544618800, 8),
            Transition::new(562154400, 9),
            Transition::new(576068400, 8),
            Transition::new(594208800, 9),
            Transition::new(607518000, 8),
            Transition::new(625658400, 9),
            Transition::new(638967600, 8),
            Transition::new(657108000, 9),
            Transition::new(671022000, 8),
            Transition::new(688557600, 9),
            Transition::new(702471600, 8),
            Transition::new(720007200, 9),
            Transition::new(733921200, 8),
            Transition::new(752061600, 9),
            Transition::new(765370800, 8),
            Transition::new(783511200, 9),
            Transition::new(796820400, 8),
            Transition::new(814960800, 9),
            Transition::new(828874800, 8),
            Transition::new(846410400, 9),
            Transition::new(860324400, 8),
            Transition::new(877860000, 9),
            Transition::new(891774000, 8),
            Transition::new(909309600, 9),
            Transition::new(923223600, 8),
            Transition::new(941364000, 9),
            Transition::new(954673200, 8),
            Transition::new(972813600, 9),
            Transition::new(986122800, 8),
            Transition::new(1004263200, 9),
            Transition::new(1018177200, 8),
            Transition::new(1035712800, 9),
            Transition::new(1049626800, 8),
            Transition::new(1067162400, 9),
            Transition::new(1081076400, 8),
            Transition::new(1099216800, 9),
            Transition::new(1112526000, 8),
            Transition::new(1130666400, 9),
            Transition::new(1143975600, 8),
            Transition::new(1162116000, 9),
            Transition::new(1173610800, 8),
        ],
        &{
            const V: [LocalTimeType; 10] = [
                match LocalTimeType::new(50424, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-35976, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, true, Some(b"AWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, true, Some(b"APT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, false, Some(b"AHST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, true, Some(b"AHDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"YST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ANGUILLA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1825098464, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-15136, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ANTIGUA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1825098768, 1),
            Transition::new(-599598000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-14832, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ARAGUAINA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767214032, 2),
            Transition::new(-1206957600, 1),
            Transition::new(-1191362400, 2),
            Transition::new(-1175374800, 1),
            Transition::new(-1159826400, 2),
            Transition::new(-633819600, 1),
            Transition::new(-622069200, 2),
            Transition::new(-602283600, 1),
            Transition::new(-591832800, 2),
            Transition::new(-570747600, 1),
            Transition::new(-560210400, 2),
            Transition::new(-539125200, 1),
            Transition::new(-531352800, 2),
            Transition::new(-191365200, 1),
            Transition::new(-184197600, 2),
            Transition::new(-155163600, 1),
            Transition::new(-150069600, 2),
            Transition::new(-128898000, 1),
            Transition::new(-121125600, 2),
            Transition::new(-99954000, 1),
            Transition::new(-89589600, 2),
            Transition::new(-68418000, 1),
            Transition::new(-57967200, 2),
            Transition::new(499748400, 1),
            Transition::new(511236000, 2),
            Transition::new(530593200, 1),
            Transition::new(540266400, 2),
            Transition::new(562129200, 1),
            Transition::new(571197600, 2),
            Transition::new(592974000, 1),
            Transition::new(602042400, 2),
            Transition::new(624423600, 1),
            Transition::new(634701600, 2),
            Transition::new(813726000, 1),
            Transition::new(824004000, 2),
            Transition::new(844570800, 1),
            Transition::new(856058400, 2),
            Transition::new(876106800, 1),
            Transition::new(888717600, 2),
            Transition::new(908074800, 1),
            Transition::new(919562400, 2),
            Transition::new(938919600, 1),
            Transition::new(951616800, 2),
            Transition::new(970974000, 1),
            Transition::new(982461600, 2),
            Transition::new(1003028400, 1),
            Transition::new(1013911200, 2),
            Transition::new(1036292400, 1),
            Transition::new(1045360800, 2),
            Transition::new(1350788400, 1),
            Transition::new(1361066400, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-11568, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ARUBA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1826738376, 1),
            Transition::new(-157750200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-16824, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-16200, false, Some(b"-0430")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ASUNCION: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524507760, 1),
            Transition::new(-1206389360, 2),
            Transition::new(86760000, 3),
            Transition::new(134017200, 2),
            Transition::new(181368000, 4),
            Transition::new(194497200, 2),
            Transition::new(212990400, 4),
            Transition::new(226033200, 2),
            Transition::new(244526400, 4),
            Transition::new(257569200, 2),
            Transition::new(276062400, 4),
            Transition::new(291783600, 2),
            Transition::new(307598400, 4),
            Transition::new(323406000, 2),
            Transition::new(339220800, 4),
            Transition::new(354942000, 2),
            Transition::new(370756800, 4),
            Transition::new(386478000, 2),
            Transition::new(402292800, 4),
            Transition::new(418014000, 2),
            Transition::new(433828800, 4),
            Transition::new(449636400, 2),
            Transition::new(465451200, 4),
            Transition::new(481172400, 2),
            Transition::new(496987200, 4),
            Transition::new(512708400, 2),
            Transition::new(528523200, 4),
            Transition::new(544244400, 2),
            Transition::new(560059200, 4),
            Transition::new(575866800, 2),
            Transition::new(591681600, 4),
            Transition::new(607402800, 2),
            Transition::new(625032000, 4),
            Transition::new(638938800, 2),
            Transition::new(654753600, 4),
            Transition::new(670474800, 2),
            Transition::new(686721600, 4),
            Transition::new(699418800, 2),
            Transition::new(718257600, 4),
            Transition::new(733546800, 2),
            Transition::new(749448000, 4),
            Transition::new(762318000, 2),
            Transition::new(780984000, 4),
            Transition::new(793767600, 2),
            Transition::new(812520000, 4),
            Transition::new(825649200, 2),
            Transition::new(844574400, 4),
            Transition::new(856666800, 2),
            Transition::new(876024000, 4),
            Transition::new(888721200, 2),
            Transition::new(907473600, 4),
            Transition::new(920775600, 2),
            Transition::new(938923200, 4),
            Transition::new(952225200, 2),
            Transition::new(970372800, 4),
            Transition::new(983674800, 2),
            Transition::new(1002427200, 4),
            Transition::new(1018148400, 2),
            Transition::new(1030852800, 4),
            Transition::new(1049598000, 2),
            Transition::new(1062907200, 4),
            Transition::new(1081047600, 2),
            Transition::new(1097985600, 4),
            Transition::new(1110682800, 2),
            Transition::new(1129435200, 4),
            Transition::new(1142132400, 2),
            Transition::new(1160884800, 4),
            Transition::new(1173582000, 2),
            Transition::new(1192939200, 4),
            Transition::new(1205031600, 2),
            Transition::new(1224388800, 4),
            Transition::new(1236481200, 2),
            Transition::new(1255838400, 4),
            Transition::new(1270954800, 2),
            Transition::new(1286078400, 4),
            Transition::new(1302404400, 2),
            Transition::new(1317528000, 4),
            Transition::new(1333854000, 2),
            Transition::new(1349582400, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-13840, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-13840, false, Some(b"AMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-14400, false, Some(b"-04")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-10800, true, Some(b"-03")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 4, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ATIKOKAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2366733212, 2),
            Transition::new(-1632067200, 1),
            Transition::new(-1615136400, 2),
            Transition::new(-923248800, 1),
            Transition::new(-880214400, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765392400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-21988, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_BAHIA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767216356, 2),
            Transition::new(-1206957600, 1),
            Transition::new(-1191362400, 2),
            Transition::new(-1175374800, 1),
            Transition::new(-1159826400, 2),
            Transition::new(-633819600, 1),
            Transition::new(-622069200, 2),
            Transition::new(-602283600, 1),
            Transition::new(-591832800, 2),
            Transition::new(-570747600, 1),
            Transition::new(-560210400, 2),
            Transition::new(-539125200, 1),
            Transition::new(-531352800, 2),
            Transition::new(-191365200, 1),
            Transition::new(-184197600, 2),
            Transition::new(-155163600, 1),
            Transition::new(-150069600, 2),
            Transition::new(-128898000, 1),
            Transition::new(-121125600, 2),
            Transition::new(-99954000, 1),
            Transition::new(-89589600, 2),
            Transition::new(-68418000, 1),
            Transition::new(-57967200, 2),
            Transition::new(499748400, 1),
            Transition::new(511236000, 2),
            Transition::new(530593200, 1),
            Transition::new(540266400, 2),
            Transition::new(562129200, 1),
            Transition::new(571197600, 2),
            Transition::new(592974000, 1),
            Transition::new(602042400, 2),
            Transition::new(624423600, 1),
            Transition::new(634701600, 2),
            Transition::new(656478000, 1),
            Transition::new(666756000, 2),
            Transition::new(687927600, 1),
            Transition::new(697600800, 2),
            Transition::new(719982000, 1),
            Transition::new(728445600, 2),
            Transition::new(750826800, 1),
            Transition::new(761709600, 2),
            Transition::new(782276400, 1),
            Transition::new(793159200, 2),
            Transition::new(813726000, 1),
            Transition::new(824004000, 2),
            Transition::new(844570800, 1),
            Transition::new(856058400, 2),
            Transition::new(876106800, 1),
            Transition::new(888717600, 2),
            Transition::new(908074800, 1),
            Transition::new(919562400, 2),
            Transition::new(938919600, 1),
            Transition::new(951616800, 2),
            Transition::new(970974000, 1),
            Transition::new(982461600, 2),
            Transition::new(1003028400, 1),
            Transition::new(1013911200, 2),
            Transition::new(1036292400, 1),
            Transition::new(1045360800, 2),
            Transition::new(1318734000, 1),
            Transition::new(1330221600, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-9244, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_BAHIA_BANDERAS: TimeZoneRef<'static> =
        match TimeZoneRef::<'static>::new(
            &[
                Transition::new(-1514739600, 1),
                Transition::new(-1343066400, 2),
                Transition::new(-1234807200, 1),
                Transition::new(-1220292000, 2),
                Transition::new(-1207159200, 1),
                Transition::new(-1191344400, 2),
                Transition::new(-873828000, 1),
                Transition::new(-661539600, 3),
                Transition::new(28800, 1),
                Transition::new(828867600, 4),
                Transition::new(846403200, 1),
                Transition::new(860317200, 4),
                Transition::new(877852800, 1),
                Transition::new(891766800, 4),
                Transition::new(909302400, 1),
                Transition::new(923216400, 4),
                Transition::new(941356800, 1),
                Transition::new(954666000, 4),
                Transition::new(972806400, 1),
                Transition::new(989139600, 4),
                Transition::new(1001836800, 1),
                Transition::new(1018170000, 4),
                Transition::new(1035705600, 1),
                Transition::new(1049619600, 4),
                Transition::new(1067155200, 1),
                Transition::new(1081069200, 4),
                Transition::new(1099209600, 1),
                Transition::new(1112518800, 4),
                Transition::new(1130659200, 1),
                Transition::new(1143968400, 4),
                Transition::new(1162108800, 1),
                Transition::new(1175418000, 4),
                Transition::new(1193558400, 1),
                Transition::new(1207472400, 4),
                Transition::new(1225008000, 1),
                Transition::new(1238922000, 4),
                Transition::new(1256457600, 1),
                Transition::new(1270371600, 5),
                Transition::new(1288508400, 2),
            ],
            &{
                const V: [LocalTimeType; 6] = [
                    match LocalTimeType::new(-25260, false, Some(b"LMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-28800, false, Some(b"PST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                ];
                V
            },
            &[],
            &Some({
                const V: TransitionRule = TransitionRule::Alternate(
                    match AlternateTime::new(
                        match LocalTimeType::new(-21600, false, Some(b"CST")) {
                            Ok(v) => v,
                            Err(e) => panic!("{}", e.0),
                        },
                        match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                            Ok(v) => v,
                            Err(e) => panic!("{}", e.0),
                        },
                        RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                            Ok(v) => v,
                            Err(e) => panic!("{}", e.0),
                        }),
                        7200,
                        RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                            Ok(v) => v,
                            Err(e) => panic!("{}", e.0),
                        }),
                        7200,
                    ) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                );
                V
            }),
        ) {
            Ok(v) => v,
            Err(e) => panic!("{}", e.0),
        };

    pub(crate) const AMERICA_BARBADOS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1841256091, 2),
            Transition::new(-874263600, 1),
            Transition::new(-862682400, 2),
            Transition::new(-841604400, 1),
            Transition::new(-830714400, 2),
            Transition::new(-811882800, 3),
            Transition::new(-798660000, 2),
            Transition::new(234943200, 1),
            Transition::new(244616400, 2),
            Transition::new(261554400, 1),
            Transition::new(276066000, 2),
            Transition::new(293004000, 1),
            Transition::new(307515600, 2),
            Transition::new(325058400, 1),
            Transition::new(338706000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-14309, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-12600, true, Some(b"-0330")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_BELEM: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767213964, 2),
            Transition::new(-1206957600, 1),
            Transition::new(-1191362400, 2),
            Transition::new(-1175374800, 1),
            Transition::new(-1159826400, 2),
            Transition::new(-633819600, 1),
            Transition::new(-622069200, 2),
            Transition::new(-602283600, 1),
            Transition::new(-591832800, 2),
            Transition::new(-570747600, 1),
            Transition::new(-560210400, 2),
            Transition::new(-539125200, 1),
            Transition::new(-531352800, 2),
            Transition::new(-191365200, 1),
            Transition::new(-184197600, 2),
            Transition::new(-155163600, 1),
            Transition::new(-150069600, 2),
            Transition::new(-128898000, 1),
            Transition::new(-121125600, 2),
            Transition::new(-99954000, 1),
            Transition::new(-89589600, 2),
            Transition::new(-68418000, 1),
            Transition::new(-57967200, 2),
            Transition::new(499748400, 1),
            Transition::new(511236000, 2),
            Transition::new(530593200, 1),
            Transition::new(540266400, 2),
            Transition::new(562129200, 1),
            Transition::new(571197600, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-11636, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_BELIZE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1822500432, 2),
            Transition::new(-1616954400, 1),
            Transition::new(-1606069800, 2),
            Transition::new(-1585504800, 1),
            Transition::new(-1574015400, 2),
            Transition::new(-1554055200, 1),
            Transition::new(-1542565800, 2),
            Transition::new(-1522605600, 1),
            Transition::new(-1511116200, 2),
            Transition::new(-1490551200, 1),
            Transition::new(-1479666600, 2),
            Transition::new(-1459101600, 1),
            Transition::new(-1448217000, 2),
            Transition::new(-1427652000, 1),
            Transition::new(-1416162600, 2),
            Transition::new(-1396202400, 1),
            Transition::new(-1384713000, 2),
            Transition::new(-1364752800, 1),
            Transition::new(-1353263400, 2),
            Transition::new(-1333303200, 1),
            Transition::new(-1321813800, 2),
            Transition::new(-1301248800, 1),
            Transition::new(-1290364200, 2),
            Transition::new(-1269799200, 1),
            Transition::new(-1258914600, 2),
            Transition::new(-1238349600, 1),
            Transition::new(-1226860200, 2),
            Transition::new(-1206900000, 1),
            Transition::new(-1195410600, 2),
            Transition::new(-1175450400, 1),
            Transition::new(-1163961000, 2),
            Transition::new(-1143396000, 1),
            Transition::new(-1132511400, 2),
            Transition::new(-1111946400, 1),
            Transition::new(-1101061800, 2),
            Transition::new(-1080496800, 1),
            Transition::new(-1069612200, 2),
            Transition::new(-1049047200, 1),
            Transition::new(-1037557800, 2),
            Transition::new(-1017597600, 1),
            Transition::new(-1006108200, 2),
            Transition::new(-986148000, 1),
            Transition::new(-974658600, 2),
            Transition::new(-954093600, 1),
            Transition::new(-943209000, 2),
            Transition::new(-922644000, 1),
            Transition::new(-911759400, 2),
            Transition::new(-891194400, 1),
            Transition::new(-879705000, 2),
            Transition::new(-868212000, 3),
            Transition::new(-769395600, 4),
            Transition::new(-758746800, 2),
            Transition::new(-701892000, 1),
            Transition::new(-690402600, 2),
            Transition::new(-670442400, 1),
            Transition::new(-658953000, 2),
            Transition::new(-638992800, 1),
            Transition::new(-627503400, 2),
            Transition::new(-606938400, 1),
            Transition::new(-596053800, 2),
            Transition::new(-575488800, 1),
            Transition::new(-564604200, 2),
            Transition::new(-544039200, 1),
            Transition::new(-532549800, 2),
            Transition::new(-512589600, 1),
            Transition::new(-501100200, 2),
            Transition::new(-481140000, 1),
            Transition::new(-469650600, 2),
            Transition::new(-449690400, 1),
            Transition::new(-438201000, 2),
            Transition::new(-417636000, 1),
            Transition::new(-406751400, 2),
            Transition::new(-386186400, 1),
            Transition::new(-375301800, 2),
            Transition::new(-354736800, 1),
            Transition::new(-343247400, 2),
            Transition::new(-323287200, 1),
            Transition::new(-311797800, 2),
            Transition::new(-291837600, 1),
            Transition::new(-280348200, 2),
            Transition::new(-259783200, 1),
            Transition::new(-248898600, 2),
            Transition::new(-228333600, 1),
            Transition::new(-217449000, 2),
            Transition::new(-196884000, 1),
            Transition::new(-185999400, 2),
            Transition::new(-165434400, 1),
            Transition::new(-153945000, 2),
            Transition::new(-133984800, 1),
            Transition::new(-122495400, 2),
            Transition::new(-102535200, 1),
            Transition::new(-91045800, 2),
            Transition::new(-70480800, 1),
            Transition::new(-59596200, 2),
            Transition::new(123919200, 5),
            Transition::new(129618000, 2),
            Transition::new(409039200, 5),
            Transition::new(413874000, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-21168, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-19800, true, Some(b"-0530")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_BLANC_SABLON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713896692, 2),
            Transition::new(-1632074400, 1),
            Transition::new(-1615143600, 2),
            Transition::new(-880221600, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765399600, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-13708, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"AWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"APT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_BOA_VISTA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767211040, 2),
            Transition::new(-1206954000, 1),
            Transition::new(-1191358800, 2),
            Transition::new(-1175371200, 1),
            Transition::new(-1159822800, 2),
            Transition::new(-633816000, 1),
            Transition::new(-622065600, 2),
            Transition::new(-602280000, 1),
            Transition::new(-591829200, 2),
            Transition::new(-570744000, 1),
            Transition::new(-560206800, 2),
            Transition::new(-539121600, 1),
            Transition::new(-531349200, 2),
            Transition::new(-191361600, 1),
            Transition::new(-184194000, 2),
            Transition::new(-155160000, 1),
            Transition::new(-150066000, 2),
            Transition::new(-128894400, 1),
            Transition::new(-121122000, 2),
            Transition::new(-99950400, 1),
            Transition::new(-89586000, 2),
            Transition::new(-68414400, 1),
            Transition::new(-57963600, 2),
            Transition::new(499752000, 1),
            Transition::new(511239600, 2),
            Transition::new(530596800, 1),
            Transition::new(540270000, 2),
            Transition::new(562132800, 1),
            Transition::new(571201200, 2),
            Transition::new(938923200, 1),
            Transition::new(951620400, 2),
            Transition::new(970977600, 1),
            Transition::new(971578800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-14560, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_BOGOTA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2707671824, 1),
            Transition::new(-1739041424, 3),
            Transition::new(704869200, 2),
            Transition::new(733896000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-17776, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-17776, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_BOISE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2717640000, 2),
            Transition::new(-1633269600, 1),
            Transition::new(-1615129200, 2),
            Transition::new(-1601820000, 1),
            Transition::new(-1583679600, 2),
            Transition::new(-1471788000, 5),
            Transition::new(-880210800, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765388800, 5),
            Transition::new(-84380400, 6),
            Transition::new(-68659200, 5),
            Transition::new(-52930800, 6),
            Transition::new(-37209600, 5),
            Transition::new(-21481200, 6),
            Transition::new(-5760000, 5),
            Transition::new(9968400, 6),
            Transition::new(25689600, 5),
            Transition::new(41418000, 6),
            Transition::new(57744000, 5),
            Transition::new(73472400, 6),
            Transition::new(89193600, 5),
            Transition::new(104922000, 6),
            Transition::new(120643200, 5),
            Transition::new(129114000, 6),
            Transition::new(152092800, 5),
            Transition::new(162378000, 6),
            Transition::new(183542400, 5),
            Transition::new(199270800, 6),
            Transition::new(215596800, 5),
            Transition::new(230720400, 6),
            Transition::new(247046400, 5),
            Transition::new(262774800, 6),
            Transition::new(278496000, 5),
            Transition::new(294224400, 6),
            Transition::new(309945600, 5),
            Transition::new(325674000, 6),
            Transition::new(341395200, 5),
            Transition::new(357123600, 6),
            Transition::new(372844800, 5),
            Transition::new(388573200, 6),
            Transition::new(404899200, 5),
            Transition::new(420022800, 6),
            Transition::new(436348800, 5),
            Transition::new(452077200, 6),
            Transition::new(467798400, 5),
            Transition::new(483526800, 6),
            Transition::new(499248000, 5),
            Transition::new(514976400, 6),
            Transition::new(530697600, 5),
            Transition::new(544611600, 6),
            Transition::new(562147200, 5),
            Transition::new(576061200, 6),
            Transition::new(594201600, 5),
            Transition::new(607510800, 6),
            Transition::new(625651200, 5),
            Transition::new(638960400, 6),
            Transition::new(657100800, 5),
            Transition::new(671014800, 6),
            Transition::new(688550400, 5),
            Transition::new(702464400, 6),
            Transition::new(720000000, 5),
            Transition::new(733914000, 6),
            Transition::new(752054400, 5),
            Transition::new(765363600, 6),
            Transition::new(783504000, 5),
            Transition::new(796813200, 6),
            Transition::new(814953600, 5),
            Transition::new(828867600, 6),
            Transition::new(846403200, 5),
            Transition::new(860317200, 6),
            Transition::new(877852800, 5),
            Transition::new(891766800, 6),
            Transition::new(909302400, 5),
            Transition::new(923216400, 6),
            Transition::new(941356800, 5),
            Transition::new(954666000, 6),
            Transition::new(972806400, 5),
            Transition::new(986115600, 6),
            Transition::new(1004256000, 5),
            Transition::new(1018170000, 6),
            Transition::new(1035705600, 5),
            Transition::new(1049619600, 6),
            Transition::new(1067155200, 5),
            Transition::new(1081069200, 6),
            Transition::new(1099209600, 5),
            Transition::new(1112518800, 6),
            Transition::new(1130659200, 5),
            Transition::new(1143968400, 6),
            Transition::new(1162108800, 5),
            Transition::new(1173603600, 6),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(-27889, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_BUENOS_AIRES: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2372097972, 1),
            Transition::new(-1567453392, 2),
            Transition::new(-1233432000, 3),
            Transition::new(-1222981200, 2),
            Transition::new(-1205956800, 3),
            Transition::new(-1194037200, 2),
            Transition::new(-1172865600, 3),
            Transition::new(-1162501200, 2),
            Transition::new(-1141329600, 3),
            Transition::new(-1130965200, 2),
            Transition::new(-1109793600, 3),
            Transition::new(-1099429200, 2),
            Transition::new(-1078257600, 3),
            Transition::new(-1067806800, 2),
            Transition::new(-1046635200, 3),
            Transition::new(-1036270800, 2),
            Transition::new(-1015099200, 3),
            Transition::new(-1004734800, 2),
            Transition::new(-983563200, 3),
            Transition::new(-973198800, 2),
            Transition::new(-952027200, 3),
            Transition::new(-941576400, 2),
            Transition::new(-931032000, 3),
            Transition::new(-900882000, 2),
            Transition::new(-890337600, 3),
            Transition::new(-833749200, 2),
            Transition::new(-827265600, 3),
            Transition::new(-752274000, 2),
            Transition::new(-733780800, 3),
            Transition::new(-197326800, 2),
            Transition::new(-190843200, 3),
            Transition::new(-184194000, 2),
            Transition::new(-164491200, 3),
            Transition::new(-152658000, 2),
            Transition::new(-132955200, 3),
            Transition::new(-121122000, 2),
            Transition::new(-101419200, 3),
            Transition::new(-86821200, 2),
            Transition::new(-71092800, 3),
            Transition::new(-54766800, 2),
            Transition::new(-39038400, 3),
            Transition::new(-23317200, 2),
            Transition::new(-7588800, 5),
            Transition::new(128142000, 4),
            Transition::new(136605600, 5),
            Transition::new(596948400, 4),
            Transition::new(605066400, 5),
            Transition::new(624423600, 4),
            Transition::new(636516000, 5),
            Transition::new(656478000, 4),
            Transition::new(667965600, 5),
            Transition::new(687927600, 4),
            Transition::new(699415200, 5),
            Transition::new(719377200, 4),
            Transition::new(731469600, 5),
            Transition::new(938919600, 3),
            Transition::new(952052400, 5),
            Transition::new(1198983600, 4),
            Transition::new(1205632800, 5),
            Transition::new(1224385200, 4),
            Transition::new(1237082400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-14028, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-15408, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CAMBRIDGE_BAY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1577923200, 3),
            Transition::new(-880210800, 1),
            Transition::new(-769395600, 2),
            Transition::new(-765388800, 3),
            Transition::new(-147891600, 4),
            Transition::new(-131562000, 3),
            Transition::new(325674000, 5),
            Transition::new(341395200, 3),
            Transition::new(357123600, 5),
            Transition::new(372844800, 3),
            Transition::new(388573200, 5),
            Transition::new(404899200, 3),
            Transition::new(420022800, 5),
            Transition::new(436348800, 3),
            Transition::new(452077200, 5),
            Transition::new(467798400, 3),
            Transition::new(483526800, 5),
            Transition::new(499248000, 3),
            Transition::new(514976400, 5),
            Transition::new(530697600, 3),
            Transition::new(544611600, 5),
            Transition::new(562147200, 3),
            Transition::new(576061200, 5),
            Transition::new(594201600, 3),
            Transition::new(607510800, 5),
            Transition::new(625651200, 3),
            Transition::new(638960400, 5),
            Transition::new(657100800, 3),
            Transition::new(671014800, 5),
            Transition::new(688550400, 3),
            Transition::new(702464400, 5),
            Transition::new(720000000, 3),
            Transition::new(733914000, 5),
            Transition::new(752054400, 3),
            Transition::new(765363600, 5),
            Transition::new(783504000, 3),
            Transition::new(796813200, 5),
            Transition::new(814953600, 3),
            Transition::new(828867600, 5),
            Transition::new(846403200, 3),
            Transition::new(860317200, 5),
            Transition::new(877852800, 3),
            Transition::new(891766800, 5),
            Transition::new(909302400, 3),
            Transition::new(923216400, 5),
            Transition::new(941356800, 7),
            Transition::new(954662400, 6),
            Transition::new(972802800, 8),
            Transition::new(973400400, 7),
            Transition::new(986115600, 5),
            Transition::new(1004256000, 3),
            Transition::new(1018170000, 5),
            Transition::new(1035705600, 3),
            Transition::new(1049619600, 5),
            Transition::new(1067155200, 3),
            Transition::new(1081069200, 5),
            Transition::new(1099209600, 3),
            Transition::new(1112518800, 5),
            Transition::new(1130659200, 3),
            Transition::new(1143968400, 5),
            Transition::new(1162108800, 3),
            Transition::new(1173603600, 5),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"MDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CAMPO_GRANDE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767212492, 2),
            Transition::new(-1206954000, 1),
            Transition::new(-1191358800, 2),
            Transition::new(-1175371200, 1),
            Transition::new(-1159822800, 2),
            Transition::new(-633816000, 1),
            Transition::new(-622065600, 2),
            Transition::new(-602280000, 1),
            Transition::new(-591829200, 2),
            Transition::new(-570744000, 1),
            Transition::new(-560206800, 2),
            Transition::new(-539121600, 1),
            Transition::new(-531349200, 2),
            Transition::new(-191361600, 1),
            Transition::new(-184194000, 2),
            Transition::new(-155160000, 1),
            Transition::new(-150066000, 2),
            Transition::new(-128894400, 1),
            Transition::new(-121122000, 2),
            Transition::new(-99950400, 1),
            Transition::new(-89586000, 2),
            Transition::new(-68414400, 1),
            Transition::new(-57963600, 2),
            Transition::new(499752000, 1),
            Transition::new(511239600, 2),
            Transition::new(530596800, 1),
            Transition::new(540270000, 2),
            Transition::new(562132800, 1),
            Transition::new(571201200, 2),
            Transition::new(592977600, 1),
            Transition::new(602046000, 2),
            Transition::new(624427200, 1),
            Transition::new(634705200, 2),
            Transition::new(656481600, 1),
            Transition::new(666759600, 2),
            Transition::new(687931200, 1),
            Transition::new(697604400, 2),
            Transition::new(719985600, 1),
            Transition::new(728449200, 2),
            Transition::new(750830400, 1),
            Transition::new(761713200, 2),
            Transition::new(782280000, 1),
            Transition::new(793162800, 2),
            Transition::new(813729600, 1),
            Transition::new(824007600, 2),
            Transition::new(844574400, 1),
            Transition::new(856062000, 2),
            Transition::new(876110400, 1),
            Transition::new(888721200, 2),
            Transition::new(908078400, 1),
            Transition::new(919566000, 2),
            Transition::new(938923200, 1),
            Transition::new(951620400, 2),
            Transition::new(970977600, 1),
            Transition::new(982465200, 2),
            Transition::new(1003032000, 1),
            Transition::new(1013914800, 2),
            Transition::new(1036296000, 1),
            Transition::new(1045364400, 2),
            Transition::new(1066536000, 1),
            Transition::new(1076814000, 2),
            Transition::new(1099368000, 1),
            Transition::new(1108868400, 2),
            Transition::new(1129435200, 1),
            Transition::new(1140318000, 2),
            Transition::new(1162699200, 1),
            Transition::new(1172372400, 2),
            Transition::new(1192334400, 1),
            Transition::new(1203217200, 2),
            Transition::new(1224388800, 1),
            Transition::new(1234666800, 2),
            Transition::new(1255838400, 1),
            Transition::new(1266721200, 2),
            Transition::new(1287288000, 1),
            Transition::new(1298170800, 2),
            Transition::new(1318737600, 1),
            Transition::new(1330225200, 2),
            Transition::new(1350792000, 1),
            Transition::new(1361070000, 2),
            Transition::new(1382241600, 1),
            Transition::new(1392519600, 2),
            Transition::new(1413691200, 1),
            Transition::new(1424574000, 2),
            Transition::new(1445140800, 1),
            Transition::new(1456023600, 2),
            Transition::new(1476590400, 1),
            Transition::new(1487473200, 2),
            Transition::new(1508040000, 1),
            Transition::new(1518922800, 2),
            Transition::new(1541304000, 1),
            Transition::new(1550372400, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-13108, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CANCUN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514743200, 1),
            Transition::new(377935200, 3),
            Transition::new(828860400, 2),
            Transition::new(846396000, 3),
            Transition::new(860310000, 2),
            Transition::new(877845600, 3),
            Transition::new(891759600, 2),
            Transition::new(902037600, 4),
            Transition::new(909298800, 1),
            Transition::new(923212800, 4),
            Transition::new(941353200, 1),
            Transition::new(954662400, 4),
            Transition::new(972802800, 1),
            Transition::new(989136000, 4),
            Transition::new(1001833200, 1),
            Transition::new(1018166400, 4),
            Transition::new(1035702000, 1),
            Transition::new(1049616000, 4),
            Transition::new(1067151600, 1),
            Transition::new(1081065600, 4),
            Transition::new(1099206000, 1),
            Transition::new(1112515200, 4),
            Transition::new(1130655600, 1),
            Transition::new(1143964800, 4),
            Transition::new(1162105200, 1),
            Transition::new(1175414400, 4),
            Transition::new(1193554800, 1),
            Transition::new(1207468800, 4),
            Transition::new(1225004400, 1),
            Transition::new(1238918400, 4),
            Transition::new(1256454000, 1),
            Transition::new(1270368000, 4),
            Transition::new(1288508400, 1),
            Transition::new(1301817600, 4),
            Transition::new(1319958000, 1),
            Transition::new(1333267200, 4),
            Transition::new(1351407600, 1),
            Transition::new(1365321600, 4),
            Transition::new(1382857200, 1),
            Transition::new(1396771200, 4),
            Transition::new(1414306800, 1),
            Transition::new(1422777600, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-20824, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CARACAS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524505536, 1),
            Transition::new(-1826739140, 2),
            Transition::new(-157750200, 3),
            Transition::new(1197183600, 2),
            Transition::new(1462086000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-16064, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-16060, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-16200, false, Some(b"-0430")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CATAMARCA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2372096212, 1),
            Transition::new(-1567453392, 2),
            Transition::new(-1233432000, 3),
            Transition::new(-1222981200, 2),
            Transition::new(-1205956800, 3),
            Transition::new(-1194037200, 2),
            Transition::new(-1172865600, 3),
            Transition::new(-1162501200, 2),
            Transition::new(-1141329600, 3),
            Transition::new(-1130965200, 2),
            Transition::new(-1109793600, 3),
            Transition::new(-1099429200, 2),
            Transition::new(-1078257600, 3),
            Transition::new(-1067806800, 2),
            Transition::new(-1046635200, 3),
            Transition::new(-1036270800, 2),
            Transition::new(-1015099200, 3),
            Transition::new(-1004734800, 2),
            Transition::new(-983563200, 3),
            Transition::new(-973198800, 2),
            Transition::new(-952027200, 3),
            Transition::new(-941576400, 2),
            Transition::new(-931032000, 3),
            Transition::new(-900882000, 2),
            Transition::new(-890337600, 3),
            Transition::new(-833749200, 2),
            Transition::new(-827265600, 3),
            Transition::new(-752274000, 2),
            Transition::new(-733780800, 3),
            Transition::new(-197326800, 2),
            Transition::new(-190843200, 3),
            Transition::new(-184194000, 2),
            Transition::new(-164491200, 3),
            Transition::new(-152658000, 2),
            Transition::new(-132955200, 3),
            Transition::new(-121122000, 2),
            Transition::new(-101419200, 3),
            Transition::new(-86821200, 2),
            Transition::new(-71092800, 3),
            Transition::new(-54766800, 2),
            Transition::new(-39038400, 3),
            Transition::new(-23317200, 2),
            Transition::new(-7588800, 5),
            Transition::new(128142000, 4),
            Transition::new(136605600, 5),
            Transition::new(596948400, 4),
            Transition::new(605066400, 5),
            Transition::new(624423600, 4),
            Transition::new(636516000, 5),
            Transition::new(656478000, 4),
            Transition::new(667965600, 2),
            Transition::new(687931200, 4),
            Transition::new(699415200, 5),
            Transition::new(719377200, 4),
            Transition::new(731469600, 5),
            Transition::new(938919600, 3),
            Transition::new(952052400, 5),
            Transition::new(1086058800, 2),
            Transition::new(1087704000, 5),
            Transition::new(1198983600, 4),
            Transition::new(1205632800, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-15788, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-15408, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CAYENNE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1846269040, 1),
            Transition::new(-71092800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-12560, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CAYMAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524502068, 1),
            Transition::new(-1827687170, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-19532, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18430, false, Some(b"KMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CHICAGO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2717647200, 2),
            Transition::new(-1633276800, 1),
            Transition::new(-1615136400, 2),
            Transition::new(-1601827200, 1),
            Transition::new(-1583686800, 2),
            Transition::new(-1563724800, 1),
            Transition::new(-1551632400, 2),
            Transition::new(-1538928000, 1),
            Transition::new(-1520182800, 2),
            Transition::new(-1504454400, 1),
            Transition::new(-1491757200, 2),
            Transition::new(-1473004800, 1),
            Transition::new(-1459702800, 2),
            Transition::new(-1441555200, 1),
            Transition::new(-1428253200, 2),
            Transition::new(-1410105600, 1),
            Transition::new(-1396803600, 2),
            Transition::new(-1378656000, 1),
            Transition::new(-1365354000, 2),
            Transition::new(-1347206400, 1),
            Transition::new(-1333904400, 2),
            Transition::new(-1315152000, 1),
            Transition::new(-1301850000, 2),
            Transition::new(-1283702400, 1),
            Transition::new(-1270400400, 2),
            Transition::new(-1252252800, 1),
            Transition::new(-1238950800, 2),
            Transition::new(-1220803200, 1),
            Transition::new(-1207501200, 2),
            Transition::new(-1189353600, 1),
            Transition::new(-1176051600, 2),
            Transition::new(-1157299200, 1),
            Transition::new(-1144602000, 2),
            Transition::new(-1125849600, 1),
            Transition::new(-1112547600, 2),
            Transition::new(-1094400000, 1),
            Transition::new(-1081098000, 2),
            Transition::new(-1067788800, 3),
            Transition::new(-1045414800, 2),
            Transition::new(-1031500800, 1),
            Transition::new(-1018198800, 2),
            Transition::new(-1000051200, 1),
            Transition::new(-986749200, 2),
            Transition::new(-967996800, 1),
            Transition::new(-955299600, 2),
            Transition::new(-936547200, 1),
            Transition::new(-923245200, 2),
            Transition::new(-905097600, 1),
            Transition::new(-891795600, 2),
            Transition::new(-880214400, 4),
            Transition::new(-769395600, 5),
            Transition::new(-765392400, 2),
            Transition::new(-747244800, 1),
            Transition::new(-733942800, 2),
            Transition::new(-715795200, 1),
            Transition::new(-702493200, 2),
            Transition::new(-684345600, 1),
            Transition::new(-671043600, 2),
            Transition::new(-652896000, 1),
            Transition::new(-639594000, 2),
            Transition::new(-620841600, 1),
            Transition::new(-608144400, 2),
            Transition::new(-589392000, 1),
            Transition::new(-576090000, 2),
            Transition::new(-557942400, 1),
            Transition::new(-544640400, 2),
            Transition::new(-526492800, 1),
            Transition::new(-513190800, 2),
            Transition::new(-495043200, 1),
            Transition::new(-481741200, 2),
            Transition::new(-463593600, 1),
            Transition::new(-447267600, 2),
            Transition::new(-431539200, 1),
            Transition::new(-415818000, 2),
            Transition::new(-400089600, 1),
            Transition::new(-384368400, 2),
            Transition::new(-368640000, 1),
            Transition::new(-352918800, 2),
            Transition::new(-337190400, 1),
            Transition::new(-321469200, 2),
            Transition::new(-305740800, 1),
            Transition::new(-289414800, 2),
            Transition::new(-273686400, 1),
            Transition::new(-257965200, 2),
            Transition::new(-242236800, 1),
            Transition::new(-226515600, 2),
            Transition::new(-210787200, 1),
            Transition::new(-195066000, 2),
            Transition::new(-179337600, 1),
            Transition::new(-163616400, 2),
            Transition::new(-147888000, 1),
            Transition::new(-131562000, 2),
            Transition::new(-116438400, 1),
            Transition::new(-100112400, 2),
            Transition::new(-84384000, 1),
            Transition::new(-68662800, 2),
            Transition::new(-52934400, 1),
            Transition::new(-37213200, 2),
            Transition::new(-21484800, 1),
            Transition::new(-5763600, 2),
            Transition::new(9964800, 1),
            Transition::new(25686000, 2),
            Transition::new(41414400, 1),
            Transition::new(57740400, 2),
            Transition::new(73468800, 1),
            Transition::new(89190000, 2),
            Transition::new(104918400, 1),
            Transition::new(120639600, 2),
            Transition::new(126691200, 1),
            Transition::new(152089200, 2),
            Transition::new(162374400, 1),
            Transition::new(183538800, 2),
            Transition::new(199267200, 1),
            Transition::new(215593200, 2),
            Transition::new(230716800, 1),
            Transition::new(247042800, 2),
            Transition::new(262771200, 1),
            Transition::new(278492400, 2),
            Transition::new(294220800, 1),
            Transition::new(309942000, 2),
            Transition::new(325670400, 1),
            Transition::new(341391600, 2),
            Transition::new(357120000, 1),
            Transition::new(372841200, 2),
            Transition::new(388569600, 1),
            Transition::new(404895600, 2),
            Transition::new(420019200, 1),
            Transition::new(436345200, 2),
            Transition::new(452073600, 1),
            Transition::new(467794800, 2),
            Transition::new(483523200, 1),
            Transition::new(499244400, 2),
            Transition::new(514972800, 1),
            Transition::new(530694000, 2),
            Transition::new(544608000, 1),
            Transition::new(562143600, 2),
            Transition::new(576057600, 1),
            Transition::new(594198000, 2),
            Transition::new(607507200, 1),
            Transition::new(625647600, 2),
            Transition::new(638956800, 1),
            Transition::new(657097200, 2),
            Transition::new(671011200, 1),
            Transition::new(688546800, 2),
            Transition::new(702460800, 1),
            Transition::new(719996400, 2),
            Transition::new(733910400, 1),
            Transition::new(752050800, 2),
            Transition::new(765360000, 1),
            Transition::new(783500400, 2),
            Transition::new(796809600, 1),
            Transition::new(814950000, 2),
            Transition::new(828864000, 1),
            Transition::new(846399600, 2),
            Transition::new(860313600, 1),
            Transition::new(877849200, 2),
            Transition::new(891763200, 1),
            Transition::new(909298800, 2),
            Transition::new(923212800, 1),
            Transition::new(941353200, 2),
            Transition::new(954662400, 1),
            Transition::new(972802800, 2),
            Transition::new(986112000, 1),
            Transition::new(1004252400, 2),
            Transition::new(1018166400, 1),
            Transition::new(1035702000, 2),
            Transition::new(1049616000, 1),
            Transition::new(1067151600, 2),
            Transition::new(1081065600, 1),
            Transition::new(1099206000, 2),
            Transition::new(1112515200, 1),
            Transition::new(1130655600, 2),
            Transition::new(1143964800, 1),
            Transition::new(1162105200, 2),
            Transition::new(1173600000, 1),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-21036, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CHIHUAHUA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514739600, 1),
            Transition::new(-1343066400, 2),
            Transition::new(-1234807200, 1),
            Transition::new(-1220292000, 2),
            Transition::new(-1207159200, 1),
            Transition::new(-1191344400, 2),
            Transition::new(828864000, 3),
            Transition::new(846399600, 2),
            Transition::new(860313600, 3),
            Transition::new(877849200, 2),
            Transition::new(891766800, 4),
            Transition::new(909302400, 1),
            Transition::new(923216400, 4),
            Transition::new(941356800, 1),
            Transition::new(954666000, 4),
            Transition::new(972806400, 1),
            Transition::new(989139600, 4),
            Transition::new(1001836800, 1),
            Transition::new(1018170000, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-25460, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CORAL_HARBOUR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713890440, 2),
            Transition::new(-1632070800, 1),
            Transition::new(-1615140000, 2),
            Transition::new(-1596992400, 1),
            Transition::new(-1583179200, 2),
            Transition::new(-880218000, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765396000, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-19960, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CORDOBA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2372096592, 1),
            Transition::new(-1567453392, 2),
            Transition::new(-1233432000, 3),
            Transition::new(-1222981200, 2),
            Transition::new(-1205956800, 3),
            Transition::new(-1194037200, 2),
            Transition::new(-1172865600, 3),
            Transition::new(-1162501200, 2),
            Transition::new(-1141329600, 3),
            Transition::new(-1130965200, 2),
            Transition::new(-1109793600, 3),
            Transition::new(-1099429200, 2),
            Transition::new(-1078257600, 3),
            Transition::new(-1067806800, 2),
            Transition::new(-1046635200, 3),
            Transition::new(-1036270800, 2),
            Transition::new(-1015099200, 3),
            Transition::new(-1004734800, 2),
            Transition::new(-983563200, 3),
            Transition::new(-973198800, 2),
            Transition::new(-952027200, 3),
            Transition::new(-941576400, 2),
            Transition::new(-931032000, 3),
            Transition::new(-900882000, 2),
            Transition::new(-890337600, 3),
            Transition::new(-833749200, 2),
            Transition::new(-827265600, 3),
            Transition::new(-752274000, 2),
            Transition::new(-733780800, 3),
            Transition::new(-197326800, 2),
            Transition::new(-190843200, 3),
            Transition::new(-184194000, 2),
            Transition::new(-164491200, 3),
            Transition::new(-152658000, 2),
            Transition::new(-132955200, 3),
            Transition::new(-121122000, 2),
            Transition::new(-101419200, 3),
            Transition::new(-86821200, 2),
            Transition::new(-71092800, 3),
            Transition::new(-54766800, 2),
            Transition::new(-39038400, 3),
            Transition::new(-23317200, 2),
            Transition::new(-7588800, 5),
            Transition::new(128142000, 4),
            Transition::new(136605600, 5),
            Transition::new(596948400, 4),
            Transition::new(605066400, 5),
            Transition::new(624423600, 4),
            Transition::new(636516000, 5),
            Transition::new(656478000, 4),
            Transition::new(667965600, 2),
            Transition::new(687931200, 4),
            Transition::new(699415200, 5),
            Transition::new(719377200, 4),
            Transition::new(731469600, 5),
            Transition::new(938919600, 3),
            Transition::new(952052400, 5),
            Transition::new(1198983600, 4),
            Transition::new(1205632800, 5),
            Transition::new(1224385200, 4),
            Transition::new(1237082400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-15408, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-15408, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_COSTA_RICA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524501427, 1),
            Transition::new(-1545071027, 3),
            Transition::new(288770400, 2),
            Transition::new(297234000, 3),
            Transition::new(320220000, 2),
            Transition::new(328683600, 3),
            Transition::new(664264800, 2),
            Transition::new(678344400, 3),
            Transition::new(695714400, 2),
            Transition::new(700635600, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-20173, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-20173, false, Some(b"SJMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CRESTON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713882436, 1),
            Transition::new(-1680454800, 2),
            Transition::new(-1627833600, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-27964, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CUIABA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767212140, 2),
            Transition::new(-1206954000, 1),
            Transition::new(-1191358800, 2),
            Transition::new(-1175371200, 1),
            Transition::new(-1159822800, 2),
            Transition::new(-633816000, 1),
            Transition::new(-622065600, 2),
            Transition::new(-602280000, 1),
            Transition::new(-591829200, 2),
            Transition::new(-570744000, 1),
            Transition::new(-560206800, 2),
            Transition::new(-539121600, 1),
            Transition::new(-531349200, 2),
            Transition::new(-191361600, 1),
            Transition::new(-184194000, 2),
            Transition::new(-155160000, 1),
            Transition::new(-150066000, 2),
            Transition::new(-128894400, 1),
            Transition::new(-121122000, 2),
            Transition::new(-99950400, 1),
            Transition::new(-89586000, 2),
            Transition::new(-68414400, 1),
            Transition::new(-57963600, 2),
            Transition::new(499752000, 1),
            Transition::new(511239600, 2),
            Transition::new(530596800, 1),
            Transition::new(540270000, 2),
            Transition::new(562132800, 1),
            Transition::new(571201200, 2),
            Transition::new(592977600, 1),
            Transition::new(602046000, 2),
            Transition::new(624427200, 1),
            Transition::new(634705200, 2),
            Transition::new(656481600, 1),
            Transition::new(666759600, 2),
            Transition::new(687931200, 1),
            Transition::new(697604400, 2),
            Transition::new(719985600, 1),
            Transition::new(728449200, 2),
            Transition::new(750830400, 1),
            Transition::new(761713200, 2),
            Transition::new(782280000, 1),
            Transition::new(793162800, 2),
            Transition::new(813729600, 1),
            Transition::new(824007600, 2),
            Transition::new(844574400, 1),
            Transition::new(856062000, 2),
            Transition::new(876110400, 1),
            Transition::new(888721200, 2),
            Transition::new(908078400, 1),
            Transition::new(919566000, 2),
            Transition::new(938923200, 1),
            Transition::new(951620400, 2),
            Transition::new(970977600, 1),
            Transition::new(982465200, 2),
            Transition::new(1003032000, 1),
            Transition::new(1013914800, 2),
            Transition::new(1036296000, 1),
            Transition::new(1045364400, 2),
            Transition::new(1099368000, 1),
            Transition::new(1108868400, 2),
            Transition::new(1129435200, 1),
            Transition::new(1140318000, 2),
            Transition::new(1162699200, 1),
            Transition::new(1172372400, 2),
            Transition::new(1192334400, 1),
            Transition::new(1203217200, 2),
            Transition::new(1224388800, 1),
            Transition::new(1234666800, 2),
            Transition::new(1255838400, 1),
            Transition::new(1266721200, 2),
            Transition::new(1287288000, 1),
            Transition::new(1298170800, 2),
            Transition::new(1318737600, 1),
            Transition::new(1330225200, 2),
            Transition::new(1350792000, 1),
            Transition::new(1361070000, 2),
            Transition::new(1382241600, 1),
            Transition::new(1392519600, 2),
            Transition::new(1413691200, 1),
            Transition::new(1424574000, 2),
            Transition::new(1445140800, 1),
            Transition::new(1456023600, 2),
            Transition::new(1476590400, 1),
            Transition::new(1487473200, 2),
            Transition::new(1508040000, 1),
            Transition::new(1518922800, 2),
            Transition::new(1541304000, 1),
            Transition::new(1550372400, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-13460, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_CURACAO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1826738653, 1),
            Transition::new(-157750200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-16547, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-16200, false, Some(b"-0430")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_DANMARKSHAVN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1686091520, 1),
            Transition::new(323845200, 2),
            Transition::new(338950800, 1),
            Transition::new(354675600, 2),
            Transition::new(370400400, 1),
            Transition::new(386125200, 2),
            Transition::new(401850000, 1),
            Transition::new(417574800, 2),
            Transition::new(433299600, 1),
            Transition::new(449024400, 2),
            Transition::new(465354000, 1),
            Transition::new(481078800, 2),
            Transition::new(496803600, 1),
            Transition::new(512528400, 2),
            Transition::new(528253200, 1),
            Transition::new(543978000, 2),
            Transition::new(559702800, 1),
            Transition::new(575427600, 2),
            Transition::new(591152400, 1),
            Transition::new(606877200, 2),
            Transition::new(622602000, 1),
            Transition::new(638326800, 2),
            Transition::new(654656400, 1),
            Transition::new(670381200, 2),
            Transition::new(686106000, 1),
            Transition::new(701830800, 2),
            Transition::new(717555600, 1),
            Transition::new(733280400, 2),
            Transition::new(749005200, 1),
            Transition::new(764730000, 2),
            Transition::new(780454800, 1),
            Transition::new(796179600, 2),
            Transition::new(811904400, 1),
            Transition::new(820465200, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-4480, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_DAWSON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2188996940, 2),
            Transition::new(-1632056400, 1),
            Transition::new(-1615125600, 2),
            Transition::new(-1596978000, 1),
            Transition::new(-1583164800, 2),
            Transition::new(-880203600, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765381600, 2),
            Transition::new(-147884400, 5),
            Transition::new(-131554800, 2),
            Transition::new(120646800, 6),
            Transition::new(325677600, 7),
            Transition::new(341398800, 6),
            Transition::new(357127200, 7),
            Transition::new(372848400, 6),
            Transition::new(388576800, 7),
            Transition::new(404902800, 6),
            Transition::new(420026400, 7),
            Transition::new(436352400, 6),
            Transition::new(452080800, 7),
            Transition::new(467802000, 6),
            Transition::new(483530400, 7),
            Transition::new(499251600, 6),
            Transition::new(514980000, 7),
            Transition::new(530701200, 6),
            Transition::new(544615200, 7),
            Transition::new(562150800, 6),
            Transition::new(576064800, 7),
            Transition::new(594205200, 6),
            Transition::new(607514400, 7),
            Transition::new(625654800, 6),
            Transition::new(638964000, 7),
            Transition::new(657104400, 6),
            Transition::new(671018400, 7),
            Transition::new(688554000, 6),
            Transition::new(702468000, 7),
            Transition::new(720003600, 6),
            Transition::new(733917600, 7),
            Transition::new(752058000, 6),
            Transition::new(765367200, 7),
            Transition::new(783507600, 6),
            Transition::new(796816800, 7),
            Transition::new(814957200, 6),
            Transition::new(828871200, 7),
            Transition::new(846406800, 6),
            Transition::new(860320800, 7),
            Transition::new(877856400, 6),
            Transition::new(891770400, 7),
            Transition::new(909306000, 6),
            Transition::new(923220000, 7),
            Transition::new(941360400, 6),
            Transition::new(954669600, 7),
            Transition::new(972810000, 6),
            Transition::new(986119200, 7),
            Transition::new(1004259600, 6),
            Transition::new(1018173600, 7),
            Transition::new(1035709200, 6),
            Transition::new(1049623200, 7),
            Transition::new(1067158800, 6),
            Transition::new(1081072800, 7),
            Transition::new(1099213200, 6),
            Transition::new(1112522400, 7),
            Transition::new(1130662800, 6),
            Transition::new(1143972000, 7),
            Transition::new(1162112400, 6),
            Transition::new(1173607200, 7),
            Transition::new(1194166800, 6),
            Transition::new(1205056800, 7),
            Transition::new(1225616400, 6),
            Transition::new(1236506400, 7),
            Transition::new(1257066000, 6),
            Transition::new(1268560800, 7),
            Transition::new(1289120400, 6),
            Transition::new(1300010400, 7),
            Transition::new(1320570000, 6),
            Transition::new(1331460000, 7),
            Transition::new(1352019600, 6),
            Transition::new(1362909600, 7),
            Transition::new(1383469200, 6),
            Transition::new(1394359200, 7),
            Transition::new(1414918800, 6),
            Transition::new(1425808800, 7),
            Transition::new(1446368400, 6),
            Transition::new(1457863200, 7),
            Transition::new(1478422800, 6),
            Transition::new(1489312800, 7),
            Transition::new(1509872400, 6),
            Transition::new(1520762400, 7),
            Transition::new(1541322000, 6),
            Transition::new(1552212000, 7),
            Transition::new(1572771600, 6),
            Transition::new(1583661600, 7),
            Transition::new(1604214000, 8),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(-33460, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"YST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"YDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_DAWSON_CREEK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713881544, 2),
            Transition::new(-1632060000, 1),
            Transition::new(-1615129200, 2),
            Transition::new(-880207200, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765385200, 2),
            Transition::new(-715788000, 1),
            Transition::new(-702486000, 2),
            Transition::new(-684338400, 1),
            Transition::new(-671036400, 2),
            Transition::new(-652888800, 1),
            Transition::new(-639586800, 2),
            Transition::new(-620834400, 1),
            Transition::new(-608137200, 2),
            Transition::new(-589384800, 1),
            Transition::new(-576082800, 2),
            Transition::new(-557935200, 1),
            Transition::new(-544633200, 2),
            Transition::new(-526485600, 1),
            Transition::new(-513183600, 2),
            Transition::new(-495036000, 1),
            Transition::new(-481734000, 2),
            Transition::new(-463586400, 1),
            Transition::new(-450284400, 2),
            Transition::new(-431532000, 1),
            Transition::new(-418230000, 2),
            Transition::new(-400082400, 1),
            Transition::new(-386780400, 2),
            Transition::new(-368632800, 1),
            Transition::new(-355330800, 2),
            Transition::new(-337183200, 1),
            Transition::new(-323881200, 2),
            Transition::new(-305733600, 1),
            Transition::new(-292431600, 2),
            Transition::new(-273679200, 1),
            Transition::new(-260982000, 2),
            Transition::new(-242229600, 1),
            Transition::new(-226508400, 2),
            Transition::new(-210780000, 1),
            Transition::new(-195058800, 2),
            Transition::new(-179330400, 1),
            Transition::new(-163609200, 2),
            Transition::new(-147880800, 1),
            Transition::new(-131554800, 2),
            Transition::new(-116431200, 1),
            Transition::new(-100105200, 2),
            Transition::new(-84376800, 1),
            Transition::new(-68655600, 2),
            Transition::new(-52927200, 1),
            Transition::new(-37206000, 2),
            Transition::new(-21477600, 1),
            Transition::new(-5756400, 2),
            Transition::new(9972000, 1),
            Transition::new(25693200, 2),
            Transition::new(41421600, 1),
            Transition::new(57747600, 2),
            Transition::new(73476000, 1),
            Transition::new(84013200, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-28856, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_DETROIT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2051202469, 1),
            Transition::new(-1724083200, 2),
            Transition::new(-880218000, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765396000, 2),
            Transition::new(-684349200, 5),
            Transition::new(-671047200, 2),
            Transition::new(-80506740, 5),
            Transition::new(-68666400, 2),
            Transition::new(-52938000, 5),
            Transition::new(-37216800, 2),
            Transition::new(104914800, 5),
            Transition::new(120636000, 2),
            Transition::new(126687600, 5),
            Transition::new(152085600, 2),
            Transition::new(167814000, 5),
            Transition::new(183535200, 2),
            Transition::new(199263600, 5),
            Transition::new(215589600, 2),
            Transition::new(230713200, 5),
            Transition::new(247039200, 2),
            Transition::new(262767600, 5),
            Transition::new(278488800, 2),
            Transition::new(294217200, 5),
            Transition::new(309938400, 2),
            Transition::new(325666800, 5),
            Transition::new(341388000, 2),
            Transition::new(357116400, 5),
            Transition::new(372837600, 2),
            Transition::new(388566000, 5),
            Transition::new(404892000, 2),
            Transition::new(420015600, 5),
            Transition::new(436341600, 2),
            Transition::new(452070000, 5),
            Transition::new(467791200, 2),
            Transition::new(483519600, 5),
            Transition::new(499240800, 2),
            Transition::new(514969200, 5),
            Transition::new(530690400, 2),
            Transition::new(544604400, 5),
            Transition::new(562140000, 2),
            Transition::new(576054000, 5),
            Transition::new(594194400, 2),
            Transition::new(607503600, 5),
            Transition::new(625644000, 2),
            Transition::new(638953200, 5),
            Transition::new(657093600, 2),
            Transition::new(671007600, 5),
            Transition::new(688543200, 2),
            Transition::new(702457200, 5),
            Transition::new(719992800, 2),
            Transition::new(733906800, 5),
            Transition::new(752047200, 2),
            Transition::new(765356400, 5),
            Transition::new(783496800, 2),
            Transition::new(796806000, 5),
            Transition::new(814946400, 2),
            Transition::new(828860400, 5),
            Transition::new(846396000, 2),
            Transition::new(860310000, 5),
            Transition::new(877845600, 2),
            Transition::new(891759600, 5),
            Transition::new(909295200, 2),
            Transition::new(923209200, 5),
            Transition::new(941349600, 2),
            Transition::new(954658800, 5),
            Transition::new(972799200, 2),
            Transition::new(986108400, 5),
            Transition::new(1004248800, 2),
            Transition::new(1018162800, 5),
            Transition::new(1035698400, 2),
            Transition::new(1049612400, 5),
            Transition::new(1067148000, 2),
            Transition::new(1081062000, 5),
            Transition::new(1099202400, 2),
            Transition::new(1112511600, 5),
            Transition::new(1130652000, 2),
            Transition::new(1143961200, 5),
            Transition::new(1162101600, 2),
            Transition::new(1173596400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-19931, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_DOMINICA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1846266804, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-14736, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_EDMONTON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1998663968, 2),
            Transition::new(-1632063600, 1),
            Transition::new(-1615132800, 2),
            Transition::new(-1600614000, 1),
            Transition::new(-1596816000, 2),
            Transition::new(-1567954800, 1),
            Transition::new(-1551628800, 2),
            Transition::new(-1536505200, 1),
            Transition::new(-1523203200, 2),
            Transition::new(-1504450800, 1),
            Transition::new(-1491753600, 2),
            Transition::new(-1473001200, 1),
            Transition::new(-1459699200, 2),
            Transition::new(-880210800, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765388800, 2),
            Transition::new(-715791600, 1),
            Transition::new(-702489600, 2),
            Transition::new(73472400, 1),
            Transition::new(89193600, 2),
            Transition::new(104922000, 1),
            Transition::new(120643200, 2),
            Transition::new(136371600, 1),
            Transition::new(152092800, 2),
            Transition::new(167821200, 1),
            Transition::new(183542400, 2),
            Transition::new(199270800, 1),
            Transition::new(215596800, 2),
            Transition::new(230720400, 1),
            Transition::new(247046400, 2),
            Transition::new(262774800, 1),
            Transition::new(278496000, 2),
            Transition::new(294224400, 1),
            Transition::new(309945600, 2),
            Transition::new(325674000, 1),
            Transition::new(341395200, 2),
            Transition::new(357123600, 1),
            Transition::new(372844800, 2),
            Transition::new(388573200, 1),
            Transition::new(404899200, 2),
            Transition::new(420022800, 1),
            Transition::new(436348800, 2),
            Transition::new(452077200, 1),
            Transition::new(467798400, 2),
            Transition::new(483526800, 1),
            Transition::new(499248000, 2),
            Transition::new(514976400, 1),
            Transition::new(530697600, 2),
            Transition::new(544611600, 1),
            Transition::new(562147200, 2),
            Transition::new(576061200, 1),
            Transition::new(594201600, 2),
            Transition::new(607510800, 1),
            Transition::new(625651200, 2),
            Transition::new(638960400, 1),
            Transition::new(657100800, 2),
            Transition::new(671014800, 1),
            Transition::new(688550400, 2),
            Transition::new(702464400, 1),
            Transition::new(720000000, 2),
            Transition::new(733914000, 1),
            Transition::new(752054400, 2),
            Transition::new(765363600, 1),
            Transition::new(783504000, 2),
            Transition::new(796813200, 1),
            Transition::new(814953600, 2),
            Transition::new(828867600, 1),
            Transition::new(846403200, 2),
            Transition::new(860317200, 1),
            Transition::new(877852800, 2),
            Transition::new(891766800, 1),
            Transition::new(909302400, 2),
            Transition::new(923216400, 1),
            Transition::new(941356800, 2),
            Transition::new(954666000, 1),
            Transition::new(972806400, 2),
            Transition::new(986115600, 1),
            Transition::new(1004256000, 2),
            Transition::new(1018170000, 1),
            Transition::new(1035705600, 2),
            Transition::new(1049619600, 1),
            Transition::new(1067155200, 2),
            Transition::new(1081069200, 1),
            Transition::new(1099209600, 2),
            Transition::new(1112518800, 1),
            Transition::new(1130659200, 2),
            Transition::new(1143968400, 1),
            Transition::new(1162108800, 2),
            Transition::new(1173603600, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-27232, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_EIRUNEPE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767208832, 2),
            Transition::new(-1206950400, 1),
            Transition::new(-1191355200, 2),
            Transition::new(-1175367600, 1),
            Transition::new(-1159819200, 2),
            Transition::new(-633812400, 1),
            Transition::new(-622062000, 2),
            Transition::new(-602276400, 1),
            Transition::new(-591825600, 2),
            Transition::new(-570740400, 1),
            Transition::new(-560203200, 2),
            Transition::new(-539118000, 1),
            Transition::new(-531345600, 2),
            Transition::new(-191358000, 1),
            Transition::new(-184190400, 2),
            Transition::new(-155156400, 1),
            Transition::new(-150062400, 2),
            Transition::new(-128890800, 1),
            Transition::new(-121118400, 2),
            Transition::new(-99946800, 1),
            Transition::new(-89582400, 2),
            Transition::new(-68410800, 1),
            Transition::new(-57960000, 2),
            Transition::new(499755600, 1),
            Transition::new(511243200, 2),
            Transition::new(530600400, 1),
            Transition::new(540273600, 2),
            Transition::new(562136400, 1),
            Transition::new(571204800, 2),
            Transition::new(750834000, 1),
            Transition::new(761716800, 2),
            Transition::new(1214283600, 3),
            Transition::new(1384056000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-16768, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_EL_SALVADOR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1546279392, 2),
            Transition::new(547020000, 1),
            Transition::new(559717200, 2),
            Transition::new(578469600, 1),
            Transition::new(591166800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-21408, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ENSENADA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514736000, 1),
            Transition::new(-1343062800, 2),
            Transition::new(-1234717200, 1),
            Transition::new(-875808000, 2),
            Transition::new(-661539600, 1),
            Transition::new(828871200, 3),
            Transition::new(846406800, 1),
            Transition::new(860320800, 3),
            Transition::new(877856400, 1),
            Transition::new(891770400, 3),
            Transition::new(909306000, 1),
            Transition::new(923220000, 3),
            Transition::new(941360400, 1),
            Transition::new(954669600, 3),
            Transition::new(972810000, 1),
            Transition::new(989143200, 3),
            Transition::new(1001840400, 1),
            Transition::new(1018173600, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-27988, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-28800, false, Some(b"PST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_FORTALEZA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767216360, 2),
            Transition::new(-1206957600, 1),
            Transition::new(-1191362400, 2),
            Transition::new(-1175374800, 1),
            Transition::new(-1159826400, 2),
            Transition::new(-633819600, 1),
            Transition::new(-622069200, 2),
            Transition::new(-602283600, 1),
            Transition::new(-591832800, 2),
            Transition::new(-570747600, 1),
            Transition::new(-560210400, 2),
            Transition::new(-539125200, 1),
            Transition::new(-531352800, 2),
            Transition::new(-191365200, 1),
            Transition::new(-184197600, 2),
            Transition::new(-155163600, 1),
            Transition::new(-150069600, 2),
            Transition::new(-128898000, 1),
            Transition::new(-121125600, 2),
            Transition::new(-99954000, 1),
            Transition::new(-89589600, 2),
            Transition::new(-68418000, 1),
            Transition::new(-57967200, 2),
            Transition::new(499748400, 1),
            Transition::new(511236000, 2),
            Transition::new(530593200, 1),
            Transition::new(540266400, 2),
            Transition::new(562129200, 1),
            Transition::new(571197600, 2),
            Transition::new(592974000, 1),
            Transition::new(602042400, 2),
            Transition::new(624423600, 1),
            Transition::new(634701600, 2),
            Transition::new(938919600, 1),
            Transition::new(951616800, 2),
            Transition::new(970974000, 1),
            Transition::new(972180000, 2),
            Transition::new(1003028400, 1),
            Transition::new(1013911200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-9240, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_FORT_NELSON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713880953, 2),
            Transition::new(-1632060000, 1),
            Transition::new(-1615129200, 2),
            Transition::new(-880207200, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765385200, 2),
            Transition::new(-715788000, 1),
            Transition::new(-702486000, 2),
            Transition::new(-684338400, 1),
            Transition::new(-671036400, 2),
            Transition::new(-652888800, 1),
            Transition::new(-639586800, 2),
            Transition::new(-620834400, 1),
            Transition::new(-608137200, 2),
            Transition::new(-589384800, 1),
            Transition::new(-576082800, 2),
            Transition::new(-557935200, 1),
            Transition::new(-544633200, 2),
            Transition::new(-526485600, 1),
            Transition::new(-513183600, 2),
            Transition::new(-495036000, 1),
            Transition::new(-481734000, 2),
            Transition::new(-463586400, 1),
            Transition::new(-450284400, 2),
            Transition::new(-431532000, 1),
            Transition::new(-418230000, 2),
            Transition::new(-400082400, 1),
            Transition::new(-386780400, 2),
            Transition::new(-368632800, 1),
            Transition::new(-355330800, 2),
            Transition::new(-337183200, 1),
            Transition::new(-323881200, 2),
            Transition::new(-305733600, 1),
            Transition::new(-292431600, 2),
            Transition::new(-273679200, 1),
            Transition::new(-260982000, 2),
            Transition::new(-242229600, 1),
            Transition::new(-226508400, 2),
            Transition::new(-210780000, 1),
            Transition::new(-195058800, 2),
            Transition::new(-179330400, 1),
            Transition::new(-163609200, 2),
            Transition::new(-147880800, 1),
            Transition::new(-131554800, 2),
            Transition::new(-116431200, 1),
            Transition::new(-100105200, 2),
            Transition::new(-84376800, 1),
            Transition::new(-68655600, 2),
            Transition::new(-52927200, 1),
            Transition::new(-37206000, 2),
            Transition::new(-21477600, 1),
            Transition::new(-5756400, 2),
            Transition::new(9972000, 1),
            Transition::new(25693200, 2),
            Transition::new(41421600, 1),
            Transition::new(57747600, 2),
            Transition::new(73476000, 1),
            Transition::new(89197200, 2),
            Transition::new(104925600, 1),
            Transition::new(120646800, 2),
            Transition::new(136375200, 1),
            Transition::new(152096400, 2),
            Transition::new(167824800, 1),
            Transition::new(183546000, 2),
            Transition::new(199274400, 1),
            Transition::new(215600400, 2),
            Transition::new(230724000, 1),
            Transition::new(247050000, 2),
            Transition::new(262778400, 1),
            Transition::new(278499600, 2),
            Transition::new(294228000, 1),
            Transition::new(309949200, 2),
            Transition::new(325677600, 1),
            Transition::new(341398800, 2),
            Transition::new(357127200, 1),
            Transition::new(372848400, 2),
            Transition::new(388576800, 1),
            Transition::new(404902800, 2),
            Transition::new(420026400, 1),
            Transition::new(436352400, 2),
            Transition::new(452080800, 1),
            Transition::new(467802000, 2),
            Transition::new(483530400, 1),
            Transition::new(499251600, 2),
            Transition::new(514980000, 1),
            Transition::new(530701200, 2),
            Transition::new(544615200, 1),
            Transition::new(562150800, 2),
            Transition::new(576064800, 1),
            Transition::new(594205200, 2),
            Transition::new(607514400, 1),
            Transition::new(625654800, 2),
            Transition::new(638964000, 1),
            Transition::new(657104400, 2),
            Transition::new(671018400, 1),
            Transition::new(688554000, 2),
            Transition::new(702468000, 1),
            Transition::new(720003600, 2),
            Transition::new(733917600, 1),
            Transition::new(752058000, 2),
            Transition::new(765367200, 1),
            Transition::new(783507600, 2),
            Transition::new(796816800, 1),
            Transition::new(814957200, 2),
            Transition::new(828871200, 1),
            Transition::new(846406800, 2),
            Transition::new(860320800, 1),
            Transition::new(877856400, 2),
            Transition::new(891770400, 1),
            Transition::new(909306000, 2),
            Transition::new(923220000, 1),
            Transition::new(941360400, 2),
            Transition::new(954669600, 1),
            Transition::new(972810000, 2),
            Transition::new(986119200, 1),
            Transition::new(1004259600, 2),
            Transition::new(1018173600, 1),
            Transition::new(1035709200, 2),
            Transition::new(1049623200, 1),
            Transition::new(1067158800, 2),
            Transition::new(1081072800, 1),
            Transition::new(1099213200, 2),
            Transition::new(1112522400, 1),
            Transition::new(1130662800, 2),
            Transition::new(1143972000, 1),
            Transition::new(1162112400, 2),
            Transition::new(1173607200, 1),
            Transition::new(1194166800, 2),
            Transition::new(1205056800, 1),
            Transition::new(1225616400, 2),
            Transition::new(1236506400, 1),
            Transition::new(1257066000, 2),
            Transition::new(1268560800, 1),
            Transition::new(1289120400, 2),
            Transition::new(1300010400, 1),
            Transition::new(1320570000, 2),
            Transition::new(1331460000, 1),
            Transition::new(1352019600, 2),
            Transition::new(1362909600, 1),
            Transition::new(1383469200, 2),
            Transition::new(1394359200, 1),
            Transition::new(1414918800, 2),
            Transition::new(1425808800, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-29447, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_FORT_WAYNE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2717647200, 2),
            Transition::new(-1633276800, 1),
            Transition::new(-1615136400, 2),
            Transition::new(-1601827200, 1),
            Transition::new(-1583686800, 2),
            Transition::new(-900259200, 1),
            Transition::new(-891795600, 2),
            Transition::new(-880214400, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765392400, 2),
            Transition::new(-747244800, 1),
            Transition::new(-733942800, 2),
            Transition::new(-715795200, 1),
            Transition::new(-702493200, 2),
            Transition::new(-684345600, 1),
            Transition::new(-671043600, 2),
            Transition::new(-652896000, 1),
            Transition::new(-639594000, 2),
            Transition::new(-620841600, 1),
            Transition::new(-608144400, 2),
            Transition::new(-589392000, 1),
            Transition::new(-576090000, 2),
            Transition::new(-557942400, 1),
            Transition::new(-544640400, 2),
            Transition::new(-526492800, 1),
            Transition::new(-513190800, 2),
            Transition::new(-495043200, 1),
            Transition::new(-481741200, 2),
            Transition::new(-463593600, 5),
            Transition::new(-386787600, 2),
            Transition::new(-368640000, 5),
            Transition::new(-21488400, 6),
            Transition::new(-5767200, 5),
            Transition::new(9961200, 6),
            Transition::new(25682400, 5),
            Transition::new(1143961200, 6),
            Transition::new(1162101600, 5),
            Transition::new(1173596400, 6),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(-20678, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_GLACE_BAY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2131646412, 2),
            Transition::new(-1632074400, 1),
            Transition::new(-1615143600, 2),
            Transition::new(-880221600, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765399600, 2),
            Transition::new(-526500000, 1),
            Transition::new(-513198000, 2),
            Transition::new(73461600, 1),
            Transition::new(89182800, 2),
            Transition::new(104911200, 1),
            Transition::new(120632400, 2),
            Transition::new(136360800, 1),
            Transition::new(152082000, 2),
            Transition::new(167810400, 1),
            Transition::new(183531600, 2),
            Transition::new(199260000, 1),
            Transition::new(215586000, 2),
            Transition::new(230709600, 1),
            Transition::new(247035600, 2),
            Transition::new(262764000, 1),
            Transition::new(278485200, 2),
            Transition::new(294213600, 1),
            Transition::new(309934800, 2),
            Transition::new(325663200, 1),
            Transition::new(341384400, 2),
            Transition::new(357112800, 1),
            Transition::new(372834000, 2),
            Transition::new(388562400, 1),
            Transition::new(404888400, 2),
            Transition::new(420012000, 1),
            Transition::new(436338000, 2),
            Transition::new(452066400, 1),
            Transition::new(467787600, 2),
            Transition::new(483516000, 1),
            Transition::new(499237200, 2),
            Transition::new(514965600, 1),
            Transition::new(530686800, 2),
            Transition::new(544600800, 1),
            Transition::new(562136400, 2),
            Transition::new(576050400, 1),
            Transition::new(594190800, 2),
            Transition::new(607500000, 1),
            Transition::new(625640400, 2),
            Transition::new(638949600, 1),
            Transition::new(657090000, 2),
            Transition::new(671004000, 1),
            Transition::new(688539600, 2),
            Transition::new(702453600, 1),
            Transition::new(719989200, 2),
            Transition::new(733903200, 1),
            Transition::new(752043600, 2),
            Transition::new(765352800, 1),
            Transition::new(783493200, 2),
            Transition::new(796802400, 1),
            Transition::new(814942800, 2),
            Transition::new(828856800, 1),
            Transition::new(846392400, 2),
            Transition::new(860306400, 1),
            Transition::new(877842000, 2),
            Transition::new(891756000, 1),
            Transition::new(909291600, 2),
            Transition::new(923205600, 1),
            Transition::new(941346000, 2),
            Transition::new(954655200, 1),
            Transition::new(972795600, 2),
            Transition::new(986104800, 1),
            Transition::new(1004245200, 2),
            Transition::new(1018159200, 1),
            Transition::new(1035694800, 2),
            Transition::new(1049608800, 1),
            Transition::new(1067144400, 2),
            Transition::new(1081058400, 1),
            Transition::new(1099198800, 2),
            Transition::new(1112508000, 1),
            Transition::new(1130648400, 2),
            Transition::new(1143957600, 1),
            Transition::new(1162098000, 2),
            Transition::new(1173592800, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-14388, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"AWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"APT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-14400, false, Some(b"AST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_GODTHAB: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1686083584, 1),
            Transition::new(323845200, 2),
            Transition::new(338950800, 1),
            Transition::new(354675600, 2),
            Transition::new(370400400, 1),
            Transition::new(386125200, 2),
            Transition::new(401850000, 1),
            Transition::new(417574800, 2),
            Transition::new(433299600, 1),
            Transition::new(449024400, 2),
            Transition::new(465354000, 1),
            Transition::new(481078800, 2),
            Transition::new(496803600, 1),
            Transition::new(512528400, 2),
            Transition::new(528253200, 1),
            Transition::new(543978000, 2),
            Transition::new(559702800, 1),
            Transition::new(575427600, 2),
            Transition::new(591152400, 1),
            Transition::new(606877200, 2),
            Transition::new(622602000, 1),
            Transition::new(638326800, 2),
            Transition::new(654656400, 1),
            Transition::new(670381200, 2),
            Transition::new(686106000, 1),
            Transition::new(701830800, 2),
            Transition::new(717555600, 1),
            Transition::new(733280400, 2),
            Transition::new(749005200, 1),
            Transition::new(764730000, 2),
            Transition::new(780454800, 1),
            Transition::new(796179600, 2),
            Transition::new(811904400, 1),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-12416, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-10800, false, Some(b"-03")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-7200, true, Some(b"-02")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    -7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    -3600,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_GOOSE_BAY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713895900, 1),
            Transition::new(-1632076148, 2),
            Transition::new(-1615145348, 1),
            Transition::new(-1096921748, 3),
            Transition::new(-1061670600, 4),
            Transition::new(-1048973400, 3),
            Transition::new(-1030221000, 4),
            Transition::new(-1017523800, 3),
            Transition::new(-998771400, 4),
            Transition::new(-986074200, 3),
            Transition::new(-966717000, 4),
            Transition::new(-954624600, 3),
            Transition::new(-935267400, 4),
            Transition::new(-922570200, 3),
            Transition::new(-903817800, 4),
            Transition::new(-891120600, 3),
            Transition::new(-872368200, 6),
            Transition::new(-769395600, 5),
            Transition::new(-765401400, 3),
            Transition::new(-746044200, 4),
            Transition::new(-733347000, 3),
            Transition::new(-714594600, 4),
            Transition::new(-701897400, 3),
            Transition::new(-683145000, 4),
            Transition::new(-670447800, 3),
            Transition::new(-651695400, 4),
            Transition::new(-638998200, 3),
            Transition::new(-619641000, 4),
            Transition::new(-606943800, 3),
            Transition::new(-589401000, 4),
            Transition::new(-576099000, 3),
            Transition::new(-557951400, 4),
            Transition::new(-544649400, 3),
            Transition::new(-526501800, 4),
            Transition::new(-513199800, 3),
            Transition::new(-495052200, 4),
            Transition::new(-481750200, 3),
            Transition::new(-463602600, 4),
            Transition::new(-450300600, 3),
            Transition::new(-431548200, 4),
            Transition::new(-418246200, 3),
            Transition::new(-400098600, 4),
            Transition::new(-386796600, 3),
            Transition::new(-368649000, 4),
            Transition::new(-355347000, 3),
            Transition::new(-337199400, 4),
            Transition::new(-323897400, 3),
            Transition::new(-305749800, 4),
            Transition::new(-289423800, 3),
            Transition::new(-273695400, 4),
            Transition::new(-257974200, 3),
            Transition::new(-242245800, 4),
            Transition::new(-226524600, 3),
            Transition::new(-210796200, 4),
            Transition::new(-195075000, 3),
            Transition::new(-179346600, 4),
            Transition::new(-163625400, 3),
            Transition::new(-147897000, 4),
            Transition::new(-131571000, 3),
            Transition::new(-119903400, 8),
            Transition::new(-116445600, 7),
            Transition::new(-100119600, 8),
            Transition::new(-84391200, 7),
            Transition::new(-68670000, 8),
            Transition::new(-52941600, 7),
            Transition::new(-37220400, 8),
            Transition::new(-21492000, 7),
            Transition::new(-5770800, 8),
            Transition::new(9957600, 7),
            Transition::new(25678800, 8),
            Transition::new(41407200, 7),
            Transition::new(57733200, 8),
            Transition::new(73461600, 7),
            Transition::new(89182800, 8),
            Transition::new(104911200, 7),
            Transition::new(120632400, 8),
            Transition::new(136360800, 7),
            Transition::new(152082000, 8),
            Transition::new(167810400, 7),
            Transition::new(183531600, 8),
            Transition::new(199260000, 7),
            Transition::new(215586000, 8),
            Transition::new(230709600, 7),
            Transition::new(247035600, 8),
            Transition::new(262764000, 7),
            Transition::new(278485200, 8),
            Transition::new(294213600, 7),
            Transition::new(309934800, 8),
            Transition::new(325663200, 7),
            Transition::new(341384400, 8),
            Transition::new(357112800, 7),
            Transition::new(372834000, 8),
            Transition::new(388562400, 7),
            Transition::new(404888400, 8),
            Transition::new(420012000, 7),
            Transition::new(436338000, 8),
            Transition::new(452066400, 7),
            Transition::new(467787600, 8),
            Transition::new(483516000, 7),
            Transition::new(499237200, 8),
            Transition::new(514965600, 7),
            Transition::new(530686800, 8),
            Transition::new(544593660, 7),
            Transition::new(562129260, 8),
            Transition::new(576043260, 9),
            Transition::new(594180060, 8),
            Transition::new(607492860, 7),
            Transition::new(625633260, 8),
            Transition::new(638942460, 7),
            Transition::new(657082860, 8),
            Transition::new(670996860, 7),
            Transition::new(688532460, 8),
            Transition::new(702446460, 7),
            Transition::new(719982060, 8),
            Transition::new(733896060, 7),
            Transition::new(752036460, 8),
            Transition::new(765345660, 7),
            Transition::new(783486060, 8),
            Transition::new(796795260, 7),
            Transition::new(814935660, 8),
            Transition::new(828849660, 7),
            Transition::new(846385260, 8),
            Transition::new(860299260, 7),
            Transition::new(877834860, 8),
            Transition::new(891748860, 7),
            Transition::new(909284460, 8),
            Transition::new(923198460, 7),
            Transition::new(941338860, 8),
            Transition::new(954648060, 7),
            Transition::new(972788460, 8),
            Transition::new(986097660, 7),
            Transition::new(1004238060, 8),
            Transition::new(1018152060, 7),
            Transition::new(1035687660, 8),
            Transition::new(1049601660, 7),
            Transition::new(1067137260, 8),
            Transition::new(1081051260, 7),
            Transition::new(1099191660, 8),
            Transition::new(1112500860, 7),
            Transition::new(1130641260, 8),
            Transition::new(1143950460, 7),
            Transition::new(1162090860, 8),
            Transition::new(1173585660, 7),
            Transition::new(1194145260, 8),
            Transition::new(1205035260, 7),
            Transition::new(1225594860, 8),
            Transition::new(1236484860, 7),
            Transition::new(1257044460, 8),
            Transition::new(1268539260, 7),
            Transition::new(1289098860, 8),
            Transition::new(1299988860, 7),
            Transition::new(1320555600, 8),
        ],
        &{
            const V: [LocalTimeType; 10] = [
                match LocalTimeType::new(-14500, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-12652, false, Some(b"NST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-9052, true, Some(b"NDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-12600, false, Some(b"NST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-9000, true, Some(b"NDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-9000, true, Some(b"NPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-9000, true, Some(b"NWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"ADDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-14400, false, Some(b"AST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_GRAND_TURK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524504528, 1),
            Transition::new(-1827687170, 2),
            Transition::new(294217200, 3),
            Transition::new(309938400, 2),
            Transition::new(325666800, 3),
            Transition::new(341388000, 2),
            Transition::new(357116400, 3),
            Transition::new(372837600, 2),
            Transition::new(388566000, 3),
            Transition::new(404892000, 2),
            Transition::new(420015600, 3),
            Transition::new(436341600, 2),
            Transition::new(452070000, 3),
            Transition::new(467791200, 2),
            Transition::new(483519600, 3),
            Transition::new(499240800, 2),
            Transition::new(514969200, 3),
            Transition::new(530690400, 2),
            Transition::new(544604400, 3),
            Transition::new(562140000, 2),
            Transition::new(576054000, 3),
            Transition::new(594194400, 2),
            Transition::new(607503600, 3),
            Transition::new(625644000, 2),
            Transition::new(638953200, 3),
            Transition::new(657093600, 2),
            Transition::new(671007600, 3),
            Transition::new(688543200, 2),
            Transition::new(702457200, 3),
            Transition::new(719992800, 2),
            Transition::new(733906800, 3),
            Transition::new(752047200, 2),
            Transition::new(765356400, 3),
            Transition::new(783496800, 2),
            Transition::new(796806000, 3),
            Transition::new(814946400, 2),
            Transition::new(828860400, 3),
            Transition::new(846396000, 2),
            Transition::new(860310000, 3),
            Transition::new(877845600, 2),
            Transition::new(891759600, 3),
            Transition::new(909295200, 2),
            Transition::new(923209200, 3),
            Transition::new(941349600, 2),
            Transition::new(954658800, 3),
            Transition::new(972799200, 2),
            Transition::new(986108400, 3),
            Transition::new(1004248800, 2),
            Transition::new(1018162800, 3),
            Transition::new(1035698400, 2),
            Transition::new(1049612400, 3),
            Transition::new(1067148000, 2),
            Transition::new(1081062000, 3),
            Transition::new(1099202400, 2),
            Transition::new(1112511600, 3),
            Transition::new(1130652000, 2),
            Transition::new(1143961200, 3),
            Transition::new(1162101600, 2),
            Transition::new(1173596400, 3),
            Transition::new(1194156000, 2),
            Transition::new(1205046000, 3),
            Transition::new(1225605600, 2),
            Transition::new(1236495600, 3),
            Transition::new(1257055200, 2),
            Transition::new(1268550000, 3),
            Transition::new(1289109600, 2),
            Transition::new(1299999600, 3),
            Transition::new(1320559200, 2),
            Transition::new(1331449200, 3),
            Transition::new(1352008800, 2),
            Transition::new(1362898800, 3),
            Transition::new(1383458400, 2),
            Transition::new(1394348400, 3),
            Transition::new(1414908000, 2),
            Transition::new(1425798000, 4),
            Transition::new(1520751600, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-17072, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18430, false, Some(b"KMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_GRENADA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1846266780, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-14820, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_GUADELOUPE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1848254032, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-14768, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_GUATEMALA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1617040676, 2),
            Transition::new(123055200, 1),
            Transition::new(130914000, 2),
            Transition::new(422344800, 1),
            Transition::new(433054800, 2),
            Transition::new(669708000, 1),
            Transition::new(684219600, 2),
            Transition::new(1146376800, 1),
            Transition::new(1159678800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-21724, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_GUAYAQUIL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524502440, 1),
            Transition::new(-1230749160, 3),
            Transition::new(722926800, 2),
            Transition::new(728884800, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-19160, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18840, false, Some(b"QMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_GUYANA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1843589241, 1),
            Transition::new(-1730577600, 2),
            Transition::new(176096700, 3),
            Transition::new(701841600, 1),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-13959, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-13500, false, Some(b"-0345")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_HALIFAX: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2131645536, 2),
            Transition::new(-1696276800, 1),
            Transition::new(-1680469200, 2),
            Transition::new(-1632074400, 1),
            Transition::new(-1615143600, 2),
            Transition::new(-1566763200, 1),
            Transition::new(-1557090000, 2),
            Transition::new(-1535486400, 1),
            Transition::new(-1524949200, 2),
            Transition::new(-1504468800, 1),
            Transition::new(-1493413200, 2),
            Transition::new(-1472414400, 1),
            Transition::new(-1461963600, 2),
            Transition::new(-1440964800, 1),
            Transition::new(-1429390800, 2),
            Transition::new(-1409515200, 1),
            Transition::new(-1396731600, 2),
            Transition::new(-1376856000, 1),
            Transition::new(-1366491600, 2),
            Transition::new(-1346616000, 1),
            Transition::new(-1333832400, 2),
            Transition::new(-1313956800, 1),
            Transition::new(-1303678800, 2),
            Transition::new(-1282507200, 1),
            Transition::new(-1272661200, 2),
            Transition::new(-1251057600, 1),
            Transition::new(-1240088400, 2),
            Transition::new(-1219608000, 1),
            Transition::new(-1207429200, 2),
            Transition::new(-1188763200, 1),
            Transition::new(-1175979600, 2),
            Transition::new(-1157313600, 1),
            Transition::new(-1143925200, 2),
            Transition::new(-1124049600, 1),
            Transition::new(-1113771600, 2),
            Transition::new(-1091390400, 1),
            Transition::new(-1081026000, 2),
            Transition::new(-1059854400, 1),
            Transition::new(-1050786000, 2),
            Transition::new(-1030910400, 1),
            Transition::new(-1018126800, 2),
            Transition::new(-999460800, 1),
            Transition::new(-986677200, 2),
            Transition::new(-965592000, 1),
            Transition::new(-955227600, 2),
            Transition::new(-935956800, 1),
            Transition::new(-923173200, 2),
            Transition::new(-904507200, 1),
            Transition::new(-891723600, 2),
            Transition::new(-880221600, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765399600, 2),
            Transition::new(-747252000, 1),
            Transition::new(-733950000, 2),
            Transition::new(-715802400, 1),
            Transition::new(-702500400, 2),
            Transition::new(-684352800, 1),
            Transition::new(-671050800, 2),
            Transition::new(-652903200, 1),
            Transition::new(-639601200, 2),
            Transition::new(-589399200, 1),
            Transition::new(-576097200, 2),
            Transition::new(-557949600, 1),
            Transition::new(-544647600, 2),
            Transition::new(-526500000, 1),
            Transition::new(-513198000, 2),
            Transition::new(-495050400, 1),
            Transition::new(-481748400, 2),
            Transition::new(-431546400, 1),
            Transition::new(-418244400, 2),
            Transition::new(-400096800, 1),
            Transition::new(-386794800, 2),
            Transition::new(-368647200, 1),
            Transition::new(-355345200, 2),
            Transition::new(-337197600, 1),
            Transition::new(-323895600, 2),
            Transition::new(-242244000, 1),
            Transition::new(-226522800, 2),
            Transition::new(-210794400, 1),
            Transition::new(-195073200, 2),
            Transition::new(-179344800, 1),
            Transition::new(-163623600, 2),
            Transition::new(-147895200, 1),
            Transition::new(-131569200, 2),
            Transition::new(-116445600, 1),
            Transition::new(-100119600, 2),
            Transition::new(-84391200, 1),
            Transition::new(-68670000, 2),
            Transition::new(-52941600, 1),
            Transition::new(-37220400, 2),
            Transition::new(-21492000, 1),
            Transition::new(-5770800, 2),
            Transition::new(9957600, 1),
            Transition::new(25678800, 2),
            Transition::new(41407200, 1),
            Transition::new(57733200, 2),
            Transition::new(73461600, 1),
            Transition::new(89182800, 2),
            Transition::new(104911200, 1),
            Transition::new(120632400, 2),
            Transition::new(136360800, 1),
            Transition::new(152082000, 2),
            Transition::new(167810400, 1),
            Transition::new(183531600, 2),
            Transition::new(199260000, 1),
            Transition::new(215586000, 2),
            Transition::new(230709600, 1),
            Transition::new(247035600, 2),
            Transition::new(262764000, 1),
            Transition::new(278485200, 2),
            Transition::new(294213600, 1),
            Transition::new(309934800, 2),
            Transition::new(325663200, 1),
            Transition::new(341384400, 2),
            Transition::new(357112800, 1),
            Transition::new(372834000, 2),
            Transition::new(388562400, 1),
            Transition::new(404888400, 2),
            Transition::new(420012000, 1),
            Transition::new(436338000, 2),
            Transition::new(452066400, 1),
            Transition::new(467787600, 2),
            Transition::new(483516000, 1),
            Transition::new(499237200, 2),
            Transition::new(514965600, 1),
            Transition::new(530686800, 2),
            Transition::new(544600800, 1),
            Transition::new(562136400, 2),
            Transition::new(576050400, 1),
            Transition::new(594190800, 2),
            Transition::new(607500000, 1),
            Transition::new(625640400, 2),
            Transition::new(638949600, 1),
            Transition::new(657090000, 2),
            Transition::new(671004000, 1),
            Transition::new(688539600, 2),
            Transition::new(702453600, 1),
            Transition::new(719989200, 2),
            Transition::new(733903200, 1),
            Transition::new(752043600, 2),
            Transition::new(765352800, 1),
            Transition::new(783493200, 2),
            Transition::new(796802400, 1),
            Transition::new(814942800, 2),
            Transition::new(828856800, 1),
            Transition::new(846392400, 2),
            Transition::new(860306400, 1),
            Transition::new(877842000, 2),
            Transition::new(891756000, 1),
            Transition::new(909291600, 2),
            Transition::new(923205600, 1),
            Transition::new(941346000, 2),
            Transition::new(954655200, 1),
            Transition::new(972795600, 2),
            Transition::new(986104800, 1),
            Transition::new(1004245200, 2),
            Transition::new(1018159200, 1),
            Transition::new(1035694800, 2),
            Transition::new(1049608800, 1),
            Transition::new(1067144400, 2),
            Transition::new(1081058400, 1),
            Transition::new(1099198800, 2),
            Transition::new(1112508000, 1),
            Transition::new(1130648400, 2),
            Transition::new(1143957600, 1),
            Transition::new(1162098000, 2),
            Transition::new(1173592800, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-15264, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"AWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"APT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-14400, false, Some(b"AST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_HERMOSILLO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514739600, 1),
            Transition::new(-1343066400, 2),
            Transition::new(-1234807200, 1),
            Transition::new(-1220292000, 2),
            Transition::new(-1207159200, 1),
            Transition::new(-1191344400, 2),
            Transition::new(-873828000, 1),
            Transition::new(-661539600, 3),
            Transition::new(28800, 1),
            Transition::new(828867600, 4),
            Transition::new(846403200, 1),
            Transition::new(860317200, 4),
            Transition::new(877852800, 1),
            Transition::new(891766800, 4),
            Transition::new(909302400, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-26632, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_INUVIK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-536457600, 2),
            Transition::new(-147888000, 1),
            Transition::new(-131558400, 2),
            Transition::new(294228000, 3),
            Transition::new(325674000, 4),
            Transition::new(341395200, 3),
            Transition::new(357123600, 4),
            Transition::new(372844800, 3),
            Transition::new(388573200, 4),
            Transition::new(404899200, 3),
            Transition::new(420022800, 4),
            Transition::new(436348800, 3),
            Transition::new(452077200, 4),
            Transition::new(467798400, 3),
            Transition::new(483526800, 4),
            Transition::new(499248000, 3),
            Transition::new(514976400, 4),
            Transition::new(530697600, 3),
            Transition::new(544611600, 4),
            Transition::new(562147200, 3),
            Transition::new(576061200, 4),
            Transition::new(594201600, 3),
            Transition::new(607510800, 4),
            Transition::new(625651200, 3),
            Transition::new(638960400, 4),
            Transition::new(657100800, 3),
            Transition::new(671014800, 4),
            Transition::new(688550400, 3),
            Transition::new(702464400, 4),
            Transition::new(720000000, 3),
            Transition::new(733914000, 4),
            Transition::new(752054400, 3),
            Transition::new(765363600, 4),
            Transition::new(783504000, 3),
            Transition::new(796813200, 4),
            Transition::new(814953600, 3),
            Transition::new(828867600, 4),
            Transition::new(846403200, 3),
            Transition::new(860317200, 4),
            Transition::new(877852800, 3),
            Transition::new(891766800, 4),
            Transition::new(909302400, 3),
            Transition::new(923216400, 4),
            Transition::new(941356800, 3),
            Transition::new(954666000, 4),
            Transition::new(972806400, 3),
            Transition::new(986115600, 4),
            Transition::new(1004256000, 3),
            Transition::new(1018170000, 4),
            Transition::new(1035705600, 3),
            Transition::new(1049619600, 4),
            Transition::new(1067155200, 3),
            Transition::new(1081069200, 4),
            Transition::new(1099209600, 3),
            Transition::new(1112518800, 4),
            Transition::new(1130659200, 3),
            Transition::new(1143968400, 4),
            Transition::new(1162108800, 3),
            Transition::new(1173603600, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"PDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_IQALUIT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-865296000, 5),
            Transition::new(-769395600, 1),
            Transition::new(-765396000, 2),
            Transition::new(-147898800, 3),
            Transition::new(-131569200, 2),
            Transition::new(325666800, 4),
            Transition::new(341388000, 2),
            Transition::new(357116400, 4),
            Transition::new(372837600, 2),
            Transition::new(388566000, 4),
            Transition::new(404892000, 2),
            Transition::new(420015600, 4),
            Transition::new(436341600, 2),
            Transition::new(452070000, 4),
            Transition::new(467791200, 2),
            Transition::new(483519600, 4),
            Transition::new(499240800, 2),
            Transition::new(514969200, 4),
            Transition::new(530690400, 2),
            Transition::new(544604400, 4),
            Transition::new(562140000, 2),
            Transition::new(576054000, 4),
            Transition::new(594194400, 2),
            Transition::new(607503600, 4),
            Transition::new(625644000, 2),
            Transition::new(638953200, 4),
            Transition::new(657093600, 2),
            Transition::new(671007600, 4),
            Transition::new(688543200, 2),
            Transition::new(702457200, 4),
            Transition::new(719992800, 2),
            Transition::new(733906800, 4),
            Transition::new(752047200, 2),
            Transition::new(765356400, 4),
            Transition::new(783496800, 2),
            Transition::new(796806000, 4),
            Transition::new(814946400, 2),
            Transition::new(828860400, 4),
            Transition::new(846396000, 2),
            Transition::new(860310000, 4),
            Transition::new(877845600, 2),
            Transition::new(891759600, 4),
            Transition::new(909295200, 2),
            Transition::new(923209200, 4),
            Transition::new(941349600, 6),
            Transition::new(954662400, 7),
            Transition::new(972802800, 2),
            Transition::new(986108400, 4),
            Transition::new(1004248800, 2),
            Transition::new(1018162800, 4),
            Transition::new(1035698400, 2),
            Transition::new(1049612400, 4),
            Transition::new(1067148000, 2),
            Transition::new(1081062000, 4),
            Transition::new(1099202400, 2),
            Transition::new(1112511600, 4),
            Transition::new(1130652000, 2),
            Transition::new(1143961200, 4),
            Transition::new(1162101600, 2),
            Transition::new(1173596400, 4),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"EDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_JUJUY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2372096328, 1),
            Transition::new(-1567453392, 2),
            Transition::new(-1233432000, 3),
            Transition::new(-1222981200, 2),
            Transition::new(-1205956800, 3),
            Transition::new(-1194037200, 2),
            Transition::new(-1172865600, 3),
            Transition::new(-1162501200, 2),
            Transition::new(-1141329600, 3),
            Transition::new(-1130965200, 2),
            Transition::new(-1109793600, 3),
            Transition::new(-1099429200, 2),
            Transition::new(-1078257600, 3),
            Transition::new(-1067806800, 2),
            Transition::new(-1046635200, 3),
            Transition::new(-1036270800, 2),
            Transition::new(-1015099200, 3),
            Transition::new(-1004734800, 2),
            Transition::new(-983563200, 3),
            Transition::new(-973198800, 2),
            Transition::new(-952027200, 3),
            Transition::new(-941576400, 2),
            Transition::new(-931032000, 3),
            Transition::new(-900882000, 2),
            Transition::new(-890337600, 3),
            Transition::new(-833749200, 2),
            Transition::new(-827265600, 3),
            Transition::new(-752274000, 2),
            Transition::new(-733780800, 3),
            Transition::new(-197326800, 2),
            Transition::new(-190843200, 3),
            Transition::new(-184194000, 2),
            Transition::new(-164491200, 3),
            Transition::new(-152658000, 2),
            Transition::new(-132955200, 3),
            Transition::new(-121122000, 2),
            Transition::new(-101419200, 3),
            Transition::new(-86821200, 2),
            Transition::new(-71092800, 3),
            Transition::new(-54766800, 2),
            Transition::new(-39038400, 3),
            Transition::new(-23317200, 2),
            Transition::new(-7588800, 5),
            Transition::new(128142000, 4),
            Transition::new(136605600, 5),
            Transition::new(596948400, 4),
            Transition::new(605066400, 5),
            Transition::new(624423600, 4),
            Transition::new(636516000, 2),
            Transition::new(657086400, 3),
            Transition::new(669178800, 2),
            Transition::new(686721600, 4),
            Transition::new(699415200, 5),
            Transition::new(719377200, 4),
            Transition::new(731469600, 5),
            Transition::new(938919600, 3),
            Transition::new(952052400, 5),
            Transition::new(1198983600, 4),
            Transition::new(1205632800, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-15672, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-15408, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_JUNEAU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3225223727, 1),
            Transition::new(-2188954939, 2),
            Transition::new(-880207200, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765385200, 2),
            Transition::new(-21477600, 5),
            Transition::new(-5756400, 2),
            Transition::new(9972000, 5),
            Transition::new(25693200, 2),
            Transition::new(41421600, 5),
            Transition::new(57747600, 2),
            Transition::new(73476000, 5),
            Transition::new(89197200, 2),
            Transition::new(104925600, 5),
            Transition::new(120646800, 2),
            Transition::new(126698400, 5),
            Transition::new(152096400, 2),
            Transition::new(162381600, 5),
            Transition::new(183546000, 2),
            Transition::new(199274400, 5),
            Transition::new(215600400, 2),
            Transition::new(230724000, 5),
            Transition::new(247050000, 2),
            Transition::new(262778400, 5),
            Transition::new(278499600, 2),
            Transition::new(294228000, 5),
            Transition::new(309949200, 2),
            Transition::new(325677600, 6),
            Transition::new(341402400, 2),
            Transition::new(357127200, 5),
            Transition::new(372848400, 2),
            Transition::new(388576800, 5),
            Transition::new(404902800, 2),
            Transition::new(420026400, 5),
            Transition::new(436352400, 7),
            Transition::new(439030800, 9),
            Transition::new(452084400, 8),
            Transition::new(467805600, 9),
            Transition::new(483534000, 8),
            Transition::new(499255200, 9),
            Transition::new(514983600, 8),
            Transition::new(530704800, 9),
            Transition::new(544618800, 8),
            Transition::new(562154400, 9),
            Transition::new(576068400, 8),
            Transition::new(594208800, 9),
            Transition::new(607518000, 8),
            Transition::new(625658400, 9),
            Transition::new(638967600, 8),
            Transition::new(657108000, 9),
            Transition::new(671022000, 8),
            Transition::new(688557600, 9),
            Transition::new(702471600, 8),
            Transition::new(720007200, 9),
            Transition::new(733921200, 8),
            Transition::new(752061600, 9),
            Transition::new(765370800, 8),
            Transition::new(783511200, 9),
            Transition::new(796820400, 8),
            Transition::new(814960800, 9),
            Transition::new(828874800, 8),
            Transition::new(846410400, 9),
            Transition::new(860324400, 8),
            Transition::new(877860000, 9),
            Transition::new(891774000, 8),
            Transition::new(909309600, 9),
            Transition::new(923223600, 8),
            Transition::new(941364000, 9),
            Transition::new(954673200, 8),
            Transition::new(972813600, 9),
            Transition::new(986122800, 8),
            Transition::new(1004263200, 9),
            Transition::new(1018177200, 8),
            Transition::new(1035712800, 9),
            Transition::new(1049626800, 8),
            Transition::new(1067162400, 9),
            Transition::new(1081076400, 8),
            Transition::new(1099216800, 9),
            Transition::new(1112526000, 8),
            Transition::new(1130666400, 9),
            Transition::new(1143975600, 8),
            Transition::new(1162116000, 9),
            Transition::new(1173610800, 8),
        ],
        &{
            const V: [LocalTimeType; 10] = [
                match LocalTimeType::new(54139, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32261, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"YST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_KNOX_IN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2717647200, 2),
            Transition::new(-1633276800, 1),
            Transition::new(-1615136400, 2),
            Transition::new(-1601827200, 1),
            Transition::new(-1583686800, 2),
            Transition::new(-880214400, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765392400, 2),
            Transition::new(-715795200, 1),
            Transition::new(-702493200, 2),
            Transition::new(-684345600, 1),
            Transition::new(-671043600, 2),
            Transition::new(-652896000, 1),
            Transition::new(-639594000, 2),
            Transition::new(-620841600, 1),
            Transition::new(-608144400, 2),
            Transition::new(-589392000, 1),
            Transition::new(-576090000, 2),
            Transition::new(-557942400, 1),
            Transition::new(-544640400, 2),
            Transition::new(-526492800, 1),
            Transition::new(-513190800, 2),
            Transition::new(-495043200, 1),
            Transition::new(-481741200, 2),
            Transition::new(-463593600, 1),
            Transition::new(-447267600, 2),
            Transition::new(-431539200, 1),
            Transition::new(-415818000, 2),
            Transition::new(-400089600, 1),
            Transition::new(-386787600, 2),
            Transition::new(-368640000, 1),
            Transition::new(-355338000, 2),
            Transition::new(-337190400, 1),
            Transition::new(-321469200, 2),
            Transition::new(-305740800, 1),
            Transition::new(-289414800, 2),
            Transition::new(-273686400, 1),
            Transition::new(-257965200, 2),
            Transition::new(-242236800, 5),
            Transition::new(-195066000, 2),
            Transition::new(-84384000, 1),
            Transition::new(-68662800, 2),
            Transition::new(-52934400, 1),
            Transition::new(-37213200, 2),
            Transition::new(-21484800, 1),
            Transition::new(-5763600, 2),
            Transition::new(9964800, 1),
            Transition::new(25686000, 2),
            Transition::new(41414400, 1),
            Transition::new(57740400, 2),
            Transition::new(73468800, 1),
            Transition::new(89190000, 2),
            Transition::new(104918400, 1),
            Transition::new(120639600, 2),
            Transition::new(126691200, 1),
            Transition::new(152089200, 2),
            Transition::new(162374400, 1),
            Transition::new(183538800, 2),
            Transition::new(199267200, 1),
            Transition::new(215593200, 2),
            Transition::new(230716800, 1),
            Transition::new(247042800, 2),
            Transition::new(262771200, 1),
            Transition::new(278492400, 2),
            Transition::new(294220800, 1),
            Transition::new(309942000, 2),
            Transition::new(325670400, 1),
            Transition::new(341391600, 2),
            Transition::new(357120000, 1),
            Transition::new(372841200, 2),
            Transition::new(388569600, 1),
            Transition::new(404895600, 2),
            Transition::new(420019200, 1),
            Transition::new(436345200, 2),
            Transition::new(452073600, 1),
            Transition::new(467794800, 2),
            Transition::new(483523200, 1),
            Transition::new(499244400, 2),
            Transition::new(514972800, 1),
            Transition::new(530694000, 2),
            Transition::new(544608000, 1),
            Transition::new(562143600, 2),
            Transition::new(576057600, 1),
            Transition::new(594198000, 2),
            Transition::new(607507200, 1),
            Transition::new(625647600, 2),
            Transition::new(638956800, 1),
            Transition::new(657097200, 2),
            Transition::new(671011200, 1),
            Transition::new(688546800, 5),
            Transition::new(1143961200, 1),
            Transition::new(1162105200, 2),
            Transition::new(1173600000, 1),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-20790, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_LA_PAZ: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524505244, 1),
            Transition::new(-1205954844, 2),
            Transition::new(-1192307244, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-16356, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-16356, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-12756, true, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_LIMA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524503108, 1),
            Transition::new(-1938538284, 3),
            Transition::new(-1009825200, 2),
            Transition::new(-1002052800, 3),
            Transition::new(-986756400, 2),
            Transition::new(-971035200, 3),
            Transition::new(-955306800, 2),
            Transition::new(-939585600, 3),
            Transition::new(504939600, 2),
            Transition::new(512712000, 3),
            Transition::new(536475600, 2),
            Transition::new(544248000, 3),
            Transition::new(631170000, 2),
            Transition::new(638942400, 3),
            Transition::new(757400400, 2),
            Transition::new(765172800, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-18492, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18516, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_LOS_ANGELES: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2717640000, 2),
            Transition::new(-1633269600, 1),
            Transition::new(-1615129200, 2),
            Transition::new(-1601820000, 1),
            Transition::new(-1583679600, 2),
            Transition::new(-880207200, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765385200, 2),
            Transition::new(-687967140, 1),
            Transition::new(-662655600, 2),
            Transition::new(-620838000, 1),
            Transition::new(-608137200, 2),
            Transition::new(-589388400, 1),
            Transition::new(-576082800, 2),
            Transition::new(-557938800, 1),
            Transition::new(-544633200, 2),
            Transition::new(-526489200, 1),
            Transition::new(-513183600, 2),
            Transition::new(-495039600, 1),
            Transition::new(-481734000, 2),
            Transition::new(-463590000, 1),
            Transition::new(-450284400, 2),
            Transition::new(-431535600, 1),
            Transition::new(-418230000, 2),
            Transition::new(-400086000, 1),
            Transition::new(-386780400, 2),
            Transition::new(-368636400, 1),
            Transition::new(-355330800, 2),
            Transition::new(-337186800, 1),
            Transition::new(-323881200, 2),
            Transition::new(-305737200, 1),
            Transition::new(-292431600, 2),
            Transition::new(-273682800, 1),
            Transition::new(-260982000, 2),
            Transition::new(-242233200, 1),
            Transition::new(-226508400, 2),
            Transition::new(-210783600, 1),
            Transition::new(-195058800, 2),
            Transition::new(-179334000, 1),
            Transition::new(-163609200, 2),
            Transition::new(-147884400, 1),
            Transition::new(-131554800, 2),
            Transition::new(-116434800, 1),
            Transition::new(-100105200, 2),
            Transition::new(-84376800, 1),
            Transition::new(-68655600, 2),
            Transition::new(-52927200, 1),
            Transition::new(-37206000, 2),
            Transition::new(-21477600, 1),
            Transition::new(-5756400, 2),
            Transition::new(9972000, 1),
            Transition::new(25693200, 2),
            Transition::new(41421600, 1),
            Transition::new(57747600, 2),
            Transition::new(73476000, 1),
            Transition::new(89197200, 2),
            Transition::new(104925600, 1),
            Transition::new(120646800, 2),
            Transition::new(126698400, 1),
            Transition::new(152096400, 2),
            Transition::new(162381600, 1),
            Transition::new(183546000, 2),
            Transition::new(199274400, 1),
            Transition::new(215600400, 2),
            Transition::new(230724000, 1),
            Transition::new(247050000, 2),
            Transition::new(262778400, 1),
            Transition::new(278499600, 2),
            Transition::new(294228000, 1),
            Transition::new(309949200, 2),
            Transition::new(325677600, 1),
            Transition::new(341398800, 2),
            Transition::new(357127200, 1),
            Transition::new(372848400, 2),
            Transition::new(388576800, 1),
            Transition::new(404902800, 2),
            Transition::new(420026400, 1),
            Transition::new(436352400, 2),
            Transition::new(452080800, 1),
            Transition::new(467802000, 2),
            Transition::new(483530400, 1),
            Transition::new(499251600, 2),
            Transition::new(514980000, 1),
            Transition::new(530701200, 2),
            Transition::new(544615200, 1),
            Transition::new(562150800, 2),
            Transition::new(576064800, 1),
            Transition::new(594205200, 2),
            Transition::new(607514400, 1),
            Transition::new(625654800, 2),
            Transition::new(638964000, 1),
            Transition::new(657104400, 2),
            Transition::new(671018400, 1),
            Transition::new(688554000, 2),
            Transition::new(702468000, 1),
            Transition::new(720003600, 2),
            Transition::new(733917600, 1),
            Transition::new(752058000, 2),
            Transition::new(765367200, 1),
            Transition::new(783507600, 2),
            Transition::new(796816800, 1),
            Transition::new(814957200, 2),
            Transition::new(828871200, 1),
            Transition::new(846406800, 2),
            Transition::new(860320800, 1),
            Transition::new(877856400, 2),
            Transition::new(891770400, 1),
            Transition::new(909306000, 2),
            Transition::new(923220000, 1),
            Transition::new(941360400, 2),
            Transition::new(954669600, 1),
            Transition::new(972810000, 2),
            Transition::new(986119200, 1),
            Transition::new(1004259600, 2),
            Transition::new(1018173600, 1),
            Transition::new(1035709200, 2),
            Transition::new(1049623200, 1),
            Transition::new(1067158800, 2),
            Transition::new(1081072800, 1),
            Transition::new(1099213200, 2),
            Transition::new(1112522400, 1),
            Transition::new(1130662800, 2),
            Transition::new(1143972000, 1),
            Transition::new(1162112400, 2),
            Transition::new(1173607200, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-28378, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-28800, false, Some(b"PST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_LOUISVILLE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2717647200, 2),
            Transition::new(-1633276800, 1),
            Transition::new(-1615136400, 2),
            Transition::new(-1601827200, 1),
            Transition::new(-1583686800, 2),
            Transition::new(-1535904000, 1),
            Transition::new(-1525280400, 2),
            Transition::new(-905097600, 1),
            Transition::new(-891795600, 2),
            Transition::new(-880214400, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765392400, 2),
            Transition::new(-747251940, 1),
            Transition::new(-744224400, 2),
            Transition::new(-620841600, 1),
            Transition::new(-608144400, 2),
            Transition::new(-589392000, 1),
            Transition::new(-576090000, 2),
            Transition::new(-557942400, 1),
            Transition::new(-544640400, 2),
            Transition::new(-526492800, 1),
            Transition::new(-513190800, 2),
            Transition::new(-495043200, 1),
            Transition::new(-481741200, 2),
            Transition::new(-463593600, 1),
            Transition::new(-450291600, 2),
            Transition::new(-431539200, 1),
            Transition::new(-415818000, 2),
            Transition::new(-400089600, 1),
            Transition::new(-384368400, 2),
            Transition::new(-368640000, 1),
            Transition::new(-352918800, 2),
            Transition::new(-337190400, 1),
            Transition::new(-321469200, 2),
            Transition::new(-305740800, 1),
            Transition::new(-289414800, 2),
            Transition::new(-273686400, 1),
            Transition::new(-266432400, 5),
            Transition::new(-52938000, 6),
            Transition::new(-37216800, 5),
            Transition::new(-21488400, 6),
            Transition::new(-5767200, 5),
            Transition::new(9961200, 6),
            Transition::new(25682400, 5),
            Transition::new(41410800, 6),
            Transition::new(57736800, 5),
            Transition::new(73465200, 6),
            Transition::new(89186400, 5),
            Transition::new(104914800, 6),
            Transition::new(120636000, 5),
            Transition::new(126687600, 1),
            Transition::new(152089200, 5),
            Transition::new(162370800, 6),
            Transition::new(183535200, 5),
            Transition::new(199263600, 6),
            Transition::new(215589600, 5),
            Transition::new(230713200, 6),
            Transition::new(247039200, 5),
            Transition::new(262767600, 6),
            Transition::new(278488800, 5),
            Transition::new(294217200, 6),
            Transition::new(309938400, 5),
            Transition::new(325666800, 6),
            Transition::new(341388000, 5),
            Transition::new(357116400, 6),
            Transition::new(372837600, 5),
            Transition::new(388566000, 6),
            Transition::new(404892000, 5),
            Transition::new(420015600, 6),
            Transition::new(436341600, 5),
            Transition::new(452070000, 6),
            Transition::new(467791200, 5),
            Transition::new(483519600, 6),
            Transition::new(499240800, 5),
            Transition::new(514969200, 6),
            Transition::new(530690400, 5),
            Transition::new(544604400, 6),
            Transition::new(562140000, 5),
            Transition::new(576054000, 6),
            Transition::new(594194400, 5),
            Transition::new(607503600, 6),
            Transition::new(625644000, 5),
            Transition::new(638953200, 6),
            Transition::new(657093600, 5),
            Transition::new(671007600, 6),
            Transition::new(688543200, 5),
            Transition::new(702457200, 6),
            Transition::new(719992800, 5),
            Transition::new(733906800, 6),
            Transition::new(752047200, 5),
            Transition::new(765356400, 6),
            Transition::new(783496800, 5),
            Transition::new(796806000, 6),
            Transition::new(814946400, 5),
            Transition::new(828860400, 6),
            Transition::new(846396000, 5),
            Transition::new(860310000, 6),
            Transition::new(877845600, 5),
            Transition::new(891759600, 6),
            Transition::new(909295200, 5),
            Transition::new(923209200, 6),
            Transition::new(941349600, 5),
            Transition::new(954658800, 6),
            Transition::new(972799200, 5),
            Transition::new(986108400, 6),
            Transition::new(1004248800, 5),
            Transition::new(1018162800, 6),
            Transition::new(1035698400, 5),
            Transition::new(1049612400, 6),
            Transition::new(1067148000, 5),
            Transition::new(1081062000, 6),
            Transition::new(1099202400, 5),
            Transition::new(1112511600, 6),
            Transition::new(1130652000, 5),
            Transition::new(1143961200, 6),
            Transition::new(1162101600, 5),
            Transition::new(1173596400, 6),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(-20582, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MACEIO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767217028, 2),
            Transition::new(-1206957600, 1),
            Transition::new(-1191362400, 2),
            Transition::new(-1175374800, 1),
            Transition::new(-1159826400, 2),
            Transition::new(-633819600, 1),
            Transition::new(-622069200, 2),
            Transition::new(-602283600, 1),
            Transition::new(-591832800, 2),
            Transition::new(-570747600, 1),
            Transition::new(-560210400, 2),
            Transition::new(-539125200, 1),
            Transition::new(-531352800, 2),
            Transition::new(-191365200, 1),
            Transition::new(-184197600, 2),
            Transition::new(-155163600, 1),
            Transition::new(-150069600, 2),
            Transition::new(-128898000, 1),
            Transition::new(-121125600, 2),
            Transition::new(-99954000, 1),
            Transition::new(-89589600, 2),
            Transition::new(-68418000, 1),
            Transition::new(-57967200, 2),
            Transition::new(499748400, 1),
            Transition::new(511236000, 2),
            Transition::new(530593200, 1),
            Transition::new(540266400, 2),
            Transition::new(562129200, 1),
            Transition::new(571197600, 2),
            Transition::new(592974000, 1),
            Transition::new(602042400, 2),
            Transition::new(624423600, 1),
            Transition::new(634701600, 2),
            Transition::new(813726000, 1),
            Transition::new(824004000, 2),
            Transition::new(938919600, 1),
            Transition::new(951616800, 2),
            Transition::new(970974000, 1),
            Transition::new(972180000, 2),
            Transition::new(1003028400, 1),
            Transition::new(1013911200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-8572, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MANAGUA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524500892, 1),
            Transition::new(-1121105688, 2),
            Transition::new(105084000, 3),
            Transition::new(161758800, 2),
            Transition::new(290584800, 4),
            Transition::new(299134800, 2),
            Transition::new(322034400, 4),
            Transition::new(330584400, 2),
            Transition::new(694260000, 3),
            Transition::new(717310800, 2),
            Transition::new(725868000, 3),
            Transition::new(852094800, 2),
            Transition::new(1113112800, 4),
            Transition::new(1128229200, 2),
            Transition::new(1146384000, 4),
            Transition::new(1159682400, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-20708, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-20712, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MANAUS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767211196, 2),
            Transition::new(-1206954000, 1),
            Transition::new(-1191358800, 2),
            Transition::new(-1175371200, 1),
            Transition::new(-1159822800, 2),
            Transition::new(-633816000, 1),
            Transition::new(-622065600, 2),
            Transition::new(-602280000, 1),
            Transition::new(-591829200, 2),
            Transition::new(-570744000, 1),
            Transition::new(-560206800, 2),
            Transition::new(-539121600, 1),
            Transition::new(-531349200, 2),
            Transition::new(-191361600, 1),
            Transition::new(-184194000, 2),
            Transition::new(-155160000, 1),
            Transition::new(-150066000, 2),
            Transition::new(-128894400, 1),
            Transition::new(-121122000, 2),
            Transition::new(-99950400, 1),
            Transition::new(-89586000, 2),
            Transition::new(-68414400, 1),
            Transition::new(-57963600, 2),
            Transition::new(499752000, 1),
            Transition::new(511239600, 2),
            Transition::new(530596800, 1),
            Transition::new(540270000, 2),
            Transition::new(562132800, 1),
            Transition::new(571201200, 2),
            Transition::new(750830400, 1),
            Transition::new(761713200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-14404, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MARIGOT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1825098836, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-14764, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MARTINIQUE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524506940, 1),
            Transition::new(-1851537340, 2),
            Transition::new(323841600, 3),
            Transition::new(338958000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-14660, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14660, false, Some(b"FFMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MATAMOROS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514743200, 1),
            Transition::new(576057600, 2),
            Transition::new(594198000, 1),
            Transition::new(828864000, 2),
            Transition::new(846399600, 1),
            Transition::new(860313600, 2),
            Transition::new(877849200, 1),
            Transition::new(891763200, 2),
            Transition::new(909298800, 1),
            Transition::new(923212800, 2),
            Transition::new(941353200, 1),
            Transition::new(954662400, 2),
            Transition::new(972802800, 1),
            Transition::new(989136000, 2),
            Transition::new(1001833200, 1),
            Transition::new(1018166400, 2),
            Transition::new(1035702000, 1),
            Transition::new(1049616000, 2),
            Transition::new(1067151600, 1),
            Transition::new(1081065600, 2),
            Transition::new(1099206000, 1),
            Transition::new(1112515200, 2),
            Transition::new(1130655600, 1),
            Transition::new(1143964800, 2),
            Transition::new(1162105200, 1),
            Transition::new(1175414400, 2),
            Transition::new(1193554800, 1),
            Transition::new(1207468800, 2),
            Transition::new(1225004400, 1),
            Transition::new(1238918400, 2),
            Transition::new(1256454000, 1),
            Transition::new(1268553600, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-24000, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MAZATLAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514739600, 1),
            Transition::new(-1343066400, 2),
            Transition::new(-1234807200, 1),
            Transition::new(-1220292000, 2),
            Transition::new(-1207159200, 1),
            Transition::new(-1191344400, 2),
            Transition::new(-873828000, 1),
            Transition::new(-661539600, 3),
            Transition::new(28800, 1),
            Transition::new(828867600, 4),
            Transition::new(846403200, 1),
            Transition::new(860317200, 4),
            Transition::new(877852800, 1),
            Transition::new(891766800, 4),
            Transition::new(909302400, 1),
            Transition::new(923216400, 4),
            Transition::new(941356800, 1),
            Transition::new(954666000, 4),
            Transition::new(972806400, 1),
            Transition::new(989139600, 4),
            Transition::new(1001836800, 1),
            Transition::new(1018170000, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-25540, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MENDOZA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2372095484, 1),
            Transition::new(-1567453392, 2),
            Transition::new(-1233432000, 3),
            Transition::new(-1222981200, 2),
            Transition::new(-1205956800, 3),
            Transition::new(-1194037200, 2),
            Transition::new(-1172865600, 3),
            Transition::new(-1162501200, 2),
            Transition::new(-1141329600, 3),
            Transition::new(-1130965200, 2),
            Transition::new(-1109793600, 3),
            Transition::new(-1099429200, 2),
            Transition::new(-1078257600, 3),
            Transition::new(-1067806800, 2),
            Transition::new(-1046635200, 3),
            Transition::new(-1036270800, 2),
            Transition::new(-1015099200, 3),
            Transition::new(-1004734800, 2),
            Transition::new(-983563200, 3),
            Transition::new(-973198800, 2),
            Transition::new(-952027200, 3),
            Transition::new(-941576400, 2),
            Transition::new(-931032000, 3),
            Transition::new(-900882000, 2),
            Transition::new(-890337600, 3),
            Transition::new(-833749200, 2),
            Transition::new(-827265600, 3),
            Transition::new(-752274000, 2),
            Transition::new(-733780800, 3),
            Transition::new(-197326800, 2),
            Transition::new(-190843200, 3),
            Transition::new(-184194000, 2),
            Transition::new(-164491200, 3),
            Transition::new(-152658000, 2),
            Transition::new(-132955200, 3),
            Transition::new(-121122000, 2),
            Transition::new(-101419200, 3),
            Transition::new(-86821200, 2),
            Transition::new(-71092800, 3),
            Transition::new(-54766800, 2),
            Transition::new(-39038400, 3),
            Transition::new(-23317200, 2),
            Transition::new(-7588800, 5),
            Transition::new(128142000, 4),
            Transition::new(136605600, 5),
            Transition::new(596948400, 4),
            Transition::new(605066400, 5),
            Transition::new(624423600, 4),
            Transition::new(636516000, 2),
            Transition::new(655963200, 3),
            Transition::new(667796400, 2),
            Transition::new(687499200, 3),
            Transition::new(699418800, 2),
            Transition::new(719380800, 4),
            Transition::new(731469600, 5),
            Transition::new(938919600, 3),
            Transition::new(952052400, 5),
            Transition::new(1085281200, 2),
            Transition::new(1096171200, 5),
            Transition::new(1198983600, 4),
            Transition::new(1205632800, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-16516, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-15408, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MENOMINEE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2659759773, 2),
            Transition::new(-1633276800, 1),
            Transition::new(-1615136400, 2),
            Transition::new(-1601827200, 1),
            Transition::new(-1583686800, 2),
            Transition::new(-880214400, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765392400, 2),
            Transition::new(-747244800, 1),
            Transition::new(-733942800, 2),
            Transition::new(-116438400, 1),
            Transition::new(-100112400, 2),
            Transition::new(-21484800, 5),
            Transition::new(104914800, 1),
            Transition::new(120639600, 2),
            Transition::new(126691200, 1),
            Transition::new(152089200, 2),
            Transition::new(162374400, 1),
            Transition::new(183538800, 2),
            Transition::new(199267200, 1),
            Transition::new(215593200, 2),
            Transition::new(230716800, 1),
            Transition::new(247042800, 2),
            Transition::new(262771200, 1),
            Transition::new(278492400, 2),
            Transition::new(294220800, 1),
            Transition::new(309942000, 2),
            Transition::new(325670400, 1),
            Transition::new(341391600, 2),
            Transition::new(357120000, 1),
            Transition::new(372841200, 2),
            Transition::new(388569600, 1),
            Transition::new(404895600, 2),
            Transition::new(420019200, 1),
            Transition::new(436345200, 2),
            Transition::new(452073600, 1),
            Transition::new(467794800, 2),
            Transition::new(483523200, 1),
            Transition::new(499244400, 2),
            Transition::new(514972800, 1),
            Transition::new(530694000, 2),
            Transition::new(544608000, 1),
            Transition::new(562143600, 2),
            Transition::new(576057600, 1),
            Transition::new(594198000, 2),
            Transition::new(607507200, 1),
            Transition::new(625647600, 2),
            Transition::new(638956800, 1),
            Transition::new(657097200, 2),
            Transition::new(671011200, 1),
            Transition::new(688546800, 2),
            Transition::new(702460800, 1),
            Transition::new(719996400, 2),
            Transition::new(733910400, 1),
            Transition::new(752050800, 2),
            Transition::new(765360000, 1),
            Transition::new(783500400, 2),
            Transition::new(796809600, 1),
            Transition::new(814950000, 2),
            Transition::new(828864000, 1),
            Transition::new(846399600, 2),
            Transition::new(860313600, 1),
            Transition::new(877849200, 2),
            Transition::new(891763200, 1),
            Transition::new(909298800, 2),
            Transition::new(923212800, 1),
            Transition::new(941353200, 2),
            Transition::new(954662400, 1),
            Transition::new(972802800, 2),
            Transition::new(986112000, 1),
            Transition::new(1004252400, 2),
            Transition::new(1018166400, 1),
            Transition::new(1035702000, 2),
            Transition::new(1049616000, 1),
            Transition::new(1067151600, 2),
            Transition::new(1081065600, 1),
            Transition::new(1099206000, 2),
            Transition::new(1112515200, 1),
            Transition::new(1130655600, 2),
            Transition::new(1143964800, 1),
            Transition::new(1162105200, 2),
            Transition::new(1173600000, 1),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-21027, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MERIDA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514743200, 1),
            Transition::new(377935200, 2),
            Transition::new(407653200, 1),
            Transition::new(828864000, 3),
            Transition::new(846399600, 1),
            Transition::new(860313600, 3),
            Transition::new(877849200, 1),
            Transition::new(891763200, 3),
            Transition::new(909298800, 1),
            Transition::new(923212800, 3),
            Transition::new(941353200, 1),
            Transition::new(954662400, 3),
            Transition::new(972802800, 1),
            Transition::new(989136000, 3),
            Transition::new(1001833200, 1),
            Transition::new(1018166400, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-21508, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_METLAKATLA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3225223727, 1),
            Transition::new(-2188955622, 2),
            Transition::new(-880207200, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765385200, 2),
            Transition::new(-21477600, 5),
            Transition::new(-5756400, 2),
            Transition::new(9972000, 5),
            Transition::new(25693200, 2),
            Transition::new(41421600, 5),
            Transition::new(57747600, 2),
            Transition::new(73476000, 5),
            Transition::new(89197200, 2),
            Transition::new(104925600, 5),
            Transition::new(120646800, 2),
            Transition::new(126698400, 5),
            Transition::new(152096400, 2),
            Transition::new(162381600, 5),
            Transition::new(183546000, 2),
            Transition::new(199274400, 5),
            Transition::new(215600400, 2),
            Transition::new(230724000, 5),
            Transition::new(247050000, 2),
            Transition::new(262778400, 5),
            Transition::new(278499600, 2),
            Transition::new(294228000, 5),
            Transition::new(309949200, 2),
            Transition::new(325677600, 5),
            Transition::new(341398800, 2),
            Transition::new(357127200, 5),
            Transition::new(372848400, 2),
            Transition::new(388576800, 5),
            Transition::new(404902800, 2),
            Transition::new(420026400, 5),
            Transition::new(436352400, 2),
            Transition::new(1446372000, 6),
            Transition::new(1457866800, 7),
            Transition::new(1478426400, 6),
            Transition::new(1489316400, 7),
            Transition::new(1509876000, 6),
            Transition::new(1520766000, 7),
            Transition::new(1541325600, 2),
            Transition::new(1547978400, 6),
            Transition::new(1552215600, 7),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(54822, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-31578, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MEXICO_CITY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514739600, 1),
            Transition::new(-1343066400, 2),
            Transition::new(-1234807200, 1),
            Transition::new(-1220292000, 2),
            Transition::new(-1207159200, 1),
            Transition::new(-1191344400, 2),
            Transition::new(-975261600, 3),
            Transition::new(-963169200, 2),
            Transition::new(-917114400, 3),
            Transition::new(-907354800, 2),
            Transition::new(-821901600, 4),
            Transition::new(-810068400, 2),
            Transition::new(-627501600, 3),
            Transition::new(-612990000, 2),
            Transition::new(828864000, 3),
            Transition::new(846399600, 2),
            Transition::new(860313600, 3),
            Transition::new(877849200, 2),
            Transition::new(891763200, 3),
            Transition::new(909298800, 2),
            Transition::new(923212800, 3),
            Transition::new(941353200, 2),
            Transition::new(954662400, 3),
            Transition::new(972802800, 2),
            Transition::new(989136000, 3),
            Transition::new(1001833200, 2),
            Transition::new(1018166400, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-23796, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MIQUELON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1850328920, 1),
            Transition::new(326001600, 2),
            Transition::new(544597200, 3),
            Transition::new(562132800, 2),
            Transition::new(576046800, 3),
            Transition::new(594187200, 2),
            Transition::new(607496400, 3),
            Transition::new(625636800, 2),
            Transition::new(638946000, 3),
            Transition::new(657086400, 2),
            Transition::new(671000400, 3),
            Transition::new(688536000, 2),
            Transition::new(702450000, 3),
            Transition::new(719985600, 2),
            Transition::new(733899600, 3),
            Transition::new(752040000, 2),
            Transition::new(765349200, 3),
            Transition::new(783489600, 2),
            Transition::new(796798800, 3),
            Transition::new(814939200, 2),
            Transition::new(828853200, 3),
            Transition::new(846388800, 2),
            Transition::new(860302800, 3),
            Transition::new(877838400, 2),
            Transition::new(891752400, 3),
            Transition::new(909288000, 2),
            Transition::new(923202000, 3),
            Transition::new(941342400, 2),
            Transition::new(954651600, 3),
            Transition::new(972792000, 2),
            Transition::new(986101200, 3),
            Transition::new(1004241600, 2),
            Transition::new(1018155600, 3),
            Transition::new(1035691200, 2),
            Transition::new(1049605200, 3),
            Transition::new(1067140800, 2),
            Transition::new(1081054800, 3),
            Transition::new(1099195200, 2),
            Transition::new(1112504400, 3),
            Transition::new(1130644800, 2),
            Transition::new(1143954000, 3),
            Transition::new(1162094400, 2),
            Transition::new(1173589200, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-13480, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-10800, false, Some(b"-03")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-7200, true, Some(b"-02")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MONCTON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2715882052, 1),
            Transition::new(-2131642800, 3),
            Transition::new(-1632074400, 2),
            Transition::new(-1615143600, 3),
            Transition::new(-1153681200, 2),
            Transition::new(-1145822400, 3),
            Transition::new(-1122231600, 2),
            Transition::new(-1114372800, 3),
            Transition::new(-1090782000, 2),
            Transition::new(-1082923200, 3),
            Transition::new(-1059332400, 2),
            Transition::new(-1051473600, 3),
            Transition::new(-1027882800, 2),
            Transition::new(-1020024000, 3),
            Transition::new(-996433200, 2),
            Transition::new(-988574400, 3),
            Transition::new(-965674800, 2),
            Transition::new(-955396800, 3),
            Transition::new(-934743600, 2),
            Transition::new(-923947200, 3),
            Transition::new(-904503600, 2),
            Transition::new(-891892800, 3),
            Transition::new(-880221600, 4),
            Transition::new(-769395600, 5),
            Transition::new(-765399600, 3),
            Transition::new(-747252000, 2),
            Transition::new(-733950000, 3),
            Transition::new(-715802400, 2),
            Transition::new(-702500400, 3),
            Transition::new(-684352800, 2),
            Transition::new(-671050800, 3),
            Transition::new(-652903200, 2),
            Transition::new(-639601200, 3),
            Transition::new(-620848800, 2),
            Transition::new(-608151600, 3),
            Transition::new(-589399200, 2),
            Transition::new(-576097200, 3),
            Transition::new(-557949600, 2),
            Transition::new(-544647600, 3),
            Transition::new(-526500000, 2),
            Transition::new(-513198000, 3),
            Transition::new(-495050400, 2),
            Transition::new(-481748400, 3),
            Transition::new(-463600800, 2),
            Transition::new(-450298800, 3),
            Transition::new(-431546400, 2),
            Transition::new(-418244400, 3),
            Transition::new(-400096800, 2),
            Transition::new(-384375600, 3),
            Transition::new(-368647200, 2),
            Transition::new(-352926000, 3),
            Transition::new(-337197600, 2),
            Transition::new(-321476400, 3),
            Transition::new(-305748000, 2),
            Transition::new(-289422000, 3),
            Transition::new(-273693600, 2),
            Transition::new(-257972400, 3),
            Transition::new(-242244000, 2),
            Transition::new(-226522800, 3),
            Transition::new(-210794400, 2),
            Transition::new(-195073200, 3),
            Transition::new(-179344800, 2),
            Transition::new(-163623600, 3),
            Transition::new(-147895200, 2),
            Transition::new(-131569200, 3),
            Transition::new(-116445600, 2),
            Transition::new(-100119600, 3),
            Transition::new(-84391200, 2),
            Transition::new(-68670000, 3),
            Transition::new(-52941600, 2),
            Transition::new(-37220400, 3),
            Transition::new(-21492000, 2),
            Transition::new(-5770800, 3),
            Transition::new(9957600, 2),
            Transition::new(25678800, 3),
            Transition::new(41407200, 2),
            Transition::new(57733200, 3),
            Transition::new(73461600, 2),
            Transition::new(89182800, 3),
            Transition::new(136360800, 2),
            Transition::new(152082000, 3),
            Transition::new(167810400, 2),
            Transition::new(183531600, 3),
            Transition::new(199260000, 2),
            Transition::new(215586000, 3),
            Transition::new(230709600, 2),
            Transition::new(247035600, 3),
            Transition::new(262764000, 2),
            Transition::new(278485200, 3),
            Transition::new(294213600, 2),
            Transition::new(309934800, 3),
            Transition::new(325663200, 2),
            Transition::new(341384400, 3),
            Transition::new(357112800, 2),
            Transition::new(372834000, 3),
            Transition::new(388562400, 2),
            Transition::new(404888400, 3),
            Transition::new(420012000, 2),
            Transition::new(436338000, 3),
            Transition::new(452066400, 2),
            Transition::new(467787600, 3),
            Transition::new(483516000, 2),
            Transition::new(499237200, 3),
            Transition::new(514965600, 2),
            Transition::new(530686800, 3),
            Transition::new(544600800, 2),
            Transition::new(562136400, 3),
            Transition::new(576050400, 2),
            Transition::new(594190800, 3),
            Transition::new(607500000, 2),
            Transition::new(625640400, 3),
            Transition::new(638949600, 2),
            Transition::new(657090000, 3),
            Transition::new(671004000, 2),
            Transition::new(688539600, 3),
            Transition::new(702453600, 2),
            Transition::new(719989200, 3),
            Transition::new(733896060, 2),
            Transition::new(752036460, 3),
            Transition::new(765345660, 2),
            Transition::new(783486060, 3),
            Transition::new(796795260, 2),
            Transition::new(814935660, 3),
            Transition::new(828849660, 2),
            Transition::new(846385260, 3),
            Transition::new(860299260, 2),
            Transition::new(877834860, 3),
            Transition::new(891748860, 2),
            Transition::new(909284460, 3),
            Transition::new(923198460, 2),
            Transition::new(941338860, 3),
            Transition::new(954648060, 2),
            Transition::new(972788460, 3),
            Transition::new(986097660, 2),
            Transition::new(1004238060, 3),
            Transition::new(1018152060, 2),
            Transition::new(1035687660, 3),
            Transition::new(1049601660, 2),
            Transition::new(1067137260, 3),
            Transition::new(1081051260, 2),
            Transition::new(1099191660, 3),
            Transition::new(1112500860, 2),
            Transition::new(1130641260, 3),
            Transition::new(1143950460, 2),
            Transition::new(1162090860, 3),
            Transition::new(1173592800, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-15548, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"AWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"APT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-14400, false, Some(b"AST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MONTERREY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514743200, 1),
            Transition::new(576057600, 2),
            Transition::new(594198000, 1),
            Transition::new(828864000, 2),
            Transition::new(846399600, 1),
            Transition::new(860313600, 2),
            Transition::new(877849200, 1),
            Transition::new(891763200, 2),
            Transition::new(909298800, 1),
            Transition::new(923212800, 2),
            Transition::new(941353200, 1),
            Transition::new(954662400, 2),
            Transition::new(972802800, 1),
            Transition::new(989136000, 2),
            Transition::new(1001833200, 1),
            Transition::new(1018166400, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-24076, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MONTEVIDEO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1942690509, 1),
            Transition::new(-1567455309, 2),
            Transition::new(-1459627200, 4),
            Transition::new(-1443819600, 3),
            Transition::new(-1428006600, 4),
            Transition::new(-1412283600, 3),
            Transition::new(-1396470600, 4),
            Transition::new(-1380747600, 3),
            Transition::new(-1141590600, 4),
            Transition::new(-1128286800, 3),
            Transition::new(-1110141000, 4),
            Transition::new(-1096837200, 3),
            Transition::new(-1078691400, 4),
            Transition::new(-1065387600, 3),
            Transition::new(-1047241800, 4),
            Transition::new(-1033938000, 3),
            Transition::new(-1015187400, 4),
            Transition::new(-1002488400, 3),
            Transition::new(-983737800, 4),
            Transition::new(-971038800, 3),
            Transition::new(-954707400, 4),
            Transition::new(-938984400, 3),
            Transition::new(-920838600, 4),
            Transition::new(-907534800, 3),
            Transition::new(-896819400, 4),
            Transition::new(-853621200, 6),
            Transition::new(-845847000, 5),
            Transition::new(-334789200, 6),
            Transition::new(-319671000, 5),
            Transition::new(-314226000, 7),
            Transition::new(-309996000, 5),
            Transition::new(-149720400, 7),
            Transition::new(-134604000, 5),
            Transition::new(-50446800, 6),
            Transition::new(-34205400, 5),
            Transition::new(9860400, 7),
            Transition::new(14176800, 5),
            Transition::new(72846000, 7),
            Transition::new(80100000, 5),
            Transition::new(127278000, 8),
            Transition::new(132111000, 6),
            Transition::new(147234600, 5),
            Transition::new(156913200, 7),
            Transition::new(165376800, 5),
            Transition::new(219812400, 7),
            Transition::new(226461600, 5),
            Transition::new(250052400, 7),
            Transition::new(257911200, 5),
            Transition::new(282711600, 7),
            Transition::new(289360800, 5),
            Transition::new(294202800, 7),
            Transition::new(322020000, 5),
            Transition::new(566449200, 7),
            Transition::new(573012000, 5),
            Transition::new(597812400, 7),
            Transition::new(605066400, 5),
            Transition::new(625633200, 7),
            Transition::new(635911200, 5),
            Transition::new(656478000, 7),
            Transition::new(667965600, 5),
            Transition::new(688532400, 7),
            Transition::new(699415200, 5),
            Transition::new(719377200, 7),
            Transition::new(730864800, 5),
            Transition::new(1095562800, 7),
            Transition::new(1111896000, 5),
            Transition::new(1128834000, 7),
            Transition::new(1142136000, 5),
            Transition::new(1159678800, 7),
            Transition::new(1173585600, 5),
            Transition::new(1191733200, 7),
            Transition::new(1205035200, 5),
            Transition::new(1223182800, 7),
            Transition::new(1236484800, 5),
            Transition::new(1254632400, 7),
            Transition::new(1268539200, 5),
            Transition::new(1286082000, 7),
            Transition::new(1299988800, 5),
            Transition::new(1317531600, 7),
            Transition::new(1331438400, 5),
            Transition::new(1349586000, 7),
            Transition::new(1362888000, 5),
            Transition::new(1381035600, 7),
            Transition::new(1394337600, 5),
            Transition::new(1412485200, 7),
            Transition::new(1425787200, 5),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(-13491, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-13491, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-12600, false, Some(b"-0330")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-9000, true, Some(b"-0230")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-5400, true, Some(b"-0130")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MONTREAL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713892744, 2),
            Transition::new(-1665334800, 1),
            Transition::new(-1662753600, 2),
            Transition::new(-1632070800, 1),
            Transition::new(-1615140000, 2),
            Transition::new(-1601742600, 1),
            Transition::new(-1583775000, 2),
            Transition::new(-1567355400, 1),
            Transition::new(-1554053400, 2),
            Transition::new(-1535907600, 1),
            Transition::new(-1522603800, 2),
            Transition::new(-1504458000, 1),
            Transition::new(-1491154200, 2),
            Transition::new(-1439830800, 1),
            Transition::new(-1428255000, 2),
            Transition::new(-1409504400, 1),
            Transition::new(-1396805400, 2),
            Transition::new(-1378054800, 1),
            Transition::new(-1365355800, 2),
            Transition::new(-1346612400, 1),
            Transition::new(-1333915200, 2),
            Transition::new(-1315162800, 1),
            Transition::new(-1301860800, 2),
            Transition::new(-1283713200, 1),
            Transition::new(-1270411200, 2),
            Transition::new(-1252263600, 1),
            Transition::new(-1238961600, 2),
            Transition::new(-1220814000, 1),
            Transition::new(-1207512000, 2),
            Transition::new(-1188759600, 1),
            Transition::new(-1176062400, 2),
            Transition::new(-1157310000, 1),
            Transition::new(-1144008000, 2),
            Transition::new(-1125860400, 1),
            Transition::new(-1112558400, 2),
            Transition::new(-1094410800, 1),
            Transition::new(-1081108800, 2),
            Transition::new(-1062961200, 1),
            Transition::new(-1049659200, 2),
            Transition::new(-1031511600, 1),
            Transition::new(-1018209600, 2),
            Transition::new(-1000062000, 1),
            Transition::new(-986760000, 2),
            Transition::new(-968007600, 1),
            Transition::new(-955310400, 2),
            Transition::new(-936558000, 1),
            Transition::new(-880218000, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765396000, 2),
            Transition::new(-747248400, 1),
            Transition::new(-733946400, 2),
            Transition::new(-715798800, 1),
            Transition::new(-702496800, 2),
            Transition::new(-684349200, 1),
            Transition::new(-671047200, 2),
            Transition::new(-652899600, 1),
            Transition::new(-636573600, 2),
            Transition::new(-620845200, 1),
            Transition::new(-605124000, 2),
            Transition::new(-589395600, 1),
            Transition::new(-576093600, 2),
            Transition::new(-557946000, 1),
            Transition::new(-544644000, 2),
            Transition::new(-526496400, 1),
            Transition::new(-513194400, 2),
            Transition::new(-495046800, 1),
            Transition::new(-481744800, 2),
            Transition::new(-463597200, 1),
            Transition::new(-450295200, 2),
            Transition::new(-431542800, 1),
            Transition::new(-418240800, 2),
            Transition::new(-400093200, 1),
            Transition::new(-384372000, 2),
            Transition::new(-368643600, 1),
            Transition::new(-352922400, 2),
            Transition::new(-337194000, 1),
            Transition::new(-321472800, 2),
            Transition::new(-305744400, 1),
            Transition::new(-289418400, 2),
            Transition::new(-273690000, 1),
            Transition::new(-257968800, 2),
            Transition::new(-242240400, 1),
            Transition::new(-226519200, 2),
            Transition::new(-210790800, 1),
            Transition::new(-195069600, 2),
            Transition::new(-179341200, 1),
            Transition::new(-163620000, 2),
            Transition::new(-147891600, 1),
            Transition::new(-131565600, 2),
            Transition::new(-116442000, 1),
            Transition::new(-100116000, 2),
            Transition::new(-84387600, 1),
            Transition::new(-68666400, 2),
            Transition::new(-52938000, 1),
            Transition::new(-37216800, 2),
            Transition::new(-21488400, 1),
            Transition::new(-5767200, 2),
            Transition::new(9961200, 1),
            Transition::new(25682400, 2),
            Transition::new(41410800, 1),
            Transition::new(57736800, 2),
            Transition::new(73465200, 1),
            Transition::new(89186400, 2),
            Transition::new(104914800, 1),
            Transition::new(120636000, 2),
            Transition::new(136364400, 1),
            Transition::new(152085600, 2),
            Transition::new(167814000, 1),
            Transition::new(183535200, 2),
            Transition::new(199263600, 1),
            Transition::new(215589600, 2),
            Transition::new(230713200, 1),
            Transition::new(247039200, 2),
            Transition::new(262767600, 1),
            Transition::new(278488800, 2),
            Transition::new(294217200, 1),
            Transition::new(309938400, 2),
            Transition::new(325666800, 1),
            Transition::new(341388000, 2),
            Transition::new(357116400, 1),
            Transition::new(372837600, 2),
            Transition::new(388566000, 1),
            Transition::new(404892000, 2),
            Transition::new(420015600, 1),
            Transition::new(436341600, 2),
            Transition::new(452070000, 1),
            Transition::new(467791200, 2),
            Transition::new(483519600, 1),
            Transition::new(499240800, 2),
            Transition::new(514969200, 1),
            Transition::new(530690400, 2),
            Transition::new(544604400, 1),
            Transition::new(562140000, 2),
            Transition::new(576054000, 1),
            Transition::new(594194400, 2),
            Transition::new(607503600, 1),
            Transition::new(625644000, 2),
            Transition::new(638953200, 1),
            Transition::new(657093600, 2),
            Transition::new(671007600, 1),
            Transition::new(688543200, 2),
            Transition::new(702457200, 1),
            Transition::new(719992800, 2),
            Transition::new(733906800, 1),
            Transition::new(752047200, 2),
            Transition::new(765356400, 1),
            Transition::new(783496800, 2),
            Transition::new(796806000, 1),
            Transition::new(814946400, 2),
            Transition::new(828860400, 1),
            Transition::new(846396000, 2),
            Transition::new(860310000, 1),
            Transition::new(877845600, 2),
            Transition::new(891759600, 1),
            Transition::new(909295200, 2),
            Transition::new(923209200, 1),
            Transition::new(941349600, 2),
            Transition::new(954658800, 1),
            Transition::new(972799200, 2),
            Transition::new(986108400, 1),
            Transition::new(1004248800, 2),
            Transition::new(1018162800, 1),
            Transition::new(1035698400, 2),
            Transition::new(1049612400, 1),
            Transition::new(1067148000, 2),
            Transition::new(1081062000, 1),
            Transition::new(1099202400, 2),
            Transition::new(1112511600, 1),
            Transition::new(1130652000, 2),
            Transition::new(1143961200, 1),
            Transition::new(1162101600, 2),
            Transition::new(1173596400, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-17656, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_MONTSERRAT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1846266608, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-14932, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_NASSAU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1825095030, 2),
            Transition::new(-873140400, 1),
            Transition::new(-788904000, 2),
            Transition::new(-786222000, 1),
            Transition::new(-769395600, 3),
            Transition::new(-763848000, 2),
            Transition::new(-179341200, 4),
            Transition::new(-163620000, 2),
            Transition::new(-147891600, 4),
            Transition::new(-131565600, 2),
            Transition::new(-116442000, 4),
            Transition::new(-100116000, 2),
            Transition::new(-84387600, 4),
            Transition::new(-68666400, 2),
            Transition::new(-52938000, 4),
            Transition::new(-37216800, 2),
            Transition::new(-21488400, 4),
            Transition::new(-5767200, 2),
            Transition::new(9961200, 4),
            Transition::new(25682400, 2),
            Transition::new(41410800, 4),
            Transition::new(57736800, 2),
            Transition::new(73465200, 4),
            Transition::new(89186400, 2),
            Transition::new(104914800, 4),
            Transition::new(120636000, 2),
            Transition::new(136364400, 4),
            Transition::new(152085600, 2),
            Transition::new(167814000, 4),
            Transition::new(183535200, 2),
            Transition::new(199263600, 4),
            Transition::new(215589600, 2),
            Transition::new(230713200, 4),
            Transition::new(247039200, 2),
            Transition::new(262767600, 4),
            Transition::new(278488800, 2),
            Transition::new(294217200, 4),
            Transition::new(309938400, 2),
            Transition::new(325666800, 4),
            Transition::new(341388000, 2),
            Transition::new(357116400, 4),
            Transition::new(372837600, 2),
            Transition::new(388566000, 4),
            Transition::new(404892000, 2),
            Transition::new(420015600, 4),
            Transition::new(436341600, 2),
            Transition::new(452070000, 4),
            Transition::new(467791200, 2),
            Transition::new(483519600, 4),
            Transition::new(499240800, 2),
            Transition::new(514969200, 4),
            Transition::new(530690400, 2),
            Transition::new(544604400, 4),
            Transition::new(562140000, 2),
            Transition::new(576054000, 4),
            Transition::new(594194400, 2),
            Transition::new(607503600, 4),
            Transition::new(625644000, 2),
            Transition::new(638953200, 4),
            Transition::new(657093600, 2),
            Transition::new(671007600, 4),
            Transition::new(688543200, 2),
            Transition::new(702457200, 4),
            Transition::new(719992800, 2),
            Transition::new(733906800, 4),
            Transition::new(752047200, 2),
            Transition::new(765356400, 4),
            Transition::new(783496800, 2),
            Transition::new(796806000, 4),
            Transition::new(814946400, 2),
            Transition::new(828860400, 4),
            Transition::new(846396000, 2),
            Transition::new(860310000, 4),
            Transition::new(877845600, 2),
            Transition::new(891759600, 4),
            Transition::new(909295200, 2),
            Transition::new(923209200, 4),
            Transition::new(941349600, 2),
            Transition::new(954658800, 4),
            Transition::new(972799200, 2),
            Transition::new(986108400, 4),
            Transition::new(1004248800, 2),
            Transition::new(1018162800, 4),
            Transition::new(1035698400, 2),
            Transition::new(1049612400, 4),
            Transition::new(1067148000, 2),
            Transition::new(1081062000, 4),
            Transition::new(1099202400, 2),
            Transition::new(1112511600, 4),
            Transition::new(1130652000, 2),
            Transition::new(1143961200, 4),
            Transition::new(1162101600, 2),
            Transition::new(1173596400, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-18570, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_NEW_YORK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2717650800, 2),
            Transition::new(-1633280400, 1),
            Transition::new(-1615140000, 2),
            Transition::new(-1601830800, 1),
            Transition::new(-1583690400, 2),
            Transition::new(-1570381200, 1),
            Transition::new(-1551636000, 2),
            Transition::new(-1536512400, 1),
            Transition::new(-1523210400, 2),
            Transition::new(-1504458000, 1),
            Transition::new(-1491760800, 2),
            Transition::new(-1473008400, 1),
            Transition::new(-1459706400, 2),
            Transition::new(-1441558800, 1),
            Transition::new(-1428256800, 2),
            Transition::new(-1410109200, 1),
            Transition::new(-1396807200, 2),
            Transition::new(-1378659600, 1),
            Transition::new(-1365357600, 2),
            Transition::new(-1347210000, 1),
            Transition::new(-1333908000, 2),
            Transition::new(-1315155600, 1),
            Transition::new(-1301853600, 2),
            Transition::new(-1283706000, 1),
            Transition::new(-1270404000, 2),
            Transition::new(-1252256400, 1),
            Transition::new(-1238954400, 2),
            Transition::new(-1220806800, 1),
            Transition::new(-1207504800, 2),
            Transition::new(-1189357200, 1),
            Transition::new(-1176055200, 2),
            Transition::new(-1157302800, 1),
            Transition::new(-1144605600, 2),
            Transition::new(-1125853200, 1),
            Transition::new(-1112551200, 2),
            Transition::new(-1094403600, 1),
            Transition::new(-1081101600, 2),
            Transition::new(-1062954000, 1),
            Transition::new(-1049652000, 2),
            Transition::new(-1031504400, 1),
            Transition::new(-1018202400, 2),
            Transition::new(-1000054800, 1),
            Transition::new(-986752800, 2),
            Transition::new(-968000400, 1),
            Transition::new(-955303200, 2),
            Transition::new(-936550800, 1),
            Transition::new(-923248800, 2),
            Transition::new(-905101200, 1),
            Transition::new(-891799200, 2),
            Transition::new(-880218000, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765396000, 2),
            Transition::new(-747248400, 1),
            Transition::new(-733946400, 2),
            Transition::new(-715798800, 1),
            Transition::new(-702496800, 2),
            Transition::new(-684349200, 1),
            Transition::new(-671047200, 2),
            Transition::new(-652899600, 1),
            Transition::new(-639597600, 2),
            Transition::new(-620845200, 1),
            Transition::new(-608148000, 2),
            Transition::new(-589395600, 1),
            Transition::new(-576093600, 2),
            Transition::new(-557946000, 1),
            Transition::new(-544644000, 2),
            Transition::new(-526496400, 1),
            Transition::new(-513194400, 2),
            Transition::new(-495046800, 1),
            Transition::new(-481744800, 2),
            Transition::new(-463597200, 1),
            Transition::new(-447271200, 2),
            Transition::new(-431542800, 1),
            Transition::new(-415821600, 2),
            Transition::new(-400093200, 1),
            Transition::new(-384372000, 2),
            Transition::new(-368643600, 1),
            Transition::new(-352922400, 2),
            Transition::new(-337194000, 1),
            Transition::new(-321472800, 2),
            Transition::new(-305744400, 1),
            Transition::new(-289418400, 2),
            Transition::new(-273690000, 1),
            Transition::new(-257968800, 2),
            Transition::new(-242240400, 1),
            Transition::new(-226519200, 2),
            Transition::new(-210790800, 1),
            Transition::new(-195069600, 2),
            Transition::new(-179341200, 1),
            Transition::new(-163620000, 2),
            Transition::new(-147891600, 1),
            Transition::new(-131565600, 2),
            Transition::new(-116442000, 1),
            Transition::new(-100116000, 2),
            Transition::new(-84387600, 1),
            Transition::new(-68666400, 2),
            Transition::new(-52938000, 1),
            Transition::new(-37216800, 2),
            Transition::new(-21488400, 1),
            Transition::new(-5767200, 2),
            Transition::new(9961200, 1),
            Transition::new(25682400, 2),
            Transition::new(41410800, 1),
            Transition::new(57736800, 2),
            Transition::new(73465200, 1),
            Transition::new(89186400, 2),
            Transition::new(104914800, 1),
            Transition::new(120636000, 2),
            Transition::new(126687600, 1),
            Transition::new(152085600, 2),
            Transition::new(162370800, 1),
            Transition::new(183535200, 2),
            Transition::new(199263600, 1),
            Transition::new(215589600, 2),
            Transition::new(230713200, 1),
            Transition::new(247039200, 2),
            Transition::new(262767600, 1),
            Transition::new(278488800, 2),
            Transition::new(294217200, 1),
            Transition::new(309938400, 2),
            Transition::new(325666800, 1),
            Transition::new(341388000, 2),
            Transition::new(357116400, 1),
            Transition::new(372837600, 2),
            Transition::new(388566000, 1),
            Transition::new(404892000, 2),
            Transition::new(420015600, 1),
            Transition::new(436341600, 2),
            Transition::new(452070000, 1),
            Transition::new(467791200, 2),
            Transition::new(483519600, 1),
            Transition::new(499240800, 2),
            Transition::new(514969200, 1),
            Transition::new(530690400, 2),
            Transition::new(544604400, 1),
            Transition::new(562140000, 2),
            Transition::new(576054000, 1),
            Transition::new(594194400, 2),
            Transition::new(607503600, 1),
            Transition::new(625644000, 2),
            Transition::new(638953200, 1),
            Transition::new(657093600, 2),
            Transition::new(671007600, 1),
            Transition::new(688543200, 2),
            Transition::new(702457200, 1),
            Transition::new(719992800, 2),
            Transition::new(733906800, 1),
            Transition::new(752047200, 2),
            Transition::new(765356400, 1),
            Transition::new(783496800, 2),
            Transition::new(796806000, 1),
            Transition::new(814946400, 2),
            Transition::new(828860400, 1),
            Transition::new(846396000, 2),
            Transition::new(860310000, 1),
            Transition::new(877845600, 2),
            Transition::new(891759600, 1),
            Transition::new(909295200, 2),
            Transition::new(923209200, 1),
            Transition::new(941349600, 2),
            Transition::new(954658800, 1),
            Transition::new(972799200, 2),
            Transition::new(986108400, 1),
            Transition::new(1004248800, 2),
            Transition::new(1018162800, 1),
            Transition::new(1035698400, 2),
            Transition::new(1049612400, 1),
            Transition::new(1067148000, 2),
            Transition::new(1081062000, 1),
            Transition::new(1099202400, 2),
            Transition::new(1112511600, 1),
            Transition::new(1130652000, 2),
            Transition::new(1143961200, 1),
            Transition::new(1162101600, 2),
            Transition::new(1173596400, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-17762, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_NIPIGON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2366734016, 2),
            Transition::new(-1632070800, 1),
            Transition::new(-1615140000, 2),
            Transition::new(-923252400, 1),
            Transition::new(-880218000, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765396000, 2),
            Transition::new(136364400, 1),
            Transition::new(152085600, 2),
            Transition::new(167814000, 1),
            Transition::new(183535200, 2),
            Transition::new(199263600, 1),
            Transition::new(215589600, 2),
            Transition::new(230713200, 1),
            Transition::new(247039200, 2),
            Transition::new(262767600, 1),
            Transition::new(278488800, 2),
            Transition::new(294217200, 1),
            Transition::new(309938400, 2),
            Transition::new(325666800, 1),
            Transition::new(341388000, 2),
            Transition::new(357116400, 1),
            Transition::new(372837600, 2),
            Transition::new(388566000, 1),
            Transition::new(404892000, 2),
            Transition::new(420015600, 1),
            Transition::new(436341600, 2),
            Transition::new(452070000, 1),
            Transition::new(467791200, 2),
            Transition::new(483519600, 1),
            Transition::new(499240800, 2),
            Transition::new(514969200, 1),
            Transition::new(530690400, 2),
            Transition::new(544604400, 1),
            Transition::new(562140000, 2),
            Transition::new(576054000, 1),
            Transition::new(594194400, 2),
            Transition::new(607503600, 1),
            Transition::new(625644000, 2),
            Transition::new(638953200, 1),
            Transition::new(657093600, 2),
            Transition::new(671007600, 1),
            Transition::new(688543200, 2),
            Transition::new(702457200, 1),
            Transition::new(719992800, 2),
            Transition::new(733906800, 1),
            Transition::new(752047200, 2),
            Transition::new(765356400, 1),
            Transition::new(783496800, 2),
            Transition::new(796806000, 1),
            Transition::new(814946400, 2),
            Transition::new(828860400, 1),
            Transition::new(846396000, 2),
            Transition::new(860310000, 1),
            Transition::new(877845600, 2),
            Transition::new(891759600, 1),
            Transition::new(909295200, 2),
            Transition::new(923209200, 1),
            Transition::new(941349600, 2),
            Transition::new(954658800, 1),
            Transition::new(972799200, 2),
            Transition::new(986108400, 1),
            Transition::new(1004248800, 2),
            Transition::new(1018162800, 1),
            Transition::new(1035698400, 2),
            Transition::new(1049612400, 1),
            Transition::new(1067148000, 2),
            Transition::new(1081062000, 1),
            Transition::new(1099202400, 2),
            Transition::new(1112511600, 1),
            Transition::new(1130652000, 2),
            Transition::new(1143961200, 1),
            Transition::new(1162101600, 2),
            Transition::new(1173596400, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-21184, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_NOME: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3225223727, 1),
            Transition::new(-2188947502, 2),
            Transition::new(-880196400, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765374400, 2),
            Transition::new(-86878800, 5),
            Transition::new(-21466800, 6),
            Transition::new(-5745600, 5),
            Transition::new(9982800, 6),
            Transition::new(25704000, 5),
            Transition::new(41432400, 6),
            Transition::new(57758400, 5),
            Transition::new(73486800, 6),
            Transition::new(89208000, 5),
            Transition::new(104936400, 6),
            Transition::new(120657600, 5),
            Transition::new(126709200, 6),
            Transition::new(152107200, 5),
            Transition::new(162392400, 6),
            Transition::new(183556800, 5),
            Transition::new(199285200, 6),
            Transition::new(215611200, 5),
            Transition::new(230734800, 6),
            Transition::new(247060800, 5),
            Transition::new(262789200, 6),
            Transition::new(278510400, 5),
            Transition::new(294238800, 6),
            Transition::new(309960000, 5),
            Transition::new(325688400, 6),
            Transition::new(341409600, 5),
            Transition::new(357138000, 6),
            Transition::new(372859200, 5),
            Transition::new(388587600, 6),
            Transition::new(404913600, 5),
            Transition::new(420037200, 6),
            Transition::new(436363200, 7),
            Transition::new(439030800, 9),
            Transition::new(452084400, 8),
            Transition::new(467805600, 9),
            Transition::new(483534000, 8),
            Transition::new(499255200, 9),
            Transition::new(514983600, 8),
            Transition::new(530704800, 9),
            Transition::new(544618800, 8),
            Transition::new(562154400, 9),
            Transition::new(576068400, 8),
            Transition::new(594208800, 9),
            Transition::new(607518000, 8),
            Transition::new(625658400, 9),
            Transition::new(638967600, 8),
            Transition::new(657108000, 9),
            Transition::new(671022000, 8),
            Transition::new(688557600, 9),
            Transition::new(702471600, 8),
            Transition::new(720007200, 9),
            Transition::new(733921200, 8),
            Transition::new(752061600, 9),
            Transition::new(765370800, 8),
            Transition::new(783511200, 9),
            Transition::new(796820400, 8),
            Transition::new(814960800, 9),
            Transition::new(828874800, 8),
            Transition::new(846410400, 9),
            Transition::new(860324400, 8),
            Transition::new(877860000, 9),
            Transition::new(891774000, 8),
            Transition::new(909309600, 9),
            Transition::new(923223600, 8),
            Transition::new(941364000, 9),
            Transition::new(954673200, 8),
            Transition::new(972813600, 9),
            Transition::new(986122800, 8),
            Transition::new(1004263200, 9),
            Transition::new(1018177200, 8),
            Transition::new(1035712800, 9),
            Transition::new(1049626800, 8),
            Transition::new(1067162400, 9),
            Transition::new(1081076400, 8),
            Transition::new(1099216800, 9),
            Transition::new(1112526000, 8),
            Transition::new(1130666400, 9),
            Transition::new(1143975600, 8),
            Transition::new(1162116000, 9),
            Transition::new(1173610800, 8),
        ],
        &{
            const V: [LocalTimeType; 10] = [
                match LocalTimeType::new(46702, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39698, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"NST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, true, Some(b"NWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, true, Some(b"NPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, true, Some(b"BDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"YST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_NORONHA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767217820, 2),
            Transition::new(-1206961200, 1),
            Transition::new(-1191366000, 2),
            Transition::new(-1175378400, 1),
            Transition::new(-1159830000, 2),
            Transition::new(-633823200, 1),
            Transition::new(-622072800, 2),
            Transition::new(-602287200, 1),
            Transition::new(-591836400, 2),
            Transition::new(-570751200, 1),
            Transition::new(-560214000, 2),
            Transition::new(-539128800, 1),
            Transition::new(-531356400, 2),
            Transition::new(-191368800, 1),
            Transition::new(-184201200, 2),
            Transition::new(-155167200, 1),
            Transition::new(-150073200, 2),
            Transition::new(-128901600, 1),
            Transition::new(-121129200, 2),
            Transition::new(-99957600, 1),
            Transition::new(-89593200, 2),
            Transition::new(-68421600, 1),
            Transition::new(-57970800, 2),
            Transition::new(499744800, 1),
            Transition::new(511232400, 2),
            Transition::new(530589600, 1),
            Transition::new(540262800, 2),
            Transition::new(562125600, 1),
            Transition::new(571194000, 2),
            Transition::new(592970400, 1),
            Transition::new(602038800, 2),
            Transition::new(624420000, 1),
            Transition::new(634698000, 2),
            Transition::new(938916000, 1),
            Transition::new(951613200, 2),
            Transition::new(970970400, 1),
            Transition::new(971571600, 2),
            Transition::new(1003024800, 1),
            Transition::new(1013907600, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-7780, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, true, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, false, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-7200, false, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_OJINAGA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514739600, 1),
            Transition::new(-1343066400, 2),
            Transition::new(-1234807200, 1),
            Transition::new(-1220292000, 2),
            Transition::new(-1207159200, 1),
            Transition::new(-1191344400, 2),
            Transition::new(828864000, 3),
            Transition::new(846399600, 2),
            Transition::new(860313600, 3),
            Transition::new(877849200, 2),
            Transition::new(891766800, 4),
            Transition::new(909302400, 1),
            Transition::new(923216400, 4),
            Transition::new(941356800, 1),
            Transition::new(954666000, 4),
            Transition::new(972806400, 1),
            Transition::new(989139600, 4),
            Transition::new(1001836800, 1),
            Transition::new(1018170000, 4),
            Transition::new(1035705600, 1),
            Transition::new(1049619600, 4),
            Transition::new(1067155200, 1),
            Transition::new(1081069200, 4),
            Transition::new(1099209600, 1),
            Transition::new(1112518800, 4),
            Transition::new(1130659200, 1),
            Transition::new(1143968400, 4),
            Transition::new(1162108800, 1),
            Transition::new(1175418000, 4),
            Transition::new(1193558400, 1),
            Transition::new(1207472400, 4),
            Transition::new(1225008000, 1),
            Transition::new(1238922000, 4),
            Transition::new(1256457600, 1),
            Transition::new(1268557200, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-25060, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_PANAMA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524502512, 1),
            Transition::new(-1946918424, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-19088, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-19176, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_PANGNIRTUNG: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1546300800, 3),
            Transition::new(-880221600, 1),
            Transition::new(-769395600, 2),
            Transition::new(-765399600, 3),
            Transition::new(-147902400, 4),
            Transition::new(-131572800, 3),
            Transition::new(325663200, 5),
            Transition::new(341384400, 3),
            Transition::new(357112800, 5),
            Transition::new(372834000, 3),
            Transition::new(388562400, 5),
            Transition::new(404888400, 3),
            Transition::new(420012000, 5),
            Transition::new(436338000, 3),
            Transition::new(452066400, 5),
            Transition::new(467787600, 3),
            Transition::new(483516000, 5),
            Transition::new(499237200, 3),
            Transition::new(514965600, 5),
            Transition::new(530686800, 3),
            Transition::new(544600800, 5),
            Transition::new(562136400, 3),
            Transition::new(576050400, 5),
            Transition::new(594190800, 3),
            Transition::new(607500000, 5),
            Transition::new(625640400, 3),
            Transition::new(638949600, 5),
            Transition::new(657090000, 3),
            Transition::new(671004000, 5),
            Transition::new(688539600, 3),
            Transition::new(702453600, 5),
            Transition::new(719989200, 3),
            Transition::new(733903200, 5),
            Transition::new(752043600, 3),
            Transition::new(765352800, 5),
            Transition::new(783493200, 3),
            Transition::new(796802400, 6),
            Transition::new(814946400, 7),
            Transition::new(828860400, 6),
            Transition::new(846396000, 7),
            Transition::new(860310000, 6),
            Transition::new(877845600, 7),
            Transition::new(891759600, 6),
            Transition::new(909295200, 7),
            Transition::new(923209200, 6),
            Transition::new(941349600, 8),
            Transition::new(954662400, 9),
            Transition::new(972802800, 7),
            Transition::new(986108400, 6),
            Transition::new(1004248800, 7),
            Transition::new(1018162800, 6),
            Transition::new(1035698400, 7),
            Transition::new(1049612400, 6),
            Transition::new(1067148000, 7),
            Transition::new(1081062000, 6),
            Transition::new(1099202400, 7),
            Transition::new(1112511600, 6),
            Transition::new(1130652000, 7),
            Transition::new(1143961200, 6),
            Transition::new(1162101600, 7),
            Transition::new(1173596400, 6),
        ],
        &{
            const V: [LocalTimeType; 10] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"AWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"APT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"ADDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_PARAMARIBO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1861906760, 1),
            Transition::new(-1104524348, 2),
            Transition::new(-765317964, 3),
            Transition::new(465449400, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-13240, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-13252, false, Some(b"PMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-13236, false, Some(b"PMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-12600, false, Some(b"-0330")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_PHOENIX: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2717643600, 2),
            Transition::new(-1633273200, 1),
            Transition::new(-1615132800, 2),
            Transition::new(-1601823600, 1),
            Transition::new(-1583683200, 2),
            Transition::new(-880210800, 3),
            Transition::new(-820519140, 2),
            Transition::new(-812653140, 3),
            Transition::new(-796845540, 2),
            Transition::new(-84380400, 1),
            Transition::new(-68659200, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-26898, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_PORTO_ACRE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767209328, 2),
            Transition::new(-1206950400, 1),
            Transition::new(-1191355200, 2),
            Transition::new(-1175367600, 1),
            Transition::new(-1159819200, 2),
            Transition::new(-633812400, 1),
            Transition::new(-622062000, 2),
            Transition::new(-602276400, 1),
            Transition::new(-591825600, 2),
            Transition::new(-570740400, 1),
            Transition::new(-560203200, 2),
            Transition::new(-539118000, 1),
            Transition::new(-531345600, 2),
            Transition::new(-191358000, 1),
            Transition::new(-184190400, 2),
            Transition::new(-155156400, 1),
            Transition::new(-150062400, 2),
            Transition::new(-128890800, 1),
            Transition::new(-121118400, 2),
            Transition::new(-99946800, 1),
            Transition::new(-89582400, 2),
            Transition::new(-68410800, 1),
            Transition::new(-57960000, 2),
            Transition::new(499755600, 1),
            Transition::new(511243200, 2),
            Transition::new(530600400, 1),
            Transition::new(540273600, 2),
            Transition::new(562136400, 1),
            Transition::new(571204800, 2),
            Transition::new(1214283600, 3),
            Transition::new(1384056000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-16272, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_PORTO_VELHO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767210264, 2),
            Transition::new(-1206954000, 1),
            Transition::new(-1191358800, 2),
            Transition::new(-1175371200, 1),
            Transition::new(-1159822800, 2),
            Transition::new(-633816000, 1),
            Transition::new(-622065600, 2),
            Transition::new(-602280000, 1),
            Transition::new(-591829200, 2),
            Transition::new(-570744000, 1),
            Transition::new(-560206800, 2),
            Transition::new(-539121600, 1),
            Transition::new(-531349200, 2),
            Transition::new(-191361600, 1),
            Transition::new(-184194000, 2),
            Transition::new(-155160000, 1),
            Transition::new(-150066000, 2),
            Transition::new(-128894400, 1),
            Transition::new(-121122000, 2),
            Transition::new(-99950400, 1),
            Transition::new(-89586000, 2),
            Transition::new(-68414400, 1),
            Transition::new(-57963600, 2),
            Transition::new(499752000, 1),
            Transition::new(511239600, 2),
            Transition::new(530596800, 1),
            Transition::new(540270000, 2),
            Transition::new(562132800, 1),
            Transition::new(571201200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-15336, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_PORT_AU_PRINCE: TimeZoneRef<'static> =
        match TimeZoneRef::<'static>::new(
            &[
                Transition::new(-2524504240, 1),
                Transition::new(-1670483460, 3),
                Transition::new(421218000, 2),
                Transition::new(436334400, 3),
                Transition::new(452062800, 2),
                Transition::new(467784000, 3),
                Transition::new(483512400, 2),
                Transition::new(499233600, 3),
                Transition::new(514962000, 2),
                Transition::new(530683200, 3),
                Transition::new(546411600, 2),
                Transition::new(562132800, 3),
                Transition::new(576050400, 2),
                Transition::new(594194400, 3),
                Transition::new(607500000, 2),
                Transition::new(625644000, 3),
                Transition::new(638949600, 2),
                Transition::new(657093600, 3),
                Transition::new(671004000, 2),
                Transition::new(688543200, 3),
                Transition::new(702453600, 2),
                Transition::new(719992800, 3),
                Transition::new(733903200, 2),
                Transition::new(752047200, 3),
                Transition::new(765352800, 2),
                Transition::new(783496800, 3),
                Transition::new(796802400, 2),
                Transition::new(814946400, 3),
                Transition::new(828856800, 2),
                Transition::new(846396000, 3),
                Transition::new(860306400, 2),
                Transition::new(877845600, 3),
                Transition::new(1112504400, 2),
                Transition::new(1130644800, 3),
                Transition::new(1143954000, 2),
                Transition::new(1162094400, 3),
                Transition::new(1331449200, 2),
                Transition::new(1352008800, 3),
                Transition::new(1362898800, 2),
                Transition::new(1383458400, 3),
                Transition::new(1394348400, 2),
                Transition::new(1414908000, 3),
                Transition::new(1425798000, 2),
                Transition::new(1446357600, 3),
                Transition::new(1489302000, 2),
            ],
            &{
                const V: [LocalTimeType; 4] = [
                    match LocalTimeType::new(-17360, false, Some(b"LMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-17340, false, Some(b"PPMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                ];
                V
            },
            &[],
            &Some({
                const V: TransitionRule = TransitionRule::Alternate(
                    match AlternateTime::new(
                        match LocalTimeType::new(-18000, false, Some(b"EST")) {
                            Ok(v) => v,
                            Err(e) => panic!("{}", e.0),
                        },
                        match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                            Ok(v) => v,
                            Err(e) => panic!("{}", e.0),
                        },
                        RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                            Ok(v) => v,
                            Err(e) => panic!("{}", e.0),
                        }),
                        7200,
                        RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                            Ok(v) => v,
                            Err(e) => panic!("{}", e.0),
                        }),
                        7200,
                    ) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                );
                V
            }),
        ) {
            Ok(v) => v,
            Err(e) => panic!("{}", e.0),
        };

    pub(crate) const AMERICA_PUERTO_RICO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2233035335, 1),
            Transition::new(-873057600, 3),
            Transition::new(-769395600, 2),
            Transition::new(-765399600, 1),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-15865, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"APT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"AWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_PUNTA_ARENAS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524504580, 1),
            Transition::new(-1892661435, 2),
            Transition::new(-1688410800, 1),
            Transition::new(-1619205435, 3),
            Transition::new(-1593806400, 1),
            Transition::new(-1335986235, 4),
            Transition::new(-1317585600, 2),
            Transition::new(-1304362800, 4),
            Transition::new(-1286049600, 2),
            Transition::new(-1272826800, 4),
            Transition::new(-1254513600, 2),
            Transition::new(-1241290800, 4),
            Transition::new(-1222977600, 2),
            Transition::new(-1209754800, 4),
            Transition::new(-1191355200, 2),
            Transition::new(-1178132400, 3),
            Transition::new(-870552000, 2),
            Transition::new(-865278000, 3),
            Transition::new(-718056000, 2),
            Transition::new(-713649600, 3),
            Transition::new(-36619200, 5),
            Transition::new(-23922000, 3),
            Transition::new(-3355200, 5),
            Transition::new(7527600, 3),
            Transition::new(24465600, 5),
            Transition::new(37767600, 3),
            Transition::new(55915200, 5),
            Transition::new(69217200, 3),
            Transition::new(87969600, 5),
            Transition::new(100666800, 3),
            Transition::new(118209600, 5),
            Transition::new(132116400, 3),
            Transition::new(150868800, 5),
            Transition::new(163566000, 3),
            Transition::new(182318400, 5),
            Transition::new(195620400, 3),
            Transition::new(213768000, 5),
            Transition::new(227070000, 3),
            Transition::new(245217600, 5),
            Transition::new(258519600, 3),
            Transition::new(277272000, 5),
            Transition::new(289969200, 3),
            Transition::new(308721600, 5),
            Transition::new(321418800, 3),
            Transition::new(340171200, 5),
            Transition::new(353473200, 3),
            Transition::new(371620800, 5),
            Transition::new(384922800, 3),
            Transition::new(403070400, 5),
            Transition::new(416372400, 3),
            Transition::new(434520000, 5),
            Transition::new(447822000, 3),
            Transition::new(466574400, 5),
            Transition::new(479271600, 3),
            Transition::new(498024000, 5),
            Transition::new(510721200, 3),
            Transition::new(529473600, 5),
            Transition::new(545194800, 3),
            Transition::new(560923200, 5),
            Transition::new(574225200, 3),
            Transition::new(592372800, 5),
            Transition::new(605674800, 3),
            Transition::new(624427200, 5),
            Transition::new(637124400, 3),
            Transition::new(653457600, 5),
            Transition::new(668574000, 3),
            Transition::new(687326400, 5),
            Transition::new(700628400, 3),
            Transition::new(718776000, 5),
            Transition::new(732078000, 3),
            Transition::new(750225600, 5),
            Transition::new(763527600, 3),
            Transition::new(781675200, 5),
            Transition::new(794977200, 3),
            Transition::new(813729600, 5),
            Transition::new(826426800, 3),
            Transition::new(845179200, 5),
            Transition::new(859690800, 3),
            Transition::new(876628800, 5),
            Transition::new(889930800, 3),
            Transition::new(906868800, 5),
            Transition::new(923194800, 3),
            Transition::new(939528000, 5),
            Transition::new(952830000, 3),
            Transition::new(971582400, 5),
            Transition::new(984279600, 3),
            Transition::new(1003032000, 5),
            Transition::new(1015729200, 3),
            Transition::new(1034481600, 5),
            Transition::new(1047178800, 3),
            Transition::new(1065931200, 5),
            Transition::new(1079233200, 3),
            Transition::new(1097380800, 5),
            Transition::new(1110682800, 3),
            Transition::new(1128830400, 5),
            Transition::new(1142132400, 3),
            Transition::new(1160884800, 5),
            Transition::new(1173582000, 3),
            Transition::new(1192334400, 5),
            Transition::new(1206846000, 3),
            Transition::new(1223784000, 5),
            Transition::new(1237086000, 3),
            Transition::new(1255233600, 5),
            Transition::new(1270350000, 3),
            Transition::new(1286683200, 5),
            Transition::new(1304823600, 3),
            Transition::new(1313899200, 5),
            Transition::new(1335668400, 3),
            Transition::new(1346558400, 5),
            Transition::new(1367118000, 3),
            Transition::new(1378612800, 5),
            Transition::new(1398567600, 3),
            Transition::new(1410062400, 5),
            Transition::new(1463281200, 3),
            Transition::new(1471147200, 5),
            Transition::new(1480820400, 6),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(-17020, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-16965, false, Some(b"SMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_RAINY_RIVER: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2366732504, 2),
            Transition::new(-1632067200, 1),
            Transition::new(-1615136400, 2),
            Transition::new(-923248800, 1),
            Transition::new(-880214400, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765392400, 2),
            Transition::new(136368000, 1),
            Transition::new(152089200, 2),
            Transition::new(167817600, 1),
            Transition::new(183538800, 2),
            Transition::new(199267200, 1),
            Transition::new(215593200, 2),
            Transition::new(230716800, 1),
            Transition::new(247042800, 2),
            Transition::new(262771200, 1),
            Transition::new(278492400, 2),
            Transition::new(294220800, 1),
            Transition::new(309942000, 2),
            Transition::new(325670400, 1),
            Transition::new(341391600, 2),
            Transition::new(357120000, 1),
            Transition::new(372841200, 2),
            Transition::new(388569600, 1),
            Transition::new(404895600, 2),
            Transition::new(420019200, 1),
            Transition::new(436345200, 2),
            Transition::new(452073600, 1),
            Transition::new(467794800, 2),
            Transition::new(483523200, 1),
            Transition::new(499244400, 2),
            Transition::new(514972800, 1),
            Transition::new(530694000, 2),
            Transition::new(544608000, 1),
            Transition::new(562143600, 2),
            Transition::new(576057600, 1),
            Transition::new(594198000, 2),
            Transition::new(607507200, 1),
            Transition::new(625647600, 2),
            Transition::new(638956800, 1),
            Transition::new(657097200, 2),
            Transition::new(671011200, 1),
            Transition::new(688546800, 2),
            Transition::new(702460800, 1),
            Transition::new(719996400, 2),
            Transition::new(733910400, 1),
            Transition::new(752050800, 2),
            Transition::new(765360000, 1),
            Transition::new(783500400, 2),
            Transition::new(796809600, 1),
            Transition::new(814950000, 2),
            Transition::new(828864000, 1),
            Transition::new(846399600, 2),
            Transition::new(860313600, 1),
            Transition::new(877849200, 2),
            Transition::new(891763200, 1),
            Transition::new(909298800, 2),
            Transition::new(923212800, 1),
            Transition::new(941353200, 2),
            Transition::new(954662400, 1),
            Transition::new(972802800, 2),
            Transition::new(986112000, 1),
            Transition::new(1004252400, 2),
            Transition::new(1018166400, 1),
            Transition::new(1035702000, 2),
            Transition::new(1049616000, 1),
            Transition::new(1067151600, 2),
            Transition::new(1081065600, 1),
            Transition::new(1099206000, 2),
            Transition::new(1112515200, 1),
            Transition::new(1130655600, 2),
            Transition::new(1143964800, 1),
            Transition::new(1162105200, 2),
            Transition::new(1173600000, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-22696, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_RANKIN_INLET: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-410227200, 2),
            Transition::new(-147895200, 1),
            Transition::new(-131565600, 2),
            Transition::new(325670400, 3),
            Transition::new(341391600, 2),
            Transition::new(357120000, 3),
            Transition::new(372841200, 2),
            Transition::new(388569600, 3),
            Transition::new(404895600, 2),
            Transition::new(420019200, 3),
            Transition::new(436345200, 2),
            Transition::new(452073600, 3),
            Transition::new(467794800, 2),
            Transition::new(483523200, 3),
            Transition::new(499244400, 2),
            Transition::new(514972800, 3),
            Transition::new(530694000, 2),
            Transition::new(544608000, 3),
            Transition::new(562143600, 2),
            Transition::new(576057600, 3),
            Transition::new(594198000, 2),
            Transition::new(607507200, 3),
            Transition::new(625647600, 2),
            Transition::new(638956800, 3),
            Transition::new(657097200, 2),
            Transition::new(671011200, 3),
            Transition::new(688546800, 2),
            Transition::new(702460800, 3),
            Transition::new(719996400, 2),
            Transition::new(733910400, 3),
            Transition::new(752050800, 2),
            Transition::new(765360000, 3),
            Transition::new(783500400, 2),
            Transition::new(796809600, 3),
            Transition::new(814950000, 2),
            Transition::new(828864000, 3),
            Transition::new(846399600, 2),
            Transition::new(860313600, 3),
            Transition::new(877849200, 2),
            Transition::new(891763200, 3),
            Transition::new(909298800, 2),
            Transition::new(923212800, 3),
            Transition::new(941353200, 2),
            Transition::new(954662400, 3),
            Transition::new(972802800, 4),
            Transition::new(986112000, 3),
            Transition::new(1004252400, 2),
            Transition::new(1018166400, 3),
            Transition::new(1035702000, 2),
            Transition::new(1049616000, 3),
            Transition::new(1067151600, 2),
            Transition::new(1081065600, 3),
            Transition::new(1099206000, 2),
            Transition::new(1112515200, 3),
            Transition::new(1130655600, 2),
            Transition::new(1143964800, 3),
            Transition::new(1162105200, 2),
            Transition::new(1173600000, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"CDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_RECIFE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767217224, 2),
            Transition::new(-1206957600, 1),
            Transition::new(-1191362400, 2),
            Transition::new(-1175374800, 1),
            Transition::new(-1159826400, 2),
            Transition::new(-633819600, 1),
            Transition::new(-622069200, 2),
            Transition::new(-602283600, 1),
            Transition::new(-591832800, 2),
            Transition::new(-570747600, 1),
            Transition::new(-560210400, 2),
            Transition::new(-539125200, 1),
            Transition::new(-531352800, 2),
            Transition::new(-191365200, 1),
            Transition::new(-184197600, 2),
            Transition::new(-155163600, 1),
            Transition::new(-150069600, 2),
            Transition::new(-128898000, 1),
            Transition::new(-121125600, 2),
            Transition::new(-99954000, 1),
            Transition::new(-89589600, 2),
            Transition::new(-68418000, 1),
            Transition::new(-57967200, 2),
            Transition::new(499748400, 1),
            Transition::new(511236000, 2),
            Transition::new(530593200, 1),
            Transition::new(540266400, 2),
            Transition::new(562129200, 1),
            Transition::new(571197600, 2),
            Transition::new(592974000, 1),
            Transition::new(602042400, 2),
            Transition::new(624423600, 1),
            Transition::new(634701600, 2),
            Transition::new(938919600, 1),
            Transition::new(951616800, 2),
            Transition::new(970974000, 1),
            Transition::new(971575200, 2),
            Transition::new(1003028400, 1),
            Transition::new(1013911200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-8376, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_REGINA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2030202084, 2),
            Transition::new(-1632063600, 1),
            Transition::new(-1615132800, 2),
            Transition::new(-1251651600, 1),
            Transition::new(-1238349600, 2),
            Transition::new(-1220202000, 1),
            Transition::new(-1206900000, 2),
            Transition::new(-1188752400, 1),
            Transition::new(-1175450400, 2),
            Transition::new(-1156698000, 1),
            Transition::new(-1144000800, 2),
            Transition::new(-1125248400, 1),
            Transition::new(-1111946400, 2),
            Transition::new(-1032714000, 1),
            Transition::new(-1016992800, 2),
            Transition::new(-1001264400, 1),
            Transition::new(-986148000, 2),
            Transition::new(-969814800, 1),
            Transition::new(-954093600, 2),
            Transition::new(-937760400, 1),
            Transition::new(-922039200, 2),
            Transition::new(-906310800, 1),
            Transition::new(-890589600, 2),
            Transition::new(-880210800, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765388800, 2),
            Transition::new(-748450800, 1),
            Transition::new(-732729600, 2),
            Transition::new(-715791600, 1),
            Transition::new(-702489600, 2),
            Transition::new(-684342000, 1),
            Transition::new(-671040000, 2),
            Transition::new(-652892400, 1),
            Transition::new(-639590400, 2),
            Transition::new(-620838000, 1),
            Transition::new(-608140800, 2),
            Transition::new(-589388400, 1),
            Transition::new(-576086400, 2),
            Transition::new(-557938800, 1),
            Transition::new(-544636800, 2),
            Transition::new(-526489200, 1),
            Transition::new(-513187200, 2),
            Transition::new(-495039600, 1),
            Transition::new(-481737600, 2),
            Transition::new(-463590000, 1),
            Transition::new(-450288000, 2),
            Transition::new(-431535600, 1),
            Transition::new(-418233600, 2),
            Transition::new(-400086000, 1),
            Transition::new(-386784000, 2),
            Transition::new(-337186800, 1),
            Transition::new(-321465600, 2),
            Transition::new(-305737200, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-25116, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_RESOLUTE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-704937600, 2),
            Transition::new(-147895200, 1),
            Transition::new(-131565600, 2),
            Transition::new(325670400, 3),
            Transition::new(341391600, 2),
            Transition::new(357120000, 3),
            Transition::new(372841200, 2),
            Transition::new(388569600, 3),
            Transition::new(404895600, 2),
            Transition::new(420019200, 3),
            Transition::new(436345200, 2),
            Transition::new(452073600, 3),
            Transition::new(467794800, 2),
            Transition::new(483523200, 3),
            Transition::new(499244400, 2),
            Transition::new(514972800, 3),
            Transition::new(530694000, 2),
            Transition::new(544608000, 3),
            Transition::new(562143600, 2),
            Transition::new(576057600, 3),
            Transition::new(594198000, 2),
            Transition::new(607507200, 3),
            Transition::new(625647600, 2),
            Transition::new(638956800, 3),
            Transition::new(657097200, 2),
            Transition::new(671011200, 3),
            Transition::new(688546800, 2),
            Transition::new(702460800, 3),
            Transition::new(719996400, 2),
            Transition::new(733910400, 3),
            Transition::new(752050800, 2),
            Transition::new(765360000, 3),
            Transition::new(783500400, 2),
            Transition::new(796809600, 3),
            Transition::new(814950000, 2),
            Transition::new(828864000, 3),
            Transition::new(846399600, 2),
            Transition::new(860313600, 3),
            Transition::new(877849200, 2),
            Transition::new(891763200, 3),
            Transition::new(909298800, 2),
            Transition::new(923212800, 3),
            Transition::new(941353200, 2),
            Transition::new(954662400, 3),
            Transition::new(972802800, 4),
            Transition::new(986112000, 3),
            Transition::new(1004252400, 2),
            Transition::new(1018166400, 3),
            Transition::new(1035702000, 2),
            Transition::new(1049616000, 3),
            Transition::new(1067151600, 2),
            Transition::new(1081065600, 3),
            Transition::new(1099206000, 2),
            Transition::new(1112515200, 3),
            Transition::new(1130655600, 2),
            Transition::new(1143964800, 3),
            Transition::new(1162105200, 4),
            Transition::new(1173600000, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"CDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ROSARIO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2372011040, 1),
            Transition::new(-1567453396, 2),
            Transition::new(-1233432000, 3),
            Transition::new(-1222981200, 2),
            Transition::new(-1205956800, 3),
            Transition::new(-1194037200, 2),
            Transition::new(-1172865600, 3),
            Transition::new(-1162501200, 2),
            Transition::new(-1141329600, 3),
            Transition::new(-1130965200, 2),
            Transition::new(-1109793600, 3),
            Transition::new(-1099429200, 2),
            Transition::new(-1078257600, 3),
            Transition::new(-1067806800, 2),
            Transition::new(-1046635200, 3),
            Transition::new(-1036270800, 2),
            Transition::new(-1015099200, 3),
            Transition::new(-1004734800, 2),
            Transition::new(-983563200, 3),
            Transition::new(-973198800, 2),
            Transition::new(-952027200, 3),
            Transition::new(-941576400, 2),
            Transition::new(-931032000, 3),
            Transition::new(-900882000, 2),
            Transition::new(-890337600, 3),
            Transition::new(-833749200, 2),
            Transition::new(-827265600, 3),
            Transition::new(-752274000, 2),
            Transition::new(-733780800, 3),
            Transition::new(-197326800, 2),
            Transition::new(-190843200, 3),
            Transition::new(-184194000, 2),
            Transition::new(-164491200, 3),
            Transition::new(-152658000, 2),
            Transition::new(-132955200, 3),
            Transition::new(-121122000, 2),
            Transition::new(-101419200, 3),
            Transition::new(-86821200, 2),
            Transition::new(-71092800, 3),
            Transition::new(-54766800, 2),
            Transition::new(-39038400, 3),
            Transition::new(-23317200, 2),
            Transition::new(-7588800, 5),
            Transition::new(128142000, 4),
            Transition::new(136605600, 5),
            Transition::new(596948400, 4),
            Transition::new(605066400, 5),
            Transition::new(624423600, 4),
            Transition::new(636516000, 5),
            Transition::new(656478000, 4),
            Transition::new(667965600, 5),
            Transition::new(938919600, 3),
            Transition::new(952052400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-14560, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-15404, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_SANTAREM: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767212472, 2),
            Transition::new(-1206954000, 1),
            Transition::new(-1191358800, 2),
            Transition::new(-1175371200, 1),
            Transition::new(-1159822800, 2),
            Transition::new(-633816000, 1),
            Transition::new(-622065600, 2),
            Transition::new(-602280000, 1),
            Transition::new(-591829200, 2),
            Transition::new(-570744000, 1),
            Transition::new(-560206800, 2),
            Transition::new(-539121600, 1),
            Transition::new(-531349200, 2),
            Transition::new(-191361600, 1),
            Transition::new(-184194000, 2),
            Transition::new(-155160000, 1),
            Transition::new(-150066000, 2),
            Transition::new(-128894400, 1),
            Transition::new(-121122000, 2),
            Transition::new(-99950400, 1),
            Transition::new(-89586000, 2),
            Transition::new(-68414400, 1),
            Transition::new(-57963600, 2),
            Transition::new(499752000, 1),
            Transition::new(511239600, 2),
            Transition::new(530596800, 1),
            Transition::new(540270000, 2),
            Transition::new(562132800, 1),
            Transition::new(571201200, 2),
            Transition::new(1214280000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-13128, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_SANTA_ISABEL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1514736000, 1),
            Transition::new(-1451667600, 2),
            Transition::new(-1343062800, 1),
            Transition::new(-1234803600, 2),
            Transition::new(-1222963200, 3),
            Transition::new(-1207242000, 2),
            Transition::new(-873820800, 4),
            Transition::new(-769395600, 5),
            Transition::new(-761677200, 2),
            Transition::new(-686073600, 3),
            Transition::new(-661539600, 2),
            Transition::new(-495039600, 3),
            Transition::new(-481734000, 2),
            Transition::new(-463590000, 3),
            Transition::new(-450284400, 2),
            Transition::new(-431535600, 3),
            Transition::new(-418230000, 2),
            Transition::new(-400086000, 3),
            Transition::new(-386780400, 2),
            Transition::new(-368636400, 3),
            Transition::new(-355330800, 2),
            Transition::new(-337186800, 3),
            Transition::new(-323881200, 2),
            Transition::new(-305737200, 3),
            Transition::new(-292431600, 2),
            Transition::new(199274400, 3),
            Transition::new(215600400, 2),
            Transition::new(230724000, 3),
            Transition::new(247050000, 2),
            Transition::new(262778400, 3),
            Transition::new(278499600, 2),
            Transition::new(294228000, 3),
            Transition::new(309949200, 2),
            Transition::new(325677600, 3),
            Transition::new(341398800, 2),
            Transition::new(357127200, 3),
            Transition::new(372848400, 2),
            Transition::new(388576800, 3),
            Transition::new(404902800, 2),
            Transition::new(420026400, 3),
            Transition::new(436352400, 2),
            Transition::new(452080800, 3),
            Transition::new(467802000, 2),
            Transition::new(483530400, 3),
            Transition::new(499251600, 2),
            Transition::new(514980000, 3),
            Transition::new(530701200, 2),
            Transition::new(544615200, 3),
            Transition::new(562150800, 2),
            Transition::new(576064800, 3),
            Transition::new(594205200, 2),
            Transition::new(607514400, 3),
            Transition::new(625654800, 2),
            Transition::new(638964000, 3),
            Transition::new(657104400, 2),
            Transition::new(671018400, 3),
            Transition::new(688554000, 2),
            Transition::new(702468000, 3),
            Transition::new(720003600, 2),
            Transition::new(733917600, 3),
            Transition::new(752058000, 2),
            Transition::new(765367200, 3),
            Transition::new(783507600, 2),
            Transition::new(796816800, 3),
            Transition::new(814957200, 2),
            Transition::new(828871200, 3),
            Transition::new(846406800, 2),
            Transition::new(860320800, 3),
            Transition::new(877856400, 2),
            Transition::new(891770400, 3),
            Transition::new(909306000, 2),
            Transition::new(923220000, 3),
            Transition::new(941360400, 2),
            Transition::new(954669600, 3),
            Transition::new(972810000, 2),
            Transition::new(986119200, 3),
            Transition::new(1004259600, 2),
            Transition::new(1018173600, 3),
            Transition::new(1035709200, 2),
            Transition::new(1049623200, 3),
            Transition::new(1067158800, 2),
            Transition::new(1081072800, 3),
            Transition::new(1099213200, 2),
            Transition::new(1112522400, 3),
            Transition::new(1130662800, 2),
            Transition::new(1143972000, 3),
            Transition::new(1162112400, 2),
            Transition::new(1175421600, 3),
            Transition::new(1193562000, 2),
            Transition::new(1207476000, 3),
            Transition::new(1225011600, 2),
            Transition::new(1238925600, 3),
            Transition::new(1256461200, 2),
            Transition::new(1268560800, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-28084, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-28800, false, Some(b"PST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_SANTIAGO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524504635, 1),
            Transition::new(-1892661435, 2),
            Transition::new(-1688410800, 1),
            Transition::new(-1619205435, 3),
            Transition::new(-1593806400, 1),
            Transition::new(-1335986235, 4),
            Transition::new(-1317585600, 2),
            Transition::new(-1304362800, 4),
            Transition::new(-1286049600, 2),
            Transition::new(-1272826800, 4),
            Transition::new(-1254513600, 2),
            Transition::new(-1241290800, 4),
            Transition::new(-1222977600, 2),
            Transition::new(-1209754800, 4),
            Transition::new(-1191355200, 2),
            Transition::new(-1178132400, 3),
            Transition::new(-870552000, 2),
            Transition::new(-865278000, 3),
            Transition::new(-740520000, 5),
            Transition::new(-736376400, 3),
            Transition::new(-718056000, 2),
            Transition::new(-713649600, 3),
            Transition::new(-36619200, 5),
            Transition::new(-23922000, 3),
            Transition::new(-3355200, 5),
            Transition::new(7527600, 3),
            Transition::new(24465600, 5),
            Transition::new(37767600, 3),
            Transition::new(55915200, 5),
            Transition::new(69217200, 3),
            Transition::new(87969600, 5),
            Transition::new(100666800, 3),
            Transition::new(118209600, 5),
            Transition::new(132116400, 3),
            Transition::new(150868800, 5),
            Transition::new(163566000, 3),
            Transition::new(182318400, 5),
            Transition::new(195620400, 3),
            Transition::new(213768000, 5),
            Transition::new(227070000, 3),
            Transition::new(245217600, 5),
            Transition::new(258519600, 3),
            Transition::new(277272000, 5),
            Transition::new(289969200, 3),
            Transition::new(308721600, 5),
            Transition::new(321418800, 3),
            Transition::new(340171200, 5),
            Transition::new(353473200, 3),
            Transition::new(371620800, 5),
            Transition::new(384922800, 3),
            Transition::new(403070400, 5),
            Transition::new(416372400, 3),
            Transition::new(434520000, 5),
            Transition::new(447822000, 3),
            Transition::new(466574400, 5),
            Transition::new(479271600, 3),
            Transition::new(498024000, 5),
            Transition::new(510721200, 3),
            Transition::new(529473600, 5),
            Transition::new(545194800, 3),
            Transition::new(560923200, 5),
            Transition::new(574225200, 3),
            Transition::new(592372800, 5),
            Transition::new(605674800, 3),
            Transition::new(624427200, 5),
            Transition::new(637124400, 3),
            Transition::new(653457600, 5),
            Transition::new(668574000, 3),
            Transition::new(687326400, 5),
            Transition::new(700628400, 3),
            Transition::new(718776000, 5),
            Transition::new(732078000, 3),
            Transition::new(750225600, 5),
            Transition::new(763527600, 3),
            Transition::new(781675200, 5),
            Transition::new(794977200, 3),
            Transition::new(813729600, 5),
            Transition::new(826426800, 3),
            Transition::new(845179200, 5),
            Transition::new(859690800, 3),
            Transition::new(876628800, 5),
            Transition::new(889930800, 3),
            Transition::new(906868800, 5),
            Transition::new(923194800, 3),
            Transition::new(939528000, 5),
            Transition::new(952830000, 3),
            Transition::new(971582400, 5),
            Transition::new(984279600, 3),
            Transition::new(1003032000, 5),
            Transition::new(1015729200, 3),
            Transition::new(1034481600, 5),
            Transition::new(1047178800, 3),
            Transition::new(1065931200, 5),
            Transition::new(1079233200, 3),
            Transition::new(1097380800, 5),
            Transition::new(1110682800, 3),
            Transition::new(1128830400, 5),
            Transition::new(1142132400, 3),
            Transition::new(1160884800, 5),
            Transition::new(1173582000, 3),
            Transition::new(1192334400, 5),
            Transition::new(1206846000, 3),
            Transition::new(1223784000, 5),
            Transition::new(1237086000, 3),
            Transition::new(1255233600, 5),
            Transition::new(1270350000, 3),
            Transition::new(1286683200, 5),
            Transition::new(1304823600, 3),
            Transition::new(1313899200, 5),
            Transition::new(1335668400, 3),
            Transition::new(1346558400, 5),
            Transition::new(1367118000, 3),
            Transition::new(1378612800, 5),
            Transition::new(1398567600, 3),
            Transition::new(1410062400, 5),
            Transition::new(1463281200, 3),
            Transition::new(1471147200, 5),
            Transition::new(1494730800, 3),
            Transition::new(1502596800, 5),
            Transition::new(1526180400, 3),
            Transition::new(1534046400, 5),
            Transition::new(1554606000, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-16965, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-16965, false, Some(b"SMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-14400, false, Some(b"-04")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-10800, true, Some(b"-03")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(9, 1, 6) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    86400,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 6) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    86400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_SANTO_DOMINGO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524504824, 1),
            Transition::new(-1159773600, 3),
            Transition::new(-100119600, 2),
            Transition::new(-89668800, 3),
            Transition::new(-5770800, 4),
            Transition::new(4422600, 3),
            Transition::new(25678800, 4),
            Transition::new(33193800, 3),
            Transition::new(57733200, 4),
            Transition::new(64816200, 3),
            Transition::new(89182800, 4),
            Transition::new(96438600, 3),
            Transition::new(120632400, 4),
            Transition::new(127974600, 3),
            Transition::new(152082000, 5),
            Transition::new(972799200, 3),
            Transition::new(975823200, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-16776, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-16800, false, Some(b"SDMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-16200, true, Some(b"-0430")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_SAO_PAULO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767214412, 2),
            Transition::new(-1206957600, 1),
            Transition::new(-1191362400, 2),
            Transition::new(-1175374800, 1),
            Transition::new(-1159826400, 2),
            Transition::new(-633819600, 1),
            Transition::new(-622069200, 2),
            Transition::new(-602283600, 1),
            Transition::new(-591832800, 2),
            Transition::new(-570747600, 1),
            Transition::new(-560210400, 2),
            Transition::new(-539125200, 1),
            Transition::new(-531352800, 2),
            Transition::new(-195426000, 1),
            Transition::new(-184197600, 2),
            Transition::new(-155163600, 1),
            Transition::new(-150069600, 2),
            Transition::new(-128898000, 1),
            Transition::new(-121125600, 2),
            Transition::new(-99954000, 1),
            Transition::new(-89589600, 2),
            Transition::new(-68418000, 1),
            Transition::new(-57967200, 2),
            Transition::new(499748400, 1),
            Transition::new(511236000, 2),
            Transition::new(530593200, 1),
            Transition::new(540266400, 2),
            Transition::new(562129200, 1),
            Transition::new(571197600, 2),
            Transition::new(592974000, 1),
            Transition::new(602042400, 2),
            Transition::new(624423600, 1),
            Transition::new(634701600, 2),
            Transition::new(656478000, 1),
            Transition::new(666756000, 2),
            Transition::new(687927600, 1),
            Transition::new(697600800, 2),
            Transition::new(719982000, 1),
            Transition::new(728445600, 2),
            Transition::new(750826800, 1),
            Transition::new(761709600, 2),
            Transition::new(782276400, 1),
            Transition::new(793159200, 2),
            Transition::new(813726000, 1),
            Transition::new(824004000, 2),
            Transition::new(844570800, 1),
            Transition::new(856058400, 2),
            Transition::new(876106800, 1),
            Transition::new(888717600, 2),
            Transition::new(908074800, 1),
            Transition::new(919562400, 2),
            Transition::new(938919600, 1),
            Transition::new(951616800, 2),
            Transition::new(970974000, 1),
            Transition::new(982461600, 2),
            Transition::new(1003028400, 1),
            Transition::new(1013911200, 2),
            Transition::new(1036292400, 1),
            Transition::new(1045360800, 2),
            Transition::new(1066532400, 1),
            Transition::new(1076810400, 2),
            Transition::new(1099364400, 1),
            Transition::new(1108864800, 2),
            Transition::new(1129431600, 1),
            Transition::new(1140314400, 2),
            Transition::new(1162695600, 1),
            Transition::new(1172368800, 2),
            Transition::new(1192330800, 1),
            Transition::new(1203213600, 2),
            Transition::new(1224385200, 1),
            Transition::new(1234663200, 2),
            Transition::new(1255834800, 1),
            Transition::new(1266717600, 2),
            Transition::new(1287284400, 1),
            Transition::new(1298167200, 2),
            Transition::new(1318734000, 1),
            Transition::new(1330221600, 2),
            Transition::new(1350788400, 1),
            Transition::new(1361066400, 2),
            Transition::new(1382238000, 1),
            Transition::new(1392516000, 2),
            Transition::new(1413687600, 1),
            Transition::new(1424570400, 2),
            Transition::new(1445137200, 1),
            Transition::new(1456020000, 2),
            Transition::new(1476586800, 1),
            Transition::new(1487469600, 2),
            Transition::new(1508036400, 1),
            Transition::new(1518919200, 2),
            Transition::new(1541300400, 1),
            Transition::new(1550368800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-11188, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_SCORESBYSUND: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1686090728, 1),
            Transition::new(323841600, 2),
            Transition::new(338961600, 1),
            Transition::new(354679200, 4),
            Transition::new(370400400, 3),
            Transition::new(386125200, 4),
            Transition::new(401850000, 3),
            Transition::new(417574800, 4),
            Transition::new(433299600, 3),
            Transition::new(449024400, 4),
            Transition::new(465354000, 3),
            Transition::new(481078800, 4),
            Transition::new(496803600, 3),
            Transition::new(512528400, 4),
            Transition::new(528253200, 3),
            Transition::new(543978000, 4),
            Transition::new(559702800, 3),
            Transition::new(575427600, 4),
            Transition::new(591152400, 3),
            Transition::new(606877200, 4),
            Transition::new(622602000, 3),
            Transition::new(638326800, 4),
            Transition::new(654656400, 3),
            Transition::new(670381200, 4),
            Transition::new(686106000, 3),
            Transition::new(701830800, 4),
            Transition::new(717555600, 3),
            Transition::new(733280400, 4),
            Transition::new(749005200, 3),
            Transition::new(764730000, 4),
            Transition::new(780454800, 3),
            Transition::new(796179600, 4),
            Transition::new(811904400, 3),
            Transition::new(828234000, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-5272, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, false, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, true, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, true, Some(b"+00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-3600, false, Some(b"-01")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(0, true, Some(b"+00")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_SITKA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3225223727, 1),
            Transition::new(-2188954727, 2),
            Transition::new(-880207200, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765385200, 2),
            Transition::new(-21477600, 5),
            Transition::new(-5756400, 2),
            Transition::new(9972000, 5),
            Transition::new(25693200, 2),
            Transition::new(41421600, 5),
            Transition::new(57747600, 2),
            Transition::new(73476000, 5),
            Transition::new(89197200, 2),
            Transition::new(104925600, 5),
            Transition::new(120646800, 2),
            Transition::new(126698400, 5),
            Transition::new(152096400, 2),
            Transition::new(162381600, 5),
            Transition::new(183546000, 2),
            Transition::new(199274400, 5),
            Transition::new(215600400, 2),
            Transition::new(230724000, 5),
            Transition::new(247050000, 2),
            Transition::new(262778400, 5),
            Transition::new(278499600, 2),
            Transition::new(294228000, 5),
            Transition::new(309949200, 2),
            Transition::new(325677600, 5),
            Transition::new(341398800, 2),
            Transition::new(357127200, 5),
            Transition::new(372848400, 2),
            Transition::new(388576800, 5),
            Transition::new(404902800, 2),
            Transition::new(420026400, 5),
            Transition::new(436352400, 6),
            Transition::new(439030800, 8),
            Transition::new(452084400, 7),
            Transition::new(467805600, 8),
            Transition::new(483534000, 7),
            Transition::new(499255200, 8),
            Transition::new(514983600, 7),
            Transition::new(530704800, 8),
            Transition::new(544618800, 7),
            Transition::new(562154400, 8),
            Transition::new(576068400, 7),
            Transition::new(594208800, 8),
            Transition::new(607518000, 7),
            Transition::new(625658400, 8),
            Transition::new(638967600, 7),
            Transition::new(657108000, 8),
            Transition::new(671022000, 7),
            Transition::new(688557600, 8),
            Transition::new(702471600, 7),
            Transition::new(720007200, 8),
            Transition::new(733921200, 7),
            Transition::new(752061600, 8),
            Transition::new(765370800, 7),
            Transition::new(783511200, 8),
            Transition::new(796820400, 7),
            Transition::new(814960800, 8),
            Transition::new(828874800, 7),
            Transition::new(846410400, 8),
            Transition::new(860324400, 7),
            Transition::new(877860000, 8),
            Transition::new(891774000, 7),
            Transition::new(909309600, 8),
            Transition::new(923223600, 7),
            Transition::new(941364000, 8),
            Transition::new(954673200, 7),
            Transition::new(972813600, 8),
            Transition::new(986122800, 7),
            Transition::new(1004263200, 8),
            Transition::new(1018177200, 7),
            Transition::new(1035712800, 8),
            Transition::new(1049626800, 7),
            Transition::new(1067162400, 8),
            Transition::new(1081076400, 7),
            Transition::new(1099216800, 8),
            Transition::new(1112526000, 7),
            Transition::new(1130666400, 8),
            Transition::new(1143975600, 7),
            Transition::new(1162116000, 8),
            Transition::new(1173610800, 7),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(53927, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32473, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"YST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ST_JOHNS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713897748, 2),
            Transition::new(-1664130548, 1),
            Transition::new(-1650137348, 2),
            Transition::new(-1632076148, 1),
            Transition::new(-1615145348, 2),
            Transition::new(-1598650148, 1),
            Transition::new(-1590100148, 2),
            Transition::new(-1567286948, 1),
            Transition::new(-1551565748, 2),
            Transition::new(-1535837348, 1),
            Transition::new(-1520116148, 2),
            Transition::new(-1503782948, 1),
            Transition::new(-1488666548, 2),
            Transition::new(-1472333348, 1),
            Transition::new(-1457216948, 2),
            Transition::new(-1440883748, 1),
            Transition::new(-1425767348, 2),
            Transition::new(-1409434148, 1),
            Transition::new(-1394317748, 2),
            Transition::new(-1377984548, 1),
            Transition::new(-1362263348, 2),
            Transition::new(-1346534948, 1),
            Transition::new(-1330813748, 2),
            Transition::new(-1314480548, 1),
            Transition::new(-1299364148, 2),
            Transition::new(-1283030948, 1),
            Transition::new(-1267914548, 2),
            Transition::new(-1251581348, 1),
            Transition::new(-1236464948, 2),
            Transition::new(-1220131748, 1),
            Transition::new(-1205015348, 2),
            Transition::new(-1188682148, 1),
            Transition::new(-1172960948, 2),
            Transition::new(-1156627748, 1),
            Transition::new(-1141511348, 2),
            Transition::new(-1125178148, 1),
            Transition::new(-1110061748, 2),
            Transition::new(-1096921748, 4),
            Transition::new(-1093728600, 3),
            Transition::new(-1078612200, 4),
            Transition::new(-1061670600, 3),
            Transition::new(-1048973400, 4),
            Transition::new(-1030221000, 3),
            Transition::new(-1017523800, 4),
            Transition::new(-998771400, 3),
            Transition::new(-986074200, 4),
            Transition::new(-966717000, 3),
            Transition::new(-954624600, 4),
            Transition::new(-935267400, 3),
            Transition::new(-922570200, 4),
            Transition::new(-903817800, 3),
            Transition::new(-891120600, 4),
            Transition::new(-872368200, 6),
            Transition::new(-769395600, 5),
            Transition::new(-765401400, 4),
            Transition::new(-746044200, 3),
            Transition::new(-733347000, 4),
            Transition::new(-714594600, 3),
            Transition::new(-701897400, 4),
            Transition::new(-683145000, 3),
            Transition::new(-670447800, 4),
            Transition::new(-651695400, 3),
            Transition::new(-638998200, 4),
            Transition::new(-619641000, 3),
            Transition::new(-606943800, 4),
            Transition::new(-589401000, 3),
            Transition::new(-576099000, 4),
            Transition::new(-557951400, 3),
            Transition::new(-544649400, 4),
            Transition::new(-526501800, 3),
            Transition::new(-513199800, 4),
            Transition::new(-495052200, 3),
            Transition::new(-481750200, 4),
            Transition::new(-463602600, 3),
            Transition::new(-450300600, 4),
            Transition::new(-431548200, 3),
            Transition::new(-418246200, 4),
            Transition::new(-400098600, 3),
            Transition::new(-386796600, 4),
            Transition::new(-368649000, 3),
            Transition::new(-355347000, 4),
            Transition::new(-337199400, 3),
            Transition::new(-323897400, 4),
            Transition::new(-305749800, 3),
            Transition::new(-289423800, 4),
            Transition::new(-273695400, 3),
            Transition::new(-257974200, 4),
            Transition::new(-242245800, 3),
            Transition::new(-226524600, 4),
            Transition::new(-210796200, 3),
            Transition::new(-195075000, 4),
            Transition::new(-179346600, 3),
            Transition::new(-163625400, 4),
            Transition::new(-147897000, 3),
            Transition::new(-131571000, 4),
            Transition::new(-116447400, 3),
            Transition::new(-100121400, 4),
            Transition::new(-84393000, 3),
            Transition::new(-68671800, 4),
            Transition::new(-52943400, 3),
            Transition::new(-37222200, 4),
            Transition::new(-21493800, 3),
            Transition::new(-5772600, 4),
            Transition::new(9955800, 3),
            Transition::new(25677000, 4),
            Transition::new(41405400, 3),
            Transition::new(57731400, 4),
            Transition::new(73459800, 3),
            Transition::new(89181000, 4),
            Transition::new(104909400, 3),
            Transition::new(120630600, 4),
            Transition::new(136359000, 3),
            Transition::new(152080200, 4),
            Transition::new(167808600, 3),
            Transition::new(183529800, 4),
            Transition::new(199258200, 3),
            Transition::new(215584200, 4),
            Transition::new(230707800, 3),
            Transition::new(247033800, 4),
            Transition::new(262762200, 3),
            Transition::new(278483400, 4),
            Transition::new(294211800, 3),
            Transition::new(309933000, 4),
            Transition::new(325661400, 3),
            Transition::new(341382600, 4),
            Transition::new(357111000, 3),
            Transition::new(372832200, 4),
            Transition::new(388560600, 3),
            Transition::new(404886600, 4),
            Transition::new(420010200, 3),
            Transition::new(436336200, 4),
            Transition::new(452064600, 3),
            Transition::new(467785800, 4),
            Transition::new(483514200, 3),
            Transition::new(499235400, 4),
            Transition::new(514963800, 3),
            Transition::new(530685000, 4),
            Transition::new(544591860, 3),
            Transition::new(562127460, 4),
            Transition::new(576041460, 7),
            Transition::new(594178260, 4),
            Transition::new(607491060, 3),
            Transition::new(625631460, 4),
            Transition::new(638940660, 3),
            Transition::new(657081060, 4),
            Transition::new(670995060, 3),
            Transition::new(688530660, 4),
            Transition::new(702444660, 3),
            Transition::new(719980260, 4),
            Transition::new(733894260, 3),
            Transition::new(752034660, 4),
            Transition::new(765343860, 3),
            Transition::new(783484260, 4),
            Transition::new(796793460, 3),
            Transition::new(814933860, 4),
            Transition::new(828847860, 3),
            Transition::new(846383460, 4),
            Transition::new(860297460, 3),
            Transition::new(877833060, 4),
            Transition::new(891747060, 3),
            Transition::new(909282660, 4),
            Transition::new(923196660, 3),
            Transition::new(941337060, 4),
            Transition::new(954646260, 3),
            Transition::new(972786660, 4),
            Transition::new(986095860, 3),
            Transition::new(1004236260, 4),
            Transition::new(1018150260, 3),
            Transition::new(1035685860, 4),
            Transition::new(1049599860, 3),
            Transition::new(1067135460, 4),
            Transition::new(1081049460, 3),
            Transition::new(1099189860, 4),
            Transition::new(1112499060, 3),
            Transition::new(1130639460, 4),
            Transition::new(1143948660, 3),
            Transition::new(1162089060, 4),
            Transition::new(1173583860, 3),
            Transition::new(1194143460, 4),
            Transition::new(1205033460, 3),
            Transition::new(1225593060, 4),
            Transition::new(1236483060, 3),
            Transition::new(1257042660, 4),
            Transition::new(1268537460, 3),
            Transition::new(1289097060, 4),
            Transition::new(1299987060, 3),
            Transition::new(1320553800, 4),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(-12652, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-9052, true, Some(b"NDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-12652, false, Some(b"NST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-9000, true, Some(b"NDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-12600, false, Some(b"NST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-9000, true, Some(b"NPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-9000, true, Some(b"NWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-5400, true, Some(b"NDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-12600, false, Some(b"NST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-9000, true, Some(b"NDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ST_KITTS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1825098548, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-15052, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ST_LUCIA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524506960, 1),
            Transition::new(-1830369360, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-14640, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14640, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ST_THOMAS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1846266016, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-15584, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_ST_VINCENT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524506904, 1),
            Transition::new(-1830369304, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-14696, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14696, false, Some(b"KMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_SWIFT_CURRENT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2030201320, 2),
            Transition::new(-1632063600, 1),
            Transition::new(-1615132800, 2),
            Transition::new(-880210800, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765388800, 2),
            Transition::new(-747241200, 1),
            Transition::new(-732729600, 2),
            Transition::new(-715791600, 1),
            Transition::new(-702489600, 2),
            Transition::new(-684342000, 1),
            Transition::new(-671040000, 2),
            Transition::new(-652892400, 1),
            Transition::new(-639590400, 2),
            Transition::new(-400086000, 1),
            Transition::new(-384364800, 2),
            Transition::new(-337186800, 1),
            Transition::new(-321465600, 2),
            Transition::new(-305737200, 1),
            Transition::new(-292435200, 2),
            Transition::new(-273682800, 1),
            Transition::new(-260985600, 2),
            Transition::new(73472400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-25880, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_TEGUCIGALPA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1538503868, 2),
            Transition::new(547020000, 1),
            Transition::new(559717200, 2),
            Transition::new(578469600, 1),
            Transition::new(591166800, 2),
            Transition::new(1146981600, 1),
            Transition::new(1154926800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-20932, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_THULE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1686079492, 2),
            Transition::new(670399200, 1),
            Transition::new(686120400, 2),
            Transition::new(701848800, 1),
            Transition::new(717570000, 2),
            Transition::new(733903200, 1),
            Transition::new(752043600, 2),
            Transition::new(765352800, 1),
            Transition::new(783493200, 2),
            Transition::new(796802400, 1),
            Transition::new(814942800, 2),
            Transition::new(828856800, 1),
            Transition::new(846392400, 2),
            Transition::new(860306400, 1),
            Transition::new(877842000, 2),
            Transition::new(891756000, 1),
            Transition::new(909291600, 2),
            Transition::new(923205600, 1),
            Transition::new(941346000, 2),
            Transition::new(954655200, 1),
            Transition::new(972795600, 2),
            Transition::new(986104800, 1),
            Transition::new(1004245200, 2),
            Transition::new(1018159200, 1),
            Transition::new(1035694800, 2),
            Transition::new(1049608800, 1),
            Transition::new(1067144400, 2),
            Transition::new(1081058400, 1),
            Transition::new(1099198800, 2),
            Transition::new(1112508000, 1),
            Transition::new(1130648400, 2),
            Transition::new(1143957600, 1),
            Transition::new(1162098000, 2),
            Transition::new(1173592800, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-16508, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-14400, false, Some(b"AST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_THUNDER_BAY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2366733780, 1),
            Transition::new(-1893434400, 2),
            Transition::new(-880218000, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765396000, 2),
            Transition::new(9961200, 5),
            Transition::new(25682400, 2),
            Transition::new(41410800, 5),
            Transition::new(57736800, 2),
            Transition::new(73465200, 5),
            Transition::new(89186400, 2),
            Transition::new(136364400, 5),
            Transition::new(152085600, 2),
            Transition::new(167814000, 5),
            Transition::new(183535200, 2),
            Transition::new(199263600, 5),
            Transition::new(215589600, 2),
            Transition::new(230713200, 5),
            Transition::new(247039200, 2),
            Transition::new(262767600, 5),
            Transition::new(278488800, 2),
            Transition::new(294217200, 5),
            Transition::new(309938400, 2),
            Transition::new(325666800, 5),
            Transition::new(341388000, 2),
            Transition::new(357116400, 5),
            Transition::new(372837600, 2),
            Transition::new(388566000, 5),
            Transition::new(404892000, 2),
            Transition::new(420015600, 5),
            Transition::new(436341600, 2),
            Transition::new(452070000, 5),
            Transition::new(467791200, 2),
            Transition::new(483519600, 5),
            Transition::new(499240800, 2),
            Transition::new(514969200, 5),
            Transition::new(530690400, 2),
            Transition::new(544604400, 5),
            Transition::new(562140000, 2),
            Transition::new(576054000, 5),
            Transition::new(594194400, 2),
            Transition::new(607503600, 5),
            Transition::new(625644000, 2),
            Transition::new(638953200, 5),
            Transition::new(657093600, 2),
            Transition::new(671007600, 5),
            Transition::new(688543200, 2),
            Transition::new(702457200, 5),
            Transition::new(719992800, 2),
            Transition::new(733906800, 5),
            Transition::new(752047200, 2),
            Transition::new(765356400, 5),
            Transition::new(783496800, 2),
            Transition::new(796806000, 5),
            Transition::new(814946400, 2),
            Transition::new(828860400, 5),
            Transition::new(846396000, 2),
            Transition::new(860310000, 5),
            Transition::new(877845600, 2),
            Transition::new(891759600, 5),
            Transition::new(909295200, 2),
            Transition::new(923209200, 5),
            Transition::new(941349600, 2),
            Transition::new(954658800, 5),
            Transition::new(972799200, 2),
            Transition::new(986108400, 5),
            Transition::new(1004248800, 2),
            Transition::new(1018162800, 5),
            Transition::new(1035698400, 2),
            Transition::new(1049612400, 5),
            Transition::new(1067148000, 2),
            Transition::new(1081062000, 5),
            Transition::new(1099202400, 2),
            Transition::new(1112511600, 5),
            Transition::new(1130652000, 2),
            Transition::new(1143961200, 5),
            Transition::new(1162101600, 2),
            Transition::new(1173596400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-21420, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_TORONTO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2366736148, 2),
            Transition::new(-1632070800, 1),
            Transition::new(-1615140000, 2),
            Transition::new(-1601753400, 1),
            Transition::new(-1583697600, 2),
            Transition::new(-1567357200, 1),
            Transition::new(-1554667200, 2),
            Transition::new(-1534698000, 1),
            Transition::new(-1524074400, 2),
            Transition::new(-1503248400, 1),
            Transition::new(-1492365600, 2),
            Transition::new(-1471798800, 1),
            Transition::new(-1460916000, 2),
            Transition::new(-1440954000, 1),
            Transition::new(-1428861600, 2),
            Transition::new(-1409504400, 1),
            Transition::new(-1397412000, 2),
            Transition::new(-1378054800, 1),
            Transition::new(-1365962400, 2),
            Transition::new(-1346605200, 1),
            Transition::new(-1333908000, 2),
            Transition::new(-1315155600, 1),
            Transition::new(-1301853600, 2),
            Transition::new(-1283706000, 1),
            Transition::new(-1270404000, 2),
            Transition::new(-1252256400, 1),
            Transition::new(-1238954400, 2),
            Transition::new(-1220806800, 1),
            Transition::new(-1207504800, 2),
            Transition::new(-1188752400, 1),
            Transition::new(-1176055200, 2),
            Transition::new(-1157302800, 1),
            Transition::new(-1144000800, 2),
            Transition::new(-1125853200, 1),
            Transition::new(-1112551200, 2),
            Transition::new(-1094403600, 1),
            Transition::new(-1081101600, 2),
            Transition::new(-1062954000, 1),
            Transition::new(-1049652000, 2),
            Transition::new(-1031504400, 1),
            Transition::new(-1018202400, 2),
            Transition::new(-1000054800, 1),
            Transition::new(-986752800, 2),
            Transition::new(-968000400, 1),
            Transition::new(-955303200, 2),
            Transition::new(-936550800, 1),
            Transition::new(-880218000, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765396000, 2),
            Transition::new(-747248400, 1),
            Transition::new(-733946400, 2),
            Transition::new(-715806000, 1),
            Transition::new(-702504000, 2),
            Transition::new(-684356400, 1),
            Transition::new(-671054400, 2),
            Transition::new(-652906800, 1),
            Transition::new(-634161600, 2),
            Transition::new(-620845200, 1),
            Transition::new(-602704800, 2),
            Transition::new(-589395600, 1),
            Transition::new(-576093600, 2),
            Transition::new(-557946000, 1),
            Transition::new(-544644000, 2),
            Transition::new(-526496400, 1),
            Transition::new(-513194400, 2),
            Transition::new(-495046800, 1),
            Transition::new(-481744800, 2),
            Transition::new(-463597200, 1),
            Transition::new(-450295200, 2),
            Transition::new(-431542800, 1),
            Transition::new(-418240800, 2),
            Transition::new(-400093200, 1),
            Transition::new(-384372000, 2),
            Transition::new(-368643600, 1),
            Transition::new(-352922400, 2),
            Transition::new(-337194000, 1),
            Transition::new(-321472800, 2),
            Transition::new(-305744400, 1),
            Transition::new(-289418400, 2),
            Transition::new(-273690000, 1),
            Transition::new(-257968800, 2),
            Transition::new(-242240400, 1),
            Transition::new(-226519200, 2),
            Transition::new(-210790800, 1),
            Transition::new(-195069600, 2),
            Transition::new(-179341200, 1),
            Transition::new(-163620000, 2),
            Transition::new(-147891600, 1),
            Transition::new(-131565600, 2),
            Transition::new(-116442000, 1),
            Transition::new(-100116000, 2),
            Transition::new(-84387600, 1),
            Transition::new(-68666400, 2),
            Transition::new(-52938000, 1),
            Transition::new(-37216800, 2),
            Transition::new(-21488400, 1),
            Transition::new(-5767200, 2),
            Transition::new(9961200, 1),
            Transition::new(25682400, 2),
            Transition::new(41410800, 1),
            Transition::new(57736800, 2),
            Transition::new(73465200, 1),
            Transition::new(89186400, 2),
            Transition::new(104914800, 1),
            Transition::new(120636000, 2),
            Transition::new(136364400, 1),
            Transition::new(152085600, 2),
            Transition::new(167814000, 1),
            Transition::new(183535200, 2),
            Transition::new(199263600, 1),
            Transition::new(215589600, 2),
            Transition::new(230713200, 1),
            Transition::new(247039200, 2),
            Transition::new(262767600, 1),
            Transition::new(278488800, 2),
            Transition::new(294217200, 1),
            Transition::new(309938400, 2),
            Transition::new(325666800, 1),
            Transition::new(341388000, 2),
            Transition::new(357116400, 1),
            Transition::new(372837600, 2),
            Transition::new(388566000, 1),
            Transition::new(404892000, 2),
            Transition::new(420015600, 1),
            Transition::new(436341600, 2),
            Transition::new(452070000, 1),
            Transition::new(467791200, 2),
            Transition::new(483519600, 1),
            Transition::new(499240800, 2),
            Transition::new(514969200, 1),
            Transition::new(530690400, 2),
            Transition::new(544604400, 1),
            Transition::new(562140000, 2),
            Transition::new(576054000, 1),
            Transition::new(594194400, 2),
            Transition::new(607503600, 1),
            Transition::new(625644000, 2),
            Transition::new(638953200, 1),
            Transition::new(657093600, 2),
            Transition::new(671007600, 1),
            Transition::new(688543200, 2),
            Transition::new(702457200, 1),
            Transition::new(719992800, 2),
            Transition::new(733906800, 1),
            Transition::new(752047200, 2),
            Transition::new(765356400, 1),
            Transition::new(783496800, 2),
            Transition::new(796806000, 1),
            Transition::new(814946400, 2),
            Transition::new(828860400, 1),
            Transition::new(846396000, 2),
            Transition::new(860310000, 1),
            Transition::new(877845600, 2),
            Transition::new(891759600, 1),
            Transition::new(909295200, 2),
            Transition::new(923209200, 1),
            Transition::new(941349600, 2),
            Transition::new(954658800, 1),
            Transition::new(972799200, 2),
            Transition::new(986108400, 1),
            Transition::new(1004248800, 2),
            Transition::new(1018162800, 1),
            Transition::new(1035698400, 2),
            Transition::new(1049612400, 1),
            Transition::new(1067148000, 2),
            Transition::new(1081062000, 1),
            Transition::new(1099202400, 2),
            Transition::new(1112511600, 1),
            Transition::new(1130652000, 2),
            Transition::new(1143961200, 1),
            Transition::new(1162101600, 2),
            Transition::new(1173596400, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-19052, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_TORTOLA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1846266092, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-15508, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_VANCOUVER: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713880852, 2),
            Transition::new(-1632060000, 1),
            Transition::new(-1615129200, 2),
            Transition::new(-880207200, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765385200, 2),
            Transition::new(-747237600, 1),
            Transition::new(-733935600, 2),
            Transition::new(-715788000, 1),
            Transition::new(-702486000, 2),
            Transition::new(-684338400, 1),
            Transition::new(-671036400, 2),
            Transition::new(-652888800, 1),
            Transition::new(-639586800, 2),
            Transition::new(-620834400, 1),
            Transition::new(-608137200, 2),
            Transition::new(-589384800, 1),
            Transition::new(-576082800, 2),
            Transition::new(-557935200, 1),
            Transition::new(-544633200, 2),
            Transition::new(-526485600, 1),
            Transition::new(-513183600, 2),
            Transition::new(-495036000, 1),
            Transition::new(-481734000, 2),
            Transition::new(-463586400, 1),
            Transition::new(-450284400, 2),
            Transition::new(-431532000, 1),
            Transition::new(-418230000, 2),
            Transition::new(-400082400, 1),
            Transition::new(-386780400, 2),
            Transition::new(-368632800, 1),
            Transition::new(-355330800, 2),
            Transition::new(-337183200, 1),
            Transition::new(-323881200, 2),
            Transition::new(-305733600, 1),
            Transition::new(-292431600, 2),
            Transition::new(-273679200, 1),
            Transition::new(-260982000, 2),
            Transition::new(-242229600, 1),
            Transition::new(-226508400, 2),
            Transition::new(-210780000, 1),
            Transition::new(-195058800, 2),
            Transition::new(-179330400, 1),
            Transition::new(-163609200, 2),
            Transition::new(-147880800, 1),
            Transition::new(-131554800, 2),
            Transition::new(-116431200, 1),
            Transition::new(-100105200, 2),
            Transition::new(-84376800, 1),
            Transition::new(-68655600, 2),
            Transition::new(-52927200, 1),
            Transition::new(-37206000, 2),
            Transition::new(-21477600, 1),
            Transition::new(-5756400, 2),
            Transition::new(9972000, 1),
            Transition::new(25693200, 2),
            Transition::new(41421600, 1),
            Transition::new(57747600, 2),
            Transition::new(73476000, 1),
            Transition::new(89197200, 2),
            Transition::new(104925600, 1),
            Transition::new(120646800, 2),
            Transition::new(136375200, 1),
            Transition::new(152096400, 2),
            Transition::new(167824800, 1),
            Transition::new(183546000, 2),
            Transition::new(199274400, 1),
            Transition::new(215600400, 2),
            Transition::new(230724000, 1),
            Transition::new(247050000, 2),
            Transition::new(262778400, 1),
            Transition::new(278499600, 2),
            Transition::new(294228000, 1),
            Transition::new(309949200, 2),
            Transition::new(325677600, 1),
            Transition::new(341398800, 2),
            Transition::new(357127200, 1),
            Transition::new(372848400, 2),
            Transition::new(388576800, 1),
            Transition::new(404902800, 2),
            Transition::new(420026400, 1),
            Transition::new(436352400, 2),
            Transition::new(452080800, 1),
            Transition::new(467802000, 2),
            Transition::new(483530400, 1),
            Transition::new(499251600, 2),
            Transition::new(514980000, 1),
            Transition::new(530701200, 2),
            Transition::new(544615200, 1),
            Transition::new(562150800, 2),
            Transition::new(576064800, 1),
            Transition::new(594205200, 2),
            Transition::new(607514400, 1),
            Transition::new(625654800, 2),
            Transition::new(638964000, 1),
            Transition::new(657104400, 2),
            Transition::new(671018400, 1),
            Transition::new(688554000, 2),
            Transition::new(702468000, 1),
            Transition::new(720003600, 2),
            Transition::new(733917600, 1),
            Transition::new(752058000, 2),
            Transition::new(765367200, 1),
            Transition::new(783507600, 2),
            Transition::new(796816800, 1),
            Transition::new(814957200, 2),
            Transition::new(828871200, 1),
            Transition::new(846406800, 2),
            Transition::new(860320800, 1),
            Transition::new(877856400, 2),
            Transition::new(891770400, 1),
            Transition::new(909306000, 2),
            Transition::new(923220000, 1),
            Transition::new(941360400, 2),
            Transition::new(954669600, 1),
            Transition::new(972810000, 2),
            Transition::new(986119200, 1),
            Transition::new(1004259600, 2),
            Transition::new(1018173600, 1),
            Transition::new(1035709200, 2),
            Transition::new(1049623200, 1),
            Transition::new(1067158800, 2),
            Transition::new(1081072800, 1),
            Transition::new(1099213200, 2),
            Transition::new(1112522400, 1),
            Transition::new(1130662800, 2),
            Transition::new(1143972000, 1),
            Transition::new(1162112400, 2),
            Transition::new(1173607200, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-29548, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-28800, false, Some(b"PST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_WHITEHORSE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2188997988, 2),
            Transition::new(-1632056400, 1),
            Transition::new(-1615125600, 2),
            Transition::new(-1596978000, 1),
            Transition::new(-1583164800, 2),
            Transition::new(-880203600, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765381600, 2),
            Transition::new(-147884400, 5),
            Transition::new(-131554800, 2),
            Transition::new(-81961200, 6),
            Transition::new(325677600, 7),
            Transition::new(341398800, 6),
            Transition::new(357127200, 7),
            Transition::new(372848400, 6),
            Transition::new(388576800, 7),
            Transition::new(404902800, 6),
            Transition::new(420026400, 7),
            Transition::new(436352400, 6),
            Transition::new(452080800, 7),
            Transition::new(467802000, 6),
            Transition::new(483530400, 7),
            Transition::new(499251600, 6),
            Transition::new(514980000, 7),
            Transition::new(530701200, 6),
            Transition::new(544615200, 7),
            Transition::new(562150800, 6),
            Transition::new(576064800, 7),
            Transition::new(594205200, 6),
            Transition::new(607514400, 7),
            Transition::new(625654800, 6),
            Transition::new(638964000, 7),
            Transition::new(657104400, 6),
            Transition::new(671018400, 7),
            Transition::new(688554000, 6),
            Transition::new(702468000, 7),
            Transition::new(720003600, 6),
            Transition::new(733917600, 7),
            Transition::new(752058000, 6),
            Transition::new(765367200, 7),
            Transition::new(783507600, 6),
            Transition::new(796816800, 7),
            Transition::new(814957200, 6),
            Transition::new(828871200, 7),
            Transition::new(846406800, 6),
            Transition::new(860320800, 7),
            Transition::new(877856400, 6),
            Transition::new(891770400, 7),
            Transition::new(909306000, 6),
            Transition::new(923220000, 7),
            Transition::new(941360400, 6),
            Transition::new(954669600, 7),
            Transition::new(972810000, 6),
            Transition::new(986119200, 7),
            Transition::new(1004259600, 6),
            Transition::new(1018173600, 7),
            Transition::new(1035709200, 6),
            Transition::new(1049623200, 7),
            Transition::new(1067158800, 6),
            Transition::new(1081072800, 7),
            Transition::new(1099213200, 6),
            Transition::new(1112522400, 7),
            Transition::new(1130662800, 6),
            Transition::new(1143972000, 7),
            Transition::new(1162112400, 6),
            Transition::new(1173607200, 7),
            Transition::new(1194166800, 6),
            Transition::new(1205056800, 7),
            Transition::new(1225616400, 6),
            Transition::new(1236506400, 7),
            Transition::new(1257066000, 6),
            Transition::new(1268560800, 7),
            Transition::new(1289120400, 6),
            Transition::new(1300010400, 7),
            Transition::new(1320570000, 6),
            Transition::new(1331460000, 7),
            Transition::new(1352019600, 6),
            Transition::new(1362909600, 7),
            Transition::new(1383469200, 6),
            Transition::new(1394359200, 7),
            Transition::new(1414918800, 6),
            Transition::new(1425808800, 7),
            Transition::new(1446368400, 6),
            Transition::new(1457863200, 7),
            Transition::new(1478422800, 6),
            Transition::new(1489312800, 7),
            Transition::new(1509872400, 6),
            Transition::new(1520762400, 7),
            Transition::new(1541322000, 6),
            Transition::new(1552212000, 7),
            Transition::new(1572771600, 6),
            Transition::new(1583661600, 7),
            Transition::new(1604214000, 8),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(-32412, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"YST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"YDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_WINNIPEG: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2602258284, 2),
            Transition::new(-1694368800, 1),
            Transition::new(-1681671600, 2),
            Transition::new(-1632067200, 1),
            Transition::new(-1615136400, 2),
            Transition::new(-1029686400, 1),
            Transition::new(-1018198800, 2),
            Transition::new(-880214400, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765392400, 2),
            Transition::new(-746035200, 1),
            Transition::new(-732733200, 2),
            Transition::new(-715795200, 1),
            Transition::new(-702493200, 2),
            Transition::new(-684345600, 1),
            Transition::new(-671043600, 2),
            Transition::new(-652896000, 1),
            Transition::new(-639594000, 2),
            Transition::new(-620755200, 1),
            Transition::new(-607626000, 2),
            Transition::new(-589392000, 1),
            Transition::new(-576090000, 2),
            Transition::new(-557942400, 1),
            Transition::new(-544640400, 2),
            Transition::new(-526492800, 1),
            Transition::new(-513190800, 2),
            Transition::new(-495043200, 1),
            Transition::new(-481741200, 2),
            Transition::new(-463593600, 1),
            Transition::new(-450291600, 2),
            Transition::new(-431539200, 1),
            Transition::new(-418237200, 2),
            Transition::new(-400089600, 1),
            Transition::new(-386787600, 2),
            Transition::new(-368640000, 1),
            Transition::new(-355338000, 2),
            Transition::new(-337190400, 1),
            Transition::new(-321469200, 2),
            Transition::new(-305740800, 1),
            Transition::new(-292438800, 2),
            Transition::new(-210787200, 1),
            Transition::new(-198090000, 2),
            Transition::new(-116438400, 1),
            Transition::new(-100108800, 2),
            Transition::new(-84384000, 1),
            Transition::new(-68659200, 2),
            Transition::new(-52934400, 1),
            Transition::new(-37209600, 2),
            Transition::new(-21484800, 1),
            Transition::new(-5760000, 2),
            Transition::new(9964800, 1),
            Transition::new(25689600, 2),
            Transition::new(41414400, 1),
            Transition::new(57744000, 2),
            Transition::new(73468800, 1),
            Transition::new(89193600, 2),
            Transition::new(104918400, 1),
            Transition::new(120643200, 2),
            Transition::new(136368000, 1),
            Transition::new(152092800, 2),
            Transition::new(167817600, 1),
            Transition::new(183542400, 2),
            Transition::new(199267200, 1),
            Transition::new(215596800, 2),
            Transition::new(230716800, 1),
            Transition::new(247046400, 2),
            Transition::new(262771200, 1),
            Transition::new(278496000, 2),
            Transition::new(294220800, 1),
            Transition::new(309945600, 2),
            Transition::new(325670400, 1),
            Transition::new(341395200, 2),
            Transition::new(357120000, 1),
            Transition::new(372844800, 2),
            Transition::new(388569600, 1),
            Transition::new(404899200, 2),
            Transition::new(420019200, 1),
            Transition::new(436348800, 2),
            Transition::new(452073600, 1),
            Transition::new(467798400, 2),
            Transition::new(483523200, 1),
            Transition::new(499248000, 2),
            Transition::new(514972800, 1),
            Transition::new(530697600, 2),
            Transition::new(544608000, 1),
            Transition::new(562147200, 2),
            Transition::new(576057600, 1),
            Transition::new(594201600, 2),
            Transition::new(607507200, 1),
            Transition::new(625651200, 2),
            Transition::new(638956800, 1),
            Transition::new(657100800, 2),
            Transition::new(671011200, 1),
            Transition::new(688550400, 2),
            Transition::new(702460800, 1),
            Transition::new(720000000, 2),
            Transition::new(733910400, 1),
            Transition::new(752054400, 2),
            Transition::new(765360000, 1),
            Transition::new(783504000, 2),
            Transition::new(796809600, 1),
            Transition::new(814953600, 2),
            Transition::new(828864000, 1),
            Transition::new(846403200, 2),
            Transition::new(860313600, 1),
            Transition::new(877852800, 2),
            Transition::new(891763200, 1),
            Transition::new(909302400, 2),
            Transition::new(923212800, 1),
            Transition::new(941356800, 2),
            Transition::new(954662400, 1),
            Transition::new(972806400, 2),
            Transition::new(986112000, 1),
            Transition::new(1004256000, 2),
            Transition::new(1018166400, 1),
            Transition::new(1035705600, 2),
            Transition::new(1049616000, 1),
            Transition::new(1067155200, 2),
            Transition::new(1081065600, 1),
            Transition::new(1099209600, 2),
            Transition::new(1112515200, 1),
            Transition::new(1130659200, 2),
            Transition::new(1143964800, 1),
            Transition::new(1162105200, 2),
            Transition::new(1173600000, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-23316, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_YAKUTAT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3225223727, 1),
            Transition::new(-2188953665, 2),
            Transition::new(-880203600, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765381600, 2),
            Transition::new(-21474000, 5),
            Transition::new(-5752800, 2),
            Transition::new(9975600, 5),
            Transition::new(25696800, 2),
            Transition::new(41425200, 5),
            Transition::new(57751200, 2),
            Transition::new(73479600, 5),
            Transition::new(89200800, 2),
            Transition::new(104929200, 5),
            Transition::new(120650400, 2),
            Transition::new(126702000, 5),
            Transition::new(152100000, 2),
            Transition::new(162385200, 5),
            Transition::new(183549600, 2),
            Transition::new(199278000, 5),
            Transition::new(215604000, 2),
            Transition::new(230727600, 5),
            Transition::new(247053600, 2),
            Transition::new(262782000, 5),
            Transition::new(278503200, 2),
            Transition::new(294231600, 5),
            Transition::new(309952800, 2),
            Transition::new(325681200, 5),
            Transition::new(341402400, 2),
            Transition::new(357130800, 5),
            Transition::new(372852000, 2),
            Transition::new(388580400, 5),
            Transition::new(404906400, 2),
            Transition::new(420030000, 5),
            Transition::new(436356000, 2),
            Transition::new(439030800, 7),
            Transition::new(452084400, 6),
            Transition::new(467805600, 7),
            Transition::new(483534000, 6),
            Transition::new(499255200, 7),
            Transition::new(514983600, 6),
            Transition::new(530704800, 7),
            Transition::new(544618800, 6),
            Transition::new(562154400, 7),
            Transition::new(576068400, 6),
            Transition::new(594208800, 7),
            Transition::new(607518000, 6),
            Transition::new(625658400, 7),
            Transition::new(638967600, 6),
            Transition::new(657108000, 7),
            Transition::new(671022000, 6),
            Transition::new(688557600, 7),
            Transition::new(702471600, 6),
            Transition::new(720007200, 7),
            Transition::new(733921200, 6),
            Transition::new(752061600, 7),
            Transition::new(765370800, 6),
            Transition::new(783511200, 7),
            Transition::new(796820400, 6),
            Transition::new(814960800, 7),
            Transition::new(828874800, 6),
            Transition::new(846410400, 7),
            Transition::new(860324400, 6),
            Transition::new(877860000, 7),
            Transition::new(891774000, 6),
            Transition::new(909309600, 7),
            Transition::new(923223600, 6),
            Transition::new(941364000, 7),
            Transition::new(954673200, 6),
            Transition::new(972813600, 7),
            Transition::new(986122800, 6),
            Transition::new(1004263200, 7),
            Transition::new(1018177200, 6),
            Transition::new(1035712800, 7),
            Transition::new(1049626800, 6),
            Transition::new(1067162400, 7),
            Transition::new(1081076400, 6),
            Transition::new(1099216800, 7),
            Transition::new(1112526000, 6),
            Transition::new(1130666400, 7),
            Transition::new(1143975600, 6),
            Transition::new(1162116000, 7),
            Transition::new(1173610800, 6),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(52865, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-33535, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"YST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"YDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-32400, false, Some(b"AKST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-28800, true, Some(b"AKDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AMERICA_YELLOWKNIFE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1104537600, 3),
            Transition::new(-880210800, 1),
            Transition::new(-769395600, 2),
            Transition::new(-765388800, 3),
            Transition::new(-147891600, 4),
            Transition::new(-131562000, 3),
            Transition::new(325674000, 5),
            Transition::new(341395200, 3),
            Transition::new(357123600, 5),
            Transition::new(372844800, 3),
            Transition::new(388573200, 5),
            Transition::new(404899200, 3),
            Transition::new(420022800, 5),
            Transition::new(436348800, 3),
            Transition::new(452077200, 5),
            Transition::new(467798400, 3),
            Transition::new(483526800, 5),
            Transition::new(499248000, 3),
            Transition::new(514976400, 5),
            Transition::new(530697600, 3),
            Transition::new(544611600, 5),
            Transition::new(562147200, 3),
            Transition::new(576061200, 5),
            Transition::new(594201600, 3),
            Transition::new(607510800, 5),
            Transition::new(625651200, 3),
            Transition::new(638960400, 5),
            Transition::new(657100800, 3),
            Transition::new(671014800, 5),
            Transition::new(688550400, 3),
            Transition::new(702464400, 5),
            Transition::new(720000000, 3),
            Transition::new(733914000, 5),
            Transition::new(752054400, 3),
            Transition::new(765363600, 5),
            Transition::new(783504000, 3),
            Transition::new(796813200, 5),
            Transition::new(814953600, 3),
            Transition::new(828867600, 5),
            Transition::new(846403200, 3),
            Transition::new(860317200, 5),
            Transition::new(877852800, 3),
            Transition::new(891766800, 5),
            Transition::new(909302400, 3),
            Transition::new(923216400, 5),
            Transition::new(941356800, 3),
            Transition::new(954666000, 5),
            Transition::new(972806400, 3),
            Transition::new(986115600, 5),
            Transition::new(1004256000, 3),
            Transition::new(1018170000, 5),
            Transition::new(1035705600, 3),
            Transition::new(1049619600, 5),
            Transition::new(1067155200, 3),
            Transition::new(1081069200, 5),
            Transition::new(1099209600, 3),
            Transition::new(1112518800, 5),
            Transition::new(1130659200, 3),
            Transition::new(1143968400, 5),
            Transition::new(1162108800, 3),
            Transition::new(1173603600, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"MDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_CASEY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-31536000, 1),
            Transition::new(1255802400, 2),
            Transition::new(1267714800, 1),
            Transition::new(1319738400, 2),
            Transition::new(1329843600, 1),
            Transition::new(1477065600, 2),
            Transition::new(1520701200, 1),
            Transition::new(1538856000, 2),
            Transition::new(1552752000, 1),
            Transition::new(1570129200, 2),
            Transition::new(1583596800, 1),
            Transition::new(1601740860, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_DAVIS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-409190400, 1),
            Transition::new(-163062000, 0),
            Transition::new(-28857600, 1),
            Transition::new(1255806000, 2),
            Transition::new(1268251200, 1),
            Transition::new(1319742000, 2),
            Transition::new(1329854400, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_DUMONT_D_URVILLE: TimeZoneRef<'static> =
        match TimeZoneRef::<'static>::new(
            &[
                Transition::new(-725846400, 1),
                Transition::new(-566992800, 0),
                Transition::new(-415497600, 1),
            ],
            &{
                const V: [LocalTimeType; 2] = [
                    match LocalTimeType::new(0, false, Some(b"-00")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(36000, false, Some(b"+10")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                ];
                V
            },
            &[],
            &Some({
                const V: TransitionRule =
                    TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"+10")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    });
                V
            }),
        ) {
            Ok(v) => v,
            Err(e) => panic!("{}", e.0),
        };

    pub(crate) const ANTARCTICA_MACQUARIE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2214259200, 1),
            Transition::new(-1680508800, 2),
            Transition::new(-1665388800, 1),
            Transition::new(-1601719200, 0),
            Transition::new(-687052800, 1),
            Transition::new(-71136000, 2),
            Transition::new(-55411200, 1),
            Transition::new(-37267200, 2),
            Transition::new(-25776000, 1),
            Transition::new(-5817600, 2),
            Transition::new(5673600, 1),
            Transition::new(25632000, 2),
            Transition::new(37728000, 1),
            Transition::new(57686400, 2),
            Transition::new(67968000, 1),
            Transition::new(89136000, 2),
            Transition::new(100022400, 1),
            Transition::new(120585600, 2),
            Transition::new(131472000, 1),
            Transition::new(152035200, 2),
            Transition::new(162921600, 1),
            Transition::new(183484800, 2),
            Transition::new(194976000, 1),
            Transition::new(215539200, 2),
            Transition::new(226425600, 1),
            Transition::new(246988800, 2),
            Transition::new(257875200, 1),
            Transition::new(278438400, 2),
            Transition::new(289324800, 1),
            Transition::new(309888000, 2),
            Transition::new(320774400, 1),
            Transition::new(341337600, 2),
            Transition::new(352224000, 1),
            Transition::new(372787200, 2),
            Transition::new(386092800, 1),
            Transition::new(404841600, 2),
            Transition::new(417542400, 1),
            Transition::new(436291200, 2),
            Transition::new(447177600, 1),
            Transition::new(467740800, 2),
            Transition::new(478627200, 1),
            Transition::new(499190400, 2),
            Transition::new(510076800, 1),
            Transition::new(530035200, 2),
            Transition::new(542736000, 1),
            Transition::new(562089600, 2),
            Transition::new(574790400, 1),
            Transition::new(594144000, 2),
            Transition::new(606240000, 1),
            Transition::new(625593600, 2),
            Transition::new(637689600, 1),
            Transition::new(657043200, 2),
            Transition::new(670348800, 1),
            Transition::new(686678400, 2),
            Transition::new(701798400, 1),
            Transition::new(718128000, 2),
            Transition::new(733248000, 1),
            Transition::new(749577600, 2),
            Transition::new(764697600, 1),
            Transition::new(781027200, 2),
            Transition::new(796147200, 1),
            Transition::new(812476800, 2),
            Transition::new(828201600, 1),
            Transition::new(844531200, 2),
            Transition::new(859651200, 1),
            Transition::new(875980800, 2),
            Transition::new(891100800, 1),
            Transition::new(907430400, 2),
            Transition::new(922550400, 1),
            Transition::new(938880000, 2),
            Transition::new(954000000, 1),
            Transition::new(967305600, 2),
            Transition::new(985449600, 1),
            Transition::new(1002384000, 2),
            Transition::new(1017504000, 1),
            Transition::new(1033833600, 2),
            Transition::new(1048953600, 1),
            Transition::new(1065283200, 2),
            Transition::new(1080403200, 1),
            Transition::new(1096732800, 2),
            Transition::new(1111852800, 1),
            Transition::new(1128182400, 2),
            Transition::new(1143907200, 1),
            Transition::new(1159632000, 2),
            Transition::new(1174752000, 1),
            Transition::new(1191686400, 2),
            Transition::new(1207411200, 1),
            Transition::new(1223136000, 2),
            Transition::new(1238860800, 1),
            Transition::new(1254585600, 2),
            Transition::new(1301760000, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(36000, false, Some(b"AEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_MAWSON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-501206400, 1),
            Transition::new(1255809600, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_MC_MURDO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-441849600, 2),
            Transition::new(152632800, 1),
            Transition::new(162309600, 2),
            Transition::new(183477600, 1),
            Transition::new(194968800, 2),
            Transition::new(215532000, 1),
            Transition::new(226418400, 2),
            Transition::new(246981600, 1),
            Transition::new(257868000, 2),
            Transition::new(278431200, 1),
            Transition::new(289317600, 2),
            Transition::new(309880800, 1),
            Transition::new(320767200, 2),
            Transition::new(341330400, 1),
            Transition::new(352216800, 2),
            Transition::new(372780000, 1),
            Transition::new(384271200, 2),
            Transition::new(404834400, 1),
            Transition::new(415720800, 2),
            Transition::new(436284000, 1),
            Transition::new(447170400, 2),
            Transition::new(467733600, 1),
            Transition::new(478620000, 2),
            Transition::new(499183200, 1),
            Transition::new(510069600, 2),
            Transition::new(530632800, 1),
            Transition::new(541519200, 2),
            Transition::new(562082400, 1),
            Transition::new(573573600, 2),
            Transition::new(594136800, 1),
            Transition::new(605023200, 2),
            Transition::new(623772000, 1),
            Transition::new(637682400, 2),
            Transition::new(655221600, 1),
            Transition::new(669132000, 2),
            Transition::new(686671200, 1),
            Transition::new(700581600, 2),
            Transition::new(718120800, 1),
            Transition::new(732636000, 2),
            Transition::new(749570400, 1),
            Transition::new(764085600, 2),
            Transition::new(781020000, 1),
            Transition::new(795535200, 2),
            Transition::new(812469600, 1),
            Transition::new(826984800, 2),
            Transition::new(844524000, 1),
            Transition::new(858434400, 2),
            Transition::new(875973600, 1),
            Transition::new(889884000, 2),
            Transition::new(907423200, 1),
            Transition::new(921938400, 2),
            Transition::new(938872800, 1),
            Transition::new(953388000, 2),
            Transition::new(970322400, 1),
            Transition::new(984837600, 2),
            Transition::new(1002376800, 1),
            Transition::new(1016287200, 2),
            Transition::new(1033826400, 1),
            Transition::new(1047736800, 2),
            Transition::new(1065276000, 1),
            Transition::new(1079791200, 2),
            Transition::new(1096725600, 1),
            Transition::new(1111240800, 2),
            Transition::new(1128175200, 1),
            Transition::new(1142690400, 2),
            Transition::new(1159624800, 1),
            Transition::new(1174140000, 2),
            Transition::new(1191074400, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, true, Some(b"NZDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"NZST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(43200, false, Some(b"NZST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(46800, true, Some(b"NZDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(9, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_PALMER: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-157766400, 2),
            Transition::new(-152658000, 1),
            Transition::new(-132955200, 2),
            Transition::new(-121122000, 1),
            Transition::new(-101419200, 2),
            Transition::new(-86821200, 1),
            Transition::new(-71092800, 2),
            Transition::new(-54766800, 1),
            Transition::new(-39038400, 2),
            Transition::new(-23317200, 1),
            Transition::new(-7588800, 4),
            Transition::new(128142000, 3),
            Transition::new(136605600, 4),
            Transition::new(389070000, 1),
            Transition::new(403070400, 2),
            Transition::new(416372400, 1),
            Transition::new(434520000, 2),
            Transition::new(447822000, 1),
            Transition::new(466574400, 2),
            Transition::new(479271600, 1),
            Transition::new(498024000, 2),
            Transition::new(510721200, 1),
            Transition::new(529473600, 2),
            Transition::new(545194800, 1),
            Transition::new(560923200, 2),
            Transition::new(574225200, 1),
            Transition::new(592372800, 2),
            Transition::new(605674800, 1),
            Transition::new(624427200, 2),
            Transition::new(637124400, 1),
            Transition::new(653457600, 2),
            Transition::new(668574000, 1),
            Transition::new(687326400, 2),
            Transition::new(700628400, 1),
            Transition::new(718776000, 2),
            Transition::new(732078000, 1),
            Transition::new(750225600, 2),
            Transition::new(763527600, 1),
            Transition::new(781675200, 2),
            Transition::new(794977200, 1),
            Transition::new(813729600, 2),
            Transition::new(826426800, 1),
            Transition::new(845179200, 2),
            Transition::new(859690800, 1),
            Transition::new(876628800, 2),
            Transition::new(889930800, 1),
            Transition::new(906868800, 2),
            Transition::new(923194800, 1),
            Transition::new(939528000, 2),
            Transition::new(952830000, 1),
            Transition::new(971582400, 2),
            Transition::new(984279600, 1),
            Transition::new(1003032000, 2),
            Transition::new(1015729200, 1),
            Transition::new(1034481600, 2),
            Transition::new(1047178800, 1),
            Transition::new(1065931200, 2),
            Transition::new(1079233200, 1),
            Transition::new(1097380800, 2),
            Transition::new(1110682800, 1),
            Transition::new(1128830400, 2),
            Transition::new(1142132400, 1),
            Transition::new(1160884800, 2),
            Transition::new(1173582000, 1),
            Transition::new(1192334400, 2),
            Transition::new(1206846000, 1),
            Transition::new(1223784000, 2),
            Transition::new(1237086000, 1),
            Transition::new(1255233600, 2),
            Transition::new(1270350000, 1),
            Transition::new(1286683200, 2),
            Transition::new(1304823600, 1),
            Transition::new(1313899200, 2),
            Transition::new(1335668400, 1),
            Transition::new(1346558400, 2),
            Transition::new(1367118000, 1),
            Transition::new(1378612800, 2),
            Transition::new(1398567600, 1),
            Transition::new(1410062400, 2),
            Transition::new(1463281200, 1),
            Transition::new(1471147200, 2),
            Transition::new(1480820400, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_ROTHERA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(218246400, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_SYOWA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-407808000, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_TROLL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(1108166400, 2),
            Transition::new(1111885200, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"+02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"+00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"+00")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"+02")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ANTARCTICA_VOSTOK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-380073600, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ARCTIC_LONGYEARBYEN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2366757780, 2),
            Transition::new(-1691884800, 1),
            Transition::new(-1680573600, 2),
            Transition::new(-927511200, 1),
            Transition::new(-857257200, 2),
            Transition::new(-844556400, 1),
            Transition::new(-828226800, 2),
            Transition::new(-812502000, 1),
            Transition::new(-796777200, 2),
            Transition::new(-781052400, 1),
            Transition::new(-765327600, 2),
            Transition::new(-340844400, 1),
            Transition::new(-324514800, 2),
            Transition::new(-308790000, 1),
            Transition::new(-293065200, 2),
            Transition::new(-277340400, 1),
            Transition::new(-261615600, 2),
            Transition::new(-245890800, 1),
            Transition::new(-230166000, 2),
            Transition::new(-214441200, 1),
            Transition::new(-198716400, 2),
            Transition::new(-182991600, 1),
            Transition::new(-166662000, 2),
            Transition::new(-147913200, 1),
            Transition::new(-135212400, 2),
            Transition::new(323830800, 1),
            Transition::new(338950800, 2),
            Transition::new(354675600, 1),
            Transition::new(370400400, 2),
            Transition::new(386125200, 1),
            Transition::new(401850000, 2),
            Transition::new(417574800, 1),
            Transition::new(433299600, 2),
            Transition::new(449024400, 1),
            Transition::new(465354000, 2),
            Transition::new(481078800, 1),
            Transition::new(496803600, 2),
            Transition::new(512528400, 1),
            Transition::new(528253200, 2),
            Transition::new(543978000, 1),
            Transition::new(559702800, 2),
            Transition::new(575427600, 1),
            Transition::new(591152400, 2),
            Transition::new(606877200, 1),
            Transition::new(622602000, 2),
            Transition::new(638326800, 1),
            Transition::new(654656400, 2),
            Transition::new(670381200, 1),
            Transition::new(686106000, 2),
            Transition::new(701830800, 1),
            Transition::new(717555600, 2),
            Transition::new(733280400, 1),
            Transition::new(749005200, 2),
            Transition::new(764730000, 1),
            Transition::new(780454800, 2),
            Transition::new(796179600, 1),
            Transition::new(811904400, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(2580, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_ADEN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-631162794, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(10794, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_ALMATY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441170468, 1),
            Transition::new(-1247547600, 3),
            Transition::new(354909600, 2),
            Transition::new(370717200, 3),
            Transition::new(386445600, 2),
            Transition::new(402253200, 3),
            Transition::new(417981600, 2),
            Transition::new(433789200, 3),
            Transition::new(449604000, 2),
            Transition::new(465336000, 3),
            Transition::new(481060800, 2),
            Transition::new(496785600, 3),
            Transition::new(512510400, 2),
            Transition::new(528235200, 3),
            Transition::new(543960000, 2),
            Transition::new(559684800, 3),
            Transition::new(575409600, 2),
            Transition::new(591134400, 3),
            Transition::new(606859200, 2),
            Transition::new(622584000, 3),
            Transition::new(638308800, 2),
            Transition::new(654638400, 3),
            Transition::new(670363200, 4),
            Transition::new(686091600, 1),
            Transition::new(695768400, 3),
            Transition::new(701812800, 2),
            Transition::new(717537600, 3),
            Transition::new(733262400, 2),
            Transition::new(748987200, 3),
            Transition::new(764712000, 2),
            Transition::new(780436800, 3),
            Transition::new(796161600, 2),
            Transition::new(811886400, 3),
            Transition::new(828216000, 2),
            Transition::new(846360000, 3),
            Transition::new(859665600, 2),
            Transition::new(877809600, 3),
            Transition::new(891115200, 2),
            Transition::new(909259200, 3),
            Transition::new(922564800, 2),
            Transition::new(941313600, 3),
            Transition::new(954014400, 2),
            Transition::new(972763200, 3),
            Transition::new(985464000, 2),
            Transition::new(1004212800, 3),
            Transition::new(1017518400, 2),
            Transition::new(1035662400, 3),
            Transition::new(1048968000, 2),
            Transition::new(1067112000, 3),
            Transition::new(1080417600, 2),
            Transition::new(1099166400, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(18468, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_AMMAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1230776624, 2),
            Transition::new(108165600, 1),
            Transition::new(118270800, 2),
            Transition::new(136591200, 1),
            Transition::new(149806800, 2),
            Transition::new(168127200, 1),
            Transition::new(181342800, 2),
            Transition::new(199749600, 1),
            Transition::new(215643600, 2),
            Transition::new(231285600, 1),
            Transition::new(244501200, 2),
            Transition::new(262735200, 1),
            Transition::new(275950800, 2),
            Transition::new(481154400, 1),
            Transition::new(496962000, 2),
            Transition::new(512949600, 1),
            Transition::new(528670800, 2),
            Transition::new(544399200, 1),
            Transition::new(560120400, 2),
            Transition::new(575848800, 1),
            Transition::new(592174800, 2),
            Transition::new(610581600, 1),
            Transition::new(623624400, 2),
            Transition::new(641167200, 1),
            Transition::new(655074000, 2),
            Transition::new(671839200, 1),
            Transition::new(685918800, 2),
            Transition::new(702856800, 1),
            Transition::new(717973200, 2),
            Transition::new(733701600, 1),
            Transition::new(749422800, 2),
            Transition::new(765151200, 1),
            Transition::new(779662800, 2),
            Transition::new(797205600, 1),
            Transition::new(811116000, 2),
            Transition::new(828655200, 1),
            Transition::new(843170400, 2),
            Transition::new(860104800, 1),
            Transition::new(874620000, 2),
            Transition::new(891554400, 1),
            Transition::new(906069600, 2),
            Transition::new(930780000, 1),
            Transition::new(938124000, 2),
            Transition::new(954367200, 1),
            Transition::new(970178400, 2),
            Transition::new(985816800, 1),
            Transition::new(1001628000, 2),
            Transition::new(1017352800, 1),
            Transition::new(1033077600, 2),
            Transition::new(1048802400, 1),
            Transition::new(1066946400, 2),
            Transition::new(1080252000, 1),
            Transition::new(1097791200, 2),
            Transition::new(1112306400, 1),
            Transition::new(1128031200, 2),
            Transition::new(1143756000, 1),
            Transition::new(1161900000, 2),
            Transition::new(1175205600, 1),
            Transition::new(1193349600, 2),
            Transition::new(1206655200, 1),
            Transition::new(1225404000, 2),
            Transition::new(1238104800, 1),
            Transition::new(1256853600, 2),
            Transition::new(1269554400, 1),
            Transition::new(1288303200, 2),
            Transition::new(1301608800, 1),
            Transition::new(1319752800, 2),
            Transition::new(1333058400, 1),
            Transition::new(1387486800, 2),
            Transition::new(1395957600, 1),
            Transition::new(1414706400, 2),
            Transition::new(1427407200, 1),
            Transition::new(1446156000, 2),
            Transition::new(1459461600, 1),
            Transition::new(1477605600, 2),
            Transition::new(1490911200, 1),
            Transition::new(1509055200, 2),
            Transition::new(1522360800, 1),
            Transition::new(1540504800, 2),
            Transition::new(1553810400, 1),
            Transition::new(1571954400, 2),
            Transition::new(1585260000, 1),
            Transition::new(1604008800, 2),
            Transition::new(1616709600, 1),
            Transition::new(1635458400, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(8624, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(2, 5, 4) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    86400,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 5) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_ANADYR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441194596, 1),
            Transition::new(-1247572800, 3),
            Transition::new(354884400, 2),
            Transition::new(370692000, 3),
            Transition::new(386420400, 4),
            Transition::new(402231600, 1),
            Transition::new(417960000, 4),
            Transition::new(433767600, 1),
            Transition::new(449582400, 4),
            Transition::new(465314400, 1),
            Transition::new(481039200, 4),
            Transition::new(496764000, 1),
            Transition::new(512488800, 4),
            Transition::new(528213600, 1),
            Transition::new(543938400, 4),
            Transition::new(559663200, 1),
            Transition::new(575388000, 4),
            Transition::new(591112800, 1),
            Transition::new(606837600, 4),
            Transition::new(622562400, 1),
            Transition::new(638287200, 4),
            Transition::new(654616800, 1),
            Transition::new(670341600, 5),
            Transition::new(686070000, 6),
            Transition::new(695746800, 1),
            Transition::new(701791200, 4),
            Transition::new(717516000, 1),
            Transition::new(733240800, 4),
            Transition::new(748965600, 1),
            Transition::new(764690400, 4),
            Transition::new(780415200, 1),
            Transition::new(796140000, 4),
            Transition::new(811864800, 1),
            Transition::new(828194400, 4),
            Transition::new(846338400, 1),
            Transition::new(859644000, 4),
            Transition::new(877788000, 1),
            Transition::new(891093600, 4),
            Transition::new(909237600, 1),
            Transition::new(922543200, 4),
            Transition::new(941292000, 1),
            Transition::new(953992800, 4),
            Transition::new(972741600, 1),
            Transition::new(985442400, 4),
            Transition::new(1004191200, 1),
            Transition::new(1017496800, 4),
            Transition::new(1035640800, 1),
            Transition::new(1048946400, 4),
            Transition::new(1067090400, 1),
            Transition::new(1080396000, 4),
            Transition::new(1099144800, 1),
            Transition::new(1111845600, 4),
            Transition::new(1130594400, 1),
            Transition::new(1143295200, 4),
            Transition::new(1162044000, 1),
            Transition::new(1174744800, 4),
            Transition::new(1193493600, 1),
            Transition::new(1206799200, 4),
            Transition::new(1224943200, 1),
            Transition::new(1238248800, 4),
            Transition::new(1256392800, 1),
            Transition::new(1269698400, 5),
            Transition::new(1288450800, 6),
            Transition::new(1301151600, 1),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(42596, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(50400, true, Some(b"+14")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, true, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_AQTAU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441164064, 1),
            Transition::new(-1247544000, 2),
            Transition::new(370724400, 3),
            Transition::new(386445600, 4),
            Transition::new(402256800, 2),
            Transition::new(417985200, 4),
            Transition::new(433792800, 2),
            Transition::new(449607600, 4),
            Transition::new(465339600, 2),
            Transition::new(481064400, 4),
            Transition::new(496789200, 2),
            Transition::new(512514000, 4),
            Transition::new(528238800, 2),
            Transition::new(543963600, 4),
            Transition::new(559688400, 2),
            Transition::new(575413200, 4),
            Transition::new(591138000, 2),
            Transition::new(606862800, 4),
            Transition::new(622587600, 2),
            Transition::new(638312400, 4),
            Transition::new(654642000, 2),
            Transition::new(670366800, 5),
            Transition::new(686095200, 1),
            Transition::new(695772000, 2),
            Transition::new(701816400, 4),
            Transition::new(717541200, 2),
            Transition::new(733266000, 4),
            Transition::new(748990800, 2),
            Transition::new(764715600, 4),
            Transition::new(780440400, 1),
            Transition::new(796168800, 5),
            Transition::new(811893600, 1),
            Transition::new(828223200, 5),
            Transition::new(846367200, 1),
            Transition::new(859672800, 5),
            Transition::new(877816800, 1),
            Transition::new(891122400, 5),
            Transition::new(909266400, 1),
            Transition::new(922572000, 5),
            Transition::new(941320800, 1),
            Transition::new(954021600, 5),
            Transition::new(972770400, 1),
            Transition::new(985471200, 5),
            Transition::new(1004220000, 1),
            Transition::new(1017525600, 5),
            Transition::new(1035669600, 1),
            Transition::new(1048975200, 5),
            Transition::new(1067119200, 1),
            Transition::new(1080424800, 5),
            Transition::new(1099173600, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(12064, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_AQTOBE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441165720, 1),
            Transition::new(-1247544000, 2),
            Transition::new(354913200, 3),
            Transition::new(370720800, 4),
            Transition::new(386445600, 3),
            Transition::new(402256800, 2),
            Transition::new(417985200, 3),
            Transition::new(433792800, 2),
            Transition::new(449607600, 3),
            Transition::new(465339600, 2),
            Transition::new(481064400, 3),
            Transition::new(496789200, 2),
            Transition::new(512514000, 3),
            Transition::new(528238800, 2),
            Transition::new(543963600, 3),
            Transition::new(559688400, 2),
            Transition::new(575413200, 3),
            Transition::new(591138000, 2),
            Transition::new(606862800, 3),
            Transition::new(622587600, 2),
            Transition::new(638312400, 3),
            Transition::new(654642000, 2),
            Transition::new(670366800, 5),
            Transition::new(686095200, 1),
            Transition::new(695772000, 2),
            Transition::new(701816400, 3),
            Transition::new(717541200, 2),
            Transition::new(733266000, 3),
            Transition::new(748990800, 2),
            Transition::new(764715600, 3),
            Transition::new(780440400, 2),
            Transition::new(796165200, 3),
            Transition::new(811890000, 2),
            Transition::new(828219600, 3),
            Transition::new(846363600, 2),
            Transition::new(859669200, 3),
            Transition::new(877813200, 2),
            Transition::new(891118800, 3),
            Transition::new(909262800, 2),
            Transition::new(922568400, 3),
            Transition::new(941317200, 2),
            Transition::new(954018000, 3),
            Transition::new(972766800, 2),
            Transition::new(985467600, 3),
            Transition::new(1004216400, 2),
            Transition::new(1017522000, 3),
            Transition::new(1035666000, 2),
            Transition::new(1048971600, 3),
            Transition::new(1067115600, 2),
            Transition::new(1080421200, 3),
            Transition::new(1099170000, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(13720, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_ASHGABAT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441166012, 1),
            Transition::new(-1247544000, 3),
            Transition::new(354913200, 2),
            Transition::new(370720800, 3),
            Transition::new(386449200, 2),
            Transition::new(402256800, 3),
            Transition::new(417985200, 2),
            Transition::new(433792800, 3),
            Transition::new(449607600, 2),
            Transition::new(465339600, 3),
            Transition::new(481064400, 2),
            Transition::new(496789200, 3),
            Transition::new(512514000, 2),
            Transition::new(528238800, 3),
            Transition::new(543963600, 2),
            Transition::new(559688400, 3),
            Transition::new(575413200, 2),
            Transition::new(591138000, 3),
            Transition::new(606862800, 2),
            Transition::new(622587600, 3),
            Transition::new(638312400, 2),
            Transition::new(654642000, 3),
            Transition::new(670366800, 4),
            Transition::new(686095200, 1),
            Transition::new(695772000, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(14012, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_ATYRAU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441164464, 1),
            Transition::new(-1247540400, 2),
            Transition::new(370724400, 3),
            Transition::new(386445600, 4),
            Transition::new(402256800, 2),
            Transition::new(417985200, 4),
            Transition::new(433792800, 2),
            Transition::new(449607600, 4),
            Transition::new(465339600, 2),
            Transition::new(481064400, 4),
            Transition::new(496789200, 2),
            Transition::new(512514000, 4),
            Transition::new(528238800, 2),
            Transition::new(543963600, 4),
            Transition::new(559688400, 2),
            Transition::new(575413200, 4),
            Transition::new(591138000, 2),
            Transition::new(606862800, 4),
            Transition::new(622587600, 2),
            Transition::new(638312400, 4),
            Transition::new(654642000, 2),
            Transition::new(670366800, 5),
            Transition::new(686095200, 6),
            Transition::new(695772000, 2),
            Transition::new(701816400, 4),
            Transition::new(717541200, 2),
            Transition::new(733266000, 4),
            Transition::new(748990800, 2),
            Transition::new(764715600, 4),
            Transition::new(780440400, 2),
            Transition::new(796165200, 4),
            Transition::new(811890000, 2),
            Transition::new(828219600, 4),
            Transition::new(846363600, 2),
            Transition::new(859669200, 4),
            Transition::new(877813200, 2),
            Transition::new(891118800, 4),
            Transition::new(909262800, 2),
            Transition::new(922568400, 5),
            Transition::new(941320800, 6),
            Transition::new(954021600, 5),
            Transition::new(972770400, 6),
            Transition::new(985471200, 5),
            Transition::new(1004220000, 6),
            Transition::new(1017525600, 5),
            Transition::new(1035669600, 6),
            Transition::new(1048975200, 5),
            Transition::new(1067119200, 6),
            Transition::new(1080424800, 5),
            Transition::new(1099173600, 2),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(12464, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_BAGHDAD: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524532260, 1),
            Transition::new(-1641005856, 2),
            Transition::new(389048400, 3),
            Transition::new(402264000, 2),
            Transition::new(417906000, 3),
            Transition::new(433800000, 2),
            Transition::new(449614800, 3),
            Transition::new(465422400, 2),
            Transition::new(481150800, 3),
            Transition::new(496792800, 2),
            Transition::new(512517600, 3),
            Transition::new(528242400, 2),
            Transition::new(543967200, 3),
            Transition::new(559692000, 2),
            Transition::new(575416800, 3),
            Transition::new(591141600, 2),
            Transition::new(606866400, 3),
            Transition::new(622591200, 2),
            Transition::new(638316000, 3),
            Transition::new(654645600, 2),
            Transition::new(670464000, 3),
            Transition::new(686275200, 2),
            Transition::new(702086400, 3),
            Transition::new(717897600, 2),
            Transition::new(733622400, 3),
            Transition::new(749433600, 2),
            Transition::new(765158400, 3),
            Transition::new(780969600, 2),
            Transition::new(796694400, 3),
            Transition::new(812505600, 2),
            Transition::new(828316800, 3),
            Transition::new(844128000, 2),
            Transition::new(859852800, 3),
            Transition::new(875664000, 2),
            Transition::new(891388800, 3),
            Transition::new(907200000, 2),
            Transition::new(922924800, 3),
            Transition::new(938736000, 2),
            Transition::new(954547200, 3),
            Transition::new(970358400, 2),
            Transition::new(986083200, 3),
            Transition::new(1001894400, 2),
            Transition::new(1017619200, 3),
            Transition::new(1033430400, 2),
            Transition::new(1049155200, 3),
            Transition::new(1064966400, 2),
            Transition::new(1080777600, 3),
            Transition::new(1096588800, 2),
            Transition::new(1112313600, 3),
            Transition::new(1128124800, 2),
            Transition::new(1143849600, 3),
            Transition::new(1159660800, 2),
            Transition::new(1175385600, 3),
            Transition::new(1191196800, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(10660, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10656, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_BAHRAIN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-897880940, 1),
            Transition::new(-820553400, 2),
            Transition::new(76190400, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(12140, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(12600, false, Some(b"+0330")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_BAKU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441163964, 1),
            Transition::new(-405140400, 3),
            Transition::new(354916800, 2),
            Transition::new(370724400, 3),
            Transition::new(386452800, 2),
            Transition::new(402260400, 3),
            Transition::new(417988800, 2),
            Transition::new(433796400, 3),
            Transition::new(449611200, 2),
            Transition::new(465343200, 3),
            Transition::new(481068000, 2),
            Transition::new(496792800, 3),
            Transition::new(512517600, 2),
            Transition::new(528242400, 3),
            Transition::new(543967200, 2),
            Transition::new(559692000, 3),
            Transition::new(575416800, 2),
            Transition::new(591141600, 3),
            Transition::new(606866400, 2),
            Transition::new(622591200, 3),
            Transition::new(638316000, 2),
            Transition::new(654645600, 3),
            Transition::new(670370400, 4),
            Transition::new(686098800, 1),
            Transition::new(701823600, 4),
            Transition::new(717548400, 3),
            Transition::new(828234000, 2),
            Transition::new(846378000, 3),
            Transition::new(859680000, 2),
            Transition::new(877824000, 3),
            Transition::new(891129600, 2),
            Transition::new(909273600, 3),
            Transition::new(922579200, 2),
            Transition::new(941328000, 3),
            Transition::new(954028800, 2),
            Transition::new(972777600, 3),
            Transition::new(985478400, 2),
            Transition::new(1004227200, 3),
            Transition::new(1017532800, 2),
            Transition::new(1035676800, 3),
            Transition::new(1048982400, 2),
            Transition::new(1067126400, 3),
            Transition::new(1080432000, 2),
            Transition::new(1099180800, 3),
            Transition::new(1111881600, 2),
            Transition::new(1130630400, 3),
            Transition::new(1143331200, 2),
            Transition::new(1162080000, 3),
            Transition::new(1174780800, 2),
            Transition::new(1193529600, 3),
            Transition::new(1206835200, 2),
            Transition::new(1224979200, 3),
            Transition::new(1238284800, 2),
            Transition::new(1256428800, 3),
            Transition::new(1269734400, 2),
            Transition::new(1288483200, 3),
            Transition::new(1301184000, 2),
            Transition::new(1319932800, 3),
            Transition::new(1332633600, 2),
            Transition::new(1351382400, 3),
            Transition::new(1364688000, 2),
            Transition::new(1382832000, 3),
            Transition::new(1396137600, 2),
            Transition::new(1414281600, 3),
            Transition::new(1427587200, 2),
            Transition::new(1445731200, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(11964, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_BANGKOK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840164924, 1),
            Transition::new(-1570084924, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(24124, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(24124, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_BARNAUL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1579844100, 1),
            Transition::new(-1247551200, 3),
            Transition::new(354906000, 2),
            Transition::new(370713600, 3),
            Transition::new(386442000, 2),
            Transition::new(402249600, 3),
            Transition::new(417978000, 2),
            Transition::new(433785600, 3),
            Transition::new(449600400, 2),
            Transition::new(465332400, 3),
            Transition::new(481057200, 2),
            Transition::new(496782000, 3),
            Transition::new(512506800, 2),
            Transition::new(528231600, 3),
            Transition::new(543956400, 2),
            Transition::new(559681200, 3),
            Transition::new(575406000, 2),
            Transition::new(591130800, 3),
            Transition::new(606855600, 2),
            Transition::new(622580400, 3),
            Transition::new(638305200, 2),
            Transition::new(654634800, 3),
            Transition::new(670359600, 4),
            Transition::new(686088000, 1),
            Transition::new(695764800, 3),
            Transition::new(701809200, 2),
            Transition::new(717534000, 3),
            Transition::new(733258800, 2),
            Transition::new(748983600, 3),
            Transition::new(764708400, 2),
            Transition::new(780433200, 3),
            Transition::new(796158000, 2),
            Transition::new(801590400, 4),
            Transition::new(811886400, 1),
            Transition::new(828216000, 4),
            Transition::new(846360000, 1),
            Transition::new(859665600, 4),
            Transition::new(877809600, 1),
            Transition::new(891115200, 4),
            Transition::new(909259200, 1),
            Transition::new(922564800, 4),
            Transition::new(941313600, 1),
            Transition::new(954014400, 4),
            Transition::new(972763200, 1),
            Transition::new(985464000, 4),
            Transition::new(1004212800, 1),
            Transition::new(1017518400, 4),
            Transition::new(1035662400, 1),
            Transition::new(1048968000, 4),
            Transition::new(1067112000, 1),
            Transition::new(1080417600, 4),
            Transition::new(1099166400, 1),
            Transition::new(1111867200, 4),
            Transition::new(1130616000, 1),
            Transition::new(1143316800, 4),
            Transition::new(1162065600, 1),
            Transition::new(1174766400, 4),
            Transition::new(1193515200, 1),
            Transition::new(1206820800, 4),
            Transition::new(1224964800, 1),
            Transition::new(1238270400, 4),
            Transition::new(1256414400, 1),
            Transition::new(1269720000, 4),
            Transition::new(1288468800, 1),
            Transition::new(1301169600, 3),
            Transition::new(1414263600, 1),
            Transition::new(1459022400, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(20100, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, true, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_BEIRUT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840149320, 2),
            Transition::new(-1570413600, 1),
            Transition::new(-1552186800, 2),
            Transition::new(-1538359200, 1),
            Transition::new(-1522551600, 2),
            Transition::new(-1507514400, 1),
            Transition::new(-1490583600, 2),
            Transition::new(-1473645600, 1),
            Transition::new(-1460948400, 2),
            Transition::new(-399866400, 1),
            Transition::new(-386650800, 2),
            Transition::new(-368330400, 1),
            Transition::new(-355114800, 2),
            Transition::new(-336794400, 1),
            Transition::new(-323578800, 2),
            Transition::new(-305172000, 1),
            Transition::new(-291956400, 2),
            Transition::new(-273636000, 1),
            Transition::new(-260420400, 2),
            Transition::new(78012000, 1),
            Transition::new(86734800, 2),
            Transition::new(105055200, 1),
            Transition::new(118270800, 2),
            Transition::new(136591200, 1),
            Transition::new(149806800, 2),
            Transition::new(168127200, 1),
            Transition::new(181342800, 2),
            Transition::new(199749600, 1),
            Transition::new(212965200, 2),
            Transition::new(231285600, 1),
            Transition::new(244501200, 2),
            Transition::new(262735200, 1),
            Transition::new(275950800, 2),
            Transition::new(452210400, 1),
            Transition::new(466722000, 2),
            Transition::new(483746400, 1),
            Transition::new(498258000, 2),
            Transition::new(515282400, 1),
            Transition::new(529794000, 2),
            Transition::new(546818400, 1),
            Transition::new(561330000, 2),
            Transition::new(581119200, 1),
            Transition::new(592952400, 2),
            Transition::new(610754400, 1),
            Transition::new(624488400, 2),
            Transition::new(641512800, 1),
            Transition::new(656024400, 2),
            Transition::new(673048800, 1),
            Transition::new(687560400, 2),
            Transition::new(704671200, 1),
            Transition::new(718146000, 2),
            Transition::new(733269600, 1),
            Transition::new(748990800, 2),
            Transition::new(764719200, 1),
            Transition::new(780440400, 2),
            Transition::new(796168800, 1),
            Transition::new(811890000, 2),
            Transition::new(828223200, 1),
            Transition::new(843944400, 2),
            Transition::new(859672800, 1),
            Transition::new(875394000, 2),
            Transition::new(891122400, 1),
            Transition::new(906843600, 2),
            Transition::new(922572000, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(8520, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_BISHKEK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441169904, 1),
            Transition::new(-1247547600, 3),
            Transition::new(354909600, 2),
            Transition::new(370717200, 3),
            Transition::new(386445600, 2),
            Transition::new(402253200, 3),
            Transition::new(417981600, 2),
            Transition::new(433789200, 3),
            Transition::new(449604000, 2),
            Transition::new(465336000, 3),
            Transition::new(481060800, 2),
            Transition::new(496785600, 3),
            Transition::new(512510400, 2),
            Transition::new(528235200, 3),
            Transition::new(543960000, 2),
            Transition::new(559684800, 3),
            Transition::new(575409600, 2),
            Transition::new(591134400, 3),
            Transition::new(606859200, 2),
            Transition::new(622584000, 3),
            Transition::new(638308800, 2),
            Transition::new(654638400, 3),
            Transition::new(670363200, 4),
            Transition::new(683582400, 1),
            Transition::new(703018800, 4),
            Transition::new(717530400, 1),
            Transition::new(734468400, 4),
            Transition::new(748980000, 1),
            Transition::new(765918000, 4),
            Transition::new(780429600, 1),
            Transition::new(797367600, 4),
            Transition::new(811879200, 1),
            Transition::new(828817200, 4),
            Transition::new(843933600, 1),
            Transition::new(859671000, 4),
            Transition::new(877811400, 1),
            Transition::new(891120600, 4),
            Transition::new(909261000, 1),
            Transition::new(922570200, 4),
            Transition::new(941315400, 1),
            Transition::new(954019800, 4),
            Transition::new(972765000, 1),
            Transition::new(985469400, 4),
            Transition::new(1004214600, 1),
            Transition::new(1017523800, 4),
            Transition::new(1035664200, 1),
            Transition::new(1048973400, 4),
            Transition::new(1067113800, 1),
            Transition::new(1080423000, 4),
            Transition::new(1099168200, 1),
            Transition::new(1111872600, 4),
            Transition::new(1123783200, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(17904, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_BRUNEI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1383464380, 1),
            Transition::new(-1167636600, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(27580, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(27000, false, Some(b"+0730")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_CALCUTTA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3645237208, 1),
            Transition::new(-3155694800, 2),
            Transition::new(-2019705670, 3),
            Transition::new(-891581400, 4),
            Transition::new(-872058600, 3),
            Transition::new(-862637400, 4),
            Transition::new(-764145000, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(21208, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21200, false, Some(b"HMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(19270, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(19800, false, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(23400, true, Some(b"+0630")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(19800, false, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_CHITA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1579419232, 1),
            Transition::new(-1247558400, 3),
            Transition::new(354898800, 2),
            Transition::new(370706400, 3),
            Transition::new(386434800, 2),
            Transition::new(402242400, 3),
            Transition::new(417970800, 2),
            Transition::new(433778400, 3),
            Transition::new(449593200, 2),
            Transition::new(465325200, 3),
            Transition::new(481050000, 2),
            Transition::new(496774800, 3),
            Transition::new(512499600, 2),
            Transition::new(528224400, 3),
            Transition::new(543949200, 2),
            Transition::new(559674000, 3),
            Transition::new(575398800, 2),
            Transition::new(591123600, 3),
            Transition::new(606848400, 2),
            Transition::new(622573200, 3),
            Transition::new(638298000, 2),
            Transition::new(654627600, 3),
            Transition::new(670352400, 4),
            Transition::new(686080800, 1),
            Transition::new(695757600, 3),
            Transition::new(701802000, 2),
            Transition::new(717526800, 3),
            Transition::new(733251600, 2),
            Transition::new(748976400, 3),
            Transition::new(764701200, 2),
            Transition::new(780426000, 3),
            Transition::new(796150800, 2),
            Transition::new(811875600, 3),
            Transition::new(828205200, 2),
            Transition::new(846349200, 3),
            Transition::new(859654800, 2),
            Transition::new(877798800, 3),
            Transition::new(891104400, 2),
            Transition::new(909248400, 3),
            Transition::new(922554000, 2),
            Transition::new(941302800, 3),
            Transition::new(954003600, 2),
            Transition::new(972752400, 3),
            Transition::new(985453200, 2),
            Transition::new(1004202000, 3),
            Transition::new(1017507600, 2),
            Transition::new(1035651600, 3),
            Transition::new(1048957200, 2),
            Transition::new(1067101200, 3),
            Transition::new(1080406800, 2),
            Transition::new(1099155600, 3),
            Transition::new(1111856400, 2),
            Transition::new(1130605200, 3),
            Transition::new(1143306000, 2),
            Transition::new(1162054800, 3),
            Transition::new(1174755600, 2),
            Transition::new(1193504400, 3),
            Transition::new(1206810000, 2),
            Transition::new(1224954000, 3),
            Transition::new(1238259600, 2),
            Transition::new(1256403600, 3),
            Transition::new(1269709200, 2),
            Transition::new(1288458000, 3),
            Transition::new(1301158800, 5),
            Transition::new(1414252800, 1),
            Transition::new(1459015200, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(27232, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, true, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_CHOIBALSAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2032933080, 1),
            Transition::new(252435600, 2),
            Transition::new(417974400, 4),
            Transition::new(433778400, 3),
            Transition::new(449593200, 4),
            Transition::new(465314400, 3),
            Transition::new(481042800, 4),
            Transition::new(496764000, 3),
            Transition::new(512492400, 4),
            Transition::new(528213600, 3),
            Transition::new(543942000, 4),
            Transition::new(559663200, 3),
            Transition::new(575391600, 4),
            Transition::new(591112800, 3),
            Transition::new(606841200, 4),
            Transition::new(622562400, 3),
            Transition::new(638290800, 4),
            Transition::new(654616800, 3),
            Transition::new(670345200, 4),
            Transition::new(686066400, 3),
            Transition::new(701794800, 4),
            Transition::new(717516000, 3),
            Transition::new(733244400, 4),
            Transition::new(748965600, 3),
            Transition::new(764694000, 4),
            Transition::new(780415200, 3),
            Transition::new(796143600, 4),
            Transition::new(811864800, 3),
            Transition::new(828198000, 4),
            Transition::new(843919200, 3),
            Transition::new(859647600, 4),
            Transition::new(875368800, 3),
            Transition::new(891097200, 4),
            Transition::new(906818400, 3),
            Transition::new(988390800, 4),
            Transition::new(1001692800, 3),
            Transition::new(1017421200, 4),
            Transition::new(1033142400, 3),
            Transition::new(1048870800, 4),
            Transition::new(1064592000, 3),
            Transition::new(1080320400, 4),
            Transition::new(1096041600, 3),
            Transition::new(1111770000, 4),
            Transition::new(1127491200, 3),
            Transition::new(1143219600, 4),
            Transition::new(1159545600, 3),
            Transition::new(1206889200, 2),
            Transition::new(1427479200, 5),
            Transition::new(1443193200, 2),
            Transition::new(1458928800, 5),
            Transition::new(1474642800, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(27480, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, true, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_CHONGQING: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1325487980, 1),
            Transition::new(325962000, 3),
            Transition::new(515527200, 2),
            Transition::new(527014800, 3),
            Transition::new(545162400, 2),
            Transition::new(558464400, 3),
            Transition::new(577216800, 2),
            Transition::new(589914000, 3),
            Transition::new(608666400, 2),
            Transition::new(621968400, 3),
            Transition::new(640116000, 2),
            Transition::new(653418000, 3),
            Transition::new(671565600, 2),
            Transition::new(684867600, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(25580, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_COLOMBO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840159964, 1),
            Transition::new(-2019705572, 2),
            Transition::new(-883287000, 3),
            Transition::new(-862639200, 4),
            Transition::new(-764051400, 2),
            Transition::new(832962600, 5),
            Transition::new(846266400, 6),
            Transition::new(1145039400, 2),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(19164, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(19172, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(19800, false, Some(b"+0530")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(23400, true, Some(b"+0630")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(23400, false, Some(b"+0630")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(19800, false, Some(b"+0530")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_DACCA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524543300, 1),
            Transition::new(-891582800, 2),
            Transition::new(-872058600, 3),
            Transition::new(-862637400, 2),
            Transition::new(-576138600, 4),
            Transition::new(1245430800, 5),
            Transition::new(1262278800, 4),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(21700, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21200, false, Some(b"HMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(23400, false, Some(b"+0630")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(19800, false, Some(b"+0530")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_DAMASCUS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1577931912, 2),
            Transition::new(-1568592000, 1),
            Transition::new(-1554080400, 2),
            Transition::new(-1537142400, 1),
            Transition::new(-1522630800, 2),
            Transition::new(-1505692800, 1),
            Transition::new(-1491181200, 2),
            Transition::new(-1474243200, 1),
            Transition::new(-1459126800, 2),
            Transition::new(-242265600, 1),
            Transition::new(-228877200, 2),
            Transition::new(-210556800, 1),
            Transition::new(-197427600, 2),
            Transition::new(-178934400, 1),
            Transition::new(-165718800, 2),
            Transition::new(-147398400, 1),
            Transition::new(-134269200, 2),
            Transition::new(-116467200, 1),
            Transition::new(-102646800, 2),
            Transition::new(-84326400, 1),
            Transition::new(-71110800, 2),
            Transition::new(-52704000, 1),
            Transition::new(-39488400, 2),
            Transition::new(-21168000, 1),
            Transition::new(-7952400, 2),
            Transition::new(10368000, 1),
            Transition::new(23583600, 2),
            Transition::new(41904000, 1),
            Transition::new(55119600, 2),
            Transition::new(73526400, 1),
            Transition::new(86742000, 2),
            Transition::new(105062400, 1),
            Transition::new(118278000, 2),
            Transition::new(136598400, 1),
            Transition::new(149814000, 2),
            Transition::new(168134400, 1),
            Transition::new(181350000, 2),
            Transition::new(199756800, 1),
            Transition::new(212972400, 2),
            Transition::new(231292800, 1),
            Transition::new(241916400, 2),
            Transition::new(262828800, 1),
            Transition::new(273452400, 2),
            Transition::new(418694400, 1),
            Transition::new(433810800, 2),
            Transition::new(450316800, 1),
            Transition::new(465433200, 2),
            Transition::new(508896000, 1),
            Transition::new(529196400, 2),
            Transition::new(541555200, 1),
            Transition::new(562633200, 2),
            Transition::new(574387200, 1),
            Transition::new(594255600, 2),
            Transition::new(607305600, 1),
            Transition::new(623199600, 2),
            Transition::new(638928000, 1),
            Transition::new(654649200, 2),
            Transition::new(670456800, 1),
            Transition::new(686264400, 2),
            Transition::new(702684000, 1),
            Transition::new(717886800, 2),
            Transition::new(733096800, 1),
            Transition::new(748904400, 2),
            Transition::new(765151200, 1),
            Transition::new(780958800, 2),
            Transition::new(796687200, 1),
            Transition::new(812494800, 2),
            Transition::new(828309600, 1),
            Transition::new(844117200, 2),
            Transition::new(859759200, 1),
            Transition::new(875653200, 2),
            Transition::new(891208800, 1),
            Transition::new(907189200, 2),
            Transition::new(922917600, 1),
            Transition::new(938725200, 2),
            Transition::new(954540000, 1),
            Transition::new(970347600, 2),
            Transition::new(986076000, 1),
            Transition::new(1001883600, 2),
            Transition::new(1017612000, 1),
            Transition::new(1033419600, 2),
            Transition::new(1049148000, 1),
            Transition::new(1064955600, 2),
            Transition::new(1080770400, 1),
            Transition::new(1096578000, 2),
            Transition::new(1112306400, 1),
            Transition::new(1128114000, 2),
            Transition::new(1143842400, 1),
            Transition::new(1158872400, 2),
            Transition::new(1175205600, 1),
            Transition::new(1193950800, 2),
            Transition::new(1207260000, 1),
            Transition::new(1225486800, 2),
            Transition::new(1238104800, 1),
            Transition::new(1256850000, 2),
            Transition::new(1270159200, 1),
            Transition::new(1288299600, 2),
            Transition::new(1301608800, 1),
            Transition::new(1319749200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(8712, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 5) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 5) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_DILI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830414140, 1),
            Transition::new(-879152400, 2),
            Transition::new(199897200, 1),
            Transition::new(969120000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(30140, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_DUBAI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1577936472, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(13272, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_DUSHANBE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441168512, 1),
            Transition::new(-1247547600, 3),
            Transition::new(354909600, 2),
            Transition::new(370717200, 3),
            Transition::new(386445600, 2),
            Transition::new(402253200, 3),
            Transition::new(417981600, 2),
            Transition::new(433789200, 3),
            Transition::new(449604000, 2),
            Transition::new(465336000, 3),
            Transition::new(481060800, 2),
            Transition::new(496785600, 3),
            Transition::new(512510400, 2),
            Transition::new(528235200, 3),
            Transition::new(543960000, 2),
            Transition::new(559684800, 3),
            Transition::new(575409600, 2),
            Transition::new(591134400, 3),
            Transition::new(606859200, 2),
            Transition::new(622584000, 3),
            Transition::new(638308800, 2),
            Transition::new(654638400, 3),
            Transition::new(670363200, 4),
            Transition::new(684363600, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(16512, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_FAMAGUSTA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1518920148, 2),
            Transition::new(166572000, 1),
            Transition::new(182293200, 2),
            Transition::new(200959200, 1),
            Transition::new(213829200, 2),
            Transition::new(228866400, 1),
            Transition::new(243982800, 2),
            Transition::new(260316000, 1),
            Transition::new(276123600, 2),
            Transition::new(291765600, 1),
            Transition::new(307486800, 2),
            Transition::new(323820000, 1),
            Transition::new(338936400, 2),
            Transition::new(354664800, 1),
            Transition::new(370386000, 2),
            Transition::new(386114400, 1),
            Transition::new(401835600, 2),
            Transition::new(417564000, 1),
            Transition::new(433285200, 2),
            Transition::new(449013600, 1),
            Transition::new(465339600, 2),
            Transition::new(481068000, 1),
            Transition::new(496789200, 2),
            Transition::new(512517600, 1),
            Transition::new(528238800, 2),
            Transition::new(543967200, 1),
            Transition::new(559688400, 2),
            Transition::new(575416800, 1),
            Transition::new(591138000, 2),
            Transition::new(606866400, 1),
            Transition::new(622587600, 2),
            Transition::new(638316000, 1),
            Transition::new(654642000, 2),
            Transition::new(670370400, 1),
            Transition::new(686091600, 2),
            Transition::new(701820000, 1),
            Transition::new(717541200, 2),
            Transition::new(733269600, 1),
            Transition::new(748990800, 2),
            Transition::new(764719200, 1),
            Transition::new(780440400, 2),
            Transition::new(796168800, 1),
            Transition::new(811890000, 2),
            Transition::new(828223200, 1),
            Transition::new(843944400, 2),
            Transition::new(859672800, 1),
            Transition::new(875394000, 2),
            Transition::new(891122400, 1),
            Transition::new(909277200, 2),
            Transition::new(922582800, 1),
            Transition::new(941331600, 2),
            Transition::new(954032400, 1),
            Transition::new(972781200, 2),
            Transition::new(985482000, 1),
            Transition::new(1004230800, 2),
            Transition::new(1017536400, 1),
            Transition::new(1035680400, 2),
            Transition::new(1048986000, 1),
            Transition::new(1067130000, 2),
            Transition::new(1080435600, 1),
            Transition::new(1099184400, 2),
            Transition::new(1111885200, 1),
            Transition::new(1130634000, 2),
            Transition::new(1143334800, 1),
            Transition::new(1162083600, 2),
            Transition::new(1174784400, 1),
            Transition::new(1193533200, 2),
            Transition::new(1206838800, 1),
            Transition::new(1224982800, 2),
            Transition::new(1238288400, 1),
            Transition::new(1256432400, 2),
            Transition::new(1269738000, 1),
            Transition::new(1288486800, 2),
            Transition::new(1301187600, 1),
            Transition::new(1319936400, 2),
            Transition::new(1332637200, 1),
            Transition::new(1351386000, 2),
            Transition::new(1364691600, 1),
            Transition::new(1382835600, 2),
            Transition::new(1396141200, 1),
            Transition::new(1414285200, 2),
            Transition::new(1427590800, 1),
            Transition::new(1445734800, 2),
            Transition::new(1459040400, 1),
            Transition::new(1473282000, 3),
            Transition::new(1509238800, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(8148, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_GAZA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2185409872, 2),
            Transition::new(-933638400, 1),
            Transition::new(-923097600, 2),
            Transition::new(-919036800, 1),
            Transition::new(-857347200, 2),
            Transition::new(-844300800, 1),
            Transition::new(-825811200, 2),
            Transition::new(-812678400, 1),
            Transition::new(-794188800, 2),
            Transition::new(-779846400, 1),
            Transition::new(-762652800, 2),
            Transition::new(-748310400, 1),
            Transition::new(-731116800, 2),
            Transition::new(-399088800, 1),
            Transition::new(-386650800, 2),
            Transition::new(-368330400, 1),
            Transition::new(-355114800, 2),
            Transition::new(-336790800, 1),
            Transition::new(-323654400, 2),
            Transition::new(-305168400, 1),
            Transition::new(-292032000, 2),
            Transition::new(-273632400, 1),
            Transition::new(-260496000, 2),
            Transition::new(-242096400, 1),
            Transition::new(-228960000, 2),
            Transition::new(-210560400, 1),
            Transition::new(-197424000, 2),
            Transition::new(-178938000, 1),
            Transition::new(-165801600, 2),
            Transition::new(-147402000, 1),
            Transition::new(-134265600, 2),
            Transition::new(-115866000, 1),
            Transition::new(-102643200, 2),
            Transition::new(-84330000, 1),
            Transition::new(-81313200, 4),
            Transition::new(142380000, 3),
            Transition::new(150843600, 4),
            Transition::new(167176800, 3),
            Transition::new(178664400, 4),
            Transition::new(334101600, 3),
            Transition::new(337730400, 4),
            Transition::new(452642400, 3),
            Transition::new(462319200, 4),
            Transition::new(482277600, 3),
            Transition::new(494370000, 4),
            Transition::new(516751200, 3),
            Transition::new(526424400, 4),
            Transition::new(545436000, 3),
            Transition::new(558478800, 4),
            Transition::new(576626400, 3),
            Transition::new(589323600, 4),
            Transition::new(609890400, 3),
            Transition::new(620773200, 4),
            Transition::new(638316000, 3),
            Transition::new(651618000, 4),
            Transition::new(669765600, 3),
            Transition::new(683672400, 4),
            Transition::new(701820000, 3),
            Transition::new(715726800, 4),
            Transition::new(733701600, 3),
            Transition::new(747176400, 4),
            Transition::new(765151200, 3),
            Transition::new(778021200, 4),
            Transition::new(796600800, 3),
            Transition::new(810075600, 4),
            Transition::new(820447200, 2),
            Transition::new(828655200, 1),
            Transition::new(843170400, 2),
            Transition::new(860104800, 1),
            Transition::new(874620000, 2),
            Transition::new(891554400, 1),
            Transition::new(906069600, 2),
            Transition::new(924213600, 1),
            Transition::new(939934800, 2),
            Transition::new(956268000, 1),
            Transition::new(971989200, 2),
            Transition::new(987717600, 1),
            Transition::new(1003438800, 2),
            Transition::new(1019167200, 1),
            Transition::new(1034888400, 2),
            Transition::new(1050616800, 1),
            Transition::new(1066338000, 2),
            Transition::new(1082066400, 1),
            Transition::new(1096581600, 2),
            Transition::new(1113516000, 1),
            Transition::new(1128380400, 2),
            Transition::new(1143842400, 1),
            Transition::new(1158872400, 2),
            Transition::new(1175378400, 1),
            Transition::new(1189638000, 2),
            Transition::new(1206655200, 1),
            Transition::new(1219957200, 2),
            Transition::new(1238104800, 1),
            Transition::new(1252015200, 2),
            Transition::new(1269640860, 1),
            Transition::new(1281474000, 2),
            Transition::new(1301608860, 1),
            Transition::new(1312146000, 2),
            Transition::new(1333058400, 1),
            Transition::new(1348178400, 2),
            Transition::new(1364508000, 1),
            Transition::new(1380229200, 2),
            Transition::new(1395957600, 1),
            Transition::new(1414098000, 2),
            Transition::new(1427493600, 1),
            Transition::new(1445551200, 2),
            Transition::new(1458946800, 1),
            Transition::new(1477692000, 2),
            Transition::new(1490396400, 1),
            Transition::new(1509141600, 2),
            Transition::new(1521846000, 1),
            Transition::new(1540591200, 2),
            Transition::new(1553810400, 1),
            Transition::new(1572037200, 2),
            Transition::new(1585346400, 1),
            Transition::new(1603490400, 2),
            Transition::new(1616796000, 1),
            Transition::new(1635458400, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(8272, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"IDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 4, 4) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    259200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 4, 4) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    90000,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_HANOI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2004073404, 1),
            Transition::new(-1851577590, 2),
            Transition::new(-852105600, 3),
            Transition::new(-782643600, 4),
            Transition::new(-767869200, 2),
            Transition::new(-718095600, 3),
            Transition::new(-481363200, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(25404, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25590, false, Some(b"PLMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_HARBIN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1325492804, 1),
            Transition::new(-1194078600, 2),
            Transition::new(-946800000, 3),
            Transition::new(-115894800, 1),
            Transition::new(325956600, 2),
            Transition::new(515527200, 4),
            Transition::new(527014800, 2),
            Transition::new(545162400, 4),
            Transition::new(558464400, 2),
            Transition::new(577216800, 4),
            Transition::new(589914000, 2),
            Transition::new(608666400, 4),
            Transition::new(621968400, 2),
            Transition::new(640116000, 4),
            Transition::new(653418000, 2),
            Transition::new(671565600, 4),
            Transition::new(684867600, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(30404, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(30600, false, Some(b"+0830")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_HEBRON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2185410023, 2),
            Transition::new(-933638400, 1),
            Transition::new(-923097600, 2),
            Transition::new(-919036800, 1),
            Transition::new(-857347200, 2),
            Transition::new(-844300800, 1),
            Transition::new(-825811200, 2),
            Transition::new(-812678400, 1),
            Transition::new(-794188800, 2),
            Transition::new(-779846400, 1),
            Transition::new(-762652800, 2),
            Transition::new(-748310400, 1),
            Transition::new(-731116800, 2),
            Transition::new(-399088800, 1),
            Transition::new(-386650800, 2),
            Transition::new(-368330400, 1),
            Transition::new(-355114800, 2),
            Transition::new(-336790800, 1),
            Transition::new(-323654400, 2),
            Transition::new(-305168400, 1),
            Transition::new(-292032000, 2),
            Transition::new(-273632400, 1),
            Transition::new(-260496000, 2),
            Transition::new(-242096400, 1),
            Transition::new(-228960000, 2),
            Transition::new(-210560400, 1),
            Transition::new(-197424000, 2),
            Transition::new(-178938000, 1),
            Transition::new(-165801600, 2),
            Transition::new(-147402000, 1),
            Transition::new(-134265600, 2),
            Transition::new(-115866000, 1),
            Transition::new(-102643200, 2),
            Transition::new(-84330000, 1),
            Transition::new(-81313200, 4),
            Transition::new(142380000, 3),
            Transition::new(150843600, 4),
            Transition::new(167176800, 3),
            Transition::new(178664400, 4),
            Transition::new(334101600, 3),
            Transition::new(337730400, 4),
            Transition::new(452642400, 3),
            Transition::new(462319200, 4),
            Transition::new(482277600, 3),
            Transition::new(494370000, 4),
            Transition::new(516751200, 3),
            Transition::new(526424400, 4),
            Transition::new(545436000, 3),
            Transition::new(558478800, 4),
            Transition::new(576626400, 3),
            Transition::new(589323600, 4),
            Transition::new(609890400, 3),
            Transition::new(620773200, 4),
            Transition::new(638316000, 3),
            Transition::new(651618000, 4),
            Transition::new(669765600, 3),
            Transition::new(683672400, 4),
            Transition::new(701820000, 3),
            Transition::new(715726800, 4),
            Transition::new(733701600, 3),
            Transition::new(747176400, 4),
            Transition::new(765151200, 3),
            Transition::new(778021200, 4),
            Transition::new(796600800, 3),
            Transition::new(810075600, 4),
            Transition::new(820447200, 2),
            Transition::new(828655200, 1),
            Transition::new(843170400, 2),
            Transition::new(860104800, 1),
            Transition::new(874620000, 2),
            Transition::new(891554400, 1),
            Transition::new(906069600, 2),
            Transition::new(924213600, 1),
            Transition::new(939934800, 2),
            Transition::new(956268000, 1),
            Transition::new(971989200, 2),
            Transition::new(987717600, 1),
            Transition::new(1003438800, 2),
            Transition::new(1019167200, 1),
            Transition::new(1034888400, 2),
            Transition::new(1050616800, 1),
            Transition::new(1066338000, 2),
            Transition::new(1082066400, 1),
            Transition::new(1096581600, 2),
            Transition::new(1113516000, 1),
            Transition::new(1128380400, 2),
            Transition::new(1143842400, 1),
            Transition::new(1158872400, 2),
            Transition::new(1175378400, 1),
            Transition::new(1189638000, 2),
            Transition::new(1206655200, 1),
            Transition::new(1220216400, 2),
            Transition::new(1238104800, 1),
            Transition::new(1252015200, 2),
            Transition::new(1269554400, 1),
            Transition::new(1281474000, 2),
            Transition::new(1301608860, 1),
            Transition::new(1312146000, 2),
            Transition::new(1314655200, 1),
            Transition::new(1317330000, 2),
            Transition::new(1333058400, 1),
            Transition::new(1348178400, 2),
            Transition::new(1364508000, 1),
            Transition::new(1380229200, 2),
            Transition::new(1395957600, 1),
            Transition::new(1414098000, 2),
            Transition::new(1427493600, 1),
            Transition::new(1445551200, 2),
            Transition::new(1458946800, 1),
            Transition::new(1477692000, 2),
            Transition::new(1490396400, 1),
            Transition::new(1509141600, 2),
            Transition::new(1521846000, 1),
            Transition::new(1540591200, 2),
            Transition::new(1553810400, 1),
            Transition::new(1572037200, 2),
            Transition::new(1585346400, 1),
            Transition::new(1603490400, 2),
            Transition::new(1616796000, 1),
            Transition::new(1635458400, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(8423, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"IDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 4, 4) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    259200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 4, 4) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    90000,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_HOVD: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2032927596, 1),
            Transition::new(252439200, 3),
            Transition::new(417978000, 2),
            Transition::new(433785600, 3),
            Transition::new(449600400, 2),
            Transition::new(465321600, 3),
            Transition::new(481050000, 2),
            Transition::new(496771200, 3),
            Transition::new(512499600, 2),
            Transition::new(528220800, 3),
            Transition::new(543949200, 2),
            Transition::new(559670400, 3),
            Transition::new(575398800, 2),
            Transition::new(591120000, 3),
            Transition::new(606848400, 2),
            Transition::new(622569600, 3),
            Transition::new(638298000, 2),
            Transition::new(654624000, 3),
            Transition::new(670352400, 2),
            Transition::new(686073600, 3),
            Transition::new(701802000, 2),
            Transition::new(717523200, 3),
            Transition::new(733251600, 2),
            Transition::new(748972800, 3),
            Transition::new(764701200, 2),
            Transition::new(780422400, 3),
            Transition::new(796150800, 2),
            Transition::new(811872000, 3),
            Transition::new(828205200, 2),
            Transition::new(843926400, 3),
            Transition::new(859654800, 2),
            Transition::new(875376000, 3),
            Transition::new(891104400, 2),
            Transition::new(906825600, 3),
            Transition::new(988398000, 2),
            Transition::new(1001700000, 3),
            Transition::new(1017428400, 2),
            Transition::new(1033149600, 3),
            Transition::new(1048878000, 2),
            Transition::new(1064599200, 3),
            Transition::new(1080327600, 2),
            Transition::new(1096048800, 3),
            Transition::new(1111777200, 2),
            Transition::new(1127498400, 3),
            Transition::new(1143226800, 2),
            Transition::new(1159552800, 3),
            Transition::new(1427482800, 2),
            Transition::new(1443196800, 3),
            Transition::new(1458932400, 2),
            Transition::new(1474646400, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(21996, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, true, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_HO_CHI_MINH: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2004073600, 1),
            Transition::new(-1851577590, 2),
            Transition::new(-852105600, 3),
            Transition::new(-782643600, 4),
            Transition::new(-767869200, 2),
            Transition::new(-718095600, 3),
            Transition::new(-457776000, 2),
            Transition::new(-315648000, 3),
            Transition::new(171820800, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(25600, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25590, false, Some(b"PLMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_IRKUTSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840165825, 1),
            Transition::new(-1575874625, 2),
            Transition::new(-1247554800, 4),
            Transition::new(354902400, 3),
            Transition::new(370710000, 4),
            Transition::new(386438400, 3),
            Transition::new(402246000, 4),
            Transition::new(417974400, 3),
            Transition::new(433782000, 4),
            Transition::new(449596800, 3),
            Transition::new(465328800, 4),
            Transition::new(481053600, 3),
            Transition::new(496778400, 4),
            Transition::new(512503200, 3),
            Transition::new(528228000, 4),
            Transition::new(543952800, 3),
            Transition::new(559677600, 4),
            Transition::new(575402400, 3),
            Transition::new(591127200, 4),
            Transition::new(606852000, 3),
            Transition::new(622576800, 4),
            Transition::new(638301600, 3),
            Transition::new(654631200, 4),
            Transition::new(670356000, 5),
            Transition::new(686084400, 2),
            Transition::new(695761200, 4),
            Transition::new(701805600, 3),
            Transition::new(717530400, 4),
            Transition::new(733255200, 3),
            Transition::new(748980000, 4),
            Transition::new(764704800, 3),
            Transition::new(780429600, 4),
            Transition::new(796154400, 3),
            Transition::new(811879200, 4),
            Transition::new(828208800, 3),
            Transition::new(846352800, 4),
            Transition::new(859658400, 3),
            Transition::new(877802400, 4),
            Transition::new(891108000, 3),
            Transition::new(909252000, 4),
            Transition::new(922557600, 3),
            Transition::new(941306400, 4),
            Transition::new(954007200, 3),
            Transition::new(972756000, 4),
            Transition::new(985456800, 3),
            Transition::new(1004205600, 4),
            Transition::new(1017511200, 3),
            Transition::new(1035655200, 4),
            Transition::new(1048960800, 3),
            Transition::new(1067104800, 4),
            Transition::new(1080410400, 3),
            Transition::new(1099159200, 4),
            Transition::new(1111860000, 3),
            Transition::new(1130608800, 4),
            Transition::new(1143309600, 3),
            Transition::new(1162058400, 4),
            Transition::new(1174759200, 3),
            Transition::new(1193508000, 4),
            Transition::new(1206813600, 3),
            Transition::new(1224957600, 4),
            Transition::new(1238263200, 3),
            Transition::new(1256407200, 4),
            Transition::new(1269712800, 3),
            Transition::new(1288461600, 4),
            Transition::new(1301162400, 6),
            Transition::new(1414256400, 4),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(25025, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25025, false, Some(b"IMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, true, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_JAKARTA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3231299232, 1),
            Transition::new(-1451719200, 2),
            Transition::new(-1172906400, 3),
            Transition::new(-876641400, 4),
            Transition::new(-766054800, 3),
            Transition::new(-683883000, 5),
            Transition::new(-620812800, 3),
            Transition::new(-189415800, 6),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(25632, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25632, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(26400, false, Some(b"+0720")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(27000, false, Some(b"+0730")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"WIB")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"WIB")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_JAYAPURA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1172913768, 1),
            Transition::new(-799491600, 2),
            Transition::new(-189423000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(33768, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(34200, false, Some(b"+0930")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"WIT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"WIT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KABUL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524538208, 1),
            Transition::new(-788932800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(16608, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(16200, false, Some(b"+0430")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(16200, false, Some(b"+0430")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KAMCHATKA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1487759676, 1),
            Transition::new(-1247569200, 3),
            Transition::new(354888000, 2),
            Transition::new(370695600, 3),
            Transition::new(386424000, 2),
            Transition::new(402231600, 3),
            Transition::new(417960000, 2),
            Transition::new(433767600, 3),
            Transition::new(449582400, 2),
            Transition::new(465314400, 3),
            Transition::new(481039200, 2),
            Transition::new(496764000, 3),
            Transition::new(512488800, 2),
            Transition::new(528213600, 3),
            Transition::new(543938400, 2),
            Transition::new(559663200, 3),
            Transition::new(575388000, 2),
            Transition::new(591112800, 3),
            Transition::new(606837600, 2),
            Transition::new(622562400, 3),
            Transition::new(638287200, 2),
            Transition::new(654616800, 3),
            Transition::new(670341600, 4),
            Transition::new(686070000, 1),
            Transition::new(695746800, 3),
            Transition::new(701791200, 2),
            Transition::new(717516000, 3),
            Transition::new(733240800, 2),
            Transition::new(748965600, 3),
            Transition::new(764690400, 2),
            Transition::new(780415200, 3),
            Transition::new(796140000, 2),
            Transition::new(811864800, 3),
            Transition::new(828194400, 2),
            Transition::new(846338400, 3),
            Transition::new(859644000, 2),
            Transition::new(877788000, 3),
            Transition::new(891093600, 2),
            Transition::new(909237600, 3),
            Transition::new(922543200, 2),
            Transition::new(941292000, 3),
            Transition::new(953992800, 2),
            Transition::new(972741600, 3),
            Transition::new(985442400, 2),
            Transition::new(1004191200, 3),
            Transition::new(1017496800, 2),
            Transition::new(1035640800, 3),
            Transition::new(1048946400, 2),
            Transition::new(1067090400, 3),
            Transition::new(1080396000, 2),
            Transition::new(1099144800, 3),
            Transition::new(1111845600, 2),
            Transition::new(1130594400, 3),
            Transition::new(1143295200, 2),
            Transition::new(1162044000, 3),
            Transition::new(1174744800, 2),
            Transition::new(1193493600, 3),
            Transition::new(1206799200, 2),
            Transition::new(1224943200, 3),
            Transition::new(1238248800, 2),
            Transition::new(1256392800, 3),
            Transition::new(1269698400, 4),
            Transition::new(1288450800, 1),
            Transition::new(1301151600, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(38076, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, true, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KARACHI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1988166492, 1),
            Transition::new(-862637400, 2),
            Transition::new(-764145000, 1),
            Transition::new(-576135000, 3),
            Transition::new(38775600, 5),
            Transition::new(1018119600, 4),
            Transition::new(1033840800, 5),
            Transition::new(1212260400, 4),
            Transition::new(1225476000, 5),
            Transition::new(1239735600, 4),
            Transition::new(1257012000, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(16092, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(19800, false, Some(b"+0530")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(23400, true, Some(b"+0630")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"PKST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"PKT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"PKT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KASHGAR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1325480636, 1),
            Transition::new(-946791000, 2),
            Transition::new(325969200, 4),
            Transition::new(515527200, 3),
            Transition::new(527014800, 4),
            Transition::new(545162400, 3),
            Transition::new(558464400, 4),
            Transition::new(577216800, 3),
            Transition::new(589914000, 4),
            Transition::new(608666400, 3),
            Transition::new(621968400, 4),
            Transition::new(640116000, 3),
            Transition::new(653418000, 4),
            Transition::new(671565600, 3),
            Transition::new(684867600, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(18236, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(19800, false, Some(b"+0530")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KATHMANDU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1577943676, 1),
            Transition::new(504901800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(20476, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(19800, false, Some(b"+0530")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(20700, false, Some(b"+0545")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(20700, false, Some(b"+0545")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KHANDYGA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1579424533, 1),
            Transition::new(-1247558400, 3),
            Transition::new(354898800, 2),
            Transition::new(370706400, 3),
            Transition::new(386434800, 2),
            Transition::new(402242400, 3),
            Transition::new(417970800, 2),
            Transition::new(433778400, 3),
            Transition::new(449593200, 2),
            Transition::new(465325200, 3),
            Transition::new(481050000, 2),
            Transition::new(496774800, 3),
            Transition::new(512499600, 2),
            Transition::new(528224400, 3),
            Transition::new(543949200, 2),
            Transition::new(559674000, 3),
            Transition::new(575398800, 2),
            Transition::new(591123600, 3),
            Transition::new(606848400, 2),
            Transition::new(622573200, 3),
            Transition::new(638298000, 2),
            Transition::new(654627600, 3),
            Transition::new(670352400, 4),
            Transition::new(686080800, 1),
            Transition::new(695757600, 3),
            Transition::new(701802000, 2),
            Transition::new(717526800, 3),
            Transition::new(733251600, 2),
            Transition::new(748976400, 3),
            Transition::new(764701200, 2),
            Transition::new(780426000, 3),
            Transition::new(796150800, 2),
            Transition::new(811875600, 3),
            Transition::new(828205200, 2),
            Transition::new(846349200, 3),
            Transition::new(859654800, 2),
            Transition::new(877798800, 3),
            Transition::new(891104400, 2),
            Transition::new(909248400, 3),
            Transition::new(922554000, 2),
            Transition::new(941302800, 3),
            Transition::new(954003600, 2),
            Transition::new(972752400, 3),
            Transition::new(985453200, 2),
            Transition::new(1004202000, 3),
            Transition::new(1017507600, 2),
            Transition::new(1035651600, 3),
            Transition::new(1048957200, 2),
            Transition::new(1067101200, 3),
            Transition::new(1072882800, 6),
            Transition::new(1080403200, 5),
            Transition::new(1099152000, 6),
            Transition::new(1111852800, 5),
            Transition::new(1130601600, 6),
            Transition::new(1143302400, 5),
            Transition::new(1162051200, 6),
            Transition::new(1174752000, 5),
            Transition::new(1193500800, 6),
            Transition::new(1206806400, 5),
            Transition::new(1224950400, 6),
            Transition::new(1238256000, 5),
            Transition::new(1256400000, 6),
            Transition::new(1269705600, 5),
            Transition::new(1288454400, 6),
            Transition::new(1301155200, 7),
            Transition::new(1315832400, 6),
            Transition::new(1414252800, 3),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(32533, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, true, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KRASNOYARSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1577513486, 1),
            Transition::new(-1247551200, 3),
            Transition::new(354906000, 2),
            Transition::new(370713600, 3),
            Transition::new(386442000, 2),
            Transition::new(402249600, 3),
            Transition::new(417978000, 2),
            Transition::new(433785600, 3),
            Transition::new(449600400, 2),
            Transition::new(465332400, 3),
            Transition::new(481057200, 2),
            Transition::new(496782000, 3),
            Transition::new(512506800, 2),
            Transition::new(528231600, 3),
            Transition::new(543956400, 2),
            Transition::new(559681200, 3),
            Transition::new(575406000, 2),
            Transition::new(591130800, 3),
            Transition::new(606855600, 2),
            Transition::new(622580400, 3),
            Transition::new(638305200, 2),
            Transition::new(654634800, 3),
            Transition::new(670359600, 4),
            Transition::new(686088000, 1),
            Transition::new(695764800, 3),
            Transition::new(701809200, 2),
            Transition::new(717534000, 3),
            Transition::new(733258800, 2),
            Transition::new(748983600, 3),
            Transition::new(764708400, 2),
            Transition::new(780433200, 3),
            Transition::new(796158000, 2),
            Transition::new(811882800, 3),
            Transition::new(828212400, 2),
            Transition::new(846356400, 3),
            Transition::new(859662000, 2),
            Transition::new(877806000, 3),
            Transition::new(891111600, 2),
            Transition::new(909255600, 3),
            Transition::new(922561200, 2),
            Transition::new(941310000, 3),
            Transition::new(954010800, 2),
            Transition::new(972759600, 3),
            Transition::new(985460400, 2),
            Transition::new(1004209200, 3),
            Transition::new(1017514800, 2),
            Transition::new(1035658800, 3),
            Transition::new(1048964400, 2),
            Transition::new(1067108400, 3),
            Transition::new(1080414000, 2),
            Transition::new(1099162800, 3),
            Transition::new(1111863600, 2),
            Transition::new(1130612400, 3),
            Transition::new(1143313200, 2),
            Transition::new(1162062000, 3),
            Transition::new(1174762800, 2),
            Transition::new(1193511600, 3),
            Transition::new(1206817200, 2),
            Transition::new(1224961200, 3),
            Transition::new(1238266800, 2),
            Transition::new(1256410800, 3),
            Transition::new(1269716400, 2),
            Transition::new(1288465200, 3),
            Transition::new(1301166000, 5),
            Transition::new(1414260000, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(22286, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, true, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KUALA_LUMPUR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177477206, 1),
            Transition::new(-2038200925, 2),
            Transition::new(-1167634800, 3),
            Transition::new(-1073028000, 4),
            Transition::new(-894180000, 5),
            Transition::new(-879665400, 6),
            Transition::new(-767005200, 5),
            Transition::new(378664200, 7),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(24406, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(24925, false, Some(b"SMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(26400, true, Some(b"+0720")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(26400, false, Some(b"+0720")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(27000, false, Some(b"+0730")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KUCHING: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1383463280, 1),
            Transition::new(-1167636600, 3),
            Transition::new(-1082448000, 2),
            Transition::new(-1074586800, 3),
            Transition::new(-1050825600, 2),
            Transition::new(-1042964400, 3),
            Transition::new(-1019289600, 2),
            Transition::new(-1011428400, 3),
            Transition::new(-987753600, 2),
            Transition::new(-979892400, 3),
            Transition::new(-956217600, 2),
            Transition::new(-948356400, 3),
            Transition::new(-924595200, 2),
            Transition::new(-916734000, 3),
            Transition::new(-893059200, 2),
            Transition::new(-885198000, 3),
            Transition::new(-879667200, 4),
            Transition::new(-767005200, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(26480, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(27000, false, Some(b"+0730")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(30000, true, Some(b"+0820")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_KUWAIT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-631163516, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(11516, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_MACAO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2056692850, 1),
            Transition::new(-884509200, 3),
            Transition::new(-873280800, 2),
            Transition::new(-855918000, 3),
            Transition::new(-841744800, 2),
            Transition::new(-828529200, 3),
            Transition::new(-765363600, 1),
            Transition::new(-747046800, 4),
            Transition::new(-733827600, 1),
            Transition::new(-716461200, 4),
            Transition::new(-697021200, 1),
            Transition::new(-683715600, 4),
            Transition::new(-667990800, 1),
            Transition::new(-654771600, 4),
            Transition::new(-636627600, 1),
            Transition::new(-623322000, 4),
            Transition::new(-605178000, 1),
            Transition::new(-591872400, 4),
            Transition::new(-573642000, 1),
            Transition::new(-559818000, 4),
            Transition::new(-541674000, 1),
            Transition::new(-528368400, 4),
            Transition::new(-510224400, 1),
            Transition::new(-498128400, 4),
            Transition::new(-478774800, 1),
            Transition::new(-466678800, 4),
            Transition::new(-446720400, 1),
            Transition::new(-435229200, 4),
            Transition::new(-415258200, 1),
            Transition::new(-403158600, 4),
            Transition::new(-383808600, 1),
            Transition::new(-371709000, 4),
            Transition::new(-352359000, 1),
            Transition::new(-340259400, 4),
            Transition::new(-320909400, 1),
            Transition::new(-308809800, 4),
            Transition::new(-288855000, 1),
            Transition::new(-277360200, 4),
            Transition::new(-257405400, 1),
            Transition::new(-245910600, 4),
            Transition::new(-225955800, 1),
            Transition::new(-213856200, 4),
            Transition::new(-194506200, 1),
            Transition::new(-182406600, 4),
            Transition::new(-163056600, 1),
            Transition::new(-148537800, 4),
            Transition::new(-132820200, 1),
            Transition::new(-117088200, 4),
            Transition::new(-101370600, 1),
            Transition::new(-85638600, 4),
            Transition::new(-69312600, 1),
            Transition::new(-53584200, 4),
            Transition::new(-37863000, 1),
            Transition::new(-22134600, 4),
            Transition::new(-6413400, 1),
            Transition::new(9315000, 4),
            Transition::new(25036200, 1),
            Transition::new(40764600, 4),
            Transition::new(56485800, 1),
            Transition::new(72214200, 4),
            Transition::new(88540200, 1),
            Transition::new(104268600, 4),
            Transition::new(119989800, 1),
            Transition::new(126041400, 4),
            Transition::new(151439400, 1),
            Transition::new(167167800, 4),
            Transition::new(182889000, 1),
            Transition::new(198617400, 4),
            Transition::new(214338600, 1),
            Transition::new(295385400, 4),
            Transition::new(309292200, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(27250, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, true, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_MAGADAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441188192, 1),
            Transition::new(-1247565600, 3),
            Transition::new(354891600, 2),
            Transition::new(370699200, 3),
            Transition::new(386427600, 2),
            Transition::new(402235200, 3),
            Transition::new(417963600, 2),
            Transition::new(433771200, 3),
            Transition::new(449586000, 2),
            Transition::new(465318000, 3),
            Transition::new(481042800, 2),
            Transition::new(496767600, 3),
            Transition::new(512492400, 2),
            Transition::new(528217200, 3),
            Transition::new(543942000, 2),
            Transition::new(559666800, 3),
            Transition::new(575391600, 2),
            Transition::new(591116400, 3),
            Transition::new(606841200, 2),
            Transition::new(622566000, 3),
            Transition::new(638290800, 2),
            Transition::new(654620400, 3),
            Transition::new(670345200, 4),
            Transition::new(686073600, 1),
            Transition::new(695750400, 3),
            Transition::new(701794800, 2),
            Transition::new(717519600, 3),
            Transition::new(733244400, 2),
            Transition::new(748969200, 3),
            Transition::new(764694000, 2),
            Transition::new(780418800, 3),
            Transition::new(796143600, 2),
            Transition::new(811868400, 3),
            Transition::new(828198000, 2),
            Transition::new(846342000, 3),
            Transition::new(859647600, 2),
            Transition::new(877791600, 3),
            Transition::new(891097200, 2),
            Transition::new(909241200, 3),
            Transition::new(922546800, 2),
            Transition::new(941295600, 3),
            Transition::new(953996400, 2),
            Transition::new(972745200, 3),
            Transition::new(985446000, 2),
            Transition::new(1004194800, 3),
            Transition::new(1017500400, 2),
            Transition::new(1035644400, 3),
            Transition::new(1048950000, 2),
            Transition::new(1067094000, 3),
            Transition::new(1080399600, 2),
            Transition::new(1099148400, 3),
            Transition::new(1111849200, 2),
            Transition::new(1130598000, 3),
            Transition::new(1143298800, 2),
            Transition::new(1162047600, 3),
            Transition::new(1174748400, 2),
            Transition::new(1193497200, 3),
            Transition::new(1206802800, 2),
            Transition::new(1224946800, 3),
            Transition::new(1238252400, 2),
            Transition::new(1256396400, 3),
            Transition::new(1269702000, 2),
            Transition::new(1288450800, 3),
            Transition::new(1301151600, 5),
            Transition::new(1414245600, 1),
            Transition::new(1461427200, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(36192, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_MAKASSAR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1577951856, 1),
            Transition::new(-1172908656, 2),
            Transition::new(-880272000, 3),
            Transition::new(-766054800, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(28656, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28656, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"WITA")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"WITA")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_MANILA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3944621040, 1),
            Transition::new(-2229321840, 3),
            Transition::new(-1046678400, 2),
            Transition::new(-1038733200, 3),
            Transition::new(-873273600, 4),
            Transition::new(-794221200, 3),
            Transition::new(-496224000, 2),
            Transition::new(-489315600, 3),
            Transition::new(259344000, 2),
            Transition::new(275151600, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-57360, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(29040, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"JST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_MUSCAT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1577937264, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(14064, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_NICOSIA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1518920008, 2),
            Transition::new(166572000, 1),
            Transition::new(182293200, 2),
            Transition::new(200959200, 1),
            Transition::new(213829200, 2),
            Transition::new(228866400, 1),
            Transition::new(243982800, 2),
            Transition::new(260316000, 1),
            Transition::new(276123600, 2),
            Transition::new(291765600, 1),
            Transition::new(307486800, 2),
            Transition::new(323820000, 1),
            Transition::new(338936400, 2),
            Transition::new(354664800, 1),
            Transition::new(370386000, 2),
            Transition::new(386114400, 1),
            Transition::new(401835600, 2),
            Transition::new(417564000, 1),
            Transition::new(433285200, 2),
            Transition::new(449013600, 1),
            Transition::new(465339600, 2),
            Transition::new(481068000, 1),
            Transition::new(496789200, 2),
            Transition::new(512517600, 1),
            Transition::new(528238800, 2),
            Transition::new(543967200, 1),
            Transition::new(559688400, 2),
            Transition::new(575416800, 1),
            Transition::new(591138000, 2),
            Transition::new(606866400, 1),
            Transition::new(622587600, 2),
            Transition::new(638316000, 1),
            Transition::new(654642000, 2),
            Transition::new(670370400, 1),
            Transition::new(686091600, 2),
            Transition::new(701820000, 1),
            Transition::new(717541200, 2),
            Transition::new(733269600, 1),
            Transition::new(748990800, 2),
            Transition::new(764719200, 1),
            Transition::new(780440400, 2),
            Transition::new(796168800, 1),
            Transition::new(811890000, 2),
            Transition::new(828223200, 1),
            Transition::new(843944400, 2),
            Transition::new(859672800, 1),
            Transition::new(875394000, 2),
            Transition::new(891122400, 1),
            Transition::new(909277200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(8008, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_NOVOKUZNETSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441259328, 1),
            Transition::new(-1247551200, 3),
            Transition::new(354906000, 2),
            Transition::new(370713600, 3),
            Transition::new(386442000, 2),
            Transition::new(402249600, 3),
            Transition::new(417978000, 2),
            Transition::new(433785600, 3),
            Transition::new(449600400, 2),
            Transition::new(465332400, 3),
            Transition::new(481057200, 2),
            Transition::new(496782000, 3),
            Transition::new(512506800, 2),
            Transition::new(528231600, 3),
            Transition::new(543956400, 2),
            Transition::new(559681200, 3),
            Transition::new(575406000, 2),
            Transition::new(591130800, 3),
            Transition::new(606855600, 2),
            Transition::new(622580400, 3),
            Transition::new(638305200, 2),
            Transition::new(654634800, 3),
            Transition::new(670359600, 4),
            Transition::new(686088000, 1),
            Transition::new(695764800, 3),
            Transition::new(701809200, 2),
            Transition::new(717534000, 3),
            Transition::new(733258800, 2),
            Transition::new(748983600, 3),
            Transition::new(764708400, 2),
            Transition::new(780433200, 3),
            Transition::new(796158000, 2),
            Transition::new(811882800, 3),
            Transition::new(828212400, 2),
            Transition::new(846356400, 3),
            Transition::new(859662000, 2),
            Transition::new(877806000, 3),
            Transition::new(891111600, 2),
            Transition::new(909255600, 3),
            Transition::new(922561200, 2),
            Transition::new(941310000, 3),
            Transition::new(954010800, 2),
            Transition::new(972759600, 3),
            Transition::new(985460400, 2),
            Transition::new(1004209200, 3),
            Transition::new(1017514800, 2),
            Transition::new(1035658800, 3),
            Transition::new(1048964400, 2),
            Transition::new(1067108400, 3),
            Transition::new(1080414000, 2),
            Transition::new(1099162800, 3),
            Transition::new(1111863600, 2),
            Transition::new(1130612400, 3),
            Transition::new(1143313200, 2),
            Transition::new(1162062000, 3),
            Transition::new(1174762800, 2),
            Transition::new(1193511600, 3),
            Transition::new(1206817200, 2),
            Transition::new(1224961200, 3),
            Transition::new(1238266800, 2),
            Transition::new(1256410800, 3),
            Transition::new(1269716400, 4),
            Transition::new(1288468800, 1),
            Transition::new(1301169600, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(20928, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, true, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_NOVOSIBIRSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1579476700, 1),
            Transition::new(-1247551200, 3),
            Transition::new(354906000, 2),
            Transition::new(370713600, 3),
            Transition::new(386442000, 2),
            Transition::new(402249600, 3),
            Transition::new(417978000, 2),
            Transition::new(433785600, 3),
            Transition::new(449600400, 2),
            Transition::new(465332400, 3),
            Transition::new(481057200, 2),
            Transition::new(496782000, 3),
            Transition::new(512506800, 2),
            Transition::new(528231600, 3),
            Transition::new(543956400, 2),
            Transition::new(559681200, 3),
            Transition::new(575406000, 2),
            Transition::new(591130800, 3),
            Transition::new(606855600, 2),
            Transition::new(622580400, 3),
            Transition::new(638305200, 2),
            Transition::new(654634800, 3),
            Transition::new(670359600, 4),
            Transition::new(686088000, 1),
            Transition::new(695764800, 3),
            Transition::new(701809200, 2),
            Transition::new(717534000, 3),
            Transition::new(733258800, 2),
            Transition::new(738086400, 4),
            Transition::new(748987200, 1),
            Transition::new(764712000, 4),
            Transition::new(780436800, 1),
            Transition::new(796161600, 4),
            Transition::new(811886400, 1),
            Transition::new(828216000, 4),
            Transition::new(846360000, 1),
            Transition::new(859665600, 4),
            Transition::new(877809600, 1),
            Transition::new(891115200, 4),
            Transition::new(909259200, 1),
            Transition::new(922564800, 4),
            Transition::new(941313600, 1),
            Transition::new(954014400, 4),
            Transition::new(972763200, 1),
            Transition::new(985464000, 4),
            Transition::new(1004212800, 1),
            Transition::new(1017518400, 4),
            Transition::new(1035662400, 1),
            Transition::new(1048968000, 4),
            Transition::new(1067112000, 1),
            Transition::new(1080417600, 4),
            Transition::new(1099166400, 1),
            Transition::new(1111867200, 4),
            Transition::new(1130616000, 1),
            Transition::new(1143316800, 4),
            Transition::new(1162065600, 1),
            Transition::new(1174766400, 4),
            Transition::new(1193515200, 1),
            Transition::new(1206820800, 4),
            Transition::new(1224964800, 1),
            Transition::new(1238270400, 4),
            Transition::new(1256414400, 1),
            Transition::new(1269720000, 4),
            Transition::new(1288468800, 1),
            Transition::new(1301169600, 3),
            Transition::new(1414263600, 1),
            Transition::new(1469304000, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(19900, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, true, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_OMSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1582088010, 1),
            Transition::new(-1247547600, 3),
            Transition::new(354909600, 2),
            Transition::new(370717200, 3),
            Transition::new(386445600, 2),
            Transition::new(402253200, 3),
            Transition::new(417981600, 2),
            Transition::new(433789200, 3),
            Transition::new(449604000, 2),
            Transition::new(465336000, 3),
            Transition::new(481060800, 2),
            Transition::new(496785600, 3),
            Transition::new(512510400, 2),
            Transition::new(528235200, 3),
            Transition::new(543960000, 2),
            Transition::new(559684800, 3),
            Transition::new(575409600, 2),
            Transition::new(591134400, 3),
            Transition::new(606859200, 2),
            Transition::new(622584000, 3),
            Transition::new(638308800, 2),
            Transition::new(654638400, 3),
            Transition::new(670363200, 4),
            Transition::new(686091600, 1),
            Transition::new(695768400, 3),
            Transition::new(701812800, 2),
            Transition::new(717537600, 3),
            Transition::new(733262400, 2),
            Transition::new(748987200, 3),
            Transition::new(764712000, 2),
            Transition::new(780436800, 3),
            Transition::new(796161600, 2),
            Transition::new(811886400, 3),
            Transition::new(828216000, 2),
            Transition::new(846360000, 3),
            Transition::new(859665600, 2),
            Transition::new(877809600, 3),
            Transition::new(891115200, 2),
            Transition::new(909259200, 3),
            Transition::new(922564800, 2),
            Transition::new(941313600, 3),
            Transition::new(954014400, 2),
            Transition::new(972763200, 3),
            Transition::new(985464000, 2),
            Transition::new(1004212800, 3),
            Transition::new(1017518400, 2),
            Transition::new(1035662400, 3),
            Transition::new(1048968000, 2),
            Transition::new(1067112000, 3),
            Transition::new(1080417600, 2),
            Transition::new(1099166400, 3),
            Transition::new(1111867200, 2),
            Transition::new(1130616000, 3),
            Transition::new(1143316800, 2),
            Transition::new(1162065600, 3),
            Transition::new(1174766400, 2),
            Transition::new(1193515200, 3),
            Transition::new(1206820800, 2),
            Transition::new(1224964800, 3),
            Transition::new(1238270400, 2),
            Transition::new(1256414400, 3),
            Transition::new(1269720000, 2),
            Transition::new(1288468800, 3),
            Transition::new(1301169600, 5),
            Transition::new(1414263600, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(17610, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_ORAL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441164324, 1),
            Transition::new(-1247540400, 2),
            Transition::new(354913200, 3),
            Transition::new(370720800, 4),
            Transition::new(386445600, 3),
            Transition::new(402256800, 2),
            Transition::new(417985200, 3),
            Transition::new(433792800, 2),
            Transition::new(449607600, 3),
            Transition::new(465339600, 2),
            Transition::new(481064400, 3),
            Transition::new(496789200, 2),
            Transition::new(512514000, 3),
            Transition::new(528238800, 2),
            Transition::new(543963600, 3),
            Transition::new(559688400, 2),
            Transition::new(575413200, 3),
            Transition::new(591138000, 2),
            Transition::new(606862800, 5),
            Transition::new(622591200, 6),
            Transition::new(638316000, 5),
            Transition::new(654645600, 6),
            Transition::new(670370400, 5),
            Transition::new(686095200, 6),
            Transition::new(695772000, 2),
            Transition::new(701816400, 5),
            Transition::new(717544800, 6),
            Transition::new(733269600, 5),
            Transition::new(748994400, 6),
            Transition::new(764719200, 5),
            Transition::new(780444000, 6),
            Transition::new(796168800, 5),
            Transition::new(811893600, 6),
            Transition::new(828223200, 5),
            Transition::new(846367200, 6),
            Transition::new(859672800, 5),
            Transition::new(877816800, 6),
            Transition::new(891122400, 5),
            Transition::new(909266400, 6),
            Transition::new(922572000, 5),
            Transition::new(941320800, 6),
            Transition::new(954021600, 5),
            Transition::new(972770400, 6),
            Transition::new(985471200, 5),
            Transition::new(1004220000, 6),
            Transition::new(1017525600, 5),
            Transition::new(1035669600, 6),
            Transition::new(1048975200, 5),
            Transition::new(1067119200, 6),
            Transition::new(1080424800, 5),
            Transition::new(1099173600, 2),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(12324, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_PHNOM_PENH: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2004073180, 1),
            Transition::new(-1851577590, 2),
            Transition::new(-852105600, 3),
            Transition::new(-782643600, 4),
            Transition::new(-767869200, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(25180, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25590, false, Some(b"PLMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_PONTIANAK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1946186240, 1),
            Transition::new(-1172906240, 2),
            Transition::new(-881220600, 3),
            Transition::new(-766054800, 2),
            Transition::new(-683883000, 4),
            Transition::new(-620812800, 2),
            Transition::new(-189415800, 5),
            Transition::new(567964800, 6),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(26240, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(26240, false, Some(b"PMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(27000, false, Some(b"+0730")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"WITA")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"WIB")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"WIB")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_PYONGYANG: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1948782180, 1),
            Transition::new(-1830414600, 2),
            Transition::new(-768646800, 3),
            Transition::new(1439564400, 1),
            Transition::new(1525446000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(30180, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(30600, false, Some(b"KST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"JST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"KST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"KST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_QATAR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1577935568, 1),
            Transition::new(76190400, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(12368, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_QOSTANAY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441167268, 1),
            Transition::new(-1247544000, 2),
            Transition::new(354913200, 3),
            Transition::new(370720800, 4),
            Transition::new(386445600, 3),
            Transition::new(402256800, 2),
            Transition::new(417985200, 3),
            Transition::new(433792800, 2),
            Transition::new(449607600, 3),
            Transition::new(465339600, 2),
            Transition::new(481064400, 3),
            Transition::new(496789200, 2),
            Transition::new(512514000, 3),
            Transition::new(528238800, 2),
            Transition::new(543963600, 3),
            Transition::new(559688400, 2),
            Transition::new(575413200, 3),
            Transition::new(591138000, 2),
            Transition::new(606862800, 3),
            Transition::new(622587600, 2),
            Transition::new(638312400, 3),
            Transition::new(654642000, 2),
            Transition::new(670366800, 5),
            Transition::new(686095200, 1),
            Transition::new(695772000, 2),
            Transition::new(701816400, 3),
            Transition::new(717541200, 2),
            Transition::new(733266000, 3),
            Transition::new(748990800, 2),
            Transition::new(764715600, 3),
            Transition::new(780440400, 2),
            Transition::new(796165200, 3),
            Transition::new(811890000, 2),
            Transition::new(828219600, 3),
            Transition::new(846363600, 2),
            Transition::new(859669200, 3),
            Transition::new(877813200, 2),
            Transition::new(891118800, 3),
            Transition::new(909262800, 2),
            Transition::new(922568400, 3),
            Transition::new(941317200, 2),
            Transition::new(954018000, 3),
            Transition::new(972766800, 2),
            Transition::new(985467600, 3),
            Transition::new(1004216400, 2),
            Transition::new(1017522000, 3),
            Transition::new(1035666000, 2),
            Transition::new(1048971600, 3),
            Transition::new(1067115600, 2),
            Transition::new(1080421200, 3),
            Transition::new(1099170000, 4),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(15268, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_QYZYLORDA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441167712, 1),
            Transition::new(-1247544000, 2),
            Transition::new(354913200, 3),
            Transition::new(370720800, 4),
            Transition::new(386445600, 3),
            Transition::new(402256800, 2),
            Transition::new(417985200, 3),
            Transition::new(433792800, 2),
            Transition::new(449607600, 3),
            Transition::new(465339600, 2),
            Transition::new(481064400, 3),
            Transition::new(496789200, 2),
            Transition::new(512514000, 3),
            Transition::new(528238800, 2),
            Transition::new(543963600, 3),
            Transition::new(559688400, 2),
            Transition::new(575413200, 3),
            Transition::new(591138000, 2),
            Transition::new(606862800, 3),
            Transition::new(622587600, 2),
            Transition::new(638312400, 3),
            Transition::new(654642000, 2),
            Transition::new(670366800, 5),
            Transition::new(686095200, 2),
            Transition::new(695768400, 4),
            Transition::new(701812800, 3),
            Transition::new(717541200, 2),
            Transition::new(733266000, 3),
            Transition::new(748990800, 2),
            Transition::new(764715600, 3),
            Transition::new(780440400, 2),
            Transition::new(796165200, 3),
            Transition::new(811890000, 2),
            Transition::new(828219600, 3),
            Transition::new(846363600, 2),
            Transition::new(859669200, 3),
            Transition::new(877813200, 2),
            Transition::new(891118800, 3),
            Transition::new(909262800, 2),
            Transition::new(922568400, 3),
            Transition::new(941317200, 2),
            Transition::new(954018000, 3),
            Transition::new(972766800, 2),
            Transition::new(985467600, 3),
            Transition::new(1004216400, 2),
            Transition::new(1017522000, 3),
            Transition::new(1035666000, 2),
            Transition::new(1048971600, 3),
            Transition::new(1067115600, 2),
            Transition::new(1080421200, 3),
            Transition::new(1099170000, 4),
            Transition::new(1545328800, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(15712, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_RANGOON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840163887, 1),
            Transition::new(-1577946287, 2),
            Transition::new(-873268200, 3),
            Transition::new(-778410000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(23087, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(23087, false, Some(b"RMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(23400, false, Some(b"+0630")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(23400, false, Some(b"+0630")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_RIYADH: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-719636812, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(11212, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_SAKHALIN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2031039048, 1),
            Transition::new(-768560400, 3),
            Transition::new(354891600, 2),
            Transition::new(370699200, 3),
            Transition::new(386427600, 2),
            Transition::new(402235200, 3),
            Transition::new(417963600, 2),
            Transition::new(433771200, 3),
            Transition::new(449586000, 2),
            Transition::new(465318000, 3),
            Transition::new(481042800, 2),
            Transition::new(496767600, 3),
            Transition::new(512492400, 2),
            Transition::new(528217200, 3),
            Transition::new(543942000, 2),
            Transition::new(559666800, 3),
            Transition::new(575391600, 2),
            Transition::new(591116400, 3),
            Transition::new(606841200, 2),
            Transition::new(622566000, 3),
            Transition::new(638290800, 2),
            Transition::new(654620400, 3),
            Transition::new(670345200, 4),
            Transition::new(686073600, 5),
            Transition::new(695750400, 3),
            Transition::new(701794800, 2),
            Transition::new(717519600, 3),
            Transition::new(733244400, 2),
            Transition::new(748969200, 3),
            Transition::new(764694000, 2),
            Transition::new(780418800, 3),
            Transition::new(796143600, 2),
            Transition::new(811868400, 3),
            Transition::new(828198000, 2),
            Transition::new(846342000, 3),
            Transition::new(859647600, 4),
            Transition::new(877795200, 5),
            Transition::new(891100800, 4),
            Transition::new(909244800, 5),
            Transition::new(922550400, 4),
            Transition::new(941299200, 5),
            Transition::new(954000000, 4),
            Transition::new(972748800, 5),
            Transition::new(985449600, 4),
            Transition::new(1004198400, 5),
            Transition::new(1017504000, 4),
            Transition::new(1035648000, 5),
            Transition::new(1048953600, 4),
            Transition::new(1067097600, 5),
            Transition::new(1080403200, 4),
            Transition::new(1099152000, 5),
            Transition::new(1111852800, 4),
            Transition::new(1130601600, 5),
            Transition::new(1143302400, 4),
            Transition::new(1162051200, 5),
            Transition::new(1174752000, 4),
            Transition::new(1193500800, 5),
            Transition::new(1206806400, 4),
            Transition::new(1224950400, 5),
            Transition::new(1238256000, 4),
            Transition::new(1256400000, 5),
            Transition::new(1269705600, 4),
            Transition::new(1288454400, 5),
            Transition::new(1301155200, 3),
            Transition::new(1414249200, 5),
            Transition::new(1459008000, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(34248, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_SAMARKAND: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441168073, 1),
            Transition::new(-1247544000, 2),
            Transition::new(354913200, 3),
            Transition::new(370720800, 4),
            Transition::new(386445600, 3),
            Transition::new(402256800, 2),
            Transition::new(417985200, 3),
            Transition::new(433792800, 2),
            Transition::new(449607600, 3),
            Transition::new(465339600, 2),
            Transition::new(481064400, 3),
            Transition::new(496789200, 2),
            Transition::new(512514000, 3),
            Transition::new(528238800, 2),
            Transition::new(543963600, 3),
            Transition::new(559688400, 2),
            Transition::new(575413200, 3),
            Transition::new(591138000, 2),
            Transition::new(606862800, 3),
            Transition::new(622587600, 2),
            Transition::new(638312400, 3),
            Transition::new(654642000, 2),
            Transition::new(670366800, 3),
            Transition::new(686091600, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(16073, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_SREDNEKOLYMSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441188892, 1),
            Transition::new(-1247565600, 3),
            Transition::new(354891600, 2),
            Transition::new(370699200, 3),
            Transition::new(386427600, 2),
            Transition::new(402235200, 3),
            Transition::new(417963600, 2),
            Transition::new(433771200, 3),
            Transition::new(449586000, 2),
            Transition::new(465318000, 3),
            Transition::new(481042800, 2),
            Transition::new(496767600, 3),
            Transition::new(512492400, 2),
            Transition::new(528217200, 3),
            Transition::new(543942000, 2),
            Transition::new(559666800, 3),
            Transition::new(575391600, 2),
            Transition::new(591116400, 3),
            Transition::new(606841200, 2),
            Transition::new(622566000, 3),
            Transition::new(638290800, 2),
            Transition::new(654620400, 3),
            Transition::new(670345200, 4),
            Transition::new(686073600, 1),
            Transition::new(695750400, 3),
            Transition::new(701794800, 2),
            Transition::new(717519600, 3),
            Transition::new(733244400, 2),
            Transition::new(748969200, 3),
            Transition::new(764694000, 2),
            Transition::new(780418800, 3),
            Transition::new(796143600, 2),
            Transition::new(811868400, 3),
            Transition::new(828198000, 2),
            Transition::new(846342000, 3),
            Transition::new(859647600, 2),
            Transition::new(877791600, 3),
            Transition::new(891097200, 2),
            Transition::new(909241200, 3),
            Transition::new(922546800, 2),
            Transition::new(941295600, 3),
            Transition::new(953996400, 2),
            Transition::new(972745200, 3),
            Transition::new(985446000, 2),
            Transition::new(1004194800, 3),
            Transition::new(1017500400, 2),
            Transition::new(1035644400, 3),
            Transition::new(1048950000, 2),
            Transition::new(1067094000, 3),
            Transition::new(1080399600, 2),
            Transition::new(1099148400, 3),
            Transition::new(1111849200, 2),
            Transition::new(1130598000, 3),
            Transition::new(1143298800, 2),
            Transition::new(1162047600, 3),
            Transition::new(1174748400, 2),
            Transition::new(1193497200, 3),
            Transition::new(1206802800, 2),
            Transition::new(1224946800, 3),
            Transition::new(1238252400, 2),
            Transition::new(1256396400, 3),
            Transition::new(1269702000, 2),
            Transition::new(1288450800, 3),
            Transition::new(1301151600, 5),
            Transition::new(1414245600, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(36892, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_TASHKENT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441168631, 1),
            Transition::new(-1247547600, 3),
            Transition::new(354909600, 2),
            Transition::new(370717200, 3),
            Transition::new(386445600, 2),
            Transition::new(402253200, 3),
            Transition::new(417981600, 2),
            Transition::new(433789200, 3),
            Transition::new(449604000, 2),
            Transition::new(465336000, 3),
            Transition::new(481060800, 2),
            Transition::new(496785600, 3),
            Transition::new(512510400, 2),
            Transition::new(528235200, 3),
            Transition::new(543960000, 2),
            Transition::new(559684800, 3),
            Transition::new(575409600, 2),
            Transition::new(591134400, 3),
            Transition::new(606859200, 2),
            Transition::new(622584000, 3),
            Transition::new(638308800, 2),
            Transition::new(654638400, 3),
            Transition::new(670363200, 4),
            Transition::new(686091600, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(16631, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_TBILISI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840151551, 1),
            Transition::new(-1441162751, 2),
            Transition::new(-405140400, 4),
            Transition::new(354916800, 3),
            Transition::new(370724400, 4),
            Transition::new(386452800, 3),
            Transition::new(402260400, 4),
            Transition::new(417988800, 3),
            Transition::new(433796400, 4),
            Transition::new(449611200, 3),
            Transition::new(465343200, 4),
            Transition::new(481068000, 3),
            Transition::new(496792800, 4),
            Transition::new(512517600, 3),
            Transition::new(528242400, 4),
            Transition::new(543967200, 3),
            Transition::new(559692000, 4),
            Transition::new(575416800, 3),
            Transition::new(591141600, 4),
            Transition::new(606866400, 3),
            Transition::new(622591200, 4),
            Transition::new(638316000, 3),
            Transition::new(654645600, 4),
            Transition::new(670370400, 5),
            Transition::new(686098800, 2),
            Transition::new(701816400, 5),
            Transition::new(717537600, 2),
            Transition::new(733266000, 5),
            Transition::new(748987200, 2),
            Transition::new(764715600, 5),
            Transition::new(780436800, 4),
            Transition::new(796161600, 3),
            Transition::new(811882800, 4),
            Transition::new(828216000, 3),
            Transition::new(859662000, 3),
            Transition::new(877806000, 4),
            Transition::new(891115200, 3),
            Transition::new(909255600, 4),
            Transition::new(922564800, 3),
            Transition::new(941310000, 4),
            Transition::new(954014400, 3),
            Transition::new(972759600, 4),
            Transition::new(985464000, 3),
            Transition::new(1004209200, 4),
            Transition::new(1017518400, 3),
            Transition::new(1035658800, 4),
            Transition::new(1048968000, 3),
            Transition::new(1067108400, 4),
            Transition::new(1080417600, 3),
            Transition::new(1088276400, 5),
            Transition::new(1099177200, 2),
            Transition::new(1111878000, 4),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(10751, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10751, false, Some(b"TBMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_TEL_AVIV: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840149144, 1),
            Transition::new(-1641003660, 3),
            Transition::new(-933638400, 2),
            Transition::new(-923097600, 3),
            Transition::new(-919036800, 2),
            Transition::new(-857347200, 3),
            Transition::new(-844300800, 2),
            Transition::new(-825811200, 3),
            Transition::new(-812678400, 2),
            Transition::new(-794188800, 3),
            Transition::new(-779846400, 2),
            Transition::new(-762652800, 3),
            Transition::new(-748310400, 2),
            Transition::new(-731116800, 3),
            Transition::new(-681955200, 4),
            Transition::new(-673228800, 2),
            Transition::new(-667958400, 3),
            Transition::new(-652320000, 2),
            Transition::new(-636422400, 3),
            Transition::new(-622080000, 2),
            Transition::new(-608947200, 3),
            Transition::new(-591840000, 2),
            Transition::new(-572486400, 3),
            Transition::new(-558576000, 2),
            Transition::new(-542851200, 3),
            Transition::new(-527731200, 2),
            Transition::new(-514425600, 3),
            Transition::new(-490838400, 2),
            Transition::new(-482976000, 3),
            Transition::new(-459388800, 2),
            Transition::new(-451526400, 3),
            Transition::new(-428544000, 2),
            Transition::new(-418262400, 3),
            Transition::new(-400118400, 2),
            Transition::new(-387417600, 3),
            Transition::new(142380000, 2),
            Transition::new(150843600, 3),
            Transition::new(167176800, 2),
            Transition::new(178664400, 3),
            Transition::new(334101600, 2),
            Transition::new(337730400, 3),
            Transition::new(452642400, 2),
            Transition::new(462319200, 3),
            Transition::new(482277600, 2),
            Transition::new(494370000, 3),
            Transition::new(516751200, 2),
            Transition::new(526424400, 3),
            Transition::new(545436000, 2),
            Transition::new(558478800, 3),
            Transition::new(576626400, 2),
            Transition::new(589323600, 3),
            Transition::new(609890400, 2),
            Transition::new(620773200, 3),
            Transition::new(638316000, 2),
            Transition::new(651618000, 3),
            Transition::new(669765600, 2),
            Transition::new(683672400, 3),
            Transition::new(701820000, 2),
            Transition::new(715726800, 3),
            Transition::new(733701600, 2),
            Transition::new(747176400, 3),
            Transition::new(765151200, 2),
            Transition::new(778021200, 3),
            Transition::new(796600800, 2),
            Transition::new(810075600, 3),
            Transition::new(826840800, 2),
            Transition::new(842821200, 3),
            Transition::new(858895200, 2),
            Transition::new(874184400, 3),
            Transition::new(890344800, 2),
            Transition::new(905029200, 3),
            Transition::new(923011200, 2),
            Transition::new(936313200, 3),
            Transition::new(955670400, 2),
            Transition::new(970783200, 3),
            Transition::new(986770800, 2),
            Transition::new(1001282400, 3),
            Transition::new(1017356400, 2),
            Transition::new(1033941600, 3),
            Transition::new(1048806000, 2),
            Transition::new(1065132000, 3),
            Transition::new(1081292400, 2),
            Transition::new(1095804000, 3),
            Transition::new(1112313600, 2),
            Transition::new(1128812400, 3),
            Transition::new(1143763200, 2),
            Transition::new(1159657200, 3),
            Transition::new(1175212800, 2),
            Transition::new(1189897200, 3),
            Transition::new(1206662400, 2),
            Transition::new(1223161200, 3),
            Transition::new(1238112000, 2),
            Transition::new(1254006000, 3),
            Transition::new(1269561600, 2),
            Transition::new(1284246000, 3),
            Transition::new(1301616000, 2),
            Transition::new(1317510000, 3),
            Transition::new(1333065600, 2),
            Transition::new(1348354800, 3),
            Transition::new(1364515200, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(8344, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(8460, false, Some(b"JMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"IDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"IDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"IST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"IDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 4, 4) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    93600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_THIMBU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-706341516, 1),
            Transition::new(560025000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(21516, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(19800, false, Some(b"+0530")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_TOMSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1578807591, 1),
            Transition::new(-1247551200, 3),
            Transition::new(354906000, 2),
            Transition::new(370713600, 3),
            Transition::new(386442000, 2),
            Transition::new(402249600, 3),
            Transition::new(417978000, 2),
            Transition::new(433785600, 3),
            Transition::new(449600400, 2),
            Transition::new(465332400, 3),
            Transition::new(481057200, 2),
            Transition::new(496782000, 3),
            Transition::new(512506800, 2),
            Transition::new(528231600, 3),
            Transition::new(543956400, 2),
            Transition::new(559681200, 3),
            Transition::new(575406000, 2),
            Transition::new(591130800, 3),
            Transition::new(606855600, 2),
            Transition::new(622580400, 3),
            Transition::new(638305200, 2),
            Transition::new(654634800, 3),
            Transition::new(670359600, 4),
            Transition::new(686088000, 1),
            Transition::new(695764800, 3),
            Transition::new(701809200, 2),
            Transition::new(717534000, 3),
            Transition::new(733258800, 2),
            Transition::new(748983600, 3),
            Transition::new(764708400, 2),
            Transition::new(780433200, 3),
            Transition::new(796158000, 2),
            Transition::new(811882800, 3),
            Transition::new(828212400, 2),
            Transition::new(846356400, 3),
            Transition::new(859662000, 2),
            Transition::new(877806000, 3),
            Transition::new(891111600, 2),
            Transition::new(909255600, 3),
            Transition::new(922561200, 2),
            Transition::new(941310000, 3),
            Transition::new(954010800, 2),
            Transition::new(972759600, 3),
            Transition::new(985460400, 2),
            Transition::new(1004209200, 3),
            Transition::new(1017514800, 2),
            Transition::new(1020193200, 4),
            Transition::new(1035662400, 1),
            Transition::new(1048968000, 4),
            Transition::new(1067112000, 1),
            Transition::new(1080417600, 4),
            Transition::new(1099166400, 1),
            Transition::new(1111867200, 4),
            Transition::new(1130616000, 1),
            Transition::new(1143316800, 4),
            Transition::new(1162065600, 1),
            Transition::new(1174766400, 4),
            Transition::new(1193515200, 1),
            Transition::new(1206820800, 4),
            Transition::new(1224964800, 1),
            Transition::new(1238270400, 4),
            Transition::new(1256414400, 1),
            Transition::new(1269720000, 4),
            Transition::new(1288468800, 1),
            Transition::new(1301169600, 3),
            Transition::new(1414263600, 1),
            Transition::new(1464465600, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(20391, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, true, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, true, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_ULAANBAATAR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2032931252, 1),
            Transition::new(252435600, 3),
            Transition::new(417974400, 2),
            Transition::new(433782000, 3),
            Transition::new(449596800, 2),
            Transition::new(465318000, 3),
            Transition::new(481046400, 2),
            Transition::new(496767600, 3),
            Transition::new(512496000, 2),
            Transition::new(528217200, 3),
            Transition::new(543945600, 2),
            Transition::new(559666800, 3),
            Transition::new(575395200, 2),
            Transition::new(591116400, 3),
            Transition::new(606844800, 2),
            Transition::new(622566000, 3),
            Transition::new(638294400, 2),
            Transition::new(654620400, 3),
            Transition::new(670348800, 2),
            Transition::new(686070000, 3),
            Transition::new(701798400, 2),
            Transition::new(717519600, 3),
            Transition::new(733248000, 2),
            Transition::new(748969200, 3),
            Transition::new(764697600, 2),
            Transition::new(780418800, 3),
            Transition::new(796147200, 2),
            Transition::new(811868400, 3),
            Transition::new(828201600, 2),
            Transition::new(843922800, 3),
            Transition::new(859651200, 2),
            Transition::new(875372400, 3),
            Transition::new(891100800, 2),
            Transition::new(906822000, 3),
            Transition::new(988394400, 2),
            Transition::new(1001696400, 3),
            Transition::new(1017424800, 2),
            Transition::new(1033146000, 3),
            Transition::new(1048874400, 2),
            Transition::new(1064595600, 3),
            Transition::new(1080324000, 2),
            Transition::new(1096045200, 3),
            Transition::new(1111773600, 2),
            Transition::new(1127494800, 3),
            Transition::new(1143223200, 2),
            Transition::new(1159549200, 3),
            Transition::new(1427479200, 2),
            Transition::new(1443193200, 3),
            Transition::new(1458928800, 2),
            Transition::new(1474642800, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(25652, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_URUMQI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1325483420, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(21020, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_UST_NERA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1579426374, 1),
            Transition::new(-1247558400, 2),
            Transition::new(354898800, 4),
            Transition::new(370699200, 3),
            Transition::new(386427600, 4),
            Transition::new(402235200, 3),
            Transition::new(417963600, 4),
            Transition::new(433771200, 3),
            Transition::new(449586000, 4),
            Transition::new(465318000, 3),
            Transition::new(481042800, 4),
            Transition::new(496767600, 3),
            Transition::new(512492400, 4),
            Transition::new(528217200, 3),
            Transition::new(543942000, 4),
            Transition::new(559666800, 3),
            Transition::new(575391600, 4),
            Transition::new(591116400, 3),
            Transition::new(606841200, 4),
            Transition::new(622566000, 3),
            Transition::new(638290800, 4),
            Transition::new(654620400, 3),
            Transition::new(670345200, 5),
            Transition::new(686073600, 6),
            Transition::new(695750400, 3),
            Transition::new(701794800, 4),
            Transition::new(717519600, 3),
            Transition::new(733244400, 4),
            Transition::new(748969200, 3),
            Transition::new(764694000, 4),
            Transition::new(780418800, 3),
            Transition::new(796143600, 4),
            Transition::new(811868400, 3),
            Transition::new(828198000, 4),
            Transition::new(846342000, 3),
            Transition::new(859647600, 4),
            Transition::new(877791600, 3),
            Transition::new(891097200, 4),
            Transition::new(909241200, 3),
            Transition::new(922546800, 4),
            Transition::new(941295600, 3),
            Transition::new(953996400, 4),
            Transition::new(972745200, 3),
            Transition::new(985446000, 4),
            Transition::new(1004194800, 3),
            Transition::new(1017500400, 4),
            Transition::new(1035644400, 3),
            Transition::new(1048950000, 4),
            Transition::new(1067094000, 3),
            Transition::new(1080399600, 4),
            Transition::new(1099148400, 3),
            Transition::new(1111849200, 4),
            Transition::new(1130598000, 3),
            Transition::new(1143298800, 4),
            Transition::new(1162047600, 3),
            Transition::new(1174748400, 4),
            Transition::new(1193497200, 3),
            Transition::new(1206802800, 4),
            Transition::new(1224946800, 3),
            Transition::new(1238252400, 4),
            Transition::new(1256396400, 3),
            Transition::new(1269702000, 4),
            Transition::new(1288450800, 3),
            Transition::new(1301151600, 7),
            Transition::new(1315828800, 3),
            Transition::new(1414249200, 6),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(34374, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_VIENTIANE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2004072624, 1),
            Transition::new(-1851577590, 2),
            Transition::new(-852105600, 3),
            Transition::new(-782643600, 4),
            Transition::new(-767869200, 2),
            Transition::new(-718095600, 3),
            Transition::new(-464428800, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(24624, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25590, false, Some(b"PLMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_VLADIVOSTOK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1487321251, 1),
            Transition::new(-1247562000, 3),
            Transition::new(354895200, 2),
            Transition::new(370702800, 3),
            Transition::new(386431200, 2),
            Transition::new(402238800, 3),
            Transition::new(417967200, 2),
            Transition::new(433774800, 3),
            Transition::new(449589600, 2),
            Transition::new(465321600, 3),
            Transition::new(481046400, 2),
            Transition::new(496771200, 3),
            Transition::new(512496000, 2),
            Transition::new(528220800, 3),
            Transition::new(543945600, 2),
            Transition::new(559670400, 3),
            Transition::new(575395200, 2),
            Transition::new(591120000, 3),
            Transition::new(606844800, 2),
            Transition::new(622569600, 3),
            Transition::new(638294400, 2),
            Transition::new(654624000, 3),
            Transition::new(670348800, 4),
            Transition::new(686077200, 1),
            Transition::new(695754000, 3),
            Transition::new(701798400, 2),
            Transition::new(717523200, 3),
            Transition::new(733248000, 2),
            Transition::new(748972800, 3),
            Transition::new(764697600, 2),
            Transition::new(780422400, 3),
            Transition::new(796147200, 2),
            Transition::new(811872000, 3),
            Transition::new(828201600, 2),
            Transition::new(846345600, 3),
            Transition::new(859651200, 2),
            Transition::new(877795200, 3),
            Transition::new(891100800, 2),
            Transition::new(909244800, 3),
            Transition::new(922550400, 2),
            Transition::new(941299200, 3),
            Transition::new(954000000, 2),
            Transition::new(972748800, 3),
            Transition::new(985449600, 2),
            Transition::new(1004198400, 3),
            Transition::new(1017504000, 2),
            Transition::new(1035648000, 3),
            Transition::new(1048953600, 2),
            Transition::new(1067097600, 3),
            Transition::new(1080403200, 2),
            Transition::new(1099152000, 3),
            Transition::new(1111852800, 2),
            Transition::new(1130601600, 3),
            Transition::new(1143302400, 2),
            Transition::new(1162051200, 3),
            Transition::new(1174752000, 2),
            Transition::new(1193500800, 3),
            Transition::new(1206806400, 2),
            Transition::new(1224950400, 3),
            Transition::new(1238256000, 2),
            Transition::new(1256400000, 3),
            Transition::new(1269705600, 2),
            Transition::new(1288454400, 3),
            Transition::new(1301155200, 5),
            Transition::new(1414249200, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(31651, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, true, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_YAKUTSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1579423138, 1),
            Transition::new(-1247558400, 3),
            Transition::new(354898800, 2),
            Transition::new(370706400, 3),
            Transition::new(386434800, 2),
            Transition::new(402242400, 3),
            Transition::new(417970800, 2),
            Transition::new(433778400, 3),
            Transition::new(449593200, 2),
            Transition::new(465325200, 3),
            Transition::new(481050000, 2),
            Transition::new(496774800, 3),
            Transition::new(512499600, 2),
            Transition::new(528224400, 3),
            Transition::new(543949200, 2),
            Transition::new(559674000, 3),
            Transition::new(575398800, 2),
            Transition::new(591123600, 3),
            Transition::new(606848400, 2),
            Transition::new(622573200, 3),
            Transition::new(638298000, 2),
            Transition::new(654627600, 3),
            Transition::new(670352400, 4),
            Transition::new(686080800, 1),
            Transition::new(695757600, 3),
            Transition::new(701802000, 2),
            Transition::new(717526800, 3),
            Transition::new(733251600, 2),
            Transition::new(748976400, 3),
            Transition::new(764701200, 2),
            Transition::new(780426000, 3),
            Transition::new(796150800, 2),
            Transition::new(811875600, 3),
            Transition::new(828205200, 2),
            Transition::new(846349200, 3),
            Transition::new(859654800, 2),
            Transition::new(877798800, 3),
            Transition::new(891104400, 2),
            Transition::new(909248400, 3),
            Transition::new(922554000, 2),
            Transition::new(941302800, 3),
            Transition::new(954003600, 2),
            Transition::new(972752400, 3),
            Transition::new(985453200, 2),
            Transition::new(1004202000, 3),
            Transition::new(1017507600, 2),
            Transition::new(1035651600, 3),
            Transition::new(1048957200, 2),
            Transition::new(1067101200, 3),
            Transition::new(1080406800, 2),
            Transition::new(1099155600, 3),
            Transition::new(1111856400, 2),
            Transition::new(1130605200, 3),
            Transition::new(1143306000, 2),
            Transition::new(1162054800, 3),
            Transition::new(1174755600, 2),
            Transition::new(1193504400, 3),
            Transition::new(1206810000, 2),
            Transition::new(1224954000, 3),
            Transition::new(1238259600, 2),
            Transition::new(1256403600, 3),
            Transition::new(1269709200, 2),
            Transition::new(1288458000, 3),
            Transition::new(1301158800, 5),
            Transition::new(1414252800, 3),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(31138, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, true, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_YEKATERINBURG: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1688270553, 1),
            Transition::new(-1592610305, 2),
            Transition::new(-1247544000, 4),
            Transition::new(354913200, 3),
            Transition::new(370720800, 4),
            Transition::new(386449200, 3),
            Transition::new(402256800, 4),
            Transition::new(417985200, 3),
            Transition::new(433792800, 4),
            Transition::new(449607600, 3),
            Transition::new(465339600, 4),
            Transition::new(481064400, 3),
            Transition::new(496789200, 4),
            Transition::new(512514000, 3),
            Transition::new(528238800, 4),
            Transition::new(543963600, 3),
            Transition::new(559688400, 4),
            Transition::new(575413200, 3),
            Transition::new(591138000, 4),
            Transition::new(606862800, 3),
            Transition::new(622587600, 4),
            Transition::new(638312400, 3),
            Transition::new(654642000, 4),
            Transition::new(670366800, 5),
            Transition::new(686095200, 2),
            Transition::new(695772000, 4),
            Transition::new(701816400, 3),
            Transition::new(717541200, 4),
            Transition::new(733266000, 3),
            Transition::new(748990800, 4),
            Transition::new(764715600, 3),
            Transition::new(780440400, 4),
            Transition::new(796165200, 3),
            Transition::new(811890000, 4),
            Transition::new(828219600, 3),
            Transition::new(846363600, 4),
            Transition::new(859669200, 3),
            Transition::new(877813200, 4),
            Transition::new(891118800, 3),
            Transition::new(909262800, 4),
            Transition::new(922568400, 3),
            Transition::new(941317200, 4),
            Transition::new(954018000, 3),
            Transition::new(972766800, 4),
            Transition::new(985467600, 3),
            Transition::new(1004216400, 4),
            Transition::new(1017522000, 3),
            Transition::new(1035666000, 4),
            Transition::new(1048971600, 3),
            Transition::new(1067115600, 4),
            Transition::new(1080421200, 3),
            Transition::new(1099170000, 4),
            Transition::new(1111870800, 3),
            Transition::new(1130619600, 4),
            Transition::new(1143320400, 3),
            Transition::new(1162069200, 4),
            Transition::new(1174770000, 3),
            Transition::new(1193518800, 4),
            Transition::new(1206824400, 3),
            Transition::new(1224968400, 4),
            Transition::new(1238274000, 3),
            Transition::new(1256418000, 4),
            Transition::new(1269723600, 3),
            Transition::new(1288472400, 4),
            Transition::new(1301173200, 6),
            Transition::new(1414267200, 4),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(14553, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(13505, false, Some(b"PMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, true, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ASIA_YEREVAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441162680, 1),
            Transition::new(-405140400, 3),
            Transition::new(354916800, 2),
            Transition::new(370724400, 3),
            Transition::new(386452800, 2),
            Transition::new(402260400, 3),
            Transition::new(417988800, 2),
            Transition::new(433796400, 3),
            Transition::new(449611200, 2),
            Transition::new(465343200, 3),
            Transition::new(481068000, 2),
            Transition::new(496792800, 3),
            Transition::new(512517600, 2),
            Transition::new(528242400, 3),
            Transition::new(543967200, 2),
            Transition::new(559692000, 3),
            Transition::new(575416800, 2),
            Transition::new(591141600, 3),
            Transition::new(606866400, 2),
            Transition::new(622591200, 3),
            Transition::new(638316000, 2),
            Transition::new(654645600, 3),
            Transition::new(670370400, 4),
            Transition::new(686098800, 1),
            Transition::new(701823600, 4),
            Transition::new(717548400, 1),
            Transition::new(733273200, 4),
            Transition::new(748998000, 1),
            Transition::new(764722800, 4),
            Transition::new(780447600, 1),
            Transition::new(796172400, 4),
            Transition::new(811897200, 3),
            Transition::new(859672800, 2),
            Transition::new(877816800, 3),
            Transition::new(891122400, 2),
            Transition::new(909266400, 3),
            Transition::new(922572000, 2),
            Transition::new(941320800, 3),
            Transition::new(954021600, 2),
            Transition::new(972770400, 3),
            Transition::new(985471200, 2),
            Transition::new(1004220000, 3),
            Transition::new(1017525600, 2),
            Transition::new(1035669600, 3),
            Transition::new(1048975200, 2),
            Transition::new(1067119200, 3),
            Transition::new(1080424800, 2),
            Transition::new(1099173600, 3),
            Transition::new(1111874400, 2),
            Transition::new(1130623200, 3),
            Transition::new(1143324000, 2),
            Transition::new(1162072800, 3),
            Transition::new(1174773600, 2),
            Transition::new(1193522400, 3),
            Transition::new(1206828000, 2),
            Transition::new(1224972000, 3),
            Transition::new(1238277600, 2),
            Transition::new(1256421600, 3),
            Transition::new(1269727200, 2),
            Transition::new(1288476000, 3),
            Transition::new(1301176800, 2),
            Transition::new(1319925600, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(10680, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ATLANTIC_AZORES: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713904240, 1),
            Transition::new(-1830376800, 3),
            Transition::new(-1689548400, 2),
            Transition::new(-1677794400, 3),
            Transition::new(-1667430000, 2),
            Transition::new(-1647730800, 3),
            Transition::new(-1635807600, 2),
            Transition::new(-1616194800, 3),
            Transition::new(-1604358000, 2),
            Transition::new(-1584658800, 3),
            Transition::new(-1572735600, 2),
            Transition::new(-1553036400, 3),
            Transition::new(-1541199600, 2),
            Transition::new(-1521500400, 3),
            Transition::new(-1442444400, 2),
            Transition::new(-1426806000, 3),
            Transition::new(-1379286000, 2),
            Transition::new(-1364770800, 3),
            Transition::new(-1348441200, 2),
            Transition::new(-1333321200, 3),
            Transition::new(-1316386800, 2),
            Transition::new(-1301266800, 3),
            Transition::new(-1284332400, 2),
            Transition::new(-1269817200, 3),
            Transition::new(-1221433200, 2),
            Transition::new(-1206918000, 3),
            Transition::new(-1191193200, 2),
            Transition::new(-1175468400, 3),
            Transition::new(-1127689200, 2),
            Transition::new(-1111964400, 3),
            Transition::new(-1096844400, 2),
            Transition::new(-1080514800, 3),
            Transition::new(-1063580400, 2),
            Transition::new(-1049065200, 3),
            Transition::new(-1033340400, 2),
            Transition::new(-1017615600, 3),
            Transition::new(-1002495600, 2),
            Transition::new(-986166000, 3),
            Transition::new(-969231600, 2),
            Transition::new(-950482800, 3),
            Transition::new(-942015600, 2),
            Transition::new(-922662000, 3),
            Transition::new(-906937200, 2),
            Transition::new(-891126000, 3),
            Transition::new(-877302000, 2),
            Transition::new(-873676800, 4),
            Transition::new(-864000000, 2),
            Transition::new(-857948400, 3),
            Transition::new(-845852400, 2),
            Transition::new(-842832000, 4),
            Transition::new(-831340800, 2),
            Transition::new(-825894000, 3),
            Transition::new(-814402800, 2),
            Transition::new(-810777600, 4),
            Transition::new(-799891200, 2),
            Transition::new(-794444400, 3),
            Transition::new(-782953200, 2),
            Transition::new(-779328000, 4),
            Transition::new(-768441600, 2),
            Transition::new(-762994800, 3),
            Transition::new(-749084400, 2),
            Transition::new(-733359600, 3),
            Transition::new(-717624000, 2),
            Transition::new(-701899200, 3),
            Transition::new(-686174400, 2),
            Transition::new(-670449600, 3),
            Transition::new(-654724800, 2),
            Transition::new(-639000000, 3),
            Transition::new(-623275200, 2),
            Transition::new(-607550400, 3),
            Transition::new(-591825600, 2),
            Transition::new(-575496000, 3),
            Transition::new(-559771200, 2),
            Transition::new(-544046400, 3),
            Transition::new(-528321600, 2),
            Transition::new(-512596800, 3),
            Transition::new(-496872000, 2),
            Transition::new(-481147200, 3),
            Transition::new(-465422400, 2),
            Transition::new(-449697600, 3),
            Transition::new(-433972800, 2),
            Transition::new(-417643200, 3),
            Transition::new(-401918400, 2),
            Transition::new(-386193600, 3),
            Transition::new(-370468800, 2),
            Transition::new(-354744000, 3),
            Transition::new(-339019200, 2),
            Transition::new(-323294400, 3),
            Transition::new(-307569600, 2),
            Transition::new(-291844800, 3),
            Transition::new(-276120000, 2),
            Transition::new(-260395200, 3),
            Transition::new(-244670400, 2),
            Transition::new(-228340800, 3),
            Transition::new(-212616000, 2),
            Transition::new(-196891200, 3),
            Transition::new(-181166400, 2),
            Transition::new(-165441600, 3),
            Transition::new(-149716800, 2),
            Transition::new(-133992000, 3),
            Transition::new(-118267200, 5),
            Transition::new(228272400, 4),
            Transition::new(243997200, 5),
            Transition::new(260326800, 4),
            Transition::new(276051600, 5),
            Transition::new(291776400, 4),
            Transition::new(307504800, 5),
            Transition::new(323226000, 4),
            Transition::new(338954400, 5),
            Transition::new(354679200, 4),
            Transition::new(370404000, 5),
            Transition::new(386128800, 4),
            Transition::new(401853600, 5),
            Transition::new(417582000, 4),
            Transition::new(433303200, 5),
            Transition::new(449028000, 4),
            Transition::new(465357600, 5),
            Transition::new(481082400, 4),
            Transition::new(496807200, 5),
            Transition::new(512532000, 4),
            Transition::new(528256800, 5),
            Transition::new(543981600, 4),
            Transition::new(559706400, 5),
            Transition::new(575431200, 4),
            Transition::new(591156000, 5),
            Transition::new(606880800, 4),
            Transition::new(622605600, 5),
            Transition::new(638330400, 4),
            Transition::new(654660000, 5),
            Transition::new(670384800, 4),
            Transition::new(686109600, 5),
            Transition::new(701834400, 4),
            Transition::new(717559200, 6),
            Transition::new(733280400, 4),
            Transition::new(749005200, 5),
            Transition::new(764730000, 4),
            Transition::new(780454800, 5),
            Transition::new(796179600, 4),
            Transition::new(811904400, 5),
            Transition::new(828234000, 4),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(-6160, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-6872, false, Some(b"HMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, true, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, false, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, true, Some(b"+00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-3600, false, Some(b"-01")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(0, true, Some(b"+00")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ATLANTIC_BERMUDA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524506042, 2),
            Transition::new(-1664307642, 1),
            Transition::new(-1648932042, 2),
            Transition::new(-1632080442, 1),
            Transition::new(-1618692042, 2),
            Transition::new(-1262281242, 4),
            Transition::new(-882727200, 3),
            Transition::new(-858538800, 4),
            Transition::new(-845229600, 3),
            Transition::new(-825879600, 4),
            Transition::new(-814384800, 3),
            Transition::new(-793825200, 4),
            Transition::new(-782935200, 3),
            Transition::new(-762375600, 4),
            Transition::new(-713988000, 3),
            Transition::new(-703710000, 4),
            Transition::new(-681933600, 3),
            Transition::new(-672865200, 4),
            Transition::new(-650484000, 3),
            Transition::new(-641415600, 4),
            Transition::new(-618429600, 3),
            Transition::new(-609966000, 4),
            Transition::new(-586980000, 3),
            Transition::new(-578516400, 4),
            Transition::new(-555530400, 3),
            Transition::new(-546462000, 4),
            Transition::new(-429127200, 3),
            Transition::new(-415825200, 4),
            Transition::new(136360800, 3),
            Transition::new(152082000, 4),
            Transition::new(167810400, 3),
            Transition::new(183531600, 4),
            Transition::new(199260000, 3),
            Transition::new(215586000, 4),
            Transition::new(230709600, 3),
            Transition::new(247035600, 4),
            Transition::new(262764000, 3),
            Transition::new(278485200, 4),
            Transition::new(294213600, 3),
            Transition::new(309934800, 4),
            Transition::new(325663200, 3),
            Transition::new(341384400, 4),
            Transition::new(357112800, 3),
            Transition::new(372834000, 4),
            Transition::new(388562400, 3),
            Transition::new(404888400, 4),
            Transition::new(420012000, 3),
            Transition::new(436338000, 4),
            Transition::new(452066400, 3),
            Transition::new(467787600, 4),
            Transition::new(483516000, 3),
            Transition::new(499237200, 4),
            Transition::new(514965600, 3),
            Transition::new(530686800, 4),
            Transition::new(544600800, 3),
            Transition::new(562136400, 4),
            Transition::new(576050400, 3),
            Transition::new(594190800, 4),
            Transition::new(607500000, 3),
            Transition::new(625640400, 4),
            Transition::new(638949600, 3),
            Transition::new(657090000, 4),
            Transition::new(671004000, 3),
            Transition::new(688539600, 4),
            Transition::new(702453600, 3),
            Transition::new(719989200, 4),
            Transition::new(733903200, 3),
            Transition::new(752043600, 4),
            Transition::new(765352800, 3),
            Transition::new(783493200, 4),
            Transition::new(796802400, 3),
            Transition::new(814942800, 4),
            Transition::new(828856800, 3),
            Transition::new(846392400, 4),
            Transition::new(860306400, 3),
            Transition::new(877842000, 4),
            Transition::new(891756000, 3),
            Transition::new(909291600, 4),
            Transition::new(923205600, 3),
            Transition::new(941346000, 4),
            Transition::new(954655200, 3),
            Transition::new(972795600, 4),
            Transition::new(986104800, 3),
            Transition::new(1004245200, 4),
            Transition::new(1018159200, 3),
            Transition::new(1035694800, 4),
            Transition::new(1049608800, 3),
            Transition::new(1067144400, 4),
            Transition::new(1081058400, 3),
            Transition::new(1099198800, 4),
            Transition::new(1112508000, 3),
            Transition::new(1130648400, 4),
            Transition::new(1143957600, 3),
            Transition::new(1162098000, 4),
            Transition::new(1173592800, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-15558, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-11958, true, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-15558, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"AST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-14400, false, Some(b"AST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-10800, true, Some(b"ADT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ATLANTIC_CANARY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1509663504, 1),
            Transition::new(-733874400, 2),
            Transition::new(323827200, 3),
            Transition::new(338950800, 2),
            Transition::new(354675600, 3),
            Transition::new(370400400, 2),
            Transition::new(386125200, 3),
            Transition::new(401850000, 2),
            Transition::new(417574800, 3),
            Transition::new(433299600, 2),
            Transition::new(449024400, 3),
            Transition::new(465354000, 2),
            Transition::new(481078800, 3),
            Transition::new(496803600, 2),
            Transition::new(512528400, 3),
            Transition::new(528253200, 2),
            Transition::new(543978000, 3),
            Transition::new(559702800, 2),
            Transition::new(575427600, 3),
            Transition::new(591152400, 2),
            Transition::new(606877200, 3),
            Transition::new(622602000, 2),
            Transition::new(638326800, 3),
            Transition::new(654656400, 2),
            Transition::new(670381200, 3),
            Transition::new(686106000, 2),
            Transition::new(701830800, 3),
            Transition::new(717555600, 2),
            Transition::new(733280400, 3),
            Transition::new(749005200, 2),
            Transition::new(764730000, 3),
            Transition::new(780454800, 2),
            Transition::new(796179600, 3),
            Transition::new(811904400, 2),
            Transition::new(828234000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-3696, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"WET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"WEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ATLANTIC_CAPE_VERDE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1830376800, 1),
            Transition::new(-862610400, 2),
            Transition::new(-764118000, 1),
            Transition::new(186120000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-5644, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, false, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, true, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ATLANTIC_FAEROE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1955748776, 1),
            Transition::new(354675600, 2),
            Transition::new(370400400, 1),
            Transition::new(386125200, 2),
            Transition::new(401850000, 1),
            Transition::new(417574800, 2),
            Transition::new(433299600, 1),
            Transition::new(449024400, 2),
            Transition::new(465354000, 1),
            Transition::new(481078800, 2),
            Transition::new(496803600, 1),
            Transition::new(512528400, 2),
            Transition::new(528253200, 1),
            Transition::new(543978000, 2),
            Transition::new(559702800, 1),
            Transition::new(575427600, 2),
            Transition::new(591152400, 1),
            Transition::new(606877200, 2),
            Transition::new(622602000, 1),
            Transition::new(638326800, 2),
            Transition::new(654656400, 1),
            Transition::new(670381200, 2),
            Transition::new(686106000, 1),
            Transition::new(701830800, 2),
            Transition::new(717555600, 1),
            Transition::new(733280400, 2),
            Transition::new(749005200, 1),
            Transition::new(764730000, 2),
            Transition::new(780454800, 1),
            Transition::new(796179600, 2),
            Transition::new(811904400, 1),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-1624, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"WET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"WEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ATLANTIC_JAN_MAYEN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-3600, false, Some(b"-01")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ATLANTIC_MADEIRA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713906344, 1),
            Transition::new(-1830380400, 3),
            Transition::new(-1689552000, 2),
            Transition::new(-1677798000, 3),
            Transition::new(-1667433600, 2),
            Transition::new(-1647734400, 3),
            Transition::new(-1635811200, 2),
            Transition::new(-1616198400, 3),
            Transition::new(-1604361600, 2),
            Transition::new(-1584662400, 3),
            Transition::new(-1572739200, 2),
            Transition::new(-1553040000, 3),
            Transition::new(-1541203200, 2),
            Transition::new(-1521504000, 3),
            Transition::new(-1442448000, 2),
            Transition::new(-1426809600, 3),
            Transition::new(-1379289600, 2),
            Transition::new(-1364774400, 3),
            Transition::new(-1348444800, 2),
            Transition::new(-1333324800, 3),
            Transition::new(-1316390400, 2),
            Transition::new(-1301270400, 3),
            Transition::new(-1284336000, 2),
            Transition::new(-1269820800, 3),
            Transition::new(-1221436800, 2),
            Transition::new(-1206921600, 3),
            Transition::new(-1191196800, 2),
            Transition::new(-1175472000, 3),
            Transition::new(-1127692800, 2),
            Transition::new(-1111968000, 3),
            Transition::new(-1096848000, 2),
            Transition::new(-1080518400, 3),
            Transition::new(-1063584000, 2),
            Transition::new(-1049068800, 3),
            Transition::new(-1033344000, 2),
            Transition::new(-1017619200, 3),
            Transition::new(-1002499200, 2),
            Transition::new(-986169600, 3),
            Transition::new(-969235200, 2),
            Transition::new(-950486400, 3),
            Transition::new(-942019200, 2),
            Transition::new(-922665600, 3),
            Transition::new(-906940800, 2),
            Transition::new(-891129600, 3),
            Transition::new(-877305600, 2),
            Transition::new(-873680400, 4),
            Transition::new(-864003600, 2),
            Transition::new(-857952000, 3),
            Transition::new(-845856000, 2),
            Transition::new(-842835600, 4),
            Transition::new(-831344400, 2),
            Transition::new(-825897600, 3),
            Transition::new(-814406400, 2),
            Transition::new(-810781200, 4),
            Transition::new(-799894800, 2),
            Transition::new(-794448000, 3),
            Transition::new(-782956800, 2),
            Transition::new(-779331600, 4),
            Transition::new(-768445200, 2),
            Transition::new(-762998400, 3),
            Transition::new(-749088000, 2),
            Transition::new(-733363200, 3),
            Transition::new(-717627600, 2),
            Transition::new(-701902800, 3),
            Transition::new(-686178000, 2),
            Transition::new(-670453200, 3),
            Transition::new(-654728400, 2),
            Transition::new(-639003600, 3),
            Transition::new(-623278800, 2),
            Transition::new(-607554000, 3),
            Transition::new(-591829200, 2),
            Transition::new(-575499600, 3),
            Transition::new(-559774800, 2),
            Transition::new(-544050000, 3),
            Transition::new(-528325200, 2),
            Transition::new(-512600400, 3),
            Transition::new(-496875600, 2),
            Transition::new(-481150800, 3),
            Transition::new(-465426000, 2),
            Transition::new(-449701200, 3),
            Transition::new(-433976400, 2),
            Transition::new(-417646800, 3),
            Transition::new(-401922000, 2),
            Transition::new(-386197200, 3),
            Transition::new(-370472400, 2),
            Transition::new(-354747600, 3),
            Transition::new(-339022800, 2),
            Transition::new(-323298000, 3),
            Transition::new(-307573200, 2),
            Transition::new(-291848400, 3),
            Transition::new(-276123600, 2),
            Transition::new(-260398800, 3),
            Transition::new(-244674000, 2),
            Transition::new(-228344400, 3),
            Transition::new(-212619600, 2),
            Transition::new(-196894800, 3),
            Transition::new(-181170000, 2),
            Transition::new(-165445200, 3),
            Transition::new(-149720400, 2),
            Transition::new(-133995600, 3),
            Transition::new(-118270800, 6),
            Transition::new(228268800, 5),
            Transition::new(243993600, 6),
            Transition::new(260323200, 5),
            Transition::new(276048000, 6),
            Transition::new(291772800, 5),
            Transition::new(307501200, 6),
            Transition::new(323222400, 5),
            Transition::new(338950800, 6),
            Transition::new(354675600, 5),
            Transition::new(370400400, 6),
            Transition::new(386125200, 5),
            Transition::new(401850000, 6),
            Transition::new(417578400, 5),
            Transition::new(433299600, 6),
            Transition::new(449024400, 5),
            Transition::new(465354000, 6),
            Transition::new(481078800, 5),
            Transition::new(496803600, 6),
            Transition::new(512528400, 5),
            Transition::new(528253200, 6),
            Transition::new(543978000, 5),
            Transition::new(559702800, 6),
            Transition::new(575427600, 5),
            Transition::new(591152400, 6),
            Transition::new(606877200, 5),
            Transition::new(622602000, 6),
            Transition::new(638326800, 5),
            Transition::new(654656400, 6),
            Transition::new(670381200, 5),
            Transition::new(686106000, 6),
            Transition::new(701830800, 5),
            Transition::new(717555600, 6),
            Transition::new(733280400, 5),
            Transition::new(749005200, 6),
            Transition::new(764730000, 5),
            Transition::new(780454800, 6),
            Transition::new(796179600, 5),
            Transition::new(811904400, 6),
            Transition::new(828234000, 5),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(-4056, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-4056, false, Some(b"FMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, true, Some(b"+00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"+01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"WET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"WEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ATLANTIC_SOUTH_GEORGIA: TimeZoneRef<'static> =
        match TimeZoneRef::<'static>::new(
            &[Transition::new(-2524512832, 1)],
            &{
                const V: [LocalTimeType; 2] = [
                    match LocalTimeType::new(-8768, false, Some(b"LMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-7200, false, Some(b"-02")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                ];
                V
            },
            &[],
            &Some({
                const V: TransitionRule =
                    TransitionRule::Fixed(match LocalTimeType::new(-7200, false, Some(b"-02")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    });
                V
            }),
        ) {
            Ok(v) => v,
            Err(e) => panic!("{}", e.0),
        };

    pub(crate) const ATLANTIC_STANLEY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524507716, 1),
            Transition::new(-1824235716, 3),
            Transition::new(-1018209600, 2),
            Transition::new(-1003093200, 3),
            Transition::new(-986760000, 2),
            Transition::new(-971643600, 3),
            Transition::new(-954705600, 2),
            Transition::new(-939589200, 3),
            Transition::new(-923256000, 2),
            Transition::new(-908139600, 3),
            Transition::new(-891806400, 2),
            Transition::new(-876690000, 3),
            Transition::new(-860356800, 2),
            Transition::new(-852066000, 3),
            Transition::new(420609600, 5),
            Transition::new(433306800, 4),
            Transition::new(452052000, 5),
            Transition::new(464151600, 4),
            Transition::new(483501600, 5),
            Transition::new(495601200, 2),
            Transition::new(514350000, 3),
            Transition::new(527054400, 2),
            Transition::new(545799600, 3),
            Transition::new(558504000, 2),
            Transition::new(577249200, 3),
            Transition::new(589953600, 2),
            Transition::new(608698800, 3),
            Transition::new(621403200, 2),
            Transition::new(640753200, 3),
            Transition::new(652852800, 2),
            Transition::new(672202800, 3),
            Transition::new(684907200, 2),
            Transition::new(703652400, 3),
            Transition::new(716356800, 2),
            Transition::new(735102000, 3),
            Transition::new(747806400, 2),
            Transition::new(766551600, 3),
            Transition::new(779256000, 2),
            Transition::new(798001200, 3),
            Transition::new(810705600, 2),
            Transition::new(830055600, 3),
            Transition::new(842760000, 2),
            Transition::new(861505200, 3),
            Transition::new(874209600, 2),
            Transition::new(892954800, 3),
            Transition::new(905659200, 2),
            Transition::new(924404400, 3),
            Transition::new(937108800, 2),
            Transition::new(955854000, 3),
            Transition::new(968558400, 2),
            Transition::new(987310800, 3),
            Transition::new(999410400, 2),
            Transition::new(1019365200, 3),
            Transition::new(1030860000, 2),
            Transition::new(1050814800, 3),
            Transition::new(1062914400, 2),
            Transition::new(1082264400, 3),
            Transition::new(1094364000, 2),
            Transition::new(1113714000, 3),
            Transition::new(1125813600, 2),
            Transition::new(1145163600, 3),
            Transition::new(1157263200, 2),
            Transition::new(1176613200, 3),
            Transition::new(1188712800, 2),
            Transition::new(1208667600, 3),
            Transition::new(1220767200, 2),
            Transition::new(1240117200, 3),
            Transition::new(1252216800, 2),
            Transition::new(1271566800, 3),
            Transition::new(1283666400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-13884, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-13884, false, Some(b"SMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, true, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-7200, true, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ATLANTIC_ST_HELENA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524520232, 1),
            Transition::new(-599614632, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-1368, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-1368, false, Some(b"JMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_ACT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2364113092, 2),
            Transition::new(-1672560000, 1),
            Transition::new(-1665388800, 2),
            Transition::new(-883641600, 1),
            Transition::new(-876124800, 2),
            Transition::new(-860400000, 1),
            Transition::new(-844675200, 2),
            Transition::new(-828345600, 1),
            Transition::new(-813225600, 2),
            Transition::new(57686400, 1),
            Transition::new(67968000, 2),
            Transition::new(89136000, 1),
            Transition::new(100022400, 2),
            Transition::new(120585600, 1),
            Transition::new(131472000, 2),
            Transition::new(152035200, 1),
            Transition::new(162921600, 2),
            Transition::new(183484800, 1),
            Transition::new(194976000, 2),
            Transition::new(215539200, 1),
            Transition::new(226425600, 2),
            Transition::new(246988800, 1),
            Transition::new(257875200, 2),
            Transition::new(278438400, 1),
            Transition::new(289324800, 2),
            Transition::new(309888000, 1),
            Transition::new(320774400, 2),
            Transition::new(341337600, 1),
            Transition::new(352224000, 2),
            Transition::new(372787200, 1),
            Transition::new(386697600, 2),
            Transition::new(404841600, 1),
            Transition::new(415728000, 2),
            Transition::new(436291200, 1),
            Transition::new(447177600, 2),
            Transition::new(467740800, 1),
            Transition::new(478627200, 2),
            Transition::new(499190400, 1),
            Transition::new(511286400, 2),
            Transition::new(530035200, 1),
            Transition::new(542736000, 2),
            Transition::new(562089600, 1),
            Transition::new(574790400, 2),
            Transition::new(594144000, 1),
            Transition::new(606240000, 2),
            Transition::new(625593600, 1),
            Transition::new(636480000, 2),
            Transition::new(657043200, 1),
            Transition::new(667929600, 2),
            Transition::new(688492800, 1),
            Transition::new(699379200, 2),
            Transition::new(719942400, 1),
            Transition::new(731433600, 2),
            Transition::new(751996800, 1),
            Transition::new(762883200, 2),
            Transition::new(783446400, 1),
            Transition::new(794332800, 2),
            Transition::new(814896000, 1),
            Transition::new(828201600, 2),
            Transition::new(846345600, 1),
            Transition::new(859651200, 2),
            Transition::new(877795200, 1),
            Transition::new(891100800, 2),
            Transition::new(909244800, 1),
            Transition::new(922550400, 2),
            Transition::new(941299200, 1),
            Transition::new(954000000, 2),
            Transition::new(967305600, 1),
            Transition::new(985449600, 2),
            Transition::new(1004198400, 1),
            Transition::new(1017504000, 2),
            Transition::new(1035648000, 1),
            Transition::new(1048953600, 2),
            Transition::new(1067097600, 1),
            Transition::new(1080403200, 2),
            Transition::new(1099152000, 1),
            Transition::new(1111852800, 2),
            Transition::new(1130601600, 1),
            Transition::new(1143907200, 2),
            Transition::new(1162051200, 1),
            Transition::new(1174752000, 2),
            Transition::new(1193500800, 1),
            Transition::new(1207411200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(36292, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(36000, false, Some(b"AEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_ADELAIDE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2364110060, 1),
            Transition::new(-2230189200, 3),
            Transition::new(-1672558200, 2),
            Transition::new(-1665387000, 3),
            Transition::new(-883639800, 2),
            Transition::new(-876123000, 3),
            Transition::new(-860398200, 2),
            Transition::new(-844673400, 3),
            Transition::new(-828343800, 2),
            Transition::new(-813223800, 3),
            Transition::new(57688200, 2),
            Transition::new(67969800, 3),
            Transition::new(89137800, 2),
            Transition::new(100024200, 3),
            Transition::new(120587400, 2),
            Transition::new(131473800, 3),
            Transition::new(152037000, 2),
            Transition::new(162923400, 3),
            Transition::new(183486600, 2),
            Transition::new(194977800, 3),
            Transition::new(215541000, 2),
            Transition::new(226427400, 3),
            Transition::new(246990600, 2),
            Transition::new(257877000, 3),
            Transition::new(278440200, 2),
            Transition::new(289326600, 3),
            Transition::new(309889800, 2),
            Transition::new(320776200, 3),
            Transition::new(341339400, 2),
            Transition::new(352225800, 3),
            Transition::new(372789000, 2),
            Transition::new(384280200, 3),
            Transition::new(404843400, 2),
            Transition::new(415729800, 3),
            Transition::new(436293000, 2),
            Transition::new(447179400, 3),
            Transition::new(467742600, 2),
            Transition::new(478629000, 3),
            Transition::new(499192200, 2),
            Transition::new(511288200, 3),
            Transition::new(530037000, 2),
            Transition::new(542737800, 3),
            Transition::new(562091400, 2),
            Transition::new(574792200, 3),
            Transition::new(594145800, 2),
            Transition::new(606241800, 3),
            Transition::new(625595400, 2),
            Transition::new(637691400, 3),
            Transition::new(657045000, 2),
            Transition::new(667931400, 3),
            Transition::new(688494600, 2),
            Transition::new(701195400, 3),
            Transition::new(719944200, 2),
            Transition::new(731435400, 3),
            Transition::new(751998600, 2),
            Transition::new(764094600, 3),
            Transition::new(783448200, 2),
            Transition::new(796149000, 3),
            Transition::new(814897800, 2),
            Transition::new(828203400, 3),
            Transition::new(846347400, 2),
            Transition::new(859653000, 3),
            Transition::new(877797000, 2),
            Transition::new(891102600, 3),
            Transition::new(909246600, 2),
            Transition::new(922552200, 3),
            Transition::new(941301000, 2),
            Transition::new(954001800, 3),
            Transition::new(972750600, 2),
            Transition::new(985451400, 3),
            Transition::new(1004200200, 2),
            Transition::new(1017505800, 3),
            Transition::new(1035649800, 2),
            Transition::new(1048955400, 3),
            Transition::new(1067099400, 2),
            Transition::new(1080405000, 3),
            Transition::new(1099153800, 2),
            Transition::new(1111854600, 3),
            Transition::new(1130603400, 2),
            Transition::new(1143909000, 3),
            Transition::new(1162053000, 2),
            Transition::new(1174753800, 3),
            Transition::new(1193502600, 2),
            Transition::new(1207413000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(33260, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"ACST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(37800, true, Some(b"ACDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(34200, false, Some(b"ACST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(34200, false, Some(b"ACST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(37800, true, Some(b"ACDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_BRISBANE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2366791928, 2),
            Transition::new(-1672560000, 1),
            Transition::new(-1665388800, 2),
            Transition::new(-883641600, 1),
            Transition::new(-876124800, 2),
            Transition::new(-860400000, 1),
            Transition::new(-844675200, 2),
            Transition::new(-828345600, 1),
            Transition::new(-813225600, 2),
            Transition::new(57686400, 1),
            Transition::new(67968000, 2),
            Transition::new(625593600, 1),
            Transition::new(636480000, 2),
            Transition::new(657043200, 1),
            Transition::new(667929600, 2),
            Transition::new(688492800, 1),
            Transition::new(699379200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(36728, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_BROKEN_HILL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2364110748, 1),
            Transition::new(-2314951200, 2),
            Transition::new(-2230189200, 4),
            Transition::new(-1672558200, 3),
            Transition::new(-1665387000, 4),
            Transition::new(-883639800, 3),
            Transition::new(-876123000, 4),
            Transition::new(-860398200, 3),
            Transition::new(-844673400, 4),
            Transition::new(-828343800, 3),
            Transition::new(-813223800, 4),
            Transition::new(57688200, 3),
            Transition::new(67969800, 4),
            Transition::new(89137800, 3),
            Transition::new(100024200, 4),
            Transition::new(120587400, 3),
            Transition::new(131473800, 4),
            Transition::new(152037000, 3),
            Transition::new(162923400, 4),
            Transition::new(183486600, 3),
            Transition::new(194977800, 4),
            Transition::new(215541000, 3),
            Transition::new(226427400, 4),
            Transition::new(246990600, 3),
            Transition::new(257877000, 4),
            Transition::new(278440200, 3),
            Transition::new(289326600, 4),
            Transition::new(309889800, 3),
            Transition::new(320776200, 4),
            Transition::new(341339400, 3),
            Transition::new(352225800, 4),
            Transition::new(372789000, 3),
            Transition::new(386699400, 4),
            Transition::new(404843400, 3),
            Transition::new(415729800, 4),
            Transition::new(436293000, 3),
            Transition::new(447179400, 4),
            Transition::new(467742600, 3),
            Transition::new(478629000, 4),
            Transition::new(499192200, 3),
            Transition::new(511288200, 4),
            Transition::new(530037000, 3),
            Transition::new(542737800, 4),
            Transition::new(562091400, 3),
            Transition::new(574792200, 4),
            Transition::new(594145800, 3),
            Transition::new(606241800, 4),
            Transition::new(625595400, 3),
            Transition::new(636481800, 4),
            Transition::new(657045000, 3),
            Transition::new(667931400, 4),
            Transition::new(688494600, 3),
            Transition::new(699381000, 4),
            Transition::new(719944200, 3),
            Transition::new(731435400, 4),
            Transition::new(751998600, 3),
            Transition::new(762885000, 4),
            Transition::new(783448200, 3),
            Transition::new(794334600, 4),
            Transition::new(814897800, 3),
            Transition::new(828203400, 4),
            Transition::new(846347400, 3),
            Transition::new(859653000, 4),
            Transition::new(877797000, 3),
            Transition::new(891102600, 4),
            Transition::new(909246600, 3),
            Transition::new(922552200, 4),
            Transition::new(941301000, 3),
            Transition::new(954001800, 4),
            Transition::new(972750600, 3),
            Transition::new(985451400, 4),
            Transition::new(1004200200, 3),
            Transition::new(1017505800, 4),
            Transition::new(1035649800, 3),
            Transition::new(1048955400, 4),
            Transition::new(1067099400, 3),
            Transition::new(1080405000, 4),
            Transition::new(1099153800, 3),
            Transition::new(1111854600, 4),
            Transition::new(1130603400, 3),
            Transition::new(1143909000, 4),
            Transition::new(1162053000, 3),
            Transition::new(1174753800, 4),
            Transition::new(1193502600, 3),
            Transition::new(1207413000, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(33948, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"ACST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(37800, true, Some(b"ACDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(34200, false, Some(b"ACST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(34200, false, Some(b"ACST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(37800, true, Some(b"ACDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_CURRIE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2345794528, 2),
            Transition::new(-1680508800, 1),
            Transition::new(-1665388800, 2),
            Transition::new(-1646640000, 1),
            Transition::new(-1635753600, 2),
            Transition::new(-1615190400, 1),
            Transition::new(-1604304000, 2),
            Transition::new(-883641600, 1),
            Transition::new(-876124800, 2),
            Transition::new(-860400000, 1),
            Transition::new(-844675200, 2),
            Transition::new(-828345600, 1),
            Transition::new(-813225600, 2),
            Transition::new(-37267200, 1),
            Transition::new(-25776000, 2),
            Transition::new(-5817600, 1),
            Transition::new(5673600, 2),
            Transition::new(25632000, 1),
            Transition::new(37728000, 2),
            Transition::new(57686400, 1),
            Transition::new(67968000, 2),
            Transition::new(89136000, 1),
            Transition::new(100022400, 2),
            Transition::new(120585600, 1),
            Transition::new(131472000, 2),
            Transition::new(152035200, 1),
            Transition::new(162921600, 2),
            Transition::new(183484800, 1),
            Transition::new(194976000, 2),
            Transition::new(215539200, 1),
            Transition::new(226425600, 2),
            Transition::new(246988800, 1),
            Transition::new(257875200, 2),
            Transition::new(278438400, 1),
            Transition::new(289324800, 2),
            Transition::new(309888000, 1),
            Transition::new(320774400, 2),
            Transition::new(341337600, 1),
            Transition::new(352224000, 2),
            Transition::new(372787200, 1),
            Transition::new(386092800, 2),
            Transition::new(404841600, 1),
            Transition::new(417542400, 2),
            Transition::new(436291200, 1),
            Transition::new(447177600, 2),
            Transition::new(467740800, 1),
            Transition::new(478627200, 2),
            Transition::new(499190400, 1),
            Transition::new(510076800, 2),
            Transition::new(530035200, 1),
            Transition::new(542736000, 2),
            Transition::new(562089600, 1),
            Transition::new(574790400, 2),
            Transition::new(594144000, 1),
            Transition::new(606240000, 2),
            Transition::new(625593600, 1),
            Transition::new(637689600, 2),
            Transition::new(657043200, 1),
            Transition::new(670348800, 2),
            Transition::new(686678400, 1),
            Transition::new(701798400, 2),
            Transition::new(718128000, 1),
            Transition::new(733248000, 2),
            Transition::new(749577600, 1),
            Transition::new(764697600, 2),
            Transition::new(781027200, 1),
            Transition::new(796147200, 2),
            Transition::new(812476800, 1),
            Transition::new(828201600, 2),
            Transition::new(844531200, 1),
            Transition::new(859651200, 2),
            Transition::new(875980800, 1),
            Transition::new(891100800, 2),
            Transition::new(907430400, 1),
            Transition::new(922550400, 2),
            Transition::new(938880000, 1),
            Transition::new(954000000, 2),
            Transition::new(967305600, 1),
            Transition::new(985449600, 2),
            Transition::new(1002384000, 1),
            Transition::new(1017504000, 2),
            Transition::new(1033833600, 1),
            Transition::new(1048953600, 2),
            Transition::new(1065283200, 1),
            Transition::new(1080403200, 2),
            Transition::new(1096732800, 1),
            Transition::new(1111852800, 2),
            Transition::new(1128182400, 1),
            Transition::new(1143907200, 2),
            Transition::new(1159632000, 1),
            Transition::new(1174752000, 2),
            Transition::new(1191686400, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(34528, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(36000, false, Some(b"AEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_DARWIN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2364108200, 1),
            Transition::new(-2230189200, 3),
            Transition::new(-1672558200, 2),
            Transition::new(-1665387000, 3),
            Transition::new(-883639800, 2),
            Transition::new(-876123000, 3),
            Transition::new(-860398200, 2),
            Transition::new(-844673400, 3),
            Transition::new(-828343800, 2),
            Transition::new(-813223800, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(31400, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"ACST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(37800, true, Some(b"ACDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(34200, false, Some(b"ACST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(34200, false, Some(b"ACST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_EUCLA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2337928528, 2),
            Transition::new(-1672555500, 1),
            Transition::new(-1665384300, 2),
            Transition::new(-883637100, 1),
            Transition::new(-876120300, 2),
            Transition::new(-860395500, 1),
            Transition::new(-844670700, 2),
            Transition::new(152039700, 1),
            Transition::new(162926100, 2),
            Transition::new(436295700, 1),
            Transition::new(447182100, 2),
            Transition::new(690311700, 1),
            Transition::new(699383700, 2),
            Transition::new(1165079700, 1),
            Transition::new(1174756500, 2),
            Transition::new(1193505300, 1),
            Transition::new(1206810900, 2),
            Transition::new(1224954900, 1),
            Transition::new(1238260500, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(30928, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(35100, true, Some(b"+0945")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(31500, false, Some(b"+0845")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(31500, false, Some(b"+0845")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_HOBART: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2345795356, 2),
            Transition::new(-1680508800, 1),
            Transition::new(-1665388800, 2),
            Transition::new(-1646640000, 1),
            Transition::new(-1635753600, 2),
            Transition::new(-1615190400, 1),
            Transition::new(-1604304000, 2),
            Transition::new(-883641600, 1),
            Transition::new(-876124800, 2),
            Transition::new(-860400000, 1),
            Transition::new(-844675200, 2),
            Transition::new(-828345600, 1),
            Transition::new(-813225600, 2),
            Transition::new(-71136000, 1),
            Transition::new(-55411200, 2),
            Transition::new(-37267200, 1),
            Transition::new(-25776000, 2),
            Transition::new(-5817600, 1),
            Transition::new(5673600, 2),
            Transition::new(25632000, 1),
            Transition::new(37728000, 2),
            Transition::new(57686400, 1),
            Transition::new(67968000, 2),
            Transition::new(89136000, 1),
            Transition::new(100022400, 2),
            Transition::new(120585600, 1),
            Transition::new(131472000, 2),
            Transition::new(152035200, 1),
            Transition::new(162921600, 2),
            Transition::new(183484800, 1),
            Transition::new(194976000, 2),
            Transition::new(215539200, 1),
            Transition::new(226425600, 2),
            Transition::new(246988800, 1),
            Transition::new(257875200, 2),
            Transition::new(278438400, 1),
            Transition::new(289324800, 2),
            Transition::new(309888000, 1),
            Transition::new(320774400, 2),
            Transition::new(341337600, 1),
            Transition::new(352224000, 2),
            Transition::new(372787200, 1),
            Transition::new(386092800, 2),
            Transition::new(404841600, 1),
            Transition::new(417542400, 2),
            Transition::new(436291200, 1),
            Transition::new(447177600, 2),
            Transition::new(467740800, 1),
            Transition::new(478627200, 2),
            Transition::new(499190400, 1),
            Transition::new(510076800, 2),
            Transition::new(530035200, 1),
            Transition::new(542736000, 2),
            Transition::new(562089600, 1),
            Transition::new(574790400, 2),
            Transition::new(594144000, 1),
            Transition::new(606240000, 2),
            Transition::new(625593600, 1),
            Transition::new(637689600, 2),
            Transition::new(657043200, 1),
            Transition::new(670348800, 2),
            Transition::new(686678400, 1),
            Transition::new(701798400, 2),
            Transition::new(718128000, 1),
            Transition::new(733248000, 2),
            Transition::new(749577600, 1),
            Transition::new(764697600, 2),
            Transition::new(781027200, 1),
            Transition::new(796147200, 2),
            Transition::new(812476800, 1),
            Transition::new(828201600, 2),
            Transition::new(844531200, 1),
            Transition::new(859651200, 2),
            Transition::new(875980800, 1),
            Transition::new(891100800, 2),
            Transition::new(907430400, 1),
            Transition::new(922550400, 2),
            Transition::new(938880000, 1),
            Transition::new(954000000, 2),
            Transition::new(967305600, 1),
            Transition::new(985449600, 2),
            Transition::new(1002384000, 1),
            Transition::new(1017504000, 2),
            Transition::new(1033833600, 1),
            Transition::new(1048953600, 2),
            Transition::new(1065283200, 1),
            Transition::new(1080403200, 2),
            Transition::new(1096732800, 1),
            Transition::new(1111852800, 2),
            Transition::new(1128182400, 1),
            Transition::new(1143907200, 2),
            Transition::new(1159632000, 1),
            Transition::new(1174752000, 2),
            Transition::new(1191686400, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(35356, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(36000, false, Some(b"AEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_LHI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2364114980, 1),
            Transition::new(352216800, 3),
            Transition::new(372785400, 2),
            Transition::new(384273000, 3),
            Transition::new(404839800, 2),
            Transition::new(415722600, 3),
            Transition::new(436289400, 2),
            Transition::new(447172200, 3),
            Transition::new(467739000, 2),
            Transition::new(478621800, 3),
            Transition::new(499188600, 4),
            Transition::new(511282800, 3),
            Transition::new(530033400, 4),
            Transition::new(542732400, 3),
            Transition::new(562087800, 4),
            Transition::new(574786800, 3),
            Transition::new(594142200, 4),
            Transition::new(606236400, 3),
            Transition::new(625591800, 4),
            Transition::new(636476400, 3),
            Transition::new(657041400, 4),
            Transition::new(667926000, 3),
            Transition::new(688491000, 4),
            Transition::new(699375600, 3),
            Transition::new(719940600, 4),
            Transition::new(731430000, 3),
            Transition::new(751995000, 4),
            Transition::new(762879600, 3),
            Transition::new(783444600, 4),
            Transition::new(794329200, 3),
            Transition::new(814894200, 4),
            Transition::new(828198000, 3),
            Transition::new(846343800, 4),
            Transition::new(859647600, 3),
            Transition::new(877793400, 4),
            Transition::new(891097200, 3),
            Transition::new(909243000, 4),
            Transition::new(922546800, 3),
            Transition::new(941297400, 4),
            Transition::new(953996400, 3),
            Transition::new(967303800, 4),
            Transition::new(985446000, 3),
            Transition::new(1004196600, 4),
            Transition::new(1017500400, 3),
            Transition::new(1035646200, 4),
            Transition::new(1048950000, 3),
            Transition::new(1067095800, 4),
            Transition::new(1080399600, 3),
            Transition::new(1099150200, 4),
            Transition::new(1111849200, 3),
            Transition::new(1130599800, 4),
            Transition::new(1143903600, 3),
            Transition::new(1162049400, 4),
            Transition::new(1174748400, 3),
            Transition::new(1193499000, 4),
            Transition::new(1207407600, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(38180, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(41400, true, Some(b"+1130")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(37800, false, Some(b"+1030")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(37800, false, Some(b"+1030")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(39600, true, Some(b"+11")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_LINDEMAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2366790956, 2),
            Transition::new(-1672560000, 1),
            Transition::new(-1665388800, 2),
            Transition::new(-883641600, 1),
            Transition::new(-876124800, 2),
            Transition::new(-860400000, 1),
            Transition::new(-844675200, 2),
            Transition::new(-828345600, 1),
            Transition::new(-813225600, 2),
            Transition::new(57686400, 1),
            Transition::new(67968000, 2),
            Transition::new(625593600, 1),
            Transition::new(636480000, 2),
            Transition::new(657043200, 1),
            Transition::new(667929600, 2),
            Transition::new(688492800, 1),
            Transition::new(699379200, 2),
            Transition::new(719942400, 1),
            Transition::new(731433600, 2),
            Transition::new(751996800, 1),
            Transition::new(762883200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(35756, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_MELBOURNE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2364111592, 2),
            Transition::new(-1672560000, 1),
            Transition::new(-1665388800, 2),
            Transition::new(-883641600, 1),
            Transition::new(-876124800, 2),
            Transition::new(-860400000, 1),
            Transition::new(-844675200, 2),
            Transition::new(-828345600, 1),
            Transition::new(-813225600, 2),
            Transition::new(57686400, 1),
            Transition::new(67968000, 2),
            Transition::new(89136000, 1),
            Transition::new(100022400, 2),
            Transition::new(120585600, 1),
            Transition::new(131472000, 2),
            Transition::new(152035200, 1),
            Transition::new(162921600, 2),
            Transition::new(183484800, 1),
            Transition::new(194976000, 2),
            Transition::new(215539200, 1),
            Transition::new(226425600, 2),
            Transition::new(246988800, 1),
            Transition::new(257875200, 2),
            Transition::new(278438400, 1),
            Transition::new(289324800, 2),
            Transition::new(309888000, 1),
            Transition::new(320774400, 2),
            Transition::new(341337600, 1),
            Transition::new(352224000, 2),
            Transition::new(372787200, 1),
            Transition::new(384278400, 2),
            Transition::new(404841600, 1),
            Transition::new(415728000, 2),
            Transition::new(436291200, 1),
            Transition::new(447177600, 2),
            Transition::new(467740800, 1),
            Transition::new(478627200, 2),
            Transition::new(499190400, 1),
            Transition::new(511286400, 2),
            Transition::new(530035200, 1),
            Transition::new(542736000, 2),
            Transition::new(561484800, 1),
            Transition::new(574790400, 2),
            Transition::new(594144000, 1),
            Transition::new(606240000, 2),
            Transition::new(625593600, 1),
            Transition::new(637689600, 2),
            Transition::new(657043200, 1),
            Transition::new(667929600, 2),
            Transition::new(688492800, 1),
            Transition::new(699379200, 2),
            Transition::new(719942400, 1),
            Transition::new(731433600, 2),
            Transition::new(751996800, 1),
            Transition::new(762883200, 2),
            Transition::new(783446400, 1),
            Transition::new(796147200, 2),
            Transition::new(814896000, 1),
            Transition::new(828201600, 2),
            Transition::new(846345600, 1),
            Transition::new(859651200, 2),
            Transition::new(877795200, 1),
            Transition::new(891100800, 2),
            Transition::new(909244800, 1),
            Transition::new(922550400, 2),
            Transition::new(941299200, 1),
            Transition::new(954000000, 2),
            Transition::new(967305600, 1),
            Transition::new(985449600, 2),
            Transition::new(1004198400, 1),
            Transition::new(1017504000, 2),
            Transition::new(1035648000, 1),
            Transition::new(1048953600, 2),
            Transition::new(1067097600, 1),
            Transition::new(1080403200, 2),
            Transition::new(1099152000, 1),
            Transition::new(1111852800, 2),
            Transition::new(1130601600, 1),
            Transition::new(1143907200, 2),
            Transition::new(1162051200, 1),
            Transition::new(1174752000, 2),
            Transition::new(1193500800, 1),
            Transition::new(1207411200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(34792, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"AEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(36000, false, Some(b"AEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(39600, true, Some(b"AEDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const AUSTRALIA_PERTH: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2337925404, 2),
            Transition::new(-1672552800, 1),
            Transition::new(-1665381600, 2),
            Transition::new(-883634400, 1),
            Transition::new(-876117600, 2),
            Transition::new(-860392800, 1),
            Transition::new(-844668000, 2),
            Transition::new(152042400, 1),
            Transition::new(162928800, 2),
            Transition::new(436298400, 1),
            Transition::new(447184800, 2),
            Transition::new(690314400, 1),
            Transition::new(699386400, 2),
            Transition::new(1165082400, 1),
            Transition::new(1174759200, 2),
            Transition::new(1193508000, 1),
            Transition::new(1206813600, 2),
            Transition::new(1224957600, 1),
            Transition::new(1238263200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(27804, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"AWDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"AWST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"AWST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const CET: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1693706400, 1),
            Transition::new(-1680483600, 0),
            Transition::new(-1663455600, 1),
            Transition::new(-1650150000, 0),
            Transition::new(-1632006000, 1),
            Transition::new(-1618700400, 0),
            Transition::new(-938905200, 1),
            Transition::new(-857257200, 0),
            Transition::new(-844556400, 1),
            Transition::new(-828226800, 0),
            Transition::new(-812502000, 1),
            Transition::new(-796777200, 0),
            Transition::new(-781052400, 1),
            Transition::new(-766623600, 0),
            Transition::new(228877200, 1),
            Transition::new(243997200, 0),
            Transition::new(260326800, 1),
            Transition::new(276051600, 0),
            Transition::new(291776400, 1),
            Transition::new(307501200, 0),
            Transition::new(323830800, 1),
            Transition::new(338950800, 0),
            Transition::new(354675600, 1),
            Transition::new(370400400, 0),
            Transition::new(386125200, 1),
            Transition::new(401850000, 0),
            Transition::new(417574800, 1),
            Transition::new(433299600, 0),
            Transition::new(449024400, 1),
            Transition::new(465354000, 0),
            Transition::new(481078800, 1),
            Transition::new(496803600, 0),
            Transition::new(512528400, 1),
            Transition::new(528253200, 0),
            Transition::new(543978000, 1),
            Transition::new(559702800, 0),
            Transition::new(575427600, 1),
            Transition::new(591152400, 0),
            Transition::new(606877200, 1),
            Transition::new(622602000, 0),
            Transition::new(638326800, 1),
            Transition::new(654656400, 0),
            Transition::new(670381200, 1),
            Transition::new(686106000, 0),
            Transition::new(701830800, 1),
            Transition::new(717555600, 0),
            Transition::new(733280400, 1),
            Transition::new(749005200, 0),
            Transition::new(764730000, 1),
            Transition::new(780454800, 0),
            Transition::new(796179600, 1),
            Transition::new(811904400, 0),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const CHILE_EASTER_ISLAND: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524495352, 1),
            Transition::new(-1178124152, 3),
            Transition::new(-36619200, 2),
            Transition::new(-23922000, 3),
            Transition::new(-3355200, 2),
            Transition::new(7527600, 3),
            Transition::new(24465600, 2),
            Transition::new(37767600, 3),
            Transition::new(55915200, 2),
            Transition::new(69217200, 3),
            Transition::new(87969600, 2),
            Transition::new(100666800, 3),
            Transition::new(118209600, 2),
            Transition::new(132116400, 3),
            Transition::new(150868800, 2),
            Transition::new(163566000, 3),
            Transition::new(182318400, 2),
            Transition::new(195620400, 3),
            Transition::new(213768000, 2),
            Transition::new(227070000, 3),
            Transition::new(245217600, 2),
            Transition::new(258519600, 3),
            Transition::new(277272000, 2),
            Transition::new(289969200, 3),
            Transition::new(308721600, 2),
            Transition::new(321418800, 3),
            Transition::new(340171200, 2),
            Transition::new(353473200, 3),
            Transition::new(371620800, 2),
            Transition::new(384922800, 4),
            Transition::new(403070400, 5),
            Transition::new(416372400, 4),
            Transition::new(434520000, 5),
            Transition::new(447822000, 4),
            Transition::new(466574400, 5),
            Transition::new(479271600, 4),
            Transition::new(498024000, 5),
            Transition::new(510721200, 4),
            Transition::new(529473600, 5),
            Transition::new(545194800, 4),
            Transition::new(560923200, 5),
            Transition::new(574225200, 4),
            Transition::new(592372800, 5),
            Transition::new(605674800, 4),
            Transition::new(624427200, 5),
            Transition::new(637124400, 4),
            Transition::new(653457600, 5),
            Transition::new(668574000, 4),
            Transition::new(687326400, 5),
            Transition::new(700628400, 4),
            Transition::new(718776000, 5),
            Transition::new(732078000, 4),
            Transition::new(750225600, 5),
            Transition::new(763527600, 4),
            Transition::new(781675200, 5),
            Transition::new(794977200, 4),
            Transition::new(813729600, 5),
            Transition::new(826426800, 4),
            Transition::new(845179200, 5),
            Transition::new(859690800, 4),
            Transition::new(876628800, 5),
            Transition::new(889930800, 4),
            Transition::new(906868800, 5),
            Transition::new(923194800, 4),
            Transition::new(939528000, 5),
            Transition::new(952830000, 4),
            Transition::new(971582400, 5),
            Transition::new(984279600, 4),
            Transition::new(1003032000, 5),
            Transition::new(1015729200, 4),
            Transition::new(1034481600, 5),
            Transition::new(1047178800, 4),
            Transition::new(1065931200, 5),
            Transition::new(1079233200, 4),
            Transition::new(1097380800, 5),
            Transition::new(1110682800, 4),
            Transition::new(1128830400, 5),
            Transition::new(1142132400, 4),
            Transition::new(1160884800, 5),
            Transition::new(1173582000, 4),
            Transition::new(1192334400, 5),
            Transition::new(1206846000, 4),
            Transition::new(1223784000, 5),
            Transition::new(1237086000, 4),
            Transition::new(1255233600, 5),
            Transition::new(1270350000, 4),
            Transition::new(1286683200, 5),
            Transition::new(1304823600, 4),
            Transition::new(1313899200, 5),
            Transition::new(1335668400, 4),
            Transition::new(1346558400, 5),
            Transition::new(1367118000, 4),
            Transition::new(1378612800, 5),
            Transition::new(1398567600, 4),
            Transition::new(1410062400, 5),
            Transition::new(1463281200, 4),
            Transition::new(1471147200, 5),
            Transition::new(1494730800, 4),
            Transition::new(1502596800, 5),
            Transition::new(1526180400, 4),
            Transition::new(1534046400, 5),
            Transition::new(1554606000, 4),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-26248, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-26248, false, Some(b"EMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"-06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"-07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"-06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"-06")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"-05")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(9, 1, 6) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    79200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 6) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    79200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const CST_6_CDT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1633276800, 1),
            Transition::new(-1615136400, 0),
            Transition::new(-1601827200, 1),
            Transition::new(-1583686800, 0),
            Transition::new(-880214400, 2),
            Transition::new(-769395600, 3),
            Transition::new(-765392400, 0),
            Transition::new(-84384000, 1),
            Transition::new(-68662800, 0),
            Transition::new(-52934400, 1),
            Transition::new(-37213200, 0),
            Transition::new(-21484800, 1),
            Transition::new(-5763600, 0),
            Transition::new(9964800, 1),
            Transition::new(25686000, 0),
            Transition::new(41414400, 1),
            Transition::new(57740400, 0),
            Transition::new(73468800, 1),
            Transition::new(89190000, 0),
            Transition::new(104918400, 1),
            Transition::new(120639600, 0),
            Transition::new(126691200, 1),
            Transition::new(152089200, 0),
            Transition::new(162374400, 1),
            Transition::new(183538800, 0),
            Transition::new(199267200, 1),
            Transition::new(215593200, 0),
            Transition::new(230716800, 1),
            Transition::new(247042800, 0),
            Transition::new(262771200, 1),
            Transition::new(278492400, 0),
            Transition::new(294220800, 1),
            Transition::new(309942000, 0),
            Transition::new(325670400, 1),
            Transition::new(341391600, 0),
            Transition::new(357120000, 1),
            Transition::new(372841200, 0),
            Transition::new(388569600, 1),
            Transition::new(404895600, 0),
            Transition::new(420019200, 1),
            Transition::new(436345200, 0),
            Transition::new(452073600, 1),
            Transition::new(467794800, 0),
            Transition::new(483523200, 1),
            Transition::new(499244400, 0),
            Transition::new(514972800, 1),
            Transition::new(530694000, 0),
            Transition::new(544608000, 1),
            Transition::new(562143600, 0),
            Transition::new(576057600, 1),
            Transition::new(594198000, 0),
            Transition::new(607507200, 1),
            Transition::new(625647600, 0),
            Transition::new(638956800, 1),
            Transition::new(657097200, 0),
            Transition::new(671011200, 1),
            Transition::new(688546800, 0),
            Transition::new(702460800, 1),
            Transition::new(719996400, 0),
            Transition::new(733910400, 1),
            Transition::new(752050800, 0),
            Transition::new(765360000, 1),
            Transition::new(783500400, 0),
            Transition::new(796809600, 1),
            Transition::new(814950000, 0),
            Transition::new(828864000, 1),
            Transition::new(846399600, 0),
            Transition::new(860313600, 1),
            Transition::new(877849200, 0),
            Transition::new(891763200, 1),
            Transition::new(909298800, 0),
            Transition::new(923212800, 1),
            Transition::new(941353200, 0),
            Transition::new(954662400, 1),
            Transition::new(972802800, 0),
            Transition::new(986112000, 1),
            Transition::new(1004252400, 0),
            Transition::new(1018166400, 1),
            Transition::new(1035702000, 0),
            Transition::new(1049616000, 1),
            Transition::new(1067151600, 0),
            Transition::new(1081065600, 1),
            Transition::new(1099206000, 0),
            Transition::new(1112515200, 1),
            Transition::new(1130655600, 0),
            Transition::new(1143964800, 1),
            Transition::new(1162105200, 0),
            Transition::new(1173600000, 1),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-21600, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"CPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-21600, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-18000, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const CUBA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524501832, 1),
            Transition::new(-1402813824, 3),
            Transition::new(-1311534000, 2),
            Transition::new(-1300996800, 3),
            Transition::new(-933534000, 2),
            Transition::new(-925675200, 3),
            Transition::new(-902084400, 2),
            Transition::new(-893620800, 3),
            Transition::new(-870030000, 2),
            Transition::new(-862171200, 3),
            Transition::new(-775681200, 2),
            Transition::new(-767822400, 3),
            Transition::new(-744231600, 2),
            Transition::new(-736372800, 3),
            Transition::new(-144702000, 2),
            Transition::new(-134251200, 3),
            Transition::new(-113425200, 2),
            Transition::new(-102542400, 3),
            Transition::new(-86295600, 2),
            Transition::new(-72907200, 3),
            Transition::new(-54154800, 2),
            Transition::new(-41457600, 3),
            Transition::new(-21495600, 2),
            Transition::new(-5774400, 3),
            Transition::new(9954000, 2),
            Transition::new(25675200, 3),
            Transition::new(41403600, 2),
            Transition::new(57729600, 3),
            Transition::new(73458000, 2),
            Transition::new(87364800, 3),
            Transition::new(104907600, 2),
            Transition::new(118900800, 3),
            Transition::new(136357200, 2),
            Transition::new(150436800, 3),
            Transition::new(167806800, 2),
            Transition::new(183528000, 3),
            Transition::new(199256400, 2),
            Transition::new(215582400, 3),
            Transition::new(230706000, 2),
            Transition::new(247032000, 3),
            Transition::new(263365200, 2),
            Transition::new(276667200, 3),
            Transition::new(290581200, 2),
            Transition::new(308721600, 3),
            Transition::new(322030800, 2),
            Transition::new(340171200, 3),
            Transition::new(358318800, 2),
            Transition::new(371620800, 3),
            Transition::new(389768400, 2),
            Transition::new(403070400, 3),
            Transition::new(421218000, 2),
            Transition::new(434520000, 3),
            Transition::new(452667600, 2),
            Transition::new(466574400, 3),
            Transition::new(484117200, 2),
            Transition::new(498024000, 3),
            Transition::new(511333200, 2),
            Transition::new(529473600, 3),
            Transition::new(542782800, 2),
            Transition::new(560923200, 3),
            Transition::new(574837200, 2),
            Transition::new(592372800, 3),
            Transition::new(606286800, 2),
            Transition::new(623822400, 3),
            Transition::new(638946000, 2),
            Transition::new(655876800, 3),
            Transition::new(671000400, 2),
            Transition::new(687330000, 3),
            Transition::new(702450000, 2),
            Transition::new(718779600, 3),
            Transition::new(733899600, 2),
            Transition::new(750229200, 3),
            Transition::new(765349200, 2),
            Transition::new(781678800, 3),
            Transition::new(796798800, 2),
            Transition::new(813128400, 3),
            Transition::new(828853200, 2),
            Transition::new(844578000, 3),
            Transition::new(860302800, 2),
            Transition::new(876632400, 3),
            Transition::new(891147600, 2),
            Transition::new(909291600, 3),
            Transition::new(922597200, 2),
            Transition::new(941346000, 3),
            Transition::new(954651600, 2),
            Transition::new(972795600, 3),
            Transition::new(986101200, 2),
            Transition::new(1004245200, 3),
            Transition::new(1018155600, 2),
            Transition::new(1035694800, 3),
            Transition::new(1049605200, 2),
            Transition::new(1067144400, 3),
            Transition::new(1080450000, 2),
            Transition::new(1162098000, 3),
            Transition::new(1173589200, 2),
            Transition::new(1193547600, 3),
            Transition::new(1205643600, 2),
            Transition::new(1224997200, 3),
            Transition::new(1236488400, 2),
            Transition::new(1256446800, 3),
            Transition::new(1268542800, 2),
            Transition::new(1288501200, 3),
            Transition::new(1300597200, 2),
            Transition::new(1321160400, 3),
            Transition::new(1333256400, 2),
            Transition::new(1352005200, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-19768, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-19776, false, Some(b"HMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"CST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"CDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    0,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EET: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(228877200, 1),
            Transition::new(243997200, 0),
            Transition::new(260326800, 1),
            Transition::new(276051600, 0),
            Transition::new(291776400, 1),
            Transition::new(307501200, 0),
            Transition::new(323830800, 1),
            Transition::new(338950800, 0),
            Transition::new(354675600, 1),
            Transition::new(370400400, 0),
            Transition::new(386125200, 1),
            Transition::new(401850000, 0),
            Transition::new(417574800, 1),
            Transition::new(433299600, 0),
            Transition::new(449024400, 1),
            Transition::new(465354000, 0),
            Transition::new(481078800, 1),
            Transition::new(496803600, 0),
            Transition::new(512528400, 1),
            Transition::new(528253200, 0),
            Transition::new(543978000, 1),
            Transition::new(559702800, 0),
            Transition::new(575427600, 1),
            Transition::new(591152400, 0),
            Transition::new(606877200, 1),
            Transition::new(622602000, 0),
            Transition::new(638326800, 1),
            Transition::new(654656400, 0),
            Transition::new(670381200, 1),
            Transition::new(686106000, 0),
            Transition::new(701830800, 1),
            Transition::new(717555600, 0),
            Transition::new(733280400, 1),
            Transition::new(749005200, 0),
            Transition::new(764730000, 1),
            Transition::new(780454800, 0),
            Transition::new(796179600, 1),
            Transition::new(811904400, 0),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EGYPT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2185409109, 2),
            Transition::new(-929844000, 1),
            Transition::new(-923108400, 2),
            Transition::new(-906170400, 1),
            Transition::new(-892868400, 2),
            Transition::new(-875844000, 1),
            Transition::new(-857790000, 2),
            Transition::new(-844308000, 1),
            Transition::new(-825822000, 2),
            Transition::new(-812685600, 1),
            Transition::new(-794199600, 2),
            Transition::new(-779853600, 1),
            Transition::new(-762663600, 2),
            Transition::new(-399088800, 1),
            Transition::new(-386650800, 2),
            Transition::new(-368330400, 1),
            Transition::new(-355114800, 2),
            Transition::new(-336790800, 1),
            Transition::new(-323654400, 2),
            Transition::new(-305168400, 1),
            Transition::new(-292032000, 2),
            Transition::new(-273632400, 1),
            Transition::new(-260496000, 2),
            Transition::new(-242096400, 1),
            Transition::new(-228960000, 2),
            Transition::new(-210560400, 1),
            Transition::new(-197424000, 2),
            Transition::new(-178938000, 1),
            Transition::new(-165801600, 2),
            Transition::new(-147402000, 1),
            Transition::new(-134265600, 2),
            Transition::new(-115866000, 1),
            Transition::new(-102643200, 2),
            Transition::new(-84330000, 1),
            Transition::new(-71107200, 2),
            Transition::new(-52707600, 1),
            Transition::new(-39484800, 2),
            Transition::new(-21171600, 1),
            Transition::new(-7948800, 2),
            Transition::new(10364400, 1),
            Transition::new(23587200, 2),
            Transition::new(41900400, 1),
            Transition::new(55123200, 2),
            Transition::new(73522800, 1),
            Transition::new(86745600, 2),
            Transition::new(105058800, 1),
            Transition::new(118281600, 2),
            Transition::new(136594800, 1),
            Transition::new(149817600, 2),
            Transition::new(168130800, 1),
            Transition::new(181353600, 2),
            Transition::new(199753200, 1),
            Transition::new(212976000, 2),
            Transition::new(231289200, 1),
            Transition::new(244512000, 2),
            Transition::new(262825200, 1),
            Transition::new(276048000, 2),
            Transition::new(294361200, 1),
            Transition::new(307584000, 2),
            Transition::new(325983600, 1),
            Transition::new(339206400, 2),
            Transition::new(357519600, 1),
            Transition::new(370742400, 2),
            Transition::new(396399600, 1),
            Transition::new(402278400, 2),
            Transition::new(426812400, 1),
            Transition::new(433814400, 2),
            Transition::new(452214000, 1),
            Transition::new(465436800, 2),
            Transition::new(483750000, 1),
            Transition::new(496972800, 2),
            Transition::new(515286000, 1),
            Transition::new(528508800, 2),
            Transition::new(546822000, 1),
            Transition::new(560044800, 2),
            Transition::new(578444400, 1),
            Transition::new(591667200, 2),
            Transition::new(610412400, 1),
            Transition::new(623203200, 2),
            Transition::new(641516400, 1),
            Transition::new(654739200, 2),
            Transition::new(673052400, 1),
            Transition::new(686275200, 2),
            Transition::new(704674800, 1),
            Transition::new(717897600, 2),
            Transition::new(736210800, 1),
            Transition::new(749433600, 2),
            Transition::new(767746800, 1),
            Transition::new(780969600, 2),
            Transition::new(799020000, 1),
            Transition::new(812322000, 2),
            Transition::new(830469600, 1),
            Transition::new(843771600, 2),
            Transition::new(861919200, 1),
            Transition::new(875221200, 2),
            Transition::new(893368800, 1),
            Transition::new(906670800, 2),
            Transition::new(925423200, 1),
            Transition::new(938725200, 2),
            Transition::new(956872800, 1),
            Transition::new(970174800, 2),
            Transition::new(988322400, 1),
            Transition::new(1001624400, 2),
            Transition::new(1019772000, 1),
            Transition::new(1033074000, 2),
            Transition::new(1051221600, 1),
            Transition::new(1064523600, 2),
            Transition::new(1083276000, 1),
            Transition::new(1096578000, 2),
            Transition::new(1114725600, 1),
            Transition::new(1128027600, 2),
            Transition::new(1146175200, 1),
            Transition::new(1158872400, 2),
            Transition::new(1177624800, 1),
            Transition::new(1189112400, 2),
            Transition::new(1209074400, 1),
            Transition::new(1219957200, 2),
            Transition::new(1240524000, 1),
            Transition::new(1250802000, 2),
            Transition::new(1272578400, 1),
            Transition::new(1281474000, 2),
            Transition::new(1284069600, 1),
            Transition::new(1285880400, 2),
            Transition::new(1400191200, 1),
            Transition::new(1403816400, 2),
            Transition::new(1406844000, 1),
            Transition::new(1411678800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(7509, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EIRE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2821649700, 1),
            Transition::new(-1691962479, 2),
            Transition::new(-1680471279, 4),
            Transition::new(-1664143200, 3),
            Transition::new(-1650146400, 4),
            Transition::new(-1633903200, 3),
            Transition::new(-1617487200, 4),
            Transition::new(-1601848800, 3),
            Transition::new(-1586037600, 4),
            Transition::new(-1570399200, 3),
            Transition::new(-1552168800, 4),
            Transition::new(-1538344800, 3),
            Transition::new(-1522533600, 4),
            Transition::new(-1507500000, 5),
            Transition::new(-1490565600, 4),
            Transition::new(-1473631200, 5),
            Transition::new(-1460930400, 4),
            Transition::new(-1442786400, 5),
            Transition::new(-1428876000, 4),
            Transition::new(-1410732000, 5),
            Transition::new(-1396216800, 4),
            Transition::new(-1379282400, 5),
            Transition::new(-1364767200, 4),
            Transition::new(-1348437600, 5),
            Transition::new(-1333317600, 4),
            Transition::new(-1315778400, 5),
            Transition::new(-1301263200, 4),
            Transition::new(-1284328800, 5),
            Transition::new(-1269813600, 4),
            Transition::new(-1253484000, 5),
            Transition::new(-1238364000, 4),
            Transition::new(-1221429600, 5),
            Transition::new(-1206914400, 4),
            Transition::new(-1189980000, 5),
            Transition::new(-1175464800, 4),
            Transition::new(-1159135200, 5),
            Transition::new(-1143410400, 4),
            Transition::new(-1126476000, 5),
            Transition::new(-1111960800, 4),
            Transition::new(-1095631200, 5),
            Transition::new(-1080511200, 4),
            Transition::new(-1063576800, 5),
            Transition::new(-1049061600, 4),
            Transition::new(-1032127200, 5),
            Transition::new(-1017612000, 4),
            Transition::new(-1001282400, 5),
            Transition::new(-986162400, 4),
            Transition::new(-969228000, 5),
            Transition::new(-950479200, 4),
            Transition::new(-942012000, 5),
            Transition::new(-733356000, 4),
            Transition::new(-719445600, 5),
            Transition::new(-699487200, 4),
            Transition::new(-684972000, 5),
            Transition::new(-668037600, 4),
            Transition::new(-654732000, 5),
            Transition::new(-636588000, 4),
            Transition::new(-622072800, 5),
            Transition::new(-605743200, 4),
            Transition::new(-590623200, 5),
            Transition::new(-574293600, 4),
            Transition::new(-558568800, 5),
            Transition::new(-542239200, 4),
            Transition::new(-527119200, 5),
            Transition::new(-512604000, 4),
            Transition::new(-496274400, 5),
            Transition::new(-481154400, 4),
            Transition::new(-464220000, 5),
            Transition::new(-449704800, 4),
            Transition::new(-432165600, 5),
            Transition::new(-417650400, 4),
            Transition::new(-401320800, 5),
            Transition::new(-386200800, 4),
            Transition::new(-369266400, 5),
            Transition::new(-354751200, 4),
            Transition::new(-337816800, 5),
            Transition::new(-323301600, 4),
            Transition::new(-306972000, 5),
            Transition::new(-291852000, 4),
            Transition::new(-276732000, 5),
            Transition::new(-257983200, 4),
            Transition::new(-245282400, 5),
            Transition::new(-226533600, 4),
            Transition::new(-213228000, 5),
            Transition::new(-195084000, 4),
            Transition::new(-182383200, 5),
            Transition::new(-163634400, 4),
            Transition::new(-150933600, 5),
            Transition::new(-132184800, 4),
            Transition::new(-119484000, 5),
            Transition::new(-100735200, 4),
            Transition::new(-88034400, 5),
            Transition::new(-68680800, 4),
            Transition::new(-59004000, 5),
            Transition::new(-37242000, 7),
            Transition::new(57722400, 6),
            Transition::new(69818400, 7),
            Transition::new(89172000, 6),
            Transition::new(101268000, 7),
            Transition::new(120621600, 6),
            Transition::new(132717600, 7),
            Transition::new(152071200, 6),
            Transition::new(164167200, 7),
            Transition::new(183520800, 6),
            Transition::new(196221600, 7),
            Transition::new(214970400, 6),
            Transition::new(227671200, 7),
            Transition::new(246420000, 6),
            Transition::new(259120800, 7),
            Transition::new(278474400, 6),
            Transition::new(290570400, 7),
            Transition::new(309924000, 6),
            Transition::new(322020000, 7),
            Transition::new(341373600, 6),
            Transition::new(354675600, 7),
            Transition::new(372819600, 6),
            Transition::new(386125200, 7),
            Transition::new(404269200, 6),
            Transition::new(417574800, 7),
            Transition::new(435718800, 6),
            Transition::new(449024400, 7),
            Transition::new(467773200, 6),
            Transition::new(481078800, 7),
            Transition::new(499222800, 6),
            Transition::new(512528400, 7),
            Transition::new(530672400, 6),
            Transition::new(543978000, 7),
            Transition::new(562122000, 6),
            Transition::new(575427600, 7),
            Transition::new(593571600, 6),
            Transition::new(606877200, 7),
            Transition::new(625626000, 6),
            Transition::new(638326800, 7),
            Transition::new(657075600, 6),
            Transition::new(670381200, 7),
            Transition::new(688525200, 6),
            Transition::new(701830800, 7),
            Transition::new(719974800, 6),
            Transition::new(733280400, 7),
            Transition::new(751424400, 6),
            Transition::new(764730000, 7),
            Transition::new(782874000, 6),
            Transition::new(796179600, 7),
            Transition::new(814323600, 6),
            Transition::new(828234000, 7),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(-1500, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-1521, false, Some(b"DMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(2079, true, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, true, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"IST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(0, true, Some(b"GMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EST: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-18000, false, Some(b"EST")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EST_5_EDT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1633280400, 1),
            Transition::new(-1615140000, 0),
            Transition::new(-1601830800, 1),
            Transition::new(-1583690400, 0),
            Transition::new(-880218000, 2),
            Transition::new(-769395600, 3),
            Transition::new(-765396000, 0),
            Transition::new(-84387600, 1),
            Transition::new(-68666400, 0),
            Transition::new(-52938000, 1),
            Transition::new(-37216800, 0),
            Transition::new(-21488400, 1),
            Transition::new(-5767200, 0),
            Transition::new(9961200, 1),
            Transition::new(25682400, 0),
            Transition::new(41410800, 1),
            Transition::new(57736800, 0),
            Transition::new(73465200, 1),
            Transition::new(89186400, 0),
            Transition::new(104914800, 1),
            Transition::new(120636000, 0),
            Transition::new(126687600, 1),
            Transition::new(152085600, 0),
            Transition::new(162370800, 1),
            Transition::new(183535200, 0),
            Transition::new(199263600, 1),
            Transition::new(215589600, 0),
            Transition::new(230713200, 1),
            Transition::new(247039200, 0),
            Transition::new(262767600, 1),
            Transition::new(278488800, 0),
            Transition::new(294217200, 1),
            Transition::new(309938400, 0),
            Transition::new(325666800, 1),
            Transition::new(341388000, 0),
            Transition::new(357116400, 1),
            Transition::new(372837600, 0),
            Transition::new(388566000, 1),
            Transition::new(404892000, 0),
            Transition::new(420015600, 1),
            Transition::new(436341600, 0),
            Transition::new(452070000, 1),
            Transition::new(467791200, 0),
            Transition::new(483519600, 1),
            Transition::new(499240800, 0),
            Transition::new(514969200, 1),
            Transition::new(530690400, 0),
            Transition::new(544604400, 1),
            Transition::new(562140000, 0),
            Transition::new(576054000, 1),
            Transition::new(594194400, 0),
            Transition::new(607503600, 1),
            Transition::new(625644000, 0),
            Transition::new(638953200, 1),
            Transition::new(657093600, 0),
            Transition::new(671007600, 1),
            Transition::new(688543200, 0),
            Transition::new(702457200, 1),
            Transition::new(719992800, 0),
            Transition::new(733906800, 1),
            Transition::new(752047200, 0),
            Transition::new(765356400, 1),
            Transition::new(783496800, 0),
            Transition::new(796806000, 1),
            Transition::new(814946400, 0),
            Transition::new(828860400, 1),
            Transition::new(846396000, 0),
            Transition::new(860310000, 1),
            Transition::new(877845600, 0),
            Transition::new(891759600, 1),
            Transition::new(909295200, 0),
            Transition::new(923209200, 1),
            Transition::new(941349600, 0),
            Transition::new(954658800, 1),
            Transition::new(972799200, 0),
            Transition::new(986108400, 1),
            Transition::new(1004248800, 0),
            Transition::new(1018162800, 1),
            Transition::new(1035698400, 0),
            Transition::new(1049612400, 1),
            Transition::new(1067148000, 0),
            Transition::new(1081062000, 1),
            Transition::new(1099202400, 0),
            Transition::new(1112511600, 1),
            Transition::new(1130652000, 0),
            Transition::new(1143961200, 1),
            Transition::new(1162101600, 0),
            Transition::new(1173596400, 1),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-18000, false, Some(b"EST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_1: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(3600, false, Some(b"+01")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(3600, false, Some(b"+01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_10: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(36000, false, Some(b"+10")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_11: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(39600, false, Some(b"+11")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_12: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(43200, false, Some(b"+12")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_13: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(46800, false, Some(b"+13")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_14: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(50400, false, Some(b"+14")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(50400, false, Some(b"+14")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_2: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(7200, false, Some(b"+02")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"+02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_3: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(10800, false, Some(b"+03")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_4: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(14400, false, Some(b"+04")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_5: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(18000, false, Some(b"+05")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_6: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(21600, false, Some(b"+06")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_7: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(25200, false, Some(b"+07")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_8: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(28800, false, Some(b"+08")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_MINUS_9: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(32400, false, Some(b"+09")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_10: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-36000, false, Some(b"-10")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-36000, false, Some(b"-10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_11: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-39600, false, Some(b"-11")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-39600, false, Some(b"-11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_12: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-43200, false, Some(b"-12")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-43200, false, Some(b"-12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_2: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-7200, false, Some(b"-02")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-7200, false, Some(b"-02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_3: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-10800, false, Some(b"-03")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-10800, false, Some(b"-03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_4: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-14400, false, Some(b"-04")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-14400, false, Some(b"-04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_5: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-18000, false, Some(b"-05")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_6: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-21600, false, Some(b"-06")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"-06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_7: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-25200, false, Some(b"-07")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-25200, false, Some(b"-07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_8: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-28800, false, Some(b"-08")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-28800, false, Some(b"-08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ETC_GMT_PLUS_9: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-32400, false, Some(b"-09")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-32400, false, Some(b"-09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_AMSTERDAM: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-4260212372, 2),
            Transition::new(-1693700372, 1),
            Transition::new(-1680484772, 2),
            Transition::new(-1663453172, 1),
            Transition::new(-1650147572, 2),
            Transition::new(-1633213172, 1),
            Transition::new(-1617488372, 2),
            Transition::new(-1601158772, 1),
            Transition::new(-1586038772, 2),
            Transition::new(-1569709172, 1),
            Transition::new(-1554589172, 2),
            Transition::new(-1538259572, 1),
            Transition::new(-1523139572, 2),
            Transition::new(-1507501172, 1),
            Transition::new(-1490566772, 2),
            Transition::new(-1470176372, 1),
            Transition::new(-1459117172, 2),
            Transition::new(-1443997172, 1),
            Transition::new(-1427667572, 2),
            Transition::new(-1406672372, 1),
            Transition::new(-1396217972, 2),
            Transition::new(-1376950772, 1),
            Transition::new(-1364768372, 2),
            Transition::new(-1345414772, 1),
            Transition::new(-1333318772, 2),
            Transition::new(-1313792372, 1),
            Transition::new(-1301264372, 2),
            Transition::new(-1282256372, 1),
            Transition::new(-1269814772, 2),
            Transition::new(-1250720372, 1),
            Transition::new(-1238365172, 2),
            Transition::new(-1219184372, 1),
            Transition::new(-1206915572, 2),
            Transition::new(-1186957172, 1),
            Transition::new(-1175465972, 2),
            Transition::new(-1156025972, 1),
            Transition::new(-1143411572, 2),
            Transition::new(-1124489972, 1),
            Transition::new(-1111961972, 2),
            Transition::new(-1092953972, 1),
            Transition::new(-1080512372, 2),
            Transition::new(-1061331572, 1),
            Transition::new(-1049062772, 2),
            Transition::new(-1029190772, 1),
            Transition::new(-1025745572, 4),
            Transition::new(-1017613200, 3),
            Transition::new(-998259600, 4),
            Transition::new(-986163600, 3),
            Transition::new(-966723600, 4),
            Transition::new(-954109200, 3),
            Transition::new(-935022000, 6),
            Transition::new(-857257200, 5),
            Transition::new(-844556400, 6),
            Transition::new(-828226800, 5),
            Transition::new(-812502000, 6),
            Transition::new(-796777200, 5),
            Transition::new(-781052400, 6),
            Transition::new(-766623600, 5),
            Transition::new(228877200, 6),
            Transition::new(243997200, 5),
            Transition::new(260326800, 6),
            Transition::new(276051600, 5),
            Transition::new(291776400, 6),
            Transition::new(307501200, 5),
            Transition::new(323830800, 6),
            Transition::new(338950800, 5),
            Transition::new(354675600, 6),
            Transition::new(370400400, 5),
            Transition::new(386125200, 6),
            Transition::new(401850000, 5),
            Transition::new(417574800, 6),
            Transition::new(433299600, 5),
            Transition::new(449024400, 6),
            Transition::new(465354000, 5),
            Transition::new(481078800, 6),
            Transition::new(496803600, 5),
            Transition::new(512528400, 6),
            Transition::new(528253200, 5),
            Transition::new(543978000, 6),
            Transition::new(559702800, 5),
            Transition::new(575427600, 6),
            Transition::new(591152400, 5),
            Transition::new(606877200, 6),
            Transition::new(622602000, 5),
            Transition::new(638326800, 6),
            Transition::new(654656400, 5),
            Transition::new(670381200, 6),
            Transition::new(686106000, 5),
            Transition::new(701830800, 6),
            Transition::new(717555600, 5),
            Transition::new(733280400, 6),
            Transition::new(749005200, 5),
            Transition::new(764730000, 6),
            Transition::new(780454800, 5),
            Transition::new(796179600, 6),
            Transition::new(811904400, 5),
            Transition::new(828234000, 6),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(1172, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(4772, true, Some(b"NST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(1172, false, Some(b"AMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(1200, false, Some(b"+0020")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(4800, true, Some(b"+0120")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_ANDORRA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177453164, 1),
            Transition::new(-733881600, 2),
            Transition::new(481078800, 3),
            Transition::new(496803600, 2),
            Transition::new(512528400, 3),
            Transition::new(528253200, 2),
            Transition::new(543978000, 3),
            Transition::new(559702800, 2),
            Transition::new(575427600, 3),
            Transition::new(591152400, 2),
            Transition::new(606877200, 3),
            Transition::new(622602000, 2),
            Transition::new(638326800, 3),
            Transition::new(654656400, 2),
            Transition::new(670381200, 3),
            Transition::new(686106000, 2),
            Transition::new(701830800, 3),
            Transition::new(717555600, 2),
            Transition::new(733280400, 3),
            Transition::new(749005200, 2),
            Transition::new(764730000, 3),
            Transition::new(780454800, 2),
            Transition::new(796179600, 3),
            Transition::new(811904400, 2),
            Transition::new(828234000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(364, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_ASTRAKHAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1441249932, 1),
            Transition::new(-1247540400, 3),
            Transition::new(354916800, 2),
            Transition::new(370724400, 3),
            Transition::new(386452800, 2),
            Transition::new(402260400, 3),
            Transition::new(417988800, 2),
            Transition::new(433796400, 3),
            Transition::new(449611200, 2),
            Transition::new(465343200, 3),
            Transition::new(481068000, 2),
            Transition::new(496792800, 3),
            Transition::new(512517600, 2),
            Transition::new(528242400, 3),
            Transition::new(543967200, 2),
            Transition::new(559692000, 3),
            Transition::new(575416800, 2),
            Transition::new(591141600, 3),
            Transition::new(606866400, 4),
            Transition::new(622594800, 1),
            Transition::new(638319600, 4),
            Transition::new(654649200, 1),
            Transition::new(670374000, 3),
            Transition::new(701820000, 4),
            Transition::new(717548400, 1),
            Transition::new(733273200, 4),
            Transition::new(748998000, 1),
            Transition::new(764722800, 4),
            Transition::new(780447600, 1),
            Transition::new(796172400, 4),
            Transition::new(811897200, 1),
            Transition::new(828226800, 4),
            Transition::new(846370800, 1),
            Transition::new(859676400, 4),
            Transition::new(877820400, 1),
            Transition::new(891126000, 4),
            Transition::new(909270000, 1),
            Transition::new(922575600, 4),
            Transition::new(941324400, 1),
            Transition::new(954025200, 4),
            Transition::new(972774000, 1),
            Transition::new(985474800, 4),
            Transition::new(1004223600, 1),
            Transition::new(1017529200, 4),
            Transition::new(1035673200, 1),
            Transition::new(1048978800, 4),
            Transition::new(1067122800, 1),
            Transition::new(1080428400, 4),
            Transition::new(1099177200, 1),
            Transition::new(1111878000, 4),
            Transition::new(1130626800, 1),
            Transition::new(1143327600, 4),
            Transition::new(1162076400, 1),
            Transition::new(1174777200, 4),
            Transition::new(1193526000, 1),
            Transition::new(1206831600, 4),
            Transition::new(1224975600, 1),
            Transition::new(1238281200, 4),
            Transition::new(1256425200, 1),
            Transition::new(1269730800, 4),
            Transition::new(1288479600, 1),
            Transition::new(1301180400, 3),
            Transition::new(1414274400, 1),
            Transition::new(1459033200, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(11532, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_ATHENS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2344642492, 1),
            Transition::new(-1686101632, 3),
            Transition::new(-1182996000, 2),
            Transition::new(-1178161200, 3),
            Transition::new(-906861600, 2),
            Transition::new(-904878000, 5),
            Transition::new(-857257200, 4),
            Transition::new(-844477200, 5),
            Transition::new(-828237600, 4),
            Transition::new(-812422800, 3),
            Transition::new(-552362400, 2),
            Transition::new(-541652400, 3),
            Transition::new(166485600, 2),
            Transition::new(186184800, 3),
            Transition::new(198028800, 2),
            Transition::new(213753600, 3),
            Transition::new(228873600, 2),
            Transition::new(244080000, 3),
            Transition::new(260323200, 2),
            Transition::new(275446800, 3),
            Transition::new(291798000, 2),
            Transition::new(307407600, 3),
            Transition::new(323388000, 2),
            Transition::new(338936400, 3),
            Transition::new(354675600, 2),
            Transition::new(370400400, 3),
            Transition::new(386125200, 2),
            Transition::new(401850000, 3),
            Transition::new(417574800, 2),
            Transition::new(433299600, 3),
            Transition::new(449024400, 2),
            Transition::new(465354000, 3),
            Transition::new(481078800, 2),
            Transition::new(496803600, 3),
            Transition::new(512528400, 2),
            Transition::new(528253200, 3),
            Transition::new(543978000, 2),
            Transition::new(559702800, 3),
            Transition::new(575427600, 2),
            Transition::new(591152400, 3),
            Transition::new(606877200, 2),
            Transition::new(622602000, 3),
            Transition::new(638326800, 2),
            Transition::new(654656400, 3),
            Transition::new(670381200, 2),
            Transition::new(686106000, 3),
            Transition::new(701830800, 2),
            Transition::new(717555600, 3),
            Transition::new(733280400, 2),
            Transition::new(749005200, 3),
            Transition::new(764730000, 2),
            Transition::new(780454800, 3),
            Transition::new(796179600, 2),
            Transition::new(811904400, 3),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(5692, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5692, false, Some(b"AMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_BELFAST: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2821649780, 1),
            Transition::new(-1691962479, 2),
            Transition::new(-1680471279, 4),
            Transition::new(-1664143200, 3),
            Transition::new(-1650146400, 4),
            Transition::new(-1633903200, 3),
            Transition::new(-1617487200, 4),
            Transition::new(-1601848800, 3),
            Transition::new(-1586037600, 4),
            Transition::new(-1570399200, 3),
            Transition::new(-1552168800, 4),
            Transition::new(-1538344800, 3),
            Transition::new(-1522533600, 4),
            Transition::new(-1507500000, 3),
            Transition::new(-1490565600, 4),
            Transition::new(-1473631200, 3),
            Transition::new(-1460930400, 4),
            Transition::new(-1442786400, 3),
            Transition::new(-1428876000, 4),
            Transition::new(-1410732000, 3),
            Transition::new(-1396216800, 4),
            Transition::new(-1379282400, 3),
            Transition::new(-1364767200, 4),
            Transition::new(-1348437600, 3),
            Transition::new(-1333317600, 4),
            Transition::new(-1315778400, 3),
            Transition::new(-1301263200, 4),
            Transition::new(-1284328800, 3),
            Transition::new(-1269813600, 4),
            Transition::new(-1253484000, 3),
            Transition::new(-1238364000, 4),
            Transition::new(-1221429600, 3),
            Transition::new(-1206914400, 4),
            Transition::new(-1189980000, 3),
            Transition::new(-1175464800, 4),
            Transition::new(-1159135200, 3),
            Transition::new(-1143410400, 4),
            Transition::new(-1126476000, 3),
            Transition::new(-1111960800, 4),
            Transition::new(-1095631200, 3),
            Transition::new(-1080511200, 4),
            Transition::new(-1063576800, 3),
            Transition::new(-1049061600, 4),
            Transition::new(-1032127200, 3),
            Transition::new(-1017612000, 4),
            Transition::new(-1001282400, 3),
            Transition::new(-986162400, 4),
            Transition::new(-969228000, 3),
            Transition::new(-950479200, 4),
            Transition::new(-942012000, 3),
            Transition::new(-904518000, 5),
            Transition::new(-896050800, 3),
            Transition::new(-875487600, 5),
            Transition::new(-864601200, 3),
            Transition::new(-844038000, 5),
            Transition::new(-832546800, 3),
            Transition::new(-812588400, 5),
            Transition::new(-798073200, 3),
            Transition::new(-781052400, 5),
            Transition::new(-772066800, 3),
            Transition::new(-764805600, 4),
            Transition::new(-748476000, 3),
            Transition::new(-733356000, 4),
            Transition::new(-719445600, 3),
            Transition::new(-717030000, 5),
            Transition::new(-706748400, 3),
            Transition::new(-699487200, 4),
            Transition::new(-687996000, 3),
            Transition::new(-668037600, 4),
            Transition::new(-654732000, 3),
            Transition::new(-636588000, 4),
            Transition::new(-622072800, 3),
            Transition::new(-605743200, 4),
            Transition::new(-590623200, 3),
            Transition::new(-574293600, 4),
            Transition::new(-558568800, 3),
            Transition::new(-542239200, 4),
            Transition::new(-527119200, 3),
            Transition::new(-512604000, 4),
            Transition::new(-496274400, 3),
            Transition::new(-481154400, 4),
            Transition::new(-464220000, 3),
            Transition::new(-449704800, 4),
            Transition::new(-432165600, 3),
            Transition::new(-417650400, 4),
            Transition::new(-401320800, 3),
            Transition::new(-386200800, 4),
            Transition::new(-369266400, 3),
            Transition::new(-354751200, 4),
            Transition::new(-337816800, 3),
            Transition::new(-323301600, 4),
            Transition::new(-306972000, 3),
            Transition::new(-291852000, 4),
            Transition::new(-276732000, 3),
            Transition::new(-257983200, 4),
            Transition::new(-245282400, 3),
            Transition::new(-226533600, 4),
            Transition::new(-213228000, 3),
            Transition::new(-195084000, 4),
            Transition::new(-182383200, 3),
            Transition::new(-163634400, 4),
            Transition::new(-150933600, 3),
            Transition::new(-132184800, 4),
            Transition::new(-119484000, 3),
            Transition::new(-100735200, 4),
            Transition::new(-88034400, 3),
            Transition::new(-68680800, 4),
            Transition::new(-59004000, 3),
            Transition::new(-37242000, 6),
            Transition::new(57722400, 4),
            Transition::new(69818400, 3),
            Transition::new(89172000, 4),
            Transition::new(101268000, 3),
            Transition::new(120621600, 4),
            Transition::new(132717600, 3),
            Transition::new(152071200, 4),
            Transition::new(164167200, 3),
            Transition::new(183520800, 4),
            Transition::new(196221600, 3),
            Transition::new(214970400, 4),
            Transition::new(227671200, 3),
            Transition::new(246420000, 4),
            Transition::new(259120800, 3),
            Transition::new(278474400, 4),
            Transition::new(290570400, 3),
            Transition::new(309924000, 4),
            Transition::new(322020000, 3),
            Transition::new(341373600, 4),
            Transition::new(354675600, 3),
            Transition::new(372819600, 4),
            Transition::new(386125200, 3),
            Transition::new(404269200, 4),
            Transition::new(417574800, 3),
            Transition::new(435718800, 4),
            Transition::new(449024400, 3),
            Transition::new(467773200, 4),
            Transition::new(481078800, 3),
            Transition::new(499222800, 4),
            Transition::new(512528400, 3),
            Transition::new(530672400, 4),
            Transition::new(543978000, 3),
            Transition::new(562122000, 4),
            Transition::new(575427600, 3),
            Transition::new(593571600, 4),
            Transition::new(606877200, 3),
            Transition::new(625626000, 4),
            Transition::new(638326800, 3),
            Transition::new(657075600, 4),
            Transition::new(670381200, 3),
            Transition::new(688525200, 4),
            Transition::new(701830800, 3),
            Transition::new(719974800, 4),
            Transition::new(733280400, 3),
            Transition::new(751424400, 4),
            Transition::new(764730000, 3),
            Transition::new(782874000, 4),
            Transition::new(796179600, 3),
            Transition::new(814323600, 4),
            Transition::new(828234000, 3),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(-1420, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-1521, false, Some(b"DMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(2079, true, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"BDST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"GMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"BST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_BELGRADE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713915320, 1),
            Transition::new(-905824800, 2),
            Transition::new(-857257200, 1),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 1),
            Transition::new(-812502000, 2),
            Transition::new(-796777200, 1),
            Transition::new(-777942000, 2),
            Transition::new(-766623600, 1),
            Transition::new(417574800, 2),
            Transition::new(433299600, 1),
            Transition::new(449024400, 2),
            Transition::new(465354000, 1),
            Transition::new(481078800, 2),
            Transition::new(496803600, 1),
            Transition::new(512528400, 2),
            Transition::new(528253200, 1),
            Transition::new(543978000, 2),
            Transition::new(559702800, 1),
            Transition::new(575427600, 2),
            Transition::new(591152400, 1),
            Transition::new(606877200, 2),
            Transition::new(622602000, 1),
            Transition::new(638326800, 2),
            Transition::new(654656400, 1),
            Transition::new(670381200, 2),
            Transition::new(686106000, 1),
            Transition::new(701830800, 2),
            Transition::new(717555600, 1),
            Transition::new(733280400, 2),
            Transition::new(749005200, 1),
            Transition::new(764730000, 2),
            Transition::new(780454800, 1),
            Transition::new(796179600, 2),
            Transition::new(811904400, 1),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(4920, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_BERLIN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2422054408, 2),
            Transition::new(-1693706400, 1),
            Transition::new(-1680483600, 2),
            Transition::new(-1663455600, 1),
            Transition::new(-1650150000, 2),
            Transition::new(-1632006000, 1),
            Transition::new(-1618700400, 2),
            Transition::new(-938905200, 1),
            Transition::new(-857257200, 2),
            Transition::new(-844556400, 1),
            Transition::new(-828226800, 2),
            Transition::new(-812502000, 1),
            Transition::new(-796777200, 2),
            Transition::new(-781052400, 1),
            Transition::new(-776563200, 3),
            Transition::new(-765936000, 1),
            Transition::new(-761180400, 2),
            Transition::new(-748479600, 1),
            Transition::new(-733273200, 2),
            Transition::new(-717631200, 1),
            Transition::new(-714610800, 3),
            Transition::new(-710380800, 1),
            Transition::new(-701910000, 2),
            Transition::new(-684975600, 1),
            Transition::new(-670460400, 2),
            Transition::new(-654130800, 1),
            Transition::new(-639010800, 2),
            Transition::new(323830800, 1),
            Transition::new(338950800, 2),
            Transition::new(354675600, 1),
            Transition::new(370400400, 2),
            Transition::new(386125200, 1),
            Transition::new(401850000, 2),
            Transition::new(417574800, 1),
            Transition::new(433299600, 2),
            Transition::new(449024400, 1),
            Transition::new(465354000, 2),
            Transition::new(481078800, 1),
            Transition::new(496803600, 2),
            Transition::new(512528400, 1),
            Transition::new(528253200, 2),
            Transition::new(543978000, 1),
            Transition::new(559702800, 2),
            Transition::new(575427600, 1),
            Transition::new(591152400, 2),
            Transition::new(606877200, 1),
            Transition::new(622602000, 2),
            Transition::new(638326800, 1),
            Transition::new(654656400, 2),
            Transition::new(670381200, 1),
            Transition::new(686106000, 2),
            Transition::new(701830800, 1),
            Transition::new(717555600, 2),
            Transition::new(733280400, 1),
            Transition::new(749005200, 2),
            Transition::new(764730000, 1),
            Transition::new(780454800, 2),
            Transition::new(796179600, 1),
            Transition::new(811904400, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(3208, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"CEMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_BRATISLAVA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3786829064, 1),
            Transition::new(-2469401864, 3),
            Transition::new(-1693706400, 2),
            Transition::new(-1680483600, 3),
            Transition::new(-1663455600, 2),
            Transition::new(-1650150000, 3),
            Transition::new(-1632006000, 2),
            Transition::new(-1618700400, 3),
            Transition::new(-938905200, 2),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 2),
            Transition::new(-796777200, 3),
            Transition::new(-781052400, 2),
            Transition::new(-765327600, 3),
            Transition::new(-746578800, 2),
            Transition::new(-733359600, 3),
            Transition::new(-728517600, 4),
            Transition::new(-721260000, 3),
            Transition::new(-716425200, 2),
            Transition::new(-701910000, 3),
            Transition::new(-684975600, 2),
            Transition::new(-670460400, 3),
            Transition::new(-654217200, 2),
            Transition::new(-639010800, 3),
            Transition::new(291776400, 2),
            Transition::new(307501200, 3),
            Transition::new(323830800, 2),
            Transition::new(338950800, 3),
            Transition::new(354675600, 2),
            Transition::new(370400400, 3),
            Transition::new(386125200, 2),
            Transition::new(401850000, 3),
            Transition::new(417574800, 2),
            Transition::new(433299600, 3),
            Transition::new(449024400, 2),
            Transition::new(465354000, 3),
            Transition::new(481078800, 2),
            Transition::new(496803600, 3),
            Transition::new(512528400, 2),
            Transition::new(528253200, 3),
            Transition::new(543978000, 2),
            Transition::new(559702800, 3),
            Transition::new(575427600, 2),
            Transition::new(591152400, 3),
            Transition::new(606877200, 2),
            Transition::new(622602000, 3),
            Transition::new(638326800, 2),
            Transition::new(654656400, 3),
            Transition::new(670381200, 2),
            Transition::new(686106000, 3),
            Transition::new(701830800, 2),
            Transition::new(717555600, 3),
            Transition::new(733280400, 2),
            Transition::new(749005200, 3),
            Transition::new(764730000, 2),
            Transition::new(780454800, 3),
            Transition::new(796179600, 2),
            Transition::new(811904400, 3),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(3464, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3464, false, Some(b"PMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, true, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_BRUSSELS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840141850, 1),
            Transition::new(-2450995200, 2),
            Transition::new(-1740355200, 3),
            Transition::new(-1693702800, 4),
            Transition::new(-1680483600, 3),
            Transition::new(-1663455600, 4),
            Transition::new(-1650150000, 3),
            Transition::new(-1632006000, 4),
            Transition::new(-1618700400, 3),
            Transition::new(-1613826000, 2),
            Transition::new(-1604278800, 5),
            Transition::new(-1585530000, 2),
            Transition::new(-1574038800, 5),
            Transition::new(-1552266000, 2),
            Transition::new(-1539997200, 5),
            Transition::new(-1520557200, 2),
            Transition::new(-1507510800, 5),
            Transition::new(-1490576400, 2),
            Transition::new(-1473642000, 5),
            Transition::new(-1459126800, 2),
            Transition::new(-1444006800, 5),
            Transition::new(-1427677200, 2),
            Transition::new(-1411952400, 5),
            Transition::new(-1396227600, 2),
            Transition::new(-1379293200, 5),
            Transition::new(-1364778000, 2),
            Transition::new(-1348448400, 5),
            Transition::new(-1333328400, 2),
            Transition::new(-1316394000, 5),
            Transition::new(-1301263200, 2),
            Transition::new(-1284328800, 5),
            Transition::new(-1269813600, 2),
            Transition::new(-1253484000, 5),
            Transition::new(-1238364000, 2),
            Transition::new(-1221429600, 5),
            Transition::new(-1206914400, 2),
            Transition::new(-1191189600, 5),
            Transition::new(-1175464800, 2),
            Transition::new(-1160344800, 5),
            Transition::new(-1143410400, 2),
            Transition::new(-1127685600, 5),
            Transition::new(-1111960800, 2),
            Transition::new(-1096840800, 5),
            Transition::new(-1080511200, 2),
            Transition::new(-1063576800, 5),
            Transition::new(-1049061600, 2),
            Transition::new(-1033336800, 5),
            Transition::new(-1017612000, 2),
            Transition::new(-1002492000, 5),
            Transition::new(-986162400, 2),
            Transition::new(-969228000, 5),
            Transition::new(-950479200, 2),
            Transition::new(-942012000, 5),
            Transition::new(-934668000, 4),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 4),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 4),
            Transition::new(-798073200, 3),
            Transition::new(-781052400, 4),
            Transition::new(-766623600, 3),
            Transition::new(-745455600, 4),
            Transition::new(-733273200, 3),
            Transition::new(228877200, 4),
            Transition::new(243997200, 3),
            Transition::new(260326800, 4),
            Transition::new(276051600, 3),
            Transition::new(291776400, 4),
            Transition::new(307501200, 3),
            Transition::new(323830800, 4),
            Transition::new(338950800, 3),
            Transition::new(354675600, 4),
            Transition::new(370400400, 3),
            Transition::new(386125200, 4),
            Transition::new(401850000, 3),
            Transition::new(417574800, 4),
            Transition::new(433299600, 3),
            Transition::new(449024400, 4),
            Transition::new(465354000, 3),
            Transition::new(481078800, 4),
            Transition::new(496803600, 3),
            Transition::new(512528400, 4),
            Transition::new(528253200, 3),
            Transition::new(543978000, 4),
            Transition::new(559702800, 3),
            Transition::new(575427600, 4),
            Transition::new(591152400, 3),
            Transition::new(606877200, 4),
            Transition::new(622602000, 3),
            Transition::new(638326800, 4),
            Transition::new(654656400, 3),
            Transition::new(670381200, 4),
            Transition::new(686106000, 3),
            Transition::new(701830800, 4),
            Transition::new(717555600, 3),
            Transition::new(733280400, 4),
            Transition::new(749005200, 3),
            Transition::new(764730000, 4),
            Transition::new(780454800, 3),
            Transition::new(796179600, 4),
            Transition::new(811904400, 3),
            Transition::new(828234000, 4),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(1050, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(1050, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_BUCHAREST: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2469404664, 1),
            Transition::new(-1213148664, 3),
            Transition::new(-1187056800, 2),
            Transition::new(-1175479200, 3),
            Transition::new(-1159754400, 2),
            Transition::new(-1144029600, 3),
            Transition::new(-1127700000, 2),
            Transition::new(-1111975200, 3),
            Transition::new(-1096250400, 2),
            Transition::new(-1080525600, 3),
            Transition::new(-1064800800, 2),
            Transition::new(-1049076000, 3),
            Transition::new(-1033351200, 2),
            Transition::new(-1017626400, 3),
            Transition::new(-1001901600, 2),
            Transition::new(-986176800, 3),
            Transition::new(-970452000, 2),
            Transition::new(-954727200, 3),
            Transition::new(296604000, 2),
            Transition::new(307486800, 3),
            Transition::new(323816400, 2),
            Transition::new(338940000, 3),
            Transition::new(354672000, 2),
            Transition::new(370396800, 3),
            Transition::new(386121600, 2),
            Transition::new(401846400, 3),
            Transition::new(417571200, 2),
            Transition::new(433296000, 3),
            Transition::new(449020800, 2),
            Transition::new(465350400, 3),
            Transition::new(481075200, 2),
            Transition::new(496800000, 3),
            Transition::new(512524800, 2),
            Transition::new(528249600, 3),
            Transition::new(543974400, 2),
            Transition::new(559699200, 3),
            Transition::new(575424000, 2),
            Transition::new(591148800, 3),
            Transition::new(606873600, 2),
            Transition::new(622598400, 3),
            Transition::new(638323200, 2),
            Transition::new(654652800, 3),
            Transition::new(670370400, 2),
            Transition::new(686095200, 3),
            Transition::new(701820000, 2),
            Transition::new(717544800, 3),
            Transition::new(733269600, 2),
            Transition::new(748994400, 3),
            Transition::new(764719200, 2),
            Transition::new(780440400, 3),
            Transition::new(796168800, 2),
            Transition::new(811890000, 3),
            Transition::new(828223200, 2),
            Transition::new(846363600, 3),
            Transition::new(859683600, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(6264, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(6264, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_BUDAPEST: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2498260580, 2),
            Transition::new(-1693706400, 1),
            Transition::new(-1680483600, 2),
            Transition::new(-1663455600, 1),
            Transition::new(-1650150000, 2),
            Transition::new(-1632006000, 1),
            Transition::new(-1618700400, 2),
            Transition::new(-1600470000, 1),
            Transition::new(-1587250800, 2),
            Transition::new(-1569711600, 1),
            Transition::new(-1555196400, 2),
            Transition::new(-906775200, 1),
            Transition::new(-857257200, 2),
            Transition::new(-844556400, 1),
            Transition::new(-828226800, 2),
            Transition::new(-812502000, 1),
            Transition::new(-796777200, 2),
            Transition::new(-778471200, 1),
            Transition::new(-762656400, 2),
            Transition::new(-749689200, 1),
            Transition::new(-733276800, 2),
            Transition::new(-717634800, 1),
            Transition::new(-701910000, 2),
            Transition::new(-686185200, 1),
            Transition::new(-670460400, 2),
            Transition::new(-654130800, 1),
            Transition::new(-639010800, 2),
            Transition::new(-492656400, 1),
            Transition::new(-481168800, 2),
            Transition::new(-461199600, 1),
            Transition::new(-449708400, 2),
            Transition::new(-428540400, 1),
            Transition::new(-418258800, 2),
            Transition::new(-397090800, 1),
            Transition::new(-386809200, 2),
            Transition::new(323823600, 1),
            Transition::new(338943600, 2),
            Transition::new(354668400, 1),
            Transition::new(370393200, 2),
            Transition::new(386118000, 1),
            Transition::new(401842800, 2),
            Transition::new(417567600, 1),
            Transition::new(433292400, 2),
            Transition::new(449024400, 1),
            Transition::new(465354000, 2),
            Transition::new(481078800, 1),
            Transition::new(496803600, 2),
            Transition::new(512528400, 1),
            Transition::new(528253200, 2),
            Transition::new(543978000, 1),
            Transition::new(559702800, 2),
            Transition::new(575427600, 1),
            Transition::new(591152400, 2),
            Transition::new(606877200, 1),
            Transition::new(622602000, 2),
            Transition::new(638326800, 1),
            Transition::new(654656400, 2),
            Transition::new(670381200, 1),
            Transition::new(686106000, 2),
            Transition::new(701830800, 1),
            Transition::new(717555600, 2),
            Transition::new(733280400, 1),
            Transition::new(749005200, 2),
            Transition::new(764730000, 1),
            Transition::new(780454800, 2),
            Transition::new(796179600, 1),
            Transition::new(811904400, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(4580, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_BUSINGEN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3675198848, 1),
            Transition::new(-2385246586, 3),
            Transition::new(-904435200, 2),
            Transition::new(-891129600, 3),
            Transition::new(-872985600, 2),
            Transition::new(-859680000, 3),
            Transition::new(354675600, 2),
            Transition::new(370400400, 3),
            Transition::new(386125200, 2),
            Transition::new(401850000, 3),
            Transition::new(417574800, 2),
            Transition::new(433299600, 3),
            Transition::new(449024400, 2),
            Transition::new(465354000, 3),
            Transition::new(481078800, 2),
            Transition::new(496803600, 3),
            Transition::new(512528400, 2),
            Transition::new(528253200, 3),
            Transition::new(543978000, 2),
            Transition::new(559702800, 3),
            Transition::new(575427600, 2),
            Transition::new(591152400, 3),
            Transition::new(606877200, 2),
            Transition::new(622602000, 3),
            Transition::new(638326800, 2),
            Transition::new(654656400, 3),
            Transition::new(670381200, 2),
            Transition::new(686106000, 3),
            Transition::new(701830800, 2),
            Transition::new(717555600, 3),
            Transition::new(733280400, 2),
            Transition::new(749005200, 3),
            Transition::new(764730000, 2),
            Transition::new(780454800, 3),
            Transition::new(796179600, 2),
            Transition::new(811904400, 3),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(2048, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(1786, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_CHISINAU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840147720, 1),
            Transition::new(-1637114100, 2),
            Transition::new(-1213148664, 4),
            Transition::new(-1187056800, 3),
            Transition::new(-1175479200, 4),
            Transition::new(-1159754400, 3),
            Transition::new(-1144029600, 4),
            Transition::new(-1127700000, 3),
            Transition::new(-1111975200, 4),
            Transition::new(-1096250400, 3),
            Transition::new(-1080525600, 4),
            Transition::new(-1064800800, 3),
            Transition::new(-1049076000, 4),
            Transition::new(-1033351200, 3),
            Transition::new(-1017626400, 4),
            Transition::new(-1001901600, 3),
            Transition::new(-986176800, 4),
            Transition::new(-970452000, 3),
            Transition::new(-954727200, 4),
            Transition::new(-927165600, 3),
            Transition::new(-898138800, 6),
            Transition::new(-857257200, 5),
            Transition::new(-844556400, 6),
            Transition::new(-828226800, 5),
            Transition::new(-812502000, 6),
            Transition::new(-800157600, 8),
            Transition::new(354920400, 7),
            Transition::new(370728000, 8),
            Transition::new(386456400, 7),
            Transition::new(402264000, 8),
            Transition::new(417992400, 7),
            Transition::new(433800000, 8),
            Transition::new(449614800, 7),
            Transition::new(465346800, 8),
            Transition::new(481071600, 7),
            Transition::new(496796400, 8),
            Transition::new(512521200, 7),
            Transition::new(528246000, 8),
            Transition::new(543970800, 7),
            Transition::new(559695600, 8),
            Transition::new(575420400, 7),
            Transition::new(591145200, 8),
            Transition::new(606870000, 7),
            Transition::new(622594800, 8),
            Transition::new(638319600, 7),
            Transition::new(641944800, 3),
            Transition::new(654652800, 4),
            Transition::new(670377600, 3),
            Transition::new(686102400, 4),
            Transition::new(701820000, 3),
            Transition::new(717541200, 4),
            Transition::new(733269600, 3),
            Transition::new(748990800, 4),
            Transition::new(764719200, 3),
            Transition::new(780440400, 4),
            Transition::new(796168800, 3),
            Transition::new(811890000, 4),
            Transition::new(828223200, 3),
            Transition::new(846363600, 4),
            Transition::new(859680000, 3),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(6920, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(6900, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(6264, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_COPENHAGEN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524524620, 1),
            Transition::new(-2398294220, 3),
            Transition::new(-1692496800, 2),
            Transition::new(-1680490800, 3),
            Transition::new(-935110800, 2),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 2),
            Transition::new(-796777200, 3),
            Transition::new(-781052400, 2),
            Transition::new(-769388400, 3),
            Transition::new(-747010800, 2),
            Transition::new(-736383600, 3),
            Transition::new(-715215600, 2),
            Transition::new(-706748400, 3),
            Transition::new(-683161200, 2),
            Transition::new(-675298800, 3),
            Transition::new(323830800, 2),
            Transition::new(338950800, 3),
            Transition::new(354675600, 2),
            Transition::new(370400400, 3),
            Transition::new(386125200, 2),
            Transition::new(401850000, 3),
            Transition::new(417574800, 2),
            Transition::new(433299600, 3),
            Transition::new(449024400, 2),
            Transition::new(465354000, 3),
            Transition::new(481078800, 2),
            Transition::new(496803600, 3),
            Transition::new(512528400, 2),
            Transition::new(528253200, 3),
            Transition::new(543978000, 2),
            Transition::new(559702800, 3),
            Transition::new(575427600, 2),
            Transition::new(591152400, 3),
            Transition::new(606877200, 2),
            Transition::new(622602000, 3),
            Transition::new(638326800, 2),
            Transition::new(654656400, 3),
            Transition::new(670381200, 2),
            Transition::new(686106000, 3),
            Transition::new(701830800, 2),
            Transition::new(717555600, 3),
            Transition::new(733280400, 2),
            Transition::new(749005200, 3),
            Transition::new(764730000, 2),
            Transition::new(780454800, 3),
            Transition::new(796179600, 2),
            Transition::new(811904400, 3),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(3020, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3020, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_GIBRALTAR: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2821649916, 2),
            Transition::new(-1691964000, 1),
            Transition::new(-1680472800, 2),
            Transition::new(-1664143200, 1),
            Transition::new(-1650146400, 2),
            Transition::new(-1633903200, 1),
            Transition::new(-1617487200, 2),
            Transition::new(-1601848800, 1),
            Transition::new(-1586037600, 2),
            Transition::new(-1570399200, 1),
            Transition::new(-1552168800, 2),
            Transition::new(-1538344800, 1),
            Transition::new(-1522533600, 2),
            Transition::new(-1507500000, 1),
            Transition::new(-1490565600, 2),
            Transition::new(-1473631200, 1),
            Transition::new(-1460930400, 2),
            Transition::new(-1442786400, 1),
            Transition::new(-1428876000, 2),
            Transition::new(-1410732000, 1),
            Transition::new(-1396216800, 2),
            Transition::new(-1379282400, 1),
            Transition::new(-1364767200, 2),
            Transition::new(-1348437600, 1),
            Transition::new(-1333317600, 2),
            Transition::new(-1315778400, 1),
            Transition::new(-1301263200, 2),
            Transition::new(-1284328800, 1),
            Transition::new(-1269813600, 2),
            Transition::new(-1253484000, 1),
            Transition::new(-1238364000, 2),
            Transition::new(-1221429600, 1),
            Transition::new(-1206914400, 2),
            Transition::new(-1189980000, 1),
            Transition::new(-1175464800, 2),
            Transition::new(-1159135200, 1),
            Transition::new(-1143410400, 2),
            Transition::new(-1126476000, 1),
            Transition::new(-1111960800, 2),
            Transition::new(-1095631200, 1),
            Transition::new(-1080511200, 2),
            Transition::new(-1063576800, 1),
            Transition::new(-1049061600, 2),
            Transition::new(-1032127200, 1),
            Transition::new(-1017612000, 2),
            Transition::new(-1001282400, 1),
            Transition::new(-986162400, 2),
            Transition::new(-969228000, 1),
            Transition::new(-950479200, 2),
            Transition::new(-942012000, 1),
            Transition::new(-904518000, 3),
            Transition::new(-896050800, 1),
            Transition::new(-875487600, 3),
            Transition::new(-864601200, 1),
            Transition::new(-844038000, 3),
            Transition::new(-832546800, 1),
            Transition::new(-812588400, 3),
            Transition::new(-798073200, 1),
            Transition::new(-781052400, 3),
            Transition::new(-772066800, 1),
            Transition::new(-764805600, 2),
            Transition::new(-748476000, 1),
            Transition::new(-733356000, 2),
            Transition::new(-719445600, 1),
            Transition::new(-717030000, 3),
            Transition::new(-706748400, 1),
            Transition::new(-699487200, 2),
            Transition::new(-687996000, 1),
            Transition::new(-668037600, 2),
            Transition::new(-654732000, 1),
            Transition::new(-636588000, 2),
            Transition::new(-622072800, 1),
            Transition::new(-605743200, 2),
            Transition::new(-590623200, 1),
            Transition::new(-574293600, 2),
            Transition::new(-558568800, 1),
            Transition::new(-542239200, 2),
            Transition::new(-527119200, 1),
            Transition::new(-512604000, 2),
            Transition::new(-496274400, 1),
            Transition::new(-481154400, 2),
            Transition::new(-464220000, 1),
            Transition::new(-449704800, 2),
            Transition::new(-432165600, 1),
            Transition::new(-417650400, 2),
            Transition::new(-401320800, 4),
            Transition::new(386125200, 5),
            Transition::new(401850000, 4),
            Transition::new(417574800, 5),
            Transition::new(433299600, 4),
            Transition::new(449024400, 5),
            Transition::new(465354000, 4),
            Transition::new(481078800, 5),
            Transition::new(496803600, 4),
            Transition::new(512528400, 5),
            Transition::new(528253200, 4),
            Transition::new(543978000, 5),
            Transition::new(559702800, 4),
            Transition::new(575427600, 5),
            Transition::new(591152400, 4),
            Transition::new(606877200, 5),
            Transition::new(622602000, 4),
            Transition::new(638326800, 5),
            Transition::new(654656400, 4),
            Transition::new(670381200, 5),
            Transition::new(686106000, 4),
            Transition::new(701830800, 5),
            Transition::new(717555600, 4),
            Transition::new(733280400, 5),
            Transition::new(749005200, 4),
            Transition::new(764730000, 5),
            Transition::new(780454800, 4),
            Transition::new(796179600, 5),
            Transition::new(811904400, 4),
            Transition::new(828234000, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-1284, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"BDST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_GUERNSEY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1784245791, 2),
            Transition::new(-1691964000, 1),
            Transition::new(-1680472800, 2),
            Transition::new(-1664143200, 1),
            Transition::new(-1650146400, 2),
            Transition::new(-1633903200, 1),
            Transition::new(-1617487200, 2),
            Transition::new(-1601848800, 1),
            Transition::new(-1586037600, 2),
            Transition::new(-1570399200, 1),
            Transition::new(-1552168800, 2),
            Transition::new(-1538344800, 1),
            Transition::new(-1522533600, 2),
            Transition::new(-1507500000, 1),
            Transition::new(-1490565600, 2),
            Transition::new(-1473631200, 1),
            Transition::new(-1460930400, 2),
            Transition::new(-1442786400, 1),
            Transition::new(-1428876000, 2),
            Transition::new(-1410732000, 1),
            Transition::new(-1396216800, 2),
            Transition::new(-1379282400, 1),
            Transition::new(-1364767200, 2),
            Transition::new(-1348437600, 1),
            Transition::new(-1333317600, 2),
            Transition::new(-1315778400, 1),
            Transition::new(-1301263200, 2),
            Transition::new(-1284328800, 1),
            Transition::new(-1269813600, 2),
            Transition::new(-1253484000, 1),
            Transition::new(-1238364000, 2),
            Transition::new(-1221429600, 1),
            Transition::new(-1206914400, 2),
            Transition::new(-1189980000, 1),
            Transition::new(-1175464800, 2),
            Transition::new(-1159135200, 1),
            Transition::new(-1143410400, 2),
            Transition::new(-1126476000, 1),
            Transition::new(-1111960800, 2),
            Transition::new(-1095631200, 1),
            Transition::new(-1080511200, 2),
            Transition::new(-1063576800, 1),
            Transition::new(-1049061600, 2),
            Transition::new(-1032127200, 1),
            Transition::new(-1017612000, 2),
            Transition::new(-1001282400, 1),
            Transition::new(-986162400, 2),
            Transition::new(-969228000, 1),
            Transition::new(-950479200, 2),
            Transition::new(-942012000, 1),
            Transition::new(-930963600, 4),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 4),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 4),
            Transition::new(-796777200, 3),
            Transition::new(-781052400, 4),
            Transition::new(-777952800, 5),
            Transition::new(-772066800, 1),
            Transition::new(-764805600, 2),
            Transition::new(-748476000, 1),
            Transition::new(-733356000, 2),
            Transition::new(-719445600, 1),
            Transition::new(-717030000, 5),
            Transition::new(-706748400, 1),
            Transition::new(-699487200, 2),
            Transition::new(-687996000, 1),
            Transition::new(-668037600, 2),
            Transition::new(-654732000, 1),
            Transition::new(-636588000, 2),
            Transition::new(-622072800, 1),
            Transition::new(-605743200, 2),
            Transition::new(-590623200, 1),
            Transition::new(-574293600, 2),
            Transition::new(-558568800, 1),
            Transition::new(-542239200, 2),
            Transition::new(-527119200, 1),
            Transition::new(-512604000, 2),
            Transition::new(-496274400, 1),
            Transition::new(-481154400, 2),
            Transition::new(-464220000, 1),
            Transition::new(-449704800, 2),
            Transition::new(-432165600, 1),
            Transition::new(-417650400, 2),
            Transition::new(-401320800, 1),
            Transition::new(-386200800, 2),
            Transition::new(-369266400, 1),
            Transition::new(-354751200, 2),
            Transition::new(-337816800, 1),
            Transition::new(-323301600, 2),
            Transition::new(-306972000, 1),
            Transition::new(-291852000, 2),
            Transition::new(-276732000, 1),
            Transition::new(-257983200, 2),
            Transition::new(-245282400, 1),
            Transition::new(-226533600, 2),
            Transition::new(-213228000, 1),
            Transition::new(-195084000, 2),
            Transition::new(-182383200, 1),
            Transition::new(-163634400, 2),
            Transition::new(-150933600, 1),
            Transition::new(-132184800, 2),
            Transition::new(-119484000, 1),
            Transition::new(-100735200, 2),
            Transition::new(-88034400, 1),
            Transition::new(-68680800, 2),
            Transition::new(-59004000, 1),
            Transition::new(-37242000, 6),
            Transition::new(57722400, 2),
            Transition::new(69818400, 1),
            Transition::new(89172000, 2),
            Transition::new(101268000, 1),
            Transition::new(120621600, 2),
            Transition::new(132717600, 1),
            Transition::new(152071200, 2),
            Transition::new(164167200, 1),
            Transition::new(183520800, 2),
            Transition::new(196221600, 1),
            Transition::new(214970400, 2),
            Transition::new(227671200, 1),
            Transition::new(246420000, 2),
            Transition::new(259120800, 1),
            Transition::new(278474400, 2),
            Transition::new(290570400, 1),
            Transition::new(309924000, 2),
            Transition::new(322020000, 1),
            Transition::new(341373600, 2),
            Transition::new(354675600, 1),
            Transition::new(372819600, 2),
            Transition::new(386125200, 1),
            Transition::new(404269200, 2),
            Transition::new(417574800, 1),
            Transition::new(435718800, 2),
            Transition::new(449024400, 1),
            Transition::new(467773200, 2),
            Transition::new(481078800, 1),
            Transition::new(499222800, 2),
            Transition::new(512528400, 1),
            Transition::new(530672400, 2),
            Transition::new(543978000, 1),
            Transition::new(562122000, 2),
            Transition::new(575427600, 1),
            Transition::new(593571600, 2),
            Transition::new(606877200, 1),
            Transition::new(625626000, 2),
            Transition::new(638326800, 1),
            Transition::new(657075600, 2),
            Transition::new(670381200, 1),
            Transition::new(688525200, 2),
            Transition::new(701830800, 1),
            Transition::new(719974800, 2),
            Transition::new(733280400, 1),
            Transition::new(751424400, 2),
            Transition::new(764730000, 1),
            Transition::new(782874000, 2),
            Transition::new(796179600, 1),
            Transition::new(814323600, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(-609, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"BDST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"GMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"BST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_HELSINKI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2890258789, 1),
            Transition::new(-1535938789, 3),
            Transition::new(-875671200, 2),
            Transition::new(-859773600, 3),
            Transition::new(354672000, 2),
            Transition::new(370396800, 3),
            Transition::new(386121600, 2),
            Transition::new(401846400, 3),
            Transition::new(417574800, 2),
            Transition::new(433299600, 3),
            Transition::new(449024400, 2),
            Transition::new(465354000, 3),
            Transition::new(481078800, 2),
            Transition::new(496803600, 3),
            Transition::new(512528400, 2),
            Transition::new(528253200, 3),
            Transition::new(543978000, 2),
            Transition::new(559702800, 3),
            Transition::new(575427600, 2),
            Transition::new(591152400, 3),
            Transition::new(606877200, 2),
            Transition::new(622602000, 3),
            Transition::new(638326800, 2),
            Transition::new(654656400, 3),
            Transition::new(670381200, 2),
            Transition::new(686106000, 3),
            Transition::new(701830800, 2),
            Transition::new(717555600, 3),
            Transition::new(733280400, 2),
            Transition::new(749005200, 3),
            Transition::new(764730000, 2),
            Transition::new(780454800, 3),
            Transition::new(796179600, 2),
            Transition::new(811904400, 3),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(5989, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5989, false, Some(b"HMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_ISLE_OF_MAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2737842125, 2),
            Transition::new(-1691964000, 1),
            Transition::new(-1680472800, 2),
            Transition::new(-1664143200, 1),
            Transition::new(-1650146400, 2),
            Transition::new(-1633903200, 1),
            Transition::new(-1617487200, 2),
            Transition::new(-1601848800, 1),
            Transition::new(-1586037600, 2),
            Transition::new(-1570399200, 1),
            Transition::new(-1552168800, 2),
            Transition::new(-1538344800, 1),
            Transition::new(-1522533600, 2),
            Transition::new(-1507500000, 1),
            Transition::new(-1490565600, 2),
            Transition::new(-1473631200, 1),
            Transition::new(-1460930400, 2),
            Transition::new(-1442786400, 1),
            Transition::new(-1428876000, 2),
            Transition::new(-1410732000, 1),
            Transition::new(-1396216800, 2),
            Transition::new(-1379282400, 1),
            Transition::new(-1364767200, 2),
            Transition::new(-1348437600, 1),
            Transition::new(-1333317600, 2),
            Transition::new(-1315778400, 1),
            Transition::new(-1301263200, 2),
            Transition::new(-1284328800, 1),
            Transition::new(-1269813600, 2),
            Transition::new(-1253484000, 1),
            Transition::new(-1238364000, 2),
            Transition::new(-1221429600, 1),
            Transition::new(-1206914400, 2),
            Transition::new(-1189980000, 1),
            Transition::new(-1175464800, 2),
            Transition::new(-1159135200, 1),
            Transition::new(-1143410400, 2),
            Transition::new(-1126476000, 1),
            Transition::new(-1111960800, 2),
            Transition::new(-1095631200, 1),
            Transition::new(-1080511200, 2),
            Transition::new(-1063576800, 1),
            Transition::new(-1049061600, 2),
            Transition::new(-1032127200, 1),
            Transition::new(-1017612000, 2),
            Transition::new(-1001282400, 1),
            Transition::new(-986162400, 2),
            Transition::new(-969228000, 1),
            Transition::new(-950479200, 2),
            Transition::new(-942012000, 1),
            Transition::new(-904518000, 3),
            Transition::new(-896050800, 1),
            Transition::new(-875487600, 3),
            Transition::new(-864601200, 1),
            Transition::new(-844038000, 3),
            Transition::new(-832546800, 1),
            Transition::new(-812588400, 3),
            Transition::new(-798073200, 1),
            Transition::new(-781052400, 3),
            Transition::new(-772066800, 1),
            Transition::new(-764805600, 2),
            Transition::new(-748476000, 1),
            Transition::new(-733356000, 2),
            Transition::new(-719445600, 1),
            Transition::new(-717030000, 3),
            Transition::new(-706748400, 1),
            Transition::new(-699487200, 2),
            Transition::new(-687996000, 1),
            Transition::new(-668037600, 2),
            Transition::new(-654732000, 1),
            Transition::new(-636588000, 2),
            Transition::new(-622072800, 1),
            Transition::new(-605743200, 2),
            Transition::new(-590623200, 1),
            Transition::new(-574293600, 2),
            Transition::new(-558568800, 1),
            Transition::new(-542239200, 2),
            Transition::new(-527119200, 1),
            Transition::new(-512604000, 2),
            Transition::new(-496274400, 1),
            Transition::new(-481154400, 2),
            Transition::new(-464220000, 1),
            Transition::new(-449704800, 2),
            Transition::new(-432165600, 1),
            Transition::new(-417650400, 2),
            Transition::new(-401320800, 1),
            Transition::new(-386200800, 2),
            Transition::new(-369266400, 1),
            Transition::new(-354751200, 2),
            Transition::new(-337816800, 1),
            Transition::new(-323301600, 2),
            Transition::new(-306972000, 1),
            Transition::new(-291852000, 2),
            Transition::new(-276732000, 1),
            Transition::new(-257983200, 2),
            Transition::new(-245282400, 1),
            Transition::new(-226533600, 2),
            Transition::new(-213228000, 1),
            Transition::new(-195084000, 2),
            Transition::new(-182383200, 1),
            Transition::new(-163634400, 2),
            Transition::new(-150933600, 1),
            Transition::new(-132184800, 2),
            Transition::new(-119484000, 1),
            Transition::new(-100735200, 2),
            Transition::new(-88034400, 1),
            Transition::new(-68680800, 2),
            Transition::new(-59004000, 1),
            Transition::new(-37242000, 4),
            Transition::new(57722400, 2),
            Transition::new(69818400, 1),
            Transition::new(89172000, 2),
            Transition::new(101268000, 1),
            Transition::new(120621600, 2),
            Transition::new(132717600, 1),
            Transition::new(152071200, 2),
            Transition::new(164167200, 1),
            Transition::new(183520800, 2),
            Transition::new(196221600, 1),
            Transition::new(214970400, 2),
            Transition::new(227671200, 1),
            Transition::new(246420000, 2),
            Transition::new(259120800, 1),
            Transition::new(278474400, 2),
            Transition::new(290570400, 1),
            Transition::new(309924000, 2),
            Transition::new(322020000, 1),
            Transition::new(341373600, 2),
            Transition::new(354675600, 1),
            Transition::new(372819600, 2),
            Transition::new(386125200, 1),
            Transition::new(404269200, 2),
            Transition::new(417574800, 1),
            Transition::new(435718800, 2),
            Transition::new(449024400, 1),
            Transition::new(467773200, 2),
            Transition::new(481078800, 1),
            Transition::new(499222800, 2),
            Transition::new(512528400, 1),
            Transition::new(530672400, 2),
            Transition::new(543978000, 1),
            Transition::new(562122000, 2),
            Transition::new(575427600, 1),
            Transition::new(593571600, 2),
            Transition::new(606877200, 1),
            Transition::new(625626000, 2),
            Transition::new(638326800, 1),
            Transition::new(657075600, 2),
            Transition::new(670381200, 1),
            Transition::new(688525200, 2),
            Transition::new(701830800, 1),
            Transition::new(719974800, 2),
            Transition::new(733280400, 1),
            Transition::new(751424400, 2),
            Transition::new(764730000, 1),
            Transition::new(782874000, 2),
            Transition::new(796179600, 1),
            Transition::new(814323600, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-1075, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"BDST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"GMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"BST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_JERSEY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2258092800, 2),
            Transition::new(-1691964000, 1),
            Transition::new(-1680472800, 2),
            Transition::new(-1664143200, 1),
            Transition::new(-1650146400, 2),
            Transition::new(-1633903200, 1),
            Transition::new(-1617487200, 2),
            Transition::new(-1601848800, 1),
            Transition::new(-1586037600, 2),
            Transition::new(-1570399200, 1),
            Transition::new(-1552168800, 2),
            Transition::new(-1538344800, 1),
            Transition::new(-1522533600, 2),
            Transition::new(-1507500000, 1),
            Transition::new(-1490565600, 2),
            Transition::new(-1473631200, 1),
            Transition::new(-1460930400, 2),
            Transition::new(-1442786400, 1),
            Transition::new(-1428876000, 2),
            Transition::new(-1410732000, 1),
            Transition::new(-1396216800, 2),
            Transition::new(-1379282400, 1),
            Transition::new(-1364767200, 2),
            Transition::new(-1348437600, 1),
            Transition::new(-1333317600, 2),
            Transition::new(-1315778400, 1),
            Transition::new(-1301263200, 2),
            Transition::new(-1284328800, 1),
            Transition::new(-1269813600, 2),
            Transition::new(-1253484000, 1),
            Transition::new(-1238364000, 2),
            Transition::new(-1221429600, 1),
            Transition::new(-1206914400, 2),
            Transition::new(-1189980000, 1),
            Transition::new(-1175464800, 2),
            Transition::new(-1159135200, 1),
            Transition::new(-1143410400, 2),
            Transition::new(-1126476000, 1),
            Transition::new(-1111960800, 2),
            Transition::new(-1095631200, 1),
            Transition::new(-1080511200, 2),
            Transition::new(-1063576800, 1),
            Transition::new(-1049061600, 2),
            Transition::new(-1032127200, 1),
            Transition::new(-1017612000, 2),
            Transition::new(-1001282400, 1),
            Transition::new(-986162400, 2),
            Transition::new(-969228000, 1),
            Transition::new(-950479200, 2),
            Transition::new(-942012000, 1),
            Transition::new(-930963600, 4),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 4),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 4),
            Transition::new(-796777200, 3),
            Transition::new(-781052400, 4),
            Transition::new(-777952800, 5),
            Transition::new(-772066800, 1),
            Transition::new(-764805600, 2),
            Transition::new(-748476000, 1),
            Transition::new(-733356000, 2),
            Transition::new(-719445600, 1),
            Transition::new(-717030000, 5),
            Transition::new(-706748400, 1),
            Transition::new(-699487200, 2),
            Transition::new(-687996000, 1),
            Transition::new(-668037600, 2),
            Transition::new(-654732000, 1),
            Transition::new(-636588000, 2),
            Transition::new(-622072800, 1),
            Transition::new(-605743200, 2),
            Transition::new(-590623200, 1),
            Transition::new(-574293600, 2),
            Transition::new(-558568800, 1),
            Transition::new(-542239200, 2),
            Transition::new(-527119200, 1),
            Transition::new(-512604000, 2),
            Transition::new(-496274400, 1),
            Transition::new(-481154400, 2),
            Transition::new(-464220000, 1),
            Transition::new(-449704800, 2),
            Transition::new(-432165600, 1),
            Transition::new(-417650400, 2),
            Transition::new(-401320800, 1),
            Transition::new(-386200800, 2),
            Transition::new(-369266400, 1),
            Transition::new(-354751200, 2),
            Transition::new(-337816800, 1),
            Transition::new(-323301600, 2),
            Transition::new(-306972000, 1),
            Transition::new(-291852000, 2),
            Transition::new(-276732000, 1),
            Transition::new(-257983200, 2),
            Transition::new(-245282400, 1),
            Transition::new(-226533600, 2),
            Transition::new(-213228000, 1),
            Transition::new(-195084000, 2),
            Transition::new(-182383200, 1),
            Transition::new(-163634400, 2),
            Transition::new(-150933600, 1),
            Transition::new(-132184800, 2),
            Transition::new(-119484000, 1),
            Transition::new(-100735200, 2),
            Transition::new(-88034400, 1),
            Transition::new(-68680800, 2),
            Transition::new(-59004000, 1),
            Transition::new(-37242000, 6),
            Transition::new(57722400, 2),
            Transition::new(69818400, 1),
            Transition::new(89172000, 2),
            Transition::new(101268000, 1),
            Transition::new(120621600, 2),
            Transition::new(132717600, 1),
            Transition::new(152071200, 2),
            Transition::new(164167200, 1),
            Transition::new(183520800, 2),
            Transition::new(196221600, 1),
            Transition::new(214970400, 2),
            Transition::new(227671200, 1),
            Transition::new(246420000, 2),
            Transition::new(259120800, 1),
            Transition::new(278474400, 2),
            Transition::new(290570400, 1),
            Transition::new(309924000, 2),
            Transition::new(322020000, 1),
            Transition::new(341373600, 2),
            Transition::new(354675600, 1),
            Transition::new(372819600, 2),
            Transition::new(386125200, 1),
            Transition::new(404269200, 2),
            Transition::new(417574800, 1),
            Transition::new(435718800, 2),
            Transition::new(449024400, 1),
            Transition::new(467773200, 2),
            Transition::new(481078800, 1),
            Transition::new(499222800, 2),
            Transition::new(512528400, 1),
            Transition::new(530672400, 2),
            Transition::new(543978000, 1),
            Transition::new(562122000, 2),
            Transition::new(575427600, 1),
            Transition::new(593571600, 2),
            Transition::new(606877200, 1),
            Transition::new(625626000, 2),
            Transition::new(638326800, 1),
            Transition::new(657075600, 2),
            Transition::new(670381200, 1),
            Transition::new(688525200, 2),
            Transition::new(701830800, 1),
            Transition::new(719974800, 2),
            Transition::new(733280400, 1),
            Transition::new(751424400, 2),
            Transition::new(764730000, 1),
            Transition::new(782874000, 2),
            Transition::new(796179600, 1),
            Transition::new(814323600, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(-506, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"BDST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"GMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"BST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_KALININGRAD: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2422056120, 2),
            Transition::new(-1693706400, 1),
            Transition::new(-1680483600, 2),
            Transition::new(-1663455600, 1),
            Transition::new(-1650150000, 2),
            Transition::new(-1632006000, 1),
            Transition::new(-1618700400, 2),
            Transition::new(-938905200, 1),
            Transition::new(-857257200, 2),
            Transition::new(-844556400, 1),
            Transition::new(-828226800, 2),
            Transition::new(-812502000, 1),
            Transition::new(-796777200, 2),
            Transition::new(-781052400, 1),
            Transition::new(-780372000, 4),
            Transition::new(-778730400, 3),
            Transition::new(-762663600, 4),
            Transition::new(-749095200, 6),
            Transition::new(354920400, 5),
            Transition::new(370728000, 6),
            Transition::new(386456400, 5),
            Transition::new(402264000, 6),
            Transition::new(417992400, 5),
            Transition::new(433800000, 6),
            Transition::new(449614800, 5),
            Transition::new(465346800, 6),
            Transition::new(481071600, 5),
            Transition::new(496796400, 6),
            Transition::new(512521200, 5),
            Transition::new(528246000, 6),
            Transition::new(543970800, 5),
            Transition::new(559695600, 6),
            Transition::new(575420400, 5),
            Transition::new(591145200, 6),
            Transition::new(606870000, 3),
            Transition::new(622598400, 4),
            Transition::new(638323200, 3),
            Transition::new(654652800, 4),
            Transition::new(670377600, 3),
            Transition::new(686102400, 4),
            Transition::new(701827200, 3),
            Transition::new(717552000, 4),
            Transition::new(733276800, 3),
            Transition::new(749001600, 4),
            Transition::new(764726400, 3),
            Transition::new(780451200, 4),
            Transition::new(796176000, 3),
            Transition::new(811900800, 4),
            Transition::new(828230400, 3),
            Transition::new(846374400, 4),
            Transition::new(859680000, 3),
            Transition::new(877824000, 4),
            Transition::new(891129600, 3),
            Transition::new(909273600, 4),
            Transition::new(922579200, 3),
            Transition::new(941328000, 4),
            Transition::new(954028800, 3),
            Transition::new(972777600, 4),
            Transition::new(985478400, 3),
            Transition::new(1004227200, 4),
            Transition::new(1017532800, 3),
            Transition::new(1035676800, 4),
            Transition::new(1048982400, 3),
            Transition::new(1067126400, 4),
            Transition::new(1080432000, 3),
            Transition::new(1099180800, 4),
            Transition::new(1111881600, 3),
            Transition::new(1130630400, 4),
            Transition::new(1143331200, 3),
            Transition::new(1162080000, 4),
            Transition::new(1174780800, 3),
            Transition::new(1193529600, 4),
            Transition::new(1206835200, 3),
            Transition::new(1224979200, 4),
            Transition::new(1238284800, 3),
            Transition::new(1256428800, 4),
            Transition::new(1269734400, 3),
            Transition::new(1288483200, 4),
            Transition::new(1301184000, 7),
            Transition::new(1414278000, 4),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(4920, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_KIEV: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840148124, 1),
            Transition::new(-1441159324, 2),
            Transition::new(-1247536800, 3),
            Transition::new(-892522800, 5),
            Transition::new(-857257200, 4),
            Transition::new(-844556400, 5),
            Transition::new(-828226800, 4),
            Transition::new(-825382800, 3),
            Transition::new(354920400, 6),
            Transition::new(370728000, 3),
            Transition::new(386456400, 6),
            Transition::new(402264000, 3),
            Transition::new(417992400, 6),
            Transition::new(433800000, 3),
            Transition::new(449614800, 6),
            Transition::new(465346800, 3),
            Transition::new(481071600, 6),
            Transition::new(496796400, 3),
            Transition::new(512521200, 6),
            Transition::new(528246000, 3),
            Transition::new(543970800, 6),
            Transition::new(559695600, 3),
            Transition::new(575420400, 6),
            Transition::new(591145200, 3),
            Transition::new(606870000, 6),
            Transition::new(622594800, 3),
            Transition::new(638319600, 6),
            Transition::new(646783200, 7),
            Transition::new(686102400, 2),
            Transition::new(701827200, 7),
            Transition::new(717552000, 2),
            Transition::new(733276800, 7),
            Transition::new(749001600, 2),
            Transition::new(764726400, 7),
            Transition::new(780451200, 2),
            Transition::new(796176000, 7),
            Transition::new(811900800, 2),
            Transition::new(828230400, 7),
            Transition::new(846378000, 2),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(7324, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7324, false, Some(b"KMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_KIROV: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1593820800, 1),
            Transition::new(-1247540400, 3),
            Transition::new(354916800, 2),
            Transition::new(370724400, 3),
            Transition::new(386452800, 2),
            Transition::new(402260400, 3),
            Transition::new(417988800, 2),
            Transition::new(433796400, 3),
            Transition::new(449611200, 2),
            Transition::new(465343200, 3),
            Transition::new(481068000, 2),
            Transition::new(496792800, 3),
            Transition::new(512517600, 2),
            Transition::new(528242400, 3),
            Transition::new(543967200, 2),
            Transition::new(559692000, 3),
            Transition::new(575416800, 2),
            Transition::new(591141600, 3),
            Transition::new(606866400, 4),
            Transition::new(622594800, 1),
            Transition::new(638319600, 4),
            Transition::new(654649200, 1),
            Transition::new(670374000, 3),
            Transition::new(701820000, 4),
            Transition::new(717548400, 1),
            Transition::new(733273200, 4),
            Transition::new(748998000, 1),
            Transition::new(764722800, 4),
            Transition::new(780447600, 1),
            Transition::new(796172400, 4),
            Transition::new(811897200, 1),
            Transition::new(828226800, 4),
            Transition::new(846370800, 1),
            Transition::new(859676400, 4),
            Transition::new(877820400, 1),
            Transition::new(891126000, 4),
            Transition::new(909270000, 1),
            Transition::new(922575600, 4),
            Transition::new(941324400, 1),
            Transition::new(954025200, 4),
            Transition::new(972774000, 1),
            Transition::new(985474800, 4),
            Transition::new(1004223600, 1),
            Transition::new(1017529200, 4),
            Transition::new(1035673200, 1),
            Transition::new(1048978800, 4),
            Transition::new(1067122800, 1),
            Transition::new(1080428400, 4),
            Transition::new(1099177200, 1),
            Transition::new(1111878000, 4),
            Transition::new(1130626800, 1),
            Transition::new(1143327600, 4),
            Transition::new(1162076400, 1),
            Transition::new(1174777200, 4),
            Transition::new(1193526000, 1),
            Transition::new(1206831600, 4),
            Transition::new(1224975600, 1),
            Transition::new(1238281200, 4),
            Transition::new(1256425200, 1),
            Transition::new(1269730800, 4),
            Transition::new(1288479600, 1),
            Transition::new(1301180400, 3),
            Transition::new(1414274400, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(11928, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_LJUBLJANA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713913884, 1),
            Transition::new(-905824800, 2),
            Transition::new(-857257200, 1),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 1),
            Transition::new(-812502000, 2),
            Transition::new(-796777200, 1),
            Transition::new(-781052400, 2),
            Transition::new(-766623600, 1),
            Transition::new(417574800, 2),
            Transition::new(433299600, 1),
            Transition::new(449024400, 2),
            Transition::new(465354000, 1),
            Transition::new(481078800, 2),
            Transition::new(496803600, 1),
            Transition::new(512528400, 2),
            Transition::new(528253200, 1),
            Transition::new(543978000, 2),
            Transition::new(559702800, 1),
            Transition::new(575427600, 2),
            Transition::new(591152400, 1),
            Transition::new(606877200, 2),
            Transition::new(622602000, 1),
            Transition::new(638326800, 2),
            Transition::new(654656400, 1),
            Transition::new(670381200, 2),
            Transition::new(686106000, 1),
            Transition::new(701830800, 2),
            Transition::new(717555600, 1),
            Transition::new(733280400, 2),
            Transition::new(749005200, 1),
            Transition::new(764730000, 2),
            Transition::new(780454800, 1),
            Transition::new(796179600, 2),
            Transition::new(811904400, 1),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(3484, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_LUXEMBOURG: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2069713476, 2),
            Transition::new(-1692496800, 1),
            Transition::new(-1680483600, 2),
            Transition::new(-1662343200, 1),
            Transition::new(-1650157200, 2),
            Transition::new(-1632006000, 1),
            Transition::new(-1618700400, 2),
            Transition::new(-1612659600, 4),
            Transition::new(-1604278800, 3),
            Transition::new(-1585519200, 4),
            Transition::new(-1574038800, 3),
            Transition::new(-1552258800, 4),
            Transition::new(-1539997200, 3),
            Transition::new(-1520550000, 4),
            Transition::new(-1507510800, 3),
            Transition::new(-1490572800, 4),
            Transition::new(-1473642000, 3),
            Transition::new(-1459119600, 4),
            Transition::new(-1444006800, 3),
            Transition::new(-1427673600, 4),
            Transition::new(-1411866000, 3),
            Transition::new(-1396224000, 4),
            Transition::new(-1379293200, 3),
            Transition::new(-1364774400, 4),
            Transition::new(-1348448400, 3),
            Transition::new(-1333324800, 4),
            Transition::new(-1316394000, 3),
            Transition::new(-1301270400, 4),
            Transition::new(-1284339600, 3),
            Transition::new(-1269813600, 4),
            Transition::new(-1253484000, 3),
            Transition::new(-1238364000, 4),
            Transition::new(-1221429600, 3),
            Transition::new(-1206914400, 4),
            Transition::new(-1191189600, 3),
            Transition::new(-1175464800, 4),
            Transition::new(-1160344800, 3),
            Transition::new(-1143410400, 4),
            Transition::new(-1127685600, 3),
            Transition::new(-1111960800, 4),
            Transition::new(-1096840800, 3),
            Transition::new(-1080511200, 4),
            Transition::new(-1063576800, 3),
            Transition::new(-1049061600, 4),
            Transition::new(-1033336800, 3),
            Transition::new(-1017612000, 4),
            Transition::new(-1002492000, 3),
            Transition::new(-986162400, 4),
            Transition::new(-969228000, 3),
            Transition::new(-950479200, 4),
            Transition::new(-942012000, 3),
            Transition::new(-935186400, 6),
            Transition::new(-857257200, 5),
            Transition::new(-844556400, 6),
            Transition::new(-828226800, 5),
            Transition::new(-812502000, 6),
            Transition::new(-797986800, 2),
            Transition::new(-781052400, 1),
            Transition::new(-766623600, 2),
            Transition::new(-745455600, 1),
            Transition::new(-733273200, 2),
            Transition::new(228877200, 1),
            Transition::new(243997200, 2),
            Transition::new(260326800, 1),
            Transition::new(276051600, 2),
            Transition::new(291776400, 1),
            Transition::new(307501200, 2),
            Transition::new(323830800, 1),
            Transition::new(338950800, 2),
            Transition::new(354675600, 1),
            Transition::new(370400400, 2),
            Transition::new(386125200, 1),
            Transition::new(401850000, 2),
            Transition::new(417574800, 1),
            Transition::new(433299600, 2),
            Transition::new(449024400, 1),
            Transition::new(465354000, 2),
            Transition::new(481078800, 1),
            Transition::new(496803600, 2),
            Transition::new(512528400, 1),
            Transition::new(528253200, 2),
            Transition::new(543978000, 1),
            Transition::new(559702800, 2),
            Transition::new(575427600, 1),
            Transition::new(591152400, 2),
            Transition::new(606877200, 1),
            Transition::new(622602000, 2),
            Transition::new(638326800, 1),
            Transition::new(654656400, 2),
            Transition::new(670381200, 1),
            Transition::new(686106000, 2),
            Transition::new(701830800, 1),
            Transition::new(717555600, 2),
            Transition::new(733280400, 1),
            Transition::new(749005200, 2),
            Transition::new(764730000, 1),
            Transition::new(780454800, 2),
            Transition::new(796179600, 1),
            Transition::new(811904400, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(1476, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_MADRID: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177452800, 2),
            Transition::new(-1631926800, 1),
            Transition::new(-1616889600, 2),
            Transition::new(-1601168400, 1),
            Transition::new(-1585353600, 2),
            Transition::new(-1442451600, 1),
            Transition::new(-1427673600, 2),
            Transition::new(-1379293200, 1),
            Transition::new(-1364774400, 2),
            Transition::new(-1348448400, 1),
            Transition::new(-1333324800, 2),
            Transition::new(-1316390400, 1),
            Transition::new(-1301270400, 2),
            Transition::new(-1284339600, 1),
            Transition::new(-1269820800, 2),
            Transition::new(-1026954000, 1),
            Transition::new(-1017619200, 2),
            Transition::new(-1001898000, 1),
            Transition::new(-999482400, 3),
            Transition::new(-986090400, 1),
            Transition::new(-954115200, 2),
            Transition::new(-940208400, 5),
            Transition::new(-873079200, 4),
            Transition::new(-862621200, 5),
            Transition::new(-842839200, 4),
            Transition::new(-828320400, 5),
            Transition::new(-811389600, 4),
            Transition::new(-796870800, 5),
            Transition::new(-779940000, 4),
            Transition::new(-765421200, 5),
            Transition::new(-748490400, 4),
            Transition::new(-733971600, 5),
            Transition::new(-652327200, 4),
            Transition::new(-639018000, 5),
            Transition::new(135122400, 4),
            Transition::new(150246000, 5),
            Transition::new(166572000, 4),
            Transition::new(181695600, 5),
            Transition::new(196812000, 4),
            Transition::new(212540400, 5),
            Transition::new(228866400, 4),
            Transition::new(243990000, 5),
            Transition::new(260326800, 4),
            Transition::new(276051600, 5),
            Transition::new(291776400, 4),
            Transition::new(307501200, 5),
            Transition::new(323830800, 4),
            Transition::new(338950800, 5),
            Transition::new(354675600, 4),
            Transition::new(370400400, 5),
            Transition::new(386125200, 4),
            Transition::new(401850000, 5),
            Transition::new(417574800, 4),
            Transition::new(433299600, 5),
            Transition::new(449024400, 4),
            Transition::new(465354000, 5),
            Transition::new(481078800, 4),
            Transition::new(496803600, 5),
            Transition::new(512528400, 4),
            Transition::new(528253200, 5),
            Transition::new(543978000, 4),
            Transition::new(559702800, 5),
            Transition::new(575427600, 4),
            Transition::new(591152400, 5),
            Transition::new(606877200, 4),
            Transition::new(622602000, 5),
            Transition::new(638326800, 4),
            Transition::new(654656400, 5),
            Transition::new(670381200, 4),
            Transition::new(686106000, 5),
            Transition::new(701830800, 4),
            Transition::new(717555600, 5),
            Transition::new(733280400, 4),
            Transition::new(749005200, 5),
            Transition::new(764730000, 4),
            Transition::new(780454800, 5),
            Transition::new(796179600, 4),
            Transition::new(811904400, 5),
            Transition::new(828234000, 4),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-884, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"WEMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_MALTA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2403478684, 2),
            Transition::new(-1690765200, 1),
            Transition::new(-1680487200, 2),
            Transition::new(-1664758800, 1),
            Transition::new(-1648951200, 2),
            Transition::new(-1635123600, 1),
            Transition::new(-1616896800, 2),
            Transition::new(-1604278800, 1),
            Transition::new(-1585533600, 2),
            Transition::new(-1571014800, 1),
            Transition::new(-1555293600, 2),
            Transition::new(-932432400, 1),
            Transition::new(-857257200, 2),
            Transition::new(-844556400, 1),
            Transition::new(-828226800, 2),
            Transition::new(-812588400, 1),
            Transition::new(-798073200, 2),
            Transition::new(-781052400, 1),
            Transition::new(-766717200, 2),
            Transition::new(-750898800, 1),
            Transition::new(-733359600, 2),
            Transition::new(-719456400, 1),
            Transition::new(-701917200, 2),
            Transition::new(-689209200, 1),
            Transition::new(-670460400, 2),
            Transition::new(-114051600, 1),
            Transition::new(-103168800, 2),
            Transition::new(-81997200, 1),
            Transition::new(-71715600, 2),
            Transition::new(-50547600, 1),
            Transition::new(-40266000, 2),
            Transition::new(-18493200, 1),
            Transition::new(-8211600, 2),
            Transition::new(12956400, 1),
            Transition::new(23238000, 2),
            Transition::new(43801200, 1),
            Transition::new(54687600, 2),
            Transition::new(75855600, 1),
            Transition::new(86742000, 2),
            Transition::new(102380400, 1),
            Transition::new(118105200, 2),
            Transition::new(135730800, 1),
            Transition::new(148518000, 2),
            Transition::new(167187600, 1),
            Transition::new(180489600, 2),
            Transition::new(198637200, 1),
            Transition::new(211939200, 2),
            Transition::new(230086800, 1),
            Transition::new(243388800, 2),
            Transition::new(261536400, 1),
            Transition::new(274838400, 2),
            Transition::new(292986000, 1),
            Transition::new(306288000, 2),
            Transition::new(323312400, 1),
            Transition::new(338342400, 2),
            Transition::new(354675600, 1),
            Transition::new(370400400, 2),
            Transition::new(386125200, 1),
            Transition::new(401850000, 2),
            Transition::new(417574800, 1),
            Transition::new(433299600, 2),
            Transition::new(449024400, 1),
            Transition::new(465354000, 2),
            Transition::new(481078800, 1),
            Transition::new(496803600, 2),
            Transition::new(512528400, 1),
            Transition::new(528253200, 2),
            Transition::new(543978000, 1),
            Transition::new(559702800, 2),
            Transition::new(575427600, 1),
            Transition::new(591152400, 2),
            Transition::new(606877200, 1),
            Transition::new(622602000, 2),
            Transition::new(638326800, 1),
            Transition::new(654656400, 2),
            Transition::new(670381200, 1),
            Transition::new(686106000, 2),
            Transition::new(701830800, 1),
            Transition::new(717555600, 2),
            Transition::new(733280400, 1),
            Transition::new(749005200, 2),
            Transition::new(764730000, 1),
            Transition::new(780454800, 2),
            Transition::new(796179600, 1),
            Transition::new(811904400, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(3484, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_MINSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840147416, 1),
            Transition::new(-1441158600, 2),
            Transition::new(-1247536800, 3),
            Transition::new(-899780400, 5),
            Transition::new(-857257200, 4),
            Transition::new(-844556400, 5),
            Transition::new(-828226800, 4),
            Transition::new(-812502000, 5),
            Transition::new(-804650400, 3),
            Transition::new(354920400, 6),
            Transition::new(370728000, 3),
            Transition::new(386456400, 6),
            Transition::new(402264000, 3),
            Transition::new(417992400, 6),
            Transition::new(433800000, 3),
            Transition::new(449614800, 6),
            Transition::new(465346800, 3),
            Transition::new(481071600, 6),
            Transition::new(496796400, 3),
            Transition::new(512521200, 6),
            Transition::new(528246000, 3),
            Transition::new(543970800, 6),
            Transition::new(559695600, 3),
            Transition::new(575420400, 6),
            Transition::new(591145200, 3),
            Transition::new(606870000, 6),
            Transition::new(622594800, 3),
            Transition::new(670374000, 7),
            Transition::new(686102400, 2),
            Transition::new(701827200, 7),
            Transition::new(717552000, 2),
            Transition::new(733276800, 7),
            Transition::new(749001600, 2),
            Transition::new(764726400, 7),
            Transition::new(780451200, 2),
            Transition::new(796176000, 7),
            Transition::new(811900800, 2),
            Transition::new(828230400, 7),
            Transition::new(846374400, 2),
            Transition::new(859680000, 7),
            Transition::new(877824000, 2),
            Transition::new(891129600, 7),
            Transition::new(909273600, 2),
            Transition::new(922579200, 7),
            Transition::new(941328000, 2),
            Transition::new(954028800, 7),
            Transition::new(972777600, 2),
            Transition::new(985478400, 7),
            Transition::new(1004227200, 2),
            Transition::new(1017532800, 7),
            Transition::new(1035676800, 2),
            Transition::new(1048982400, 7),
            Transition::new(1067126400, 2),
            Transition::new(1080432000, 7),
            Transition::new(1099180800, 2),
            Transition::new(1111881600, 7),
            Transition::new(1130630400, 2),
            Transition::new(1143331200, 7),
            Transition::new(1162080000, 2),
            Transition::new(1174780800, 7),
            Transition::new(1193529600, 2),
            Transition::new(1206835200, 7),
            Transition::new(1224979200, 2),
            Transition::new(1238284800, 7),
            Transition::new(1256428800, 2),
            Transition::new(1269734400, 7),
            Transition::new(1288483200, 2),
            Transition::new(1301184000, 8),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(6616, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(6600, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_MONACO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2448318572, 1),
            Transition::new(-1854403761, 3),
            Transition::new(-1689814800, 2),
            Transition::new(-1680397200, 3),
            Transition::new(-1665363600, 2),
            Transition::new(-1648342800, 3),
            Transition::new(-1635123600, 2),
            Transition::new(-1616893200, 3),
            Transition::new(-1604278800, 2),
            Transition::new(-1585443600, 3),
            Transition::new(-1574038800, 2),
            Transition::new(-1552266000, 3),
            Transition::new(-1539997200, 2),
            Transition::new(-1520557200, 3),
            Transition::new(-1507510800, 2),
            Transition::new(-1490576400, 3),
            Transition::new(-1470618000, 2),
            Transition::new(-1459126800, 3),
            Transition::new(-1444006800, 2),
            Transition::new(-1427677200, 3),
            Transition::new(-1411952400, 2),
            Transition::new(-1396227600, 3),
            Transition::new(-1379293200, 2),
            Transition::new(-1364778000, 3),
            Transition::new(-1348448400, 2),
            Transition::new(-1333328400, 3),
            Transition::new(-1316394000, 2),
            Transition::new(-1301274000, 3),
            Transition::new(-1284339600, 2),
            Transition::new(-1269824400, 3),
            Transition::new(-1253494800, 2),
            Transition::new(-1238374800, 3),
            Transition::new(-1221440400, 2),
            Transition::new(-1206925200, 3),
            Transition::new(-1191200400, 2),
            Transition::new(-1175475600, 3),
            Transition::new(-1160355600, 2),
            Transition::new(-1143421200, 3),
            Transition::new(-1127696400, 2),
            Transition::new(-1111971600, 3),
            Transition::new(-1096851600, 2),
            Transition::new(-1080522000, 3),
            Transition::new(-1063587600, 2),
            Transition::new(-1049072400, 3),
            Transition::new(-1033347600, 2),
            Transition::new(-1017622800, 3),
            Transition::new(-1002502800, 2),
            Transition::new(-986173200, 3),
            Transition::new(-969238800, 2),
            Transition::new(-950490000, 3),
            Transition::new(-942012000, 2),
            Transition::new(-904438800, 4),
            Transition::new(-891136800, 2),
            Transition::new(-877827600, 4),
            Transition::new(-857257200, 2),
            Transition::new(-844556400, 4),
            Transition::new(-828226800, 2),
            Transition::new(-812502000, 4),
            Transition::new(-796266000, 2),
            Transition::new(-781052400, 4),
            Transition::new(-766623600, 6),
            Transition::new(196819200, 5),
            Transition::new(212540400, 6),
            Transition::new(228877200, 5),
            Transition::new(243997200, 6),
            Transition::new(260326800, 5),
            Transition::new(276051600, 6),
            Transition::new(291776400, 5),
            Transition::new(307501200, 6),
            Transition::new(323830800, 5),
            Transition::new(338950800, 6),
            Transition::new(354675600, 5),
            Transition::new(370400400, 6),
            Transition::new(386125200, 5),
            Transition::new(401850000, 6),
            Transition::new(417574800, 5),
            Transition::new(433299600, 6),
            Transition::new(449024400, 5),
            Transition::new(465354000, 6),
            Transition::new(481078800, 5),
            Transition::new(496803600, 6),
            Transition::new(512528400, 5),
            Transition::new(528253200, 6),
            Transition::new(543978000, 5),
            Transition::new(559702800, 6),
            Transition::new(575427600, 5),
            Transition::new(591152400, 6),
            Transition::new(606877200, 5),
            Transition::new(622602000, 6),
            Transition::new(638326800, 5),
            Transition::new(654656400, 6),
            Transition::new(670381200, 5),
            Transition::new(686106000, 6),
            Transition::new(701830800, 5),
            Transition::new(717555600, 6),
            Transition::new(733280400, 5),
            Transition::new(749005200, 6),
            Transition::new(764730000, 5),
            Transition::new(780454800, 6),
            Transition::new(796179600, 5),
            Transition::new(811904400, 6),
            Transition::new(828234000, 5),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(1772, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(561, false, Some(b"PMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"WEMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_PARIS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2486592561, 1),
            Transition::new(-1855958961, 3),
            Transition::new(-1689814800, 2),
            Transition::new(-1680397200, 3),
            Transition::new(-1665363600, 2),
            Transition::new(-1648342800, 3),
            Transition::new(-1635123600, 2),
            Transition::new(-1616893200, 3),
            Transition::new(-1604278800, 2),
            Transition::new(-1585443600, 3),
            Transition::new(-1574038800, 2),
            Transition::new(-1552266000, 3),
            Transition::new(-1539997200, 2),
            Transition::new(-1520557200, 3),
            Transition::new(-1507510800, 2),
            Transition::new(-1490576400, 3),
            Transition::new(-1470618000, 2),
            Transition::new(-1459126800, 3),
            Transition::new(-1444006800, 2),
            Transition::new(-1427677200, 3),
            Transition::new(-1411952400, 2),
            Transition::new(-1396227600, 3),
            Transition::new(-1379293200, 2),
            Transition::new(-1364778000, 3),
            Transition::new(-1348448400, 2),
            Transition::new(-1333328400, 3),
            Transition::new(-1316394000, 2),
            Transition::new(-1301274000, 3),
            Transition::new(-1284339600, 2),
            Transition::new(-1269824400, 3),
            Transition::new(-1253494800, 2),
            Transition::new(-1238374800, 3),
            Transition::new(-1221440400, 2),
            Transition::new(-1206925200, 3),
            Transition::new(-1191200400, 2),
            Transition::new(-1175475600, 3),
            Transition::new(-1160355600, 2),
            Transition::new(-1143421200, 3),
            Transition::new(-1127696400, 2),
            Transition::new(-1111971600, 3),
            Transition::new(-1096851600, 2),
            Transition::new(-1080522000, 3),
            Transition::new(-1063587600, 2),
            Transition::new(-1049072400, 3),
            Transition::new(-1033347600, 2),
            Transition::new(-1017622800, 3),
            Transition::new(-1002502800, 2),
            Transition::new(-986173200, 3),
            Transition::new(-969238800, 2),
            Transition::new(-950490000, 3),
            Transition::new(-942012000, 2),
            Transition::new(-932436000, 5),
            Transition::new(-857257200, 4),
            Transition::new(-844556400, 5),
            Transition::new(-828226800, 4),
            Transition::new(-812502000, 5),
            Transition::new(-800071200, 6),
            Transition::new(-796266000, 2),
            Transition::new(-781052400, 6),
            Transition::new(-766623600, 4),
            Transition::new(196819200, 5),
            Transition::new(212540400, 4),
            Transition::new(228877200, 5),
            Transition::new(243997200, 4),
            Transition::new(260326800, 5),
            Transition::new(276051600, 4),
            Transition::new(291776400, 5),
            Transition::new(307501200, 4),
            Transition::new(323830800, 5),
            Transition::new(338950800, 4),
            Transition::new(354675600, 5),
            Transition::new(370400400, 4),
            Transition::new(386125200, 5),
            Transition::new(401850000, 4),
            Transition::new(417574800, 5),
            Transition::new(433299600, 4),
            Transition::new(449024400, 5),
            Transition::new(465354000, 4),
            Transition::new(481078800, 5),
            Transition::new(496803600, 4),
            Transition::new(512528400, 5),
            Transition::new(528253200, 4),
            Transition::new(543978000, 5),
            Transition::new(559702800, 4),
            Transition::new(575427600, 5),
            Transition::new(591152400, 4),
            Transition::new(606877200, 5),
            Transition::new(622602000, 4),
            Transition::new(638326800, 5),
            Transition::new(654656400, 4),
            Transition::new(670381200, 5),
            Transition::new(686106000, 4),
            Transition::new(701830800, 5),
            Transition::new(717555600, 4),
            Transition::new(733280400, 5),
            Transition::new(749005200, 4),
            Transition::new(764730000, 5),
            Transition::new(780454800, 4),
            Transition::new(796179600, 5),
            Transition::new(811904400, 4),
            Transition::new(828234000, 5),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(561, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(561, false, Some(b"PMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"WEMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_RIGA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840146594, 1),
            Transition::new(-1632008194, 2),
            Transition::new(-1618702594, 1),
            Transition::new(-1601681794, 2),
            Transition::new(-1597275394, 1),
            Transition::new(-1377308194, 3),
            Transition::new(-928029600, 4),
            Transition::new(-899521200, 6),
            Transition::new(-857257200, 5),
            Transition::new(-844556400, 6),
            Transition::new(-828226800, 5),
            Transition::new(-812502000, 6),
            Transition::new(-796777200, 5),
            Transition::new(-795834000, 4),
            Transition::new(354920400, 7),
            Transition::new(370728000, 4),
            Transition::new(386456400, 7),
            Transition::new(402264000, 4),
            Transition::new(417992400, 7),
            Transition::new(433800000, 4),
            Transition::new(449614800, 7),
            Transition::new(465346800, 4),
            Transition::new(481071600, 7),
            Transition::new(496796400, 4),
            Transition::new(512521200, 7),
            Transition::new(528246000, 4),
            Transition::new(543970800, 7),
            Transition::new(559695600, 4),
            Transition::new(575420400, 7),
            Transition::new(591145200, 4),
            Transition::new(606870000, 8),
            Transition::new(622598400, 3),
            Transition::new(638323200, 8),
            Transition::new(654652800, 3),
            Transition::new(670377600, 8),
            Transition::new(686102400, 3),
            Transition::new(701827200, 8),
            Transition::new(717552000, 3),
            Transition::new(733276800, 8),
            Transition::new(749001600, 3),
            Transition::new(764726400, 8),
            Transition::new(780451200, 3),
            Transition::new(796176000, 8),
            Transition::new(811900800, 3),
            Transition::new(828230400, 8),
            Transition::new(843955200, 3),
            Transition::new(859683600, 8),
            Transition::new(877827600, 3),
            Transition::new(891133200, 8),
            Transition::new(909277200, 3),
            Transition::new(922582800, 8),
            Transition::new(941331600, 3),
            Transition::new(985482000, 8),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(5794, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5794, false, Some(b"RMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9394, true, Some(b"LST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_ROME: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3252098996, 1),
            Transition::new(-2403565200, 3),
            Transition::new(-1690765200, 2),
            Transition::new(-1680487200, 3),
            Transition::new(-1664758800, 2),
            Transition::new(-1648951200, 3),
            Transition::new(-1635123600, 2),
            Transition::new(-1616896800, 3),
            Transition::new(-1604278800, 2),
            Transition::new(-1585533600, 3),
            Transition::new(-1571014800, 2),
            Transition::new(-1555293600, 3),
            Transition::new(-932432400, 2),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 2),
            Transition::new(-798073200, 3),
            Transition::new(-781052400, 2),
            Transition::new(-766717200, 3),
            Transition::new(-750898800, 2),
            Transition::new(-733359600, 3),
            Transition::new(-719456400, 2),
            Transition::new(-701917200, 3),
            Transition::new(-689209200, 2),
            Transition::new(-670460400, 3),
            Transition::new(-114051600, 2),
            Transition::new(-103168800, 3),
            Transition::new(-81997200, 2),
            Transition::new(-71715600, 3),
            Transition::new(-50547600, 2),
            Transition::new(-40266000, 3),
            Transition::new(-18493200, 2),
            Transition::new(-8211600, 3),
            Transition::new(12956400, 2),
            Transition::new(23238000, 3),
            Transition::new(43801200, 2),
            Transition::new(54687600, 3),
            Transition::new(75855600, 2),
            Transition::new(86742000, 3),
            Transition::new(107910000, 2),
            Transition::new(118191600, 3),
            Transition::new(138754800, 2),
            Transition::new(149641200, 3),
            Transition::new(170809200, 2),
            Transition::new(181090800, 3),
            Transition::new(202258800, 2),
            Transition::new(212540400, 3),
            Transition::new(233103600, 2),
            Transition::new(243990000, 3),
            Transition::new(265158000, 2),
            Transition::new(276044400, 3),
            Transition::new(296607600, 2),
            Transition::new(307494000, 3),
            Transition::new(323830800, 2),
            Transition::new(338950800, 3),
            Transition::new(354675600, 2),
            Transition::new(370400400, 3),
            Transition::new(386125200, 2),
            Transition::new(401850000, 3),
            Transition::new(417574800, 2),
            Transition::new(433299600, 3),
            Transition::new(449024400, 2),
            Transition::new(465354000, 3),
            Transition::new(481078800, 2),
            Transition::new(496803600, 3),
            Transition::new(512528400, 2),
            Transition::new(528253200, 3),
            Transition::new(543978000, 2),
            Transition::new(559702800, 3),
            Transition::new(575427600, 2),
            Transition::new(591152400, 3),
            Transition::new(606877200, 2),
            Transition::new(622602000, 3),
            Transition::new(638326800, 2),
            Transition::new(654656400, 3),
            Transition::new(670381200, 2),
            Transition::new(686106000, 3),
            Transition::new(701830800, 2),
            Transition::new(717555600, 3),
            Transition::new(733280400, 2),
            Transition::new(749005200, 3),
            Transition::new(764730000, 2),
            Transition::new(780454800, 3),
            Transition::new(796179600, 2),
            Transition::new(811904400, 3),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(2996, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(2996, false, Some(b"RMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_SAMARA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1593820800, 1),
            Transition::new(-1247540400, 2),
            Transition::new(354916800, 3),
            Transition::new(370724400, 2),
            Transition::new(386452800, 3),
            Transition::new(402260400, 2),
            Transition::new(417988800, 3),
            Transition::new(433796400, 2),
            Transition::new(449611200, 3),
            Transition::new(465343200, 2),
            Transition::new(481068000, 3),
            Transition::new(496792800, 2),
            Transition::new(512517600, 3),
            Transition::new(528242400, 2),
            Transition::new(543967200, 3),
            Transition::new(559692000, 2),
            Transition::new(575416800, 3),
            Transition::new(591141600, 2),
            Transition::new(606866400, 4),
            Transition::new(622594800, 1),
            Transition::new(638319600, 4),
            Transition::new(654649200, 1),
            Transition::new(670374000, 5),
            Transition::new(686102400, 1),
            Transition::new(687916800, 2),
            Transition::new(701820000, 3),
            Transition::new(717544800, 2),
            Transition::new(733269600, 3),
            Transition::new(748994400, 2),
            Transition::new(764719200, 3),
            Transition::new(780444000, 2),
            Transition::new(796168800, 3),
            Transition::new(811893600, 2),
            Transition::new(828223200, 3),
            Transition::new(846367200, 2),
            Transition::new(859672800, 3),
            Transition::new(877816800, 2),
            Transition::new(891122400, 3),
            Transition::new(909266400, 2),
            Transition::new(922572000, 3),
            Transition::new(941320800, 2),
            Transition::new(954021600, 3),
            Transition::new(972770400, 2),
            Transition::new(985471200, 3),
            Transition::new(1004220000, 2),
            Transition::new(1017525600, 3),
            Transition::new(1035669600, 2),
            Transition::new(1048975200, 3),
            Transition::new(1067119200, 2),
            Transition::new(1080424800, 3),
            Transition::new(1099173600, 2),
            Transition::new(1111874400, 3),
            Transition::new(1130623200, 2),
            Transition::new(1143324000, 3),
            Transition::new(1162072800, 2),
            Transition::new(1174773600, 3),
            Transition::new(1193522400, 2),
            Transition::new(1206828000, 3),
            Transition::new(1224972000, 2),
            Transition::new(1238277600, 3),
            Transition::new(1256421600, 2),
            Transition::new(1269727200, 4),
            Transition::new(1288479600, 1),
            Transition::new(1301180400, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(12020, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_SARAJEVO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713914820, 1),
            Transition::new(-905824800, 2),
            Transition::new(-857257200, 1),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 1),
            Transition::new(-812502000, 2),
            Transition::new(-796777200, 1),
            Transition::new(-781052400, 2),
            Transition::new(-766623600, 1),
            Transition::new(417574800, 2),
            Transition::new(433299600, 1),
            Transition::new(449024400, 2),
            Transition::new(465354000, 1),
            Transition::new(481078800, 2),
            Transition::new(496803600, 1),
            Transition::new(512528400, 2),
            Transition::new(528253200, 1),
            Transition::new(543978000, 2),
            Transition::new(559702800, 1),
            Transition::new(575427600, 2),
            Transition::new(591152400, 1),
            Transition::new(606877200, 2),
            Transition::new(622602000, 1),
            Transition::new(638326800, 2),
            Transition::new(654656400, 1),
            Transition::new(670381200, 2),
            Transition::new(686106000, 1),
            Transition::new(701830800, 2),
            Transition::new(717555600, 1),
            Transition::new(733280400, 2),
            Transition::new(749005200, 1),
            Transition::new(764730000, 2),
            Transition::new(780454800, 1),
            Transition::new(796179600, 2),
            Transition::new(811904400, 1),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(4420, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_SARATOV: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1593820800, 1),
            Transition::new(-1247540400, 3),
            Transition::new(354916800, 2),
            Transition::new(370724400, 3),
            Transition::new(386452800, 2),
            Transition::new(402260400, 3),
            Transition::new(417988800, 2),
            Transition::new(433796400, 3),
            Transition::new(449611200, 2),
            Transition::new(465343200, 3),
            Transition::new(481068000, 2),
            Transition::new(496792800, 3),
            Transition::new(512517600, 2),
            Transition::new(528242400, 3),
            Transition::new(543967200, 2),
            Transition::new(559692000, 3),
            Transition::new(575416800, 4),
            Transition::new(591145200, 1),
            Transition::new(606870000, 4),
            Transition::new(622594800, 1),
            Transition::new(638319600, 4),
            Transition::new(654649200, 1),
            Transition::new(670374000, 3),
            Transition::new(701820000, 4),
            Transition::new(717548400, 1),
            Transition::new(733273200, 4),
            Transition::new(748998000, 1),
            Transition::new(764722800, 4),
            Transition::new(780447600, 1),
            Transition::new(796172400, 4),
            Transition::new(811897200, 1),
            Transition::new(828226800, 4),
            Transition::new(846370800, 1),
            Transition::new(859676400, 4),
            Transition::new(877820400, 1),
            Transition::new(891126000, 4),
            Transition::new(909270000, 1),
            Transition::new(922575600, 4),
            Transition::new(941324400, 1),
            Transition::new(954025200, 4),
            Transition::new(972774000, 1),
            Transition::new(985474800, 4),
            Transition::new(1004223600, 1),
            Transition::new(1017529200, 4),
            Transition::new(1035673200, 1),
            Transition::new(1048978800, 4),
            Transition::new(1067122800, 1),
            Transition::new(1080428400, 4),
            Transition::new(1099177200, 1),
            Transition::new(1111878000, 4),
            Transition::new(1130626800, 1),
            Transition::new(1143327600, 4),
            Transition::new(1162076400, 1),
            Transition::new(1174777200, 4),
            Transition::new(1193526000, 1),
            Transition::new(1206831600, 4),
            Transition::new(1224975600, 1),
            Transition::new(1238281200, 4),
            Transition::new(1256425200, 1),
            Transition::new(1269730800, 4),
            Transition::new(1288479600, 1),
            Transition::new(1301180400, 3),
            Transition::new(1414274400, 1),
            Transition::new(1480806000, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(11058, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_SIMFEROPOL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840148984, 1),
            Transition::new(-1441160160, 2),
            Transition::new(-1247536800, 3),
            Transition::new(-888894000, 5),
            Transition::new(-857257200, 4),
            Transition::new(-844556400, 5),
            Transition::new(-828226800, 4),
            Transition::new(-812502000, 5),
            Transition::new(-811648800, 3),
            Transition::new(354920400, 6),
            Transition::new(370728000, 3),
            Transition::new(386456400, 6),
            Transition::new(402264000, 3),
            Transition::new(417992400, 6),
            Transition::new(433800000, 3),
            Transition::new(449614800, 6),
            Transition::new(465346800, 3),
            Transition::new(481071600, 6),
            Transition::new(496796400, 3),
            Transition::new(512521200, 6),
            Transition::new(528246000, 3),
            Transition::new(543970800, 6),
            Transition::new(559695600, 3),
            Transition::new(575420400, 6),
            Transition::new(591145200, 3),
            Transition::new(606870000, 6),
            Transition::new(622594800, 3),
            Transition::new(646786800, 2),
            Transition::new(701827200, 7),
            Transition::new(717552000, 2),
            Transition::new(733276800, 7),
            Transition::new(749001600, 2),
            Transition::new(764726400, 7),
            Transition::new(767739600, 6),
            Transition::new(780436800, 3),
            Transition::new(796165200, 6),
            Transition::new(811886400, 3),
            Transition::new(828219600, 6),
            Transition::new(846374400, 3),
            Transition::new(859683600, 7),
            Transition::new(877827600, 2),
            Transition::new(891133200, 7),
            Transition::new(909277200, 2),
            Transition::new(922582800, 7),
            Transition::new(941331600, 2),
            Transition::new(954032400, 7),
            Transition::new(972781200, 2),
            Transition::new(985482000, 7),
            Transition::new(1004230800, 2),
            Transition::new(1017536400, 7),
            Transition::new(1035680400, 2),
            Transition::new(1048986000, 7),
            Transition::new(1067130000, 2),
            Transition::new(1080435600, 7),
            Transition::new(1099184400, 2),
            Transition::new(1111885200, 7),
            Transition::new(1130634000, 2),
            Transition::new(1143334800, 7),
            Transition::new(1162083600, 2),
            Transition::new(1174784400, 7),
            Transition::new(1193533200, 2),
            Transition::new(1206838800, 7),
            Transition::new(1224982800, 2),
            Transition::new(1238288400, 7),
            Transition::new(1256432400, 2),
            Transition::new(1269738000, 7),
            Transition::new(1288486800, 2),
            Transition::new(1301187600, 7),
            Transition::new(1319936400, 2),
            Transition::new(1332637200, 7),
            Transition::new(1351386000, 2),
            Transition::new(1364691600, 7),
            Transition::new(1382835600, 2),
            Transition::new(1396137600, 8),
            Transition::new(1414274400, 3),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(8184, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(8160, false, Some(b"SMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_SKOPJE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713915544, 1),
            Transition::new(-905824800, 2),
            Transition::new(-857257200, 1),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 1),
            Transition::new(-812502000, 2),
            Transition::new(-796777200, 1),
            Transition::new(-781052400, 2),
            Transition::new(-766623600, 1),
            Transition::new(417574800, 2),
            Transition::new(433299600, 1),
            Transition::new(449024400, 2),
            Transition::new(465354000, 1),
            Transition::new(481078800, 2),
            Transition::new(496803600, 1),
            Transition::new(512528400, 2),
            Transition::new(528253200, 1),
            Transition::new(543978000, 2),
            Transition::new(559702800, 1),
            Transition::new(575427600, 2),
            Transition::new(591152400, 1),
            Transition::new(606877200, 2),
            Transition::new(622602000, 1),
            Transition::new(638326800, 2),
            Transition::new(654656400, 1),
            Transition::new(670381200, 2),
            Transition::new(686106000, 1),
            Transition::new(701830800, 2),
            Transition::new(717555600, 1),
            Transition::new(733280400, 2),
            Transition::new(749005200, 1),
            Transition::new(764730000, 2),
            Transition::new(780454800, 1),
            Transition::new(796179600, 2),
            Transition::new(811904400, 1),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(5144, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_SOFIA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840146396, 1),
            Transition::new(-2369527016, 2),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 4),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 4),
            Transition::new(-796777200, 3),
            Transition::new(-781048800, 2),
            Transition::new(291762000, 5),
            Transition::new(307576800, 2),
            Transition::new(323816400, 5),
            Transition::new(339026400, 2),
            Transition::new(355266000, 5),
            Transition::new(370393200, 2),
            Transition::new(386715600, 5),
            Transition::new(401846400, 2),
            Transition::new(417571200, 5),
            Transition::new(433296000, 2),
            Transition::new(449020800, 5),
            Transition::new(465350400, 2),
            Transition::new(481075200, 5),
            Transition::new(496800000, 2),
            Transition::new(512524800, 5),
            Transition::new(528249600, 2),
            Transition::new(543974400, 5),
            Transition::new(559699200, 2),
            Transition::new(575424000, 5),
            Transition::new(591148800, 2),
            Transition::new(606873600, 5),
            Transition::new(622598400, 2),
            Transition::new(638323200, 5),
            Transition::new(654652800, 2),
            Transition::new(670370400, 5),
            Transition::new(686091600, 2),
            Transition::new(701820000, 5),
            Transition::new(717541200, 2),
            Transition::new(733269600, 5),
            Transition::new(748990800, 2),
            Transition::new(764719200, 5),
            Transition::new(780440400, 2),
            Transition::new(796168800, 5),
            Transition::new(811890000, 2),
            Transition::new(828223200, 5),
            Transition::new(846363600, 2),
            Transition::new(859683600, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(5596, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7016, false, Some(b"IMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_STOCKHOLM: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2871681132, 1),
            Transition::new(-2208992414, 2),
            Transition::new(-1692496800, 3),
            Transition::new(-1680483600, 2),
            Transition::new(323830800, 3),
            Transition::new(338950800, 2),
            Transition::new(354675600, 3),
            Transition::new(370400400, 2),
            Transition::new(386125200, 3),
            Transition::new(401850000, 2),
            Transition::new(417574800, 3),
            Transition::new(433299600, 2),
            Transition::new(449024400, 3),
            Transition::new(465354000, 2),
            Transition::new(481078800, 3),
            Transition::new(496803600, 2),
            Transition::new(512528400, 3),
            Transition::new(528253200, 2),
            Transition::new(543978000, 3),
            Transition::new(559702800, 2),
            Transition::new(575427600, 3),
            Transition::new(591152400, 2),
            Transition::new(606877200, 3),
            Transition::new(622602000, 2),
            Transition::new(638326800, 3),
            Transition::new(654656400, 2),
            Transition::new(670381200, 3),
            Transition::new(686106000, 2),
            Transition::new(701830800, 3),
            Transition::new(717555600, 2),
            Transition::new(733280400, 3),
            Transition::new(749005200, 2),
            Transition::new(764730000, 3),
            Transition::new(780454800, 2),
            Transition::new(796179600, 3),
            Transition::new(811904400, 2),
            Transition::new(828234000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(4332, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3614, false, Some(b"SET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_TALLINN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840146740, 1),
            Transition::new(-1638322740, 3),
            Transition::new(-1632006000, 2),
            Transition::new(-1618700400, 3),
            Transition::new(-1593824400, 1),
            Transition::new(-1535938740, 4),
            Transition::new(-927943200, 5),
            Transition::new(-892954800, 2),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 2),
            Transition::new(-797652000, 5),
            Transition::new(354920400, 6),
            Transition::new(370728000, 5),
            Transition::new(386456400, 6),
            Transition::new(402264000, 5),
            Transition::new(417992400, 6),
            Transition::new(433800000, 5),
            Transition::new(449614800, 6),
            Transition::new(465346800, 5),
            Transition::new(481071600, 6),
            Transition::new(496796400, 5),
            Transition::new(512521200, 6),
            Transition::new(528246000, 5),
            Transition::new(543970800, 6),
            Transition::new(559695600, 5),
            Transition::new(575420400, 6),
            Transition::new(591145200, 5),
            Transition::new(606870000, 7),
            Transition::new(622598400, 4),
            Transition::new(638323200, 7),
            Transition::new(654652800, 4),
            Transition::new(670377600, 7),
            Transition::new(686102400, 4),
            Transition::new(701827200, 7),
            Transition::new(717552000, 4),
            Transition::new(733276800, 7),
            Transition::new(749001600, 4),
            Transition::new(764726400, 7),
            Transition::new(780451200, 4),
            Transition::new(796176000, 7),
            Transition::new(811900800, 4),
            Transition::new(828230400, 7),
            Transition::new(846374400, 4),
            Transition::new(859680000, 7),
            Transition::new(877824000, 4),
            Transition::new(891129600, 7),
            Transition::new(909277200, 4),
            Transition::new(922582800, 7),
            Transition::new(941331600, 4),
            Transition::new(1017536400, 7),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(5940, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5940, false, Some(b"TMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_TIRANE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1767230360, 1),
            Transition::new(-932346000, 2),
            Transition::new(-857257200, 1),
            Transition::new(-844556400, 2),
            Transition::new(-843519600, 1),
            Transition::new(136854000, 2),
            Transition::new(149896800, 1),
            Transition::new(168130800, 2),
            Transition::new(181432800, 1),
            Transition::new(199839600, 2),
            Transition::new(213141600, 1),
            Transition::new(231894000, 2),
            Transition::new(244591200, 1),
            Transition::new(263257200, 2),
            Transition::new(276040800, 1),
            Transition::new(294706800, 2),
            Transition::new(307490400, 1),
            Transition::new(326156400, 2),
            Transition::new(339458400, 1),
            Transition::new(357087600, 2),
            Transition::new(370389600, 1),
            Transition::new(389142000, 2),
            Transition::new(402444000, 1),
            Transition::new(419468400, 2),
            Transition::new(433807200, 1),
            Transition::new(449622000, 2),
            Transition::new(465354000, 1),
            Transition::new(481078800, 2),
            Transition::new(496803600, 1),
            Transition::new(512528400, 2),
            Transition::new(528253200, 1),
            Transition::new(543978000, 2),
            Transition::new(559702800, 1),
            Transition::new(575427600, 2),
            Transition::new(591152400, 1),
            Transition::new(606877200, 2),
            Transition::new(622602000, 1),
            Transition::new(638326800, 2),
            Transition::new(654656400, 1),
            Transition::new(670381200, 2),
            Transition::new(686106000, 1),
            Transition::new(701830800, 2),
            Transition::new(717555600, 1),
            Transition::new(733280400, 2),
            Transition::new(749005200, 1),
            Transition::new(764730000, 2),
            Transition::new(780454800, 1),
            Transition::new(796179600, 2),
            Transition::new(811904400, 1),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(4760, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_TIRASPOL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840147912, 1),
            Transition::new(-1637114100, 2),
            Transition::new(-1213148664, 4),
            Transition::new(-1187056800, 3),
            Transition::new(-1175479200, 4),
            Transition::new(-1159754400, 3),
            Transition::new(-1144029600, 4),
            Transition::new(-1127700000, 3),
            Transition::new(-1111975200, 4),
            Transition::new(-1096250400, 3),
            Transition::new(-1080525600, 4),
            Transition::new(-1064800800, 3),
            Transition::new(-1049076000, 4),
            Transition::new(-1033351200, 3),
            Transition::new(-1017626400, 4),
            Transition::new(-1001901600, 3),
            Transition::new(-986176800, 4),
            Transition::new(-970452000, 3),
            Transition::new(-954727200, 4),
            Transition::new(-927165600, 3),
            Transition::new(-898138800, 6),
            Transition::new(-857257200, 5),
            Transition::new(-844556400, 6),
            Transition::new(-828226800, 5),
            Transition::new(-812502000, 6),
            Transition::new(-800157600, 8),
            Transition::new(354920400, 7),
            Transition::new(370728000, 8),
            Transition::new(386456400, 7),
            Transition::new(402264000, 8),
            Transition::new(417992400, 7),
            Transition::new(433800000, 8),
            Transition::new(449614800, 7),
            Transition::new(465346800, 8),
            Transition::new(481071600, 7),
            Transition::new(496796400, 8),
            Transition::new(512521200, 7),
            Transition::new(528246000, 8),
            Transition::new(543970800, 7),
            Transition::new(559695600, 8),
            Transition::new(575420400, 7),
            Transition::new(591145200, 8),
            Transition::new(606870000, 7),
            Transition::new(622594800, 8),
            Transition::new(638319600, 7),
            Transition::new(654649200, 8),
            Transition::new(670374000, 3),
            Transition::new(686102400, 4),
            Transition::new(695779200, 8),
            Transition::new(701823600, 7),
            Transition::new(717548400, 8),
            Transition::new(733273200, 7),
            Transition::new(748998000, 8),
            Transition::new(764722800, 7),
            Transition::new(780447600, 8),
            Transition::new(796172400, 7),
            Transition::new(811897200, 8),
            Transition::new(828226800, 7),
            Transition::new(846370800, 8),
            Transition::new(859676400, 7),
            Transition::new(877820400, 8),
            Transition::new(891126000, 7),
            Transition::new(909270000, 8),
            Transition::new(922575600, 7),
            Transition::new(941324400, 8),
            Transition::new(954025200, 7),
            Transition::new(972774000, 8),
            Transition::new(985474800, 7),
            Transition::new(1004223600, 8),
            Transition::new(1017529200, 7),
            Transition::new(1035673200, 8),
            Transition::new(1048978800, 7),
            Transition::new(1067122800, 8),
            Transition::new(1080428400, 7),
            Transition::new(1099177200, 8),
            Transition::new(1111878000, 7),
            Transition::new(1130626800, 8),
            Transition::new(1143327600, 7),
            Transition::new(1162076400, 8),
            Transition::new(1174777200, 7),
            Transition::new(1193526000, 8),
            Transition::new(1206831600, 7),
            Transition::new(1224975600, 8),
            Transition::new(1238281200, 7),
            Transition::new(1256425200, 8),
            Transition::new(1269730800, 7),
            Transition::new(1288479600, 8),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(7112, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(6900, false, Some(b"CMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(6264, false, Some(b"BMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_ULYANOVSK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1593820800, 1),
            Transition::new(-1247540400, 3),
            Transition::new(354916800, 2),
            Transition::new(370724400, 3),
            Transition::new(386452800, 2),
            Transition::new(402260400, 3),
            Transition::new(417988800, 2),
            Transition::new(433796400, 3),
            Transition::new(449611200, 2),
            Transition::new(465343200, 3),
            Transition::new(481068000, 2),
            Transition::new(496792800, 3),
            Transition::new(512517600, 2),
            Transition::new(528242400, 3),
            Transition::new(543967200, 2),
            Transition::new(559692000, 3),
            Transition::new(575416800, 2),
            Transition::new(591141600, 3),
            Transition::new(606866400, 4),
            Transition::new(622594800, 1),
            Transition::new(638319600, 4),
            Transition::new(654649200, 1),
            Transition::new(670374000, 5),
            Transition::new(686102400, 6),
            Transition::new(695779200, 1),
            Transition::new(701823600, 4),
            Transition::new(717548400, 1),
            Transition::new(733273200, 4),
            Transition::new(748998000, 1),
            Transition::new(764722800, 4),
            Transition::new(780447600, 1),
            Transition::new(796172400, 4),
            Transition::new(811897200, 1),
            Transition::new(828226800, 4),
            Transition::new(846370800, 1),
            Transition::new(859676400, 4),
            Transition::new(877820400, 1),
            Transition::new(891126000, 4),
            Transition::new(909270000, 1),
            Transition::new(922575600, 4),
            Transition::new(941324400, 1),
            Transition::new(954025200, 4),
            Transition::new(972774000, 1),
            Transition::new(985474800, 4),
            Transition::new(1004223600, 1),
            Transition::new(1017529200, 4),
            Transition::new(1035673200, 1),
            Transition::new(1048978800, 4),
            Transition::new(1067122800, 1),
            Transition::new(1080428400, 4),
            Transition::new(1099177200, 1),
            Transition::new(1111878000, 4),
            Transition::new(1130626800, 1),
            Transition::new(1143327600, 4),
            Transition::new(1162076400, 1),
            Transition::new(1174777200, 4),
            Transition::new(1193526000, 1),
            Transition::new(1206831600, 4),
            Transition::new(1224975600, 1),
            Transition::new(1238281200, 4),
            Transition::new(1256425200, 1),
            Transition::new(1269730800, 4),
            Transition::new(1288479600, 1),
            Transition::new(1301180400, 3),
            Transition::new(1414274400, 1),
            Transition::new(1459033200, 3),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(11616, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"+02")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_UZHGOROD: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2500939752, 1),
            Transition::new(-938905200, 2),
            Transition::new(-857257200, 1),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 1),
            Transition::new(-812502000, 2),
            Transition::new(-794714400, 1),
            Transition::new(-773456400, 4),
            Transition::new(354920400, 3),
            Transition::new(370728000, 4),
            Transition::new(386456400, 3),
            Transition::new(402264000, 4),
            Transition::new(417992400, 3),
            Transition::new(433800000, 4),
            Transition::new(449614800, 3),
            Transition::new(465346800, 4),
            Transition::new(481071600, 3),
            Transition::new(496796400, 4),
            Transition::new(512521200, 3),
            Transition::new(528246000, 4),
            Transition::new(543970800, 3),
            Transition::new(559695600, 4),
            Transition::new(575420400, 3),
            Transition::new(591145200, 4),
            Transition::new(606870000, 3),
            Transition::new(622594800, 4),
            Transition::new(646786800, 1),
            Transition::new(670384800, 5),
            Transition::new(701827200, 6),
            Transition::new(717552000, 5),
            Transition::new(733276800, 6),
            Transition::new(749001600, 5),
            Transition::new(764726400, 6),
            Transition::new(780451200, 5),
            Transition::new(796176000, 6),
            Transition::new(811900800, 5),
            Transition::new(828230400, 6),
            Transition::new(846378000, 5),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(5352, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_VADUZ: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2385247084, 2),
            Transition::new(-904435200, 1),
            Transition::new(-891129600, 2),
            Transition::new(-872985600, 1),
            Transition::new(-859680000, 2),
            Transition::new(354675600, 1),
            Transition::new(370400400, 2),
            Transition::new(386125200, 1),
            Transition::new(401850000, 2),
            Transition::new(417574800, 1),
            Transition::new(433299600, 2),
            Transition::new(449024400, 1),
            Transition::new(465354000, 2),
            Transition::new(481078800, 1),
            Transition::new(496803600, 2),
            Transition::new(512528400, 1),
            Transition::new(528253200, 2),
            Transition::new(543978000, 1),
            Transition::new(559702800, 2),
            Transition::new(575427600, 1),
            Transition::new(591152400, 2),
            Transition::new(606877200, 1),
            Transition::new(622602000, 2),
            Transition::new(638326800, 1),
            Transition::new(654656400, 2),
            Transition::new(670381200, 1),
            Transition::new(686106000, 2),
            Transition::new(701830800, 1),
            Transition::new(717555600, 2),
            Transition::new(733280400, 1),
            Transition::new(749005200, 2),
            Transition::new(764730000, 1),
            Transition::new(780454800, 2),
            Transition::new(796179600, 1),
            Transition::new(811904400, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(2284, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_VIENNA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2422055121, 2),
            Transition::new(-1693706400, 1),
            Transition::new(-1680483600, 2),
            Transition::new(-1663455600, 1),
            Transition::new(-1650150000, 2),
            Transition::new(-1632006000, 1),
            Transition::new(-1618700400, 2),
            Transition::new(-1569711600, 1),
            Transition::new(-1555801200, 2),
            Transition::new(-938905200, 1),
            Transition::new(-857257200, 2),
            Transition::new(-844556400, 1),
            Transition::new(-828226800, 2),
            Transition::new(-812502000, 1),
            Transition::new(-796777200, 2),
            Transition::new(-781052400, 1),
            Transition::new(-780188400, 2),
            Transition::new(-748479600, 1),
            Transition::new(-733273200, 2),
            Transition::new(-717634800, 1),
            Transition::new(-701910000, 2),
            Transition::new(-684975600, 1),
            Transition::new(-670460400, 2),
            Transition::new(323823600, 1),
            Transition::new(338940000, 2),
            Transition::new(354675600, 1),
            Transition::new(370400400, 2),
            Transition::new(386125200, 1),
            Transition::new(401850000, 2),
            Transition::new(417574800, 1),
            Transition::new(433299600, 2),
            Transition::new(449024400, 1),
            Transition::new(465354000, 2),
            Transition::new(481078800, 1),
            Transition::new(496803600, 2),
            Transition::new(512528400, 1),
            Transition::new(528253200, 2),
            Transition::new(543978000, 1),
            Transition::new(559702800, 2),
            Transition::new(575427600, 1),
            Transition::new(591152400, 2),
            Transition::new(606877200, 1),
            Transition::new(622602000, 2),
            Transition::new(638326800, 1),
            Transition::new(654656400, 2),
            Transition::new(670381200, 1),
            Transition::new(686106000, 2),
            Transition::new(701830800, 1),
            Transition::new(717555600, 2),
            Transition::new(733280400, 1),
            Transition::new(749005200, 2),
            Transition::new(764730000, 1),
            Transition::new(780454800, 2),
            Transition::new(796179600, 1),
            Transition::new(811904400, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(3921, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_VILNIUS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840146876, 1),
            Transition::new(-1672536240, 2),
            Transition::new(-1585100136, 3),
            Transition::new(-1561251600, 4),
            Transition::new(-1553565600, 3),
            Transition::new(-928198800, 5),
            Transition::new(-900126000, 6),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 6),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 6),
            Transition::new(-802144800, 5),
            Transition::new(354920400, 7),
            Transition::new(370728000, 5),
            Transition::new(386456400, 7),
            Transition::new(402264000, 5),
            Transition::new(417992400, 7),
            Transition::new(433800000, 5),
            Transition::new(449614800, 7),
            Transition::new(465346800, 5),
            Transition::new(481071600, 7),
            Transition::new(496796400, 5),
            Transition::new(512521200, 7),
            Transition::new(528246000, 5),
            Transition::new(543970800, 7),
            Transition::new(559695600, 5),
            Transition::new(575420400, 7),
            Transition::new(591145200, 5),
            Transition::new(606870000, 8),
            Transition::new(622598400, 4),
            Transition::new(638323200, 8),
            Transition::new(654652800, 4),
            Transition::new(670377600, 8),
            Transition::new(686102400, 4),
            Transition::new(701827200, 8),
            Transition::new(717552000, 4),
            Transition::new(733276800, 8),
            Transition::new(749001600, 4),
            Transition::new(764726400, 8),
            Transition::new(780451200, 4),
            Transition::new(796176000, 8),
            Transition::new(811900800, 4),
            Transition::new(828230400, 8),
            Transition::new(846374400, 4),
            Transition::new(859680000, 8),
            Transition::new(877824000, 4),
            Transition::new(891133200, 6),
            Transition::new(909277200, 3),
            Transition::new(922582800, 6),
            Transition::new(941331600, 4),
            Transition::new(1048986000, 8),
        ],
        &{
            const V: [LocalTimeType; 9] = [
                match LocalTimeType::new(6076, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5040, false, Some(b"WMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5736, false, Some(b"KMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_VOLGOGRAD: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1577761060, 1),
            Transition::new(-1247540400, 2),
            Transition::new(354916800, 3),
            Transition::new(370724400, 2),
            Transition::new(386452800, 3),
            Transition::new(402260400, 2),
            Transition::new(417988800, 3),
            Transition::new(433796400, 2),
            Transition::new(449611200, 3),
            Transition::new(465343200, 2),
            Transition::new(481068000, 3),
            Transition::new(496792800, 2),
            Transition::new(512517600, 3),
            Transition::new(528242400, 2),
            Transition::new(543967200, 3),
            Transition::new(559692000, 2),
            Transition::new(575416800, 4),
            Transition::new(591145200, 1),
            Transition::new(606870000, 4),
            Transition::new(622594800, 1),
            Transition::new(638319600, 4),
            Transition::new(654649200, 1),
            Transition::new(670374000, 2),
            Transition::new(701820000, 4),
            Transition::new(717548400, 1),
            Transition::new(733273200, 4),
            Transition::new(748998000, 1),
            Transition::new(764722800, 4),
            Transition::new(780447600, 1),
            Transition::new(796172400, 4),
            Transition::new(811897200, 1),
            Transition::new(828226800, 4),
            Transition::new(846370800, 1),
            Transition::new(859676400, 4),
            Transition::new(877820400, 1),
            Transition::new(891126000, 4),
            Transition::new(909270000, 1),
            Transition::new(922575600, 4),
            Transition::new(941324400, 1),
            Transition::new(954025200, 4),
            Transition::new(972774000, 1),
            Transition::new(985474800, 4),
            Transition::new(1004223600, 1),
            Transition::new(1017529200, 4),
            Transition::new(1035673200, 1),
            Transition::new(1048978800, 4),
            Transition::new(1067122800, 1),
            Transition::new(1080428400, 4),
            Transition::new(1099177200, 1),
            Transition::new(1111878000, 4),
            Transition::new(1130626800, 1),
            Transition::new(1143327600, 4),
            Transition::new(1162076400, 1),
            Transition::new(1174777200, 4),
            Transition::new(1193526000, 1),
            Transition::new(1206831600, 4),
            Transition::new(1224975600, 1),
            Transition::new(1238281200, 4),
            Transition::new(1256425200, 1),
            Transition::new(1269730800, 4),
            Transition::new(1288479600, 1),
            Transition::new(1301180400, 2),
            Transition::new(1414274400, 1),
            Transition::new(1540681200, 2),
            Transition::new(1609020000, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(10660, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_ZAGREB: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713914232, 1),
            Transition::new(-905824800, 2),
            Transition::new(-857257200, 1),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 1),
            Transition::new(-812502000, 2),
            Transition::new(-796777200, 1),
            Transition::new(-781052400, 2),
            Transition::new(-766623600, 1),
            Transition::new(417574800, 2),
            Transition::new(433299600, 1),
            Transition::new(449024400, 2),
            Transition::new(465354000, 1),
            Transition::new(481078800, 2),
            Transition::new(496803600, 1),
            Transition::new(512528400, 2),
            Transition::new(528253200, 1),
            Transition::new(543978000, 2),
            Transition::new(559702800, 1),
            Transition::new(575427600, 2),
            Transition::new(591152400, 1),
            Transition::new(606877200, 2),
            Transition::new(622602000, 1),
            Transition::new(638326800, 2),
            Transition::new(654656400, 1),
            Transition::new(670381200, 2),
            Transition::new(686106000, 1),
            Transition::new(701830800, 2),
            Transition::new(717555600, 1),
            Transition::new(733280400, 2),
            Transition::new(749005200, 1),
            Transition::new(764730000, 2),
            Transition::new(780454800, 1),
            Transition::new(796179600, 2),
            Transition::new(811904400, 1),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(3832, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const EUROPE_ZAPOROZHYE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840149240, 1),
            Transition::new(-1441160400, 2),
            Transition::new(-1247536800, 3),
            Transition::new(-894769200, 5),
            Transition::new(-857257200, 4),
            Transition::new(-844556400, 5),
            Transition::new(-828226800, 4),
            Transition::new(-826419600, 3),
            Transition::new(354920400, 6),
            Transition::new(370728000, 3),
            Transition::new(386456400, 6),
            Transition::new(402264000, 3),
            Transition::new(417992400, 6),
            Transition::new(433800000, 3),
            Transition::new(449614800, 6),
            Transition::new(465346800, 3),
            Transition::new(481071600, 6),
            Transition::new(496796400, 3),
            Transition::new(512521200, 6),
            Transition::new(528246000, 3),
            Transition::new(543970800, 6),
            Transition::new(559695600, 3),
            Transition::new(575420400, 6),
            Transition::new(591145200, 3),
            Transition::new(606870000, 6),
            Transition::new(622594800, 3),
            Transition::new(638319600, 6),
            Transition::new(654649200, 3),
            Transition::new(670374000, 7),
            Transition::new(686091600, 2),
            Transition::new(701827200, 7),
            Transition::new(717552000, 2),
            Transition::new(733276800, 7),
            Transition::new(749001600, 2),
            Transition::new(764726400, 7),
            Transition::new(780451200, 2),
            Transition::new(796176000, 7),
            Transition::new(811900800, 2),
            Transition::new(828230400, 7),
            Transition::new(846378000, 2),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(8440, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(8400, false, Some(b"+0220")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"EET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"EEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    14400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const FACTORY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(0, false, Some(b"-00")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const GB: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3852662325, 2),
            Transition::new(-1691964000, 1),
            Transition::new(-1680472800, 2),
            Transition::new(-1664143200, 1),
            Transition::new(-1650146400, 2),
            Transition::new(-1633903200, 1),
            Transition::new(-1617487200, 2),
            Transition::new(-1601848800, 1),
            Transition::new(-1586037600, 2),
            Transition::new(-1570399200, 1),
            Transition::new(-1552168800, 2),
            Transition::new(-1538344800, 1),
            Transition::new(-1522533600, 2),
            Transition::new(-1507500000, 1),
            Transition::new(-1490565600, 2),
            Transition::new(-1473631200, 1),
            Transition::new(-1460930400, 2),
            Transition::new(-1442786400, 1),
            Transition::new(-1428876000, 2),
            Transition::new(-1410732000, 1),
            Transition::new(-1396216800, 2),
            Transition::new(-1379282400, 1),
            Transition::new(-1364767200, 2),
            Transition::new(-1348437600, 1),
            Transition::new(-1333317600, 2),
            Transition::new(-1315778400, 1),
            Transition::new(-1301263200, 2),
            Transition::new(-1284328800, 1),
            Transition::new(-1269813600, 2),
            Transition::new(-1253484000, 1),
            Transition::new(-1238364000, 2),
            Transition::new(-1221429600, 1),
            Transition::new(-1206914400, 2),
            Transition::new(-1189980000, 1),
            Transition::new(-1175464800, 2),
            Transition::new(-1159135200, 1),
            Transition::new(-1143410400, 2),
            Transition::new(-1126476000, 1),
            Transition::new(-1111960800, 2),
            Transition::new(-1095631200, 1),
            Transition::new(-1080511200, 2),
            Transition::new(-1063576800, 1),
            Transition::new(-1049061600, 2),
            Transition::new(-1032127200, 1),
            Transition::new(-1017612000, 2),
            Transition::new(-1001282400, 1),
            Transition::new(-986162400, 2),
            Transition::new(-969228000, 1),
            Transition::new(-950479200, 2),
            Transition::new(-942012000, 1),
            Transition::new(-904518000, 3),
            Transition::new(-896050800, 1),
            Transition::new(-875487600, 3),
            Transition::new(-864601200, 1),
            Transition::new(-844038000, 3),
            Transition::new(-832546800, 1),
            Transition::new(-812588400, 3),
            Transition::new(-798073200, 1),
            Transition::new(-781052400, 3),
            Transition::new(-772066800, 1),
            Transition::new(-764805600, 2),
            Transition::new(-748476000, 1),
            Transition::new(-733356000, 2),
            Transition::new(-719445600, 1),
            Transition::new(-717030000, 3),
            Transition::new(-706748400, 1),
            Transition::new(-699487200, 2),
            Transition::new(-687996000, 1),
            Transition::new(-668037600, 2),
            Transition::new(-654732000, 1),
            Transition::new(-636588000, 2),
            Transition::new(-622072800, 1),
            Transition::new(-605743200, 2),
            Transition::new(-590623200, 1),
            Transition::new(-574293600, 2),
            Transition::new(-558568800, 1),
            Transition::new(-542239200, 2),
            Transition::new(-527119200, 1),
            Transition::new(-512604000, 2),
            Transition::new(-496274400, 1),
            Transition::new(-481154400, 2),
            Transition::new(-464220000, 1),
            Transition::new(-449704800, 2),
            Transition::new(-432165600, 1),
            Transition::new(-417650400, 2),
            Transition::new(-401320800, 1),
            Transition::new(-386200800, 2),
            Transition::new(-369266400, 1),
            Transition::new(-354751200, 2),
            Transition::new(-337816800, 1),
            Transition::new(-323301600, 2),
            Transition::new(-306972000, 1),
            Transition::new(-291852000, 2),
            Transition::new(-276732000, 1),
            Transition::new(-257983200, 2),
            Transition::new(-245282400, 1),
            Transition::new(-226533600, 2),
            Transition::new(-213228000, 1),
            Transition::new(-195084000, 2),
            Transition::new(-182383200, 1),
            Transition::new(-163634400, 2),
            Transition::new(-150933600, 1),
            Transition::new(-132184800, 2),
            Transition::new(-119484000, 1),
            Transition::new(-100735200, 2),
            Transition::new(-88034400, 1),
            Transition::new(-68680800, 2),
            Transition::new(-59004000, 1),
            Transition::new(-37242000, 4),
            Transition::new(57722400, 2),
            Transition::new(69818400, 1),
            Transition::new(89172000, 2),
            Transition::new(101268000, 1),
            Transition::new(120621600, 2),
            Transition::new(132717600, 1),
            Transition::new(152071200, 2),
            Transition::new(164167200, 1),
            Transition::new(183520800, 2),
            Transition::new(196221600, 1),
            Transition::new(214970400, 2),
            Transition::new(227671200, 1),
            Transition::new(246420000, 2),
            Transition::new(259120800, 1),
            Transition::new(278474400, 2),
            Transition::new(290570400, 1),
            Transition::new(309924000, 2),
            Transition::new(322020000, 1),
            Transition::new(341373600, 2),
            Transition::new(354675600, 1),
            Transition::new(372819600, 2),
            Transition::new(386125200, 1),
            Transition::new(404269200, 2),
            Transition::new(417574800, 1),
            Transition::new(435718800, 2),
            Transition::new(449024400, 1),
            Transition::new(467773200, 2),
            Transition::new(481078800, 1),
            Transition::new(499222800, 2),
            Transition::new(512528400, 1),
            Transition::new(530672400, 2),
            Transition::new(543978000, 1),
            Transition::new(562122000, 2),
            Transition::new(575427600, 1),
            Transition::new(593571600, 2),
            Transition::new(606877200, 1),
            Transition::new(625626000, 2),
            Transition::new(638326800, 1),
            Transition::new(657075600, 2),
            Transition::new(670381200, 1),
            Transition::new(688525200, 2),
            Transition::new(701830800, 1),
            Transition::new(719974800, 2),
            Transition::new(733280400, 1),
            Transition::new(751424400, 2),
            Transition::new(764730000, 1),
            Transition::new(782874000, 2),
            Transition::new(796179600, 1),
            Transition::new(814323600, 2),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-75, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"BDST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"BST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"GMT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"BST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const GMT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(0, false, Some(b"GMT")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const HONGKONG: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2056690800, 1),
            Transition::new(-900910800, 2),
            Transition::new(-891579600, 3),
            Transition::new(-884248200, 4),
            Transition::new(-761209200, 1),
            Transition::new(-747907200, 2),
            Transition::new(-728541000, 1),
            Transition::new(-717049800, 2),
            Transition::new(-697091400, 1),
            Transition::new(-683785800, 2),
            Transition::new(-668061000, 1),
            Transition::new(-654755400, 2),
            Transition::new(-636611400, 1),
            Transition::new(-623305800, 2),
            Transition::new(-605161800, 1),
            Transition::new(-591856200, 2),
            Transition::new(-573712200, 1),
            Transition::new(-559801800, 2),
            Transition::new(-541657800, 1),
            Transition::new(-528352200, 2),
            Transition::new(-510211800, 1),
            Transition::new(-498112200, 2),
            Transition::new(-478762200, 1),
            Transition::new(-466662600, 2),
            Transition::new(-446707800, 1),
            Transition::new(-435213000, 2),
            Transition::new(-415258200, 1),
            Transition::new(-403158600, 2),
            Transition::new(-383808600, 1),
            Transition::new(-371709000, 2),
            Transition::new(-352359000, 1),
            Transition::new(-340259400, 2),
            Transition::new(-320909400, 1),
            Transition::new(-308809800, 2),
            Transition::new(-288855000, 1),
            Transition::new(-277360200, 2),
            Transition::new(-257405400, 1),
            Transition::new(-245910600, 2),
            Transition::new(-225955800, 1),
            Transition::new(-213856200, 2),
            Transition::new(-194506200, 1),
            Transition::new(-182406600, 2),
            Transition::new(-163056600, 1),
            Transition::new(-148537800, 2),
            Transition::new(-132816600, 1),
            Transition::new(-117088200, 2),
            Transition::new(-101367000, 1),
            Transition::new(-85638600, 2),
            Transition::new(-69312600, 1),
            Transition::new(-53584200, 2),
            Transition::new(-37863000, 1),
            Transition::new(-22134600, 2),
            Transition::new(-6413400, 1),
            Transition::new(9315000, 2),
            Transition::new(25036200, 1),
            Transition::new(40764600, 2),
            Transition::new(56485800, 1),
            Transition::new(72214200, 2),
            Transition::new(88540200, 1),
            Transition::new(104268600, 2),
            Transition::new(119989800, 1),
            Transition::new(126041400, 2),
            Transition::new(151439400, 1),
            Transition::new(167167800, 2),
            Transition::new(182889000, 1),
            Transition::new(198617400, 2),
            Transition::new(214338600, 1),
            Transition::new(295385400, 2),
            Transition::new(309292200, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(27402, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"HKT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"HKST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(30600, true, Some(b"HKWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"JST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"HKT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const HST: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-36000, false, Some(b"HST")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-36000, false, Some(b"HST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ICELAND: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1956609120, 2),
            Transition::new(-1668211200, 1),
            Transition::new(-1647212400, 2),
            Transition::new(-1636675200, 1),
            Transition::new(-1613430000, 2),
            Transition::new(-1605139200, 1),
            Transition::new(-1581894000, 2),
            Transition::new(-1539561600, 1),
            Transition::new(-1531350000, 2),
            Transition::new(-968025600, 1),
            Transition::new(-952293600, 2),
            Transition::new(-942008400, 1),
            Transition::new(-920239200, 2),
            Transition::new(-909957600, 1),
            Transition::new(-888789600, 2),
            Transition::new(-877903200, 1),
            Transition::new(-857944800, 2),
            Transition::new(-846453600, 1),
            Transition::new(-826495200, 2),
            Transition::new(-815004000, 1),
            Transition::new(-795045600, 2),
            Transition::new(-783554400, 1),
            Transition::new(-762991200, 2),
            Transition::new(-752104800, 1),
            Transition::new(-731541600, 2),
            Transition::new(-717631200, 1),
            Transition::new(-700092000, 2),
            Transition::new(-686181600, 1),
            Transition::new(-668642400, 2),
            Transition::new(-654732000, 1),
            Transition::new(-636588000, 2),
            Transition::new(-623282400, 1),
            Transition::new(-605743200, 2),
            Transition::new(-591832800, 1),
            Transition::new(-573688800, 2),
            Transition::new(-559778400, 1),
            Transition::new(-542239200, 2),
            Transition::new(-528328800, 1),
            Transition::new(-510789600, 2),
            Transition::new(-496879200, 1),
            Transition::new(-479340000, 2),
            Transition::new(-465429600, 1),
            Transition::new(-447890400, 2),
            Transition::new(-433980000, 1),
            Transition::new(-415836000, 2),
            Transition::new(-401925600, 1),
            Transition::new(-384386400, 2),
            Transition::new(-370476000, 1),
            Transition::new(-352936800, 2),
            Transition::new(-339026400, 1),
            Transition::new(-321487200, 2),
            Transition::new(-307576800, 1),
            Transition::new(-290037600, 2),
            Transition::new(-276127200, 1),
            Transition::new(-258588000, 2),
            Transition::new(-244677600, 1),
            Transition::new(-226533600, 2),
            Transition::new(-212623200, 1),
            Transition::new(-195084000, 2),
            Transition::new(-181173600, 1),
            Transition::new(-163634400, 2),
            Transition::new(-149724000, 1),
            Transition::new(-132184800, 2),
            Transition::new(-118274400, 1),
            Transition::new(-100735200, 2),
            Transition::new(-86824800, 1),
            Transition::new(-68680800, 2),
            Transition::new(-54770400, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-5280, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, true, Some(b"+00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-3600, false, Some(b"-01")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"GMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_ANTANANARIVO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1846293004, 1),
            Transition::new(-499924800, 2),
            Transition::new(-492062400, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(11404, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"EAST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_CHAGOS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1988167780, 1),
            Transition::new(820436400, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(17380, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(21600, false, Some(b"+06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_CHRISTMAS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2364102172, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(25372, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_COCOS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2209012060, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(23260, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(23400, false, Some(b"+0630")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(23400, false, Some(b"+0630")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_COMORO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1846291984, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(10384, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_KERGUELEN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-631152000, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_MAHE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1988163708, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(13308, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_MALDIVES: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840158440, 1),
            Transition::new(-315636840, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(17640, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(17640, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(18000, false, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_MAURITIUS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1988164200, 2),
            Transition::new(403041600, 1),
            Transition::new(417034800, 2),
            Transition::new(1224972000, 1),
            Transition::new(1238274000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(13800, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_MAYOTTE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1846292456, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(10856, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"EAT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const INDIAN_REUNION: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1848886912, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(13312, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const IRAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1704165944, 1),
            Transition::new(-757394744, 2),
            Transition::new(247177800, 4),
            Transition::new(259272000, 3),
            Transition::new(277758000, 4),
            Transition::new(283982400, 2),
            Transition::new(290809800, 5),
            Transition::new(306531000, 2),
            Transition::new(322432200, 5),
            Transition::new(338499000, 2),
            Transition::new(673216200, 5),
            Transition::new(685481400, 2),
            Transition::new(701209800, 5),
            Transition::new(717103800, 2),
            Transition::new(732745800, 5),
            Transition::new(748639800, 2),
            Transition::new(764281800, 5),
            Transition::new(780175800, 2),
            Transition::new(795817800, 5),
            Transition::new(811711800, 2),
            Transition::new(827353800, 5),
            Transition::new(843247800, 2),
            Transition::new(858976200, 5),
            Transition::new(874870200, 2),
            Transition::new(890512200, 5),
            Transition::new(906406200, 2),
            Transition::new(922048200, 5),
            Transition::new(937942200, 2),
            Transition::new(953584200, 5),
            Transition::new(969478200, 2),
            Transition::new(985206600, 5),
            Transition::new(1001100600, 2),
            Transition::new(1016742600, 5),
            Transition::new(1032636600, 2),
            Transition::new(1048278600, 5),
            Transition::new(1064172600, 2),
            Transition::new(1079814600, 5),
            Transition::new(1095708600, 2),
            Transition::new(1111437000, 5),
            Transition::new(1127331000, 2),
            Transition::new(1206045000, 5),
            Transition::new(1221939000, 2),
            Transition::new(1237667400, 5),
            Transition::new(1253561400, 2),
            Transition::new(1269203400, 5),
            Transition::new(1285097400, 2),
            Transition::new(1300739400, 5),
            Transition::new(1316633400, 2),
            Transition::new(1332275400, 5),
            Transition::new(1348169400, 2),
            Transition::new(1363897800, 5),
            Transition::new(1379791800, 2),
            Transition::new(1395433800, 5),
            Transition::new(1411327800, 2),
            Transition::new(1426969800, 5),
            Transition::new(1442863800, 2),
            Transition::new(1458505800, 5),
            Transition::new(1474399800, 2),
            Transition::new(1490128200, 5),
            Transition::new(1506022200, 2),
            Transition::new(1521664200, 5),
            Transition::new(1537558200, 2),
            Transition::new(1553200200, 5),
            Transition::new(1569094200, 2),
            Transition::new(1584736200, 5),
            Transition::new(1600630200, 2),
            Transition::new(1616358600, 5),
            Transition::new(1632252600, 2),
            Transition::new(1647894600, 5),
            Transition::new(1663788600, 2),
            Transition::new(1679430600, 5),
            Transition::new(1695324600, 2),
            Transition::new(1710966600, 5),
            Transition::new(1726860600, 2),
            Transition::new(1742589000, 5),
            Transition::new(1758483000, 2),
            Transition::new(1774125000, 5),
            Transition::new(1790019000, 2),
            Transition::new(1805661000, 5),
            Transition::new(1821555000, 2),
            Transition::new(1837197000, 5),
            Transition::new(1853091000, 2),
            Transition::new(1868733000, 5),
            Transition::new(1884627000, 2),
            Transition::new(1900355400, 5),
            Transition::new(1916249400, 2),
            Transition::new(1931891400, 5),
            Transition::new(1947785400, 2),
            Transition::new(1963427400, 5),
            Transition::new(1979321400, 2),
            Transition::new(1994963400, 5),
            Transition::new(2010857400, 2),
            Transition::new(2026585800, 5),
            Transition::new(2042479800, 2),
            Transition::new(2058121800, 5),
            Transition::new(2074015800, 2),
            Transition::new(2089657800, 5),
            Transition::new(2105551800, 2),
            Transition::new(2121193800, 5),
            Transition::new(2137087800, 2),
            Transition::new(2152816200, 5),
            Transition::new(2168710200, 2),
            Transition::new(2184352200, 5),
            Transition::new(2200246200, 2),
            Transition::new(2215888200, 5),
            Transition::new(2231782200, 2),
            Transition::new(2247424200, 5),
            Transition::new(2263318200, 2),
            Transition::new(2279046600, 5),
            Transition::new(2294940600, 2),
            Transition::new(2310582600, 5),
            Transition::new(2326476600, 2),
            Transition::new(2342118600, 5),
            Transition::new(2358012600, 2),
            Transition::new(2373654600, 5),
            Transition::new(2389548600, 2),
            Transition::new(2405277000, 5),
            Transition::new(2421171000, 2),
            Transition::new(2436813000, 5),
            Transition::new(2452707000, 2),
            Transition::new(2468349000, 5),
            Transition::new(2484243000, 2),
            Transition::new(2499885000, 5),
            Transition::new(2515779000, 2),
            Transition::new(2531507400, 5),
            Transition::new(2547401400, 2),
            Transition::new(2563043400, 5),
            Transition::new(2578937400, 2),
            Transition::new(2594579400, 5),
            Transition::new(2610473400, 2),
            Transition::new(2626115400, 5),
            Transition::new(2642009400, 2),
            Transition::new(2657737800, 5),
            Transition::new(2673631800, 2),
            Transition::new(2689273800, 5),
            Transition::new(2705167800, 2),
            Transition::new(2720809800, 5),
            Transition::new(2736703800, 2),
            Transition::new(2752345800, 5),
            Transition::new(2768239800, 2),
            Transition::new(2783968200, 5),
            Transition::new(2799862200, 2),
            Transition::new(2815504200, 5),
            Transition::new(2831398200, 2),
            Transition::new(2847040200, 5),
            Transition::new(2862934200, 2),
            Transition::new(2878576200, 5),
            Transition::new(2894470200, 2),
            Transition::new(2910112200, 5),
            Transition::new(2926006200, 2),
            Transition::new(2941734600, 5),
            Transition::new(2957628600, 2),
            Transition::new(2973270600, 5),
            Transition::new(2989164600, 2),
            Transition::new(3004806600, 5),
            Transition::new(3020700600, 2),
            Transition::new(3036342600, 5),
            Transition::new(3052236600, 2),
            Transition::new(3067965000, 5),
            Transition::new(3083859000, 2),
            Transition::new(3099501000, 5),
            Transition::new(3115395000, 2),
            Transition::new(3131037000, 5),
            Transition::new(3146931000, 2),
            Transition::new(3162573000, 5),
            Transition::new(3178467000, 2),
            Transition::new(3194195400, 5),
            Transition::new(3210089400, 2),
            Transition::new(3225731400, 5),
            Transition::new(3241625400, 2),
            Transition::new(3257267400, 5),
            Transition::new(3273161400, 2),
            Transition::new(3288803400, 5),
            Transition::new(3304697400, 2),
            Transition::new(3320425800, 5),
            Transition::new(3336319800, 2),
            Transition::new(3351961800, 5),
            Transition::new(3367855800, 2),
            Transition::new(3383497800, 5),
            Transition::new(3399391800, 2),
            Transition::new(3415033800, 5),
            Transition::new(3430927800, 2),
            Transition::new(3446656200, 5),
            Transition::new(3462550200, 2),
            Transition::new(3478192200, 5),
            Transition::new(3494086200, 2),
            Transition::new(3509728200, 5),
            Transition::new(3525622200, 2),
            Transition::new(3541264200, 5),
            Transition::new(3557158200, 2),
            Transition::new(3572886600, 5),
            Transition::new(3588780600, 2),
            Transition::new(3604422600, 5),
            Transition::new(3620316600, 2),
            Transition::new(3635958600, 5),
            Transition::new(3651852600, 2),
            Transition::new(3667494600, 5),
            Transition::new(3683388600, 2),
            Transition::new(3699117000, 5),
            Transition::new(3715011000, 2),
            Transition::new(3730653000, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(12344, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(12344, false, Some(b"TMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(12600, false, Some(b"+0330")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(16200, true, Some(b"+0430")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(12600, false, Some(b"+0330")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(16200, true, Some(b"+0430")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::Julian1WithoutLeap(match Julian1WithoutLeap::new(79) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    86400,
                    RuleDay::Julian1WithoutLeap(match Julian1WithoutLeap::new(263) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    86400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ISRAEL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840149254, 1),
            Transition::new(-1641003640, 3),
            Transition::new(-933638400, 2),
            Transition::new(-923097600, 3),
            Transition::new(-919036800, 2),
            Transition::new(-857347200, 3),
            Transition::new(-844300800, 2),
            Transition::new(-825811200, 3),
            Transition::new(-812678400, 2),
            Transition::new(-794188800, 3),
            Transition::new(-779846400, 2),
            Transition::new(-762652800, 3),
            Transition::new(-748310400, 2),
            Transition::new(-731116800, 3),
            Transition::new(-681955200, 4),
            Transition::new(-673228800, 2),
            Transition::new(-667958400, 3),
            Transition::new(-652320000, 2),
            Transition::new(-636422400, 3),
            Transition::new(-622080000, 2),
            Transition::new(-608947200, 3),
            Transition::new(-591840000, 2),
            Transition::new(-572486400, 3),
            Transition::new(-558576000, 2),
            Transition::new(-542851200, 3),
            Transition::new(-527731200, 2),
            Transition::new(-514425600, 3),
            Transition::new(-490838400, 2),
            Transition::new(-482976000, 3),
            Transition::new(-459388800, 2),
            Transition::new(-451526400, 3),
            Transition::new(-428544000, 2),
            Transition::new(-418262400, 3),
            Transition::new(-400118400, 2),
            Transition::new(-387417600, 3),
            Transition::new(142380000, 2),
            Transition::new(150843600, 3),
            Transition::new(167176800, 2),
            Transition::new(178664400, 3),
            Transition::new(334101600, 2),
            Transition::new(337730400, 3),
            Transition::new(452642400, 2),
            Transition::new(462319200, 3),
            Transition::new(482277600, 2),
            Transition::new(494370000, 3),
            Transition::new(516751200, 2),
            Transition::new(526424400, 3),
            Transition::new(545436000, 2),
            Transition::new(558478800, 3),
            Transition::new(576626400, 2),
            Transition::new(589323600, 3),
            Transition::new(609890400, 2),
            Transition::new(620773200, 3),
            Transition::new(638316000, 2),
            Transition::new(651618000, 3),
            Transition::new(669765600, 2),
            Transition::new(683672400, 3),
            Transition::new(701820000, 2),
            Transition::new(715726800, 3),
            Transition::new(733701600, 2),
            Transition::new(747176400, 3),
            Transition::new(765151200, 2),
            Transition::new(778021200, 3),
            Transition::new(796600800, 2),
            Transition::new(810075600, 3),
            Transition::new(826840800, 2),
            Transition::new(842821200, 3),
            Transition::new(858895200, 2),
            Transition::new(874184400, 3),
            Transition::new(890344800, 2),
            Transition::new(905029200, 3),
            Transition::new(923011200, 2),
            Transition::new(936313200, 3),
            Transition::new(955670400, 2),
            Transition::new(970783200, 3),
            Transition::new(986770800, 2),
            Transition::new(1001282400, 3),
            Transition::new(1017356400, 2),
            Transition::new(1033941600, 3),
            Transition::new(1048806000, 2),
            Transition::new(1065132000, 3),
            Transition::new(1081292400, 2),
            Transition::new(1095804000, 3),
            Transition::new(1112313600, 2),
            Transition::new(1128812400, 3),
            Transition::new(1143763200, 2),
            Transition::new(1159657200, 3),
            Transition::new(1175212800, 2),
            Transition::new(1189897200, 3),
            Transition::new(1206662400, 2),
            Transition::new(1223161200, 3),
            Transition::new(1238112000, 2),
            Transition::new(1254006000, 3),
            Transition::new(1269561600, 2),
            Transition::new(1284246000, 3),
            Transition::new(1301616000, 2),
            Transition::new(1317510000, 3),
            Transition::new(1333065600, 2),
            Transition::new(1348354800, 3),
            Transition::new(1364515200, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(8454, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(8440, false, Some(b"JMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"IDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"IST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"IDDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(7200, false, Some(b"IST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(10800, true, Some(b"IDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 4, 4) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    93600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const JAMAICA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2524503170, 1),
            Transition::new(-1827687170, 2),
            Transition::new(126687600, 3),
            Transition::new(152085600, 2),
            Transition::new(162370800, 3),
            Transition::new(183535200, 2),
            Transition::new(199263600, 3),
            Transition::new(215589600, 2),
            Transition::new(230713200, 3),
            Transition::new(247039200, 2),
            Transition::new(262767600, 3),
            Transition::new(278488800, 2),
            Transition::new(294217200, 3),
            Transition::new(309938400, 2),
            Transition::new(325666800, 3),
            Transition::new(341388000, 2),
            Transition::new(357116400, 3),
            Transition::new(372837600, 2),
            Transition::new(388566000, 3),
            Transition::new(404892000, 2),
            Transition::new(420015600, 3),
            Transition::new(436341600, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-18430, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18430, false, Some(b"KMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-14400, true, Some(b"EDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-18000, false, Some(b"EST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const JAPAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2587712400, 2),
            Transition::new(-683802000, 1),
            Transition::new(-672310800, 2),
            Transition::new(-654771600, 1),
            Transition::new(-640861200, 2),
            Transition::new(-620298000, 1),
            Transition::new(-609411600, 2),
            Transition::new(-588848400, 1),
            Transition::new(-577962000, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(33539, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, true, Some(b"JDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"JST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"JST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const KWAJALEIN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177492960, 1),
            Transition::new(-1041418800, 2),
            Transition::new(-907408800, 3),
            Transition::new(-817462800, 1),
            Transition::new(-7988400, 4),
            Transition::new(745934400, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(40160, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-43200, false, Some(b"-12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const LIBYA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1577926364, 2),
            Transition::new(-574902000, 1),
            Transition::new(-568087200, 2),
            Transition::new(-512175600, 1),
            Transition::new(-504928800, 2),
            Transition::new(-449888400, 1),
            Transition::new(-441856800, 2),
            Transition::new(-347158800, 3),
            Transition::new(378684000, 2),
            Transition::new(386463600, 1),
            Transition::new(402271200, 2),
            Transition::new(417999600, 1),
            Transition::new(433807200, 2),
            Transition::new(449622000, 1),
            Transition::new(465429600, 2),
            Transition::new(481590000, 1),
            Transition::new(496965600, 2),
            Transition::new(512953200, 1),
            Transition::new(528674400, 2),
            Transition::new(544230000, 1),
            Transition::new(560037600, 2),
            Transition::new(575852400, 1),
            Transition::new(591660000, 2),
            Transition::new(607388400, 1),
            Transition::new(623196000, 2),
            Transition::new(641775600, 3),
            Transition::new(844034400, 2),
            Transition::new(860108400, 1),
            Transition::new(875916000, 3),
            Transition::new(1352505600, 2),
            Transition::new(1364515200, 1),
            Transition::new(1382659200, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(3164, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const MET: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1693706400, 1),
            Transition::new(-1680483600, 0),
            Transition::new(-1663455600, 1),
            Transition::new(-1650150000, 0),
            Transition::new(-1632006000, 1),
            Transition::new(-1618700400, 0),
            Transition::new(-938905200, 1),
            Transition::new(-857257200, 0),
            Transition::new(-844556400, 1),
            Transition::new(-828226800, 0),
            Transition::new(-812502000, 1),
            Transition::new(-796777200, 0),
            Transition::new(-781052400, 1),
            Transition::new(-766623600, 0),
            Transition::new(228877200, 1),
            Transition::new(243997200, 0),
            Transition::new(260326800, 1),
            Transition::new(276051600, 0),
            Transition::new(291776400, 1),
            Transition::new(307501200, 0),
            Transition::new(323830800, 1),
            Transition::new(338950800, 0),
            Transition::new(354675600, 1),
            Transition::new(370400400, 0),
            Transition::new(386125200, 1),
            Transition::new(401850000, 0),
            Transition::new(417574800, 1),
            Transition::new(433299600, 0),
            Transition::new(449024400, 1),
            Transition::new(465354000, 0),
            Transition::new(481078800, 1),
            Transition::new(496803600, 0),
            Transition::new(512528400, 1),
            Transition::new(528253200, 0),
            Transition::new(543978000, 1),
            Transition::new(559702800, 0),
            Transition::new(575427600, 1),
            Transition::new(591152400, 0),
            Transition::new(606877200, 1),
            Transition::new(622602000, 0),
            Transition::new(638326800, 1),
            Transition::new(654656400, 0),
            Transition::new(670381200, 1),
            Transition::new(686106000, 0),
            Transition::new(701830800, 1),
            Transition::new(717555600, 0),
            Transition::new(733280400, 1),
            Transition::new(749005200, 0),
            Transition::new(764730000, 1),
            Transition::new(780454800, 0),
            Transition::new(796179600, 1),
            Transition::new(811904400, 0),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(3600, false, Some(b"MET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"MEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"MET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"MEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const MST: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(-25200, false, Some(b"MST")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const MST_7_MDT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1633273200, 1),
            Transition::new(-1615132800, 0),
            Transition::new(-1601823600, 1),
            Transition::new(-1583683200, 0),
            Transition::new(-880210800, 2),
            Transition::new(-769395600, 3),
            Transition::new(-765388800, 0),
            Transition::new(-84380400, 1),
            Transition::new(-68659200, 0),
            Transition::new(-52930800, 1),
            Transition::new(-37209600, 0),
            Transition::new(-21481200, 1),
            Transition::new(-5760000, 0),
            Transition::new(9968400, 1),
            Transition::new(25689600, 0),
            Transition::new(41418000, 1),
            Transition::new(57744000, 0),
            Transition::new(73472400, 1),
            Transition::new(89193600, 0),
            Transition::new(104922000, 1),
            Transition::new(120643200, 0),
            Transition::new(126694800, 1),
            Transition::new(152092800, 0),
            Transition::new(162378000, 1),
            Transition::new(183542400, 0),
            Transition::new(199270800, 1),
            Transition::new(215596800, 0),
            Transition::new(230720400, 1),
            Transition::new(247046400, 0),
            Transition::new(262774800, 1),
            Transition::new(278496000, 0),
            Transition::new(294224400, 1),
            Transition::new(309945600, 0),
            Transition::new(325674000, 1),
            Transition::new(341395200, 0),
            Transition::new(357123600, 1),
            Transition::new(372844800, 0),
            Transition::new(388573200, 1),
            Transition::new(404899200, 0),
            Transition::new(420022800, 1),
            Transition::new(436348800, 0),
            Transition::new(452077200, 1),
            Transition::new(467798400, 0),
            Transition::new(483526800, 1),
            Transition::new(499248000, 0),
            Transition::new(514976400, 1),
            Transition::new(530697600, 0),
            Transition::new(544611600, 1),
            Transition::new(562147200, 0),
            Transition::new(576061200, 1),
            Transition::new(594201600, 0),
            Transition::new(607510800, 1),
            Transition::new(625651200, 0),
            Transition::new(638960400, 1),
            Transition::new(657100800, 0),
            Transition::new(671014800, 1),
            Transition::new(688550400, 0),
            Transition::new(702464400, 1),
            Transition::new(720000000, 0),
            Transition::new(733914000, 1),
            Transition::new(752054400, 0),
            Transition::new(765363600, 1),
            Transition::new(783504000, 0),
            Transition::new(796813200, 1),
            Transition::new(814953600, 0),
            Transition::new(828867600, 1),
            Transition::new(846403200, 0),
            Transition::new(860317200, 1),
            Transition::new(877852800, 0),
            Transition::new(891766800, 1),
            Transition::new(909302400, 0),
            Transition::new(923216400, 1),
            Transition::new(941356800, 0),
            Transition::new(954666000, 1),
            Transition::new(972806400, 0),
            Transition::new(986115600, 1),
            Transition::new(1004256000, 0),
            Transition::new(1018170000, 1),
            Transition::new(1035705600, 0),
            Transition::new(1049619600, 1),
            Transition::new(1067155200, 0),
            Transition::new(1081069200, 1),
            Transition::new(1099209600, 0),
            Transition::new(1112518800, 1),
            Transition::new(1130659200, 0),
            Transition::new(1143968400, 1),
            Transition::new(1162108800, 0),
            Transition::new(1173603600, 1),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const NAVAJO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2717643600, 2),
            Transition::new(-1633273200, 1),
            Transition::new(-1615132800, 2),
            Transition::new(-1601823600, 1),
            Transition::new(-1583683200, 2),
            Transition::new(-1570374000, 1),
            Transition::new(-1551628800, 2),
            Transition::new(-1538924400, 1),
            Transition::new(-1534089600, 2),
            Transition::new(-880210800, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765388800, 2),
            Transition::new(-147884400, 1),
            Transition::new(-131558400, 2),
            Transition::new(-116434800, 1),
            Transition::new(-100108800, 2),
            Transition::new(-84380400, 1),
            Transition::new(-68659200, 2),
            Transition::new(-52930800, 1),
            Transition::new(-37209600, 2),
            Transition::new(-21481200, 1),
            Transition::new(-5760000, 2),
            Transition::new(9968400, 1),
            Transition::new(25689600, 2),
            Transition::new(41418000, 1),
            Transition::new(57744000, 2),
            Transition::new(73472400, 1),
            Transition::new(89193600, 2),
            Transition::new(104922000, 1),
            Transition::new(120643200, 2),
            Transition::new(126694800, 1),
            Transition::new(152092800, 2),
            Transition::new(162378000, 1),
            Transition::new(183542400, 2),
            Transition::new(199270800, 1),
            Transition::new(215596800, 2),
            Transition::new(230720400, 1),
            Transition::new(247046400, 2),
            Transition::new(262774800, 1),
            Transition::new(278496000, 2),
            Transition::new(294224400, 1),
            Transition::new(309945600, 2),
            Transition::new(325674000, 1),
            Transition::new(341395200, 2),
            Transition::new(357123600, 1),
            Transition::new(372844800, 2),
            Transition::new(388573200, 1),
            Transition::new(404899200, 2),
            Transition::new(420022800, 1),
            Transition::new(436348800, 2),
            Transition::new(452077200, 1),
            Transition::new(467798400, 2),
            Transition::new(483526800, 1),
            Transition::new(499248000, 2),
            Transition::new(514976400, 1),
            Transition::new(530697600, 2),
            Transition::new(544611600, 1),
            Transition::new(562147200, 2),
            Transition::new(576061200, 1),
            Transition::new(594201600, 2),
            Transition::new(607510800, 1),
            Transition::new(625651200, 2),
            Transition::new(638960400, 1),
            Transition::new(657100800, 2),
            Transition::new(671014800, 1),
            Transition::new(688550400, 2),
            Transition::new(702464400, 1),
            Transition::new(720000000, 2),
            Transition::new(733914000, 1),
            Transition::new(752054400, 2),
            Transition::new(765363600, 1),
            Transition::new(783504000, 2),
            Transition::new(796813200, 1),
            Transition::new(814953600, 2),
            Transition::new(828867600, 1),
            Transition::new(846403200, 2),
            Transition::new(860317200, 1),
            Transition::new(877852800, 2),
            Transition::new(891766800, 1),
            Transition::new(909302400, 2),
            Transition::new(923216400, 1),
            Transition::new(941356800, 2),
            Transition::new(954666000, 1),
            Transition::new(972806400, 2),
            Transition::new(986115600, 1),
            Transition::new(1004256000, 2),
            Transition::new(1018170000, 1),
            Transition::new(1035705600, 2),
            Transition::new(1049619600, 1),
            Transition::new(1067155200, 2),
            Transition::new(1081069200, 1),
            Transition::new(1099209600, 2),
            Transition::new(1112518800, 1),
            Transition::new(1130659200, 2),
            Transition::new(1143968400, 1),
            Transition::new(1162108800, 2),
            Transition::new(1173603600, 1),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-25196, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, false, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, true, Some(b"MPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-25200, false, Some(b"MST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-21600, true, Some(b"MDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const NZ: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3192435544, 2),
            Transition::new(-1330335000, 1),
            Transition::new(-1320057000, 2),
            Transition::new(-1300699800, 3),
            Transition::new(-1287396000, 2),
            Transition::new(-1269250200, 3),
            Transition::new(-1255946400, 2),
            Transition::new(-1237800600, 3),
            Transition::new(-1224496800, 2),
            Transition::new(-1206351000, 3),
            Transition::new(-1192442400, 2),
            Transition::new(-1174901400, 3),
            Transition::new(-1160992800, 2),
            Transition::new(-1143451800, 3),
            Transition::new(-1125914400, 2),
            Transition::new(-1112607000, 3),
            Transition::new(-1094464800, 2),
            Transition::new(-1081157400, 3),
            Transition::new(-1063015200, 2),
            Transition::new(-1049707800, 3),
            Transition::new(-1031565600, 2),
            Transition::new(-1018258200, 3),
            Transition::new(-1000116000, 2),
            Transition::new(-986808600, 3),
            Transition::new(-968061600, 2),
            Transition::new(-955359000, 3),
            Transition::new(-936612000, 2),
            Transition::new(-923304600, 3),
            Transition::new(-757425600, 5),
            Transition::new(152632800, 4),
            Transition::new(162309600, 5),
            Transition::new(183477600, 4),
            Transition::new(194968800, 5),
            Transition::new(215532000, 4),
            Transition::new(226418400, 5),
            Transition::new(246981600, 4),
            Transition::new(257868000, 5),
            Transition::new(278431200, 4),
            Transition::new(289317600, 5),
            Transition::new(309880800, 4),
            Transition::new(320767200, 5),
            Transition::new(341330400, 4),
            Transition::new(352216800, 5),
            Transition::new(372780000, 4),
            Transition::new(384271200, 5),
            Transition::new(404834400, 4),
            Transition::new(415720800, 5),
            Transition::new(436284000, 4),
            Transition::new(447170400, 5),
            Transition::new(467733600, 4),
            Transition::new(478620000, 5),
            Transition::new(499183200, 4),
            Transition::new(510069600, 5),
            Transition::new(530632800, 4),
            Transition::new(541519200, 5),
            Transition::new(562082400, 4),
            Transition::new(573573600, 5),
            Transition::new(594136800, 4),
            Transition::new(605023200, 5),
            Transition::new(623772000, 4),
            Transition::new(637682400, 5),
            Transition::new(655221600, 4),
            Transition::new(669132000, 5),
            Transition::new(686671200, 4),
            Transition::new(700581600, 5),
            Transition::new(718120800, 4),
            Transition::new(732636000, 5),
            Transition::new(749570400, 4),
            Transition::new(764085600, 5),
            Transition::new(781020000, 4),
            Transition::new(795535200, 5),
            Transition::new(812469600, 4),
            Transition::new(826984800, 5),
            Transition::new(844524000, 4),
            Transition::new(858434400, 5),
            Transition::new(875973600, 4),
            Transition::new(889884000, 5),
            Transition::new(907423200, 4),
            Transition::new(921938400, 5),
            Transition::new(938872800, 4),
            Transition::new(953388000, 5),
            Transition::new(970322400, 4),
            Transition::new(984837600, 5),
            Transition::new(1002376800, 4),
            Transition::new(1016287200, 5),
            Transition::new(1033826400, 4),
            Transition::new(1047736800, 5),
            Transition::new(1065276000, 4),
            Transition::new(1079791200, 5),
            Transition::new(1096725600, 4),
            Transition::new(1111240800, 5),
            Transition::new(1128175200, 4),
            Transition::new(1142690400, 5),
            Transition::new(1159624800, 4),
            Transition::new(1174140000, 5),
            Transition::new(1191074400, 4),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(41944, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(45000, true, Some(b"NZST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(41400, false, Some(b"NZMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"NZST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, true, Some(b"NZDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"NZST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(43200, false, Some(b"NZST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(46800, true, Some(b"NZDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(9, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const NZ_CHAT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3192437628, 1),
            Transition::new(-757426500, 3),
            Transition::new(152632800, 2),
            Transition::new(162309600, 3),
            Transition::new(183477600, 2),
            Transition::new(194968800, 3),
            Transition::new(215532000, 2),
            Transition::new(226418400, 3),
            Transition::new(246981600, 2),
            Transition::new(257868000, 3),
            Transition::new(278431200, 2),
            Transition::new(289317600, 3),
            Transition::new(309880800, 2),
            Transition::new(320767200, 3),
            Transition::new(341330400, 2),
            Transition::new(352216800, 3),
            Transition::new(372780000, 2),
            Transition::new(384271200, 3),
            Transition::new(404834400, 2),
            Transition::new(415720800, 3),
            Transition::new(436284000, 2),
            Transition::new(447170400, 3),
            Transition::new(467733600, 2),
            Transition::new(478620000, 3),
            Transition::new(499183200, 2),
            Transition::new(510069600, 3),
            Transition::new(530632800, 2),
            Transition::new(541519200, 3),
            Transition::new(562082400, 2),
            Transition::new(573573600, 3),
            Transition::new(594136800, 2),
            Transition::new(605023200, 3),
            Transition::new(623772000, 2),
            Transition::new(637682400, 3),
            Transition::new(655221600, 2),
            Transition::new(669132000, 3),
            Transition::new(686671200, 2),
            Transition::new(700581600, 3),
            Transition::new(718120800, 2),
            Transition::new(732636000, 3),
            Transition::new(749570400, 2),
            Transition::new(764085600, 3),
            Transition::new(781020000, 2),
            Transition::new(795535200, 3),
            Transition::new(812469600, 2),
            Transition::new(826984800, 3),
            Transition::new(844524000, 2),
            Transition::new(858434400, 3),
            Transition::new(875973600, 2),
            Transition::new(889884000, 3),
            Transition::new(907423200, 2),
            Transition::new(921938400, 3),
            Transition::new(938872800, 2),
            Transition::new(953388000, 3),
            Transition::new(970322400, 2),
            Transition::new(984837600, 3),
            Transition::new(1002376800, 2),
            Transition::new(1016287200, 3),
            Transition::new(1033826400, 2),
            Transition::new(1047736800, 3),
            Transition::new(1065276000, 2),
            Transition::new(1079791200, 3),
            Transition::new(1096725600, 2),
            Transition::new(1111240800, 3),
            Transition::new(1128175200, 2),
            Transition::new(1142690400, 3),
            Transition::new(1159624800, 2),
            Transition::new(1174140000, 3),
            Transition::new(1191074400, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(44028, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(44100, false, Some(b"+1215")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(49500, true, Some(b"+1345")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(45900, false, Some(b"+1245")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(45900, false, Some(b"+1245")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(49500, true, Some(b"+1345")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(9, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    9900,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    13500,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_APIA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2445424384, 1),
            Transition::new(-1861878784, 2),
            Transition::new(-631110600, 4),
            Transition::new(1285498800, 3),
            Transition::new(1301752800, 4),
            Transition::new(1316872800, 3),
            Transition::new(1325239200, 6),
            Transition::new(1333202400, 5),
            Transition::new(1348927200, 6),
            Transition::new(1365256800, 5),
            Transition::new(1380376800, 6),
            Transition::new(1396706400, 5),
            Transition::new(1411826400, 6),
            Transition::new(1428156000, 5),
            Transition::new(1443276000, 6),
            Transition::new(1459605600, 5),
            Transition::new(1474725600, 6),
            Transition::new(1491055200, 5),
            Transition::new(1506175200, 6),
            Transition::new(1522504800, 5),
            Transition::new(1538229600, 6),
            Transition::new(1554559200, 5),
            Transition::new(1569679200, 6),
            Transition::new(1586008800, 5),
            Transition::new(1601128800, 6),
            Transition::new(1617458400, 5),
        ],
        &{
            const V: [LocalTimeType; 7] = [
                match LocalTimeType::new(45184, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-41216, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-41400, false, Some(b"-1130")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, true, Some(b"-10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"-11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(50400, true, Some(b"+14")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_BOUGAINVILLE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840178136, 1),
            Transition::new(-2366790512, 2),
            Transition::new(-868010400, 3),
            Transition::new(-768906000, 2),
            Transition::new(1419696000, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(37336, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(35312, false, Some(b"PMMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_CHUUK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3944628428, 1),
            Transition::new(-2177489228, 2),
            Transition::new(-1743674400, 3),
            Transition::new(-1606813200, 2),
            Transition::new(-907408800, 3),
            Transition::new(-770634000, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-49972, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36428, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_EFATE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1829387596, 2),
            Transition::new(125409600, 1),
            Transition::new(133876800, 2),
            Transition::new(433256400, 1),
            Transition::new(448977600, 2),
            Transition::new(464706000, 1),
            Transition::new(480427200, 2),
            Transition::new(496760400, 1),
            Transition::new(511876800, 2),
            Transition::new(528210000, 1),
            Transition::new(543931200, 2),
            Transition::new(559659600, 1),
            Transition::new(575380800, 2),
            Transition::new(591109200, 1),
            Transition::new(606830400, 2),
            Transition::new(622558800, 1),
            Transition::new(638280000, 2),
            Transition::new(654008400, 1),
            Transition::new(669729600, 2),
            Transition::new(686062800, 1),
            Transition::new(696340800, 2),
            Transition::new(719931600, 1),
            Transition::new(727790400, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(40396, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_ENDERBURY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3471292800, 1),
            Transition::new(-2682246940, 0),
            Transition::new(-1004313600, 2),
            Transition::new(-880200000, 0),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-41060, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-43200, false, Some(b"-12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_FAKAOFO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177411704, 1),
            Transition::new(1325242800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-41096, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"-11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_FIJI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1709985344, 2),
            Transition::new(909842400, 1),
            Transition::new(920124000, 2),
            Transition::new(941896800, 1),
            Transition::new(951573600, 2),
            Transition::new(1259416800, 1),
            Transition::new(1269698400, 2),
            Transition::new(1287842400, 1),
            Transition::new(1299333600, 2),
            Transition::new(1319292000, 1),
            Transition::new(1327154400, 2),
            Transition::new(1350741600, 1),
            Transition::new(1358604000, 2),
            Transition::new(1382796000, 1),
            Transition::new(1390050000, 2),
            Transition::new(1414850400, 1),
            Transition::new(1421503200, 2),
            Transition::new(1446300000, 1),
            Transition::new(1452952800, 2),
            Transition::new(1478354400, 1),
            Transition::new(1484402400, 2),
            Transition::new(1509804000, 1),
            Transition::new(1515852000, 2),
            Transition::new(1541253600, 1),
            Transition::new(1547301600, 2),
            Transition::new(1573308000, 1),
            Transition::new(1578751200, 2),
            Transition::new(1608386400, 1),
            Transition::new(1610805600, 2),
            Transition::new(1668261600, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(42944, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, true, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(43200, false, Some(b"+12")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(46800, true, Some(b"+13")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(1, 2, 3) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    356400,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_FUNAFUTI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2177495812, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(43012, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_GALAPAGOS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1230746496, 1),
            Transition::new(504939600, 3),
            Transition::new(722930400, 2),
            Transition::new(728888400, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-21504, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, false, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-18000, true, Some(b"-05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-21600, false, Some(b"-06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-21600, false, Some(b"-06")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_GAMBIER: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1806678012, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-32388, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-32400, false, Some(b"-09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-32400, false, Some(b"-09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_GUADALCANAL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1806748788, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(38388, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_GUAM: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3944626740, 1),
            Transition::new(-2177487540, 2),
            Transition::new(-885549600, 3),
            Transition::new(-802256400, 2),
            Transition::new(-331891200, 4),
            Transition::new(-281610000, 2),
            Transition::new(-73728000, 4),
            Transition::new(-29415540, 2),
            Transition::new(-16704000, 4),
            Transition::new(-10659600, 2),
            Transition::new(9907200, 4),
            Transition::new(21394800, 2),
            Transition::new(41356800, 4),
            Transition::new(52844400, 2),
            Transition::new(124819200, 4),
            Transition::new(130863600, 2),
            Transition::new(201888000, 4),
            Transition::new(209487660, 2),
            Transition::new(230659200, 4),
            Transition::new(241542000, 2),
            Transition::new(977493600, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-51660, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(34740, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"GST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, true, Some(b"GDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"ChST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"ChST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_HONOLULU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2334101314, 1),
            Transition::new(-1157283000, 2),
            Transition::new(-1155436200, 1),
            Transition::new(-880198200, 3),
            Transition::new(-769395600, 4),
            Transition::new(-765376200, 1),
            Transition::new(-712150200, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-37886, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-37800, false, Some(b"HST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-34200, true, Some(b"HDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-34200, true, Some(b"HWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-34200, true, Some(b"HPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, false, Some(b"HST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-36000, false, Some(b"HST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_KANTON: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1020470400, 1),
            Transition::new(307627200, 2),
            Transition::new(788871600, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(0, false, Some(b"-00")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-43200, false, Some(b"-12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"-11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_KIRITIMATI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177415040, 1),
            Transition::new(307622400, 2),
            Transition::new(788868000, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-37760, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-38400, false, Some(b"-1040")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, false, Some(b"-10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(50400, false, Some(b"+14")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(50400, false, Some(b"+14")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_KOSRAE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3944631116, 1),
            Transition::new(-2177491916, 2),
            Transition::new(-1743678000, 3),
            Transition::new(-1606813200, 2),
            Transition::new(-1041418800, 4),
            Transition::new(-907408800, 3),
            Transition::new(-770634000, 2),
            Transition::new(-7988400, 5),
            Transition::new(915105600, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-47284, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39116, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_MAJURO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177493888, 1),
            Transition::new(-1743678000, 2),
            Transition::new(-1606813200, 1),
            Transition::new(-1041418800, 3),
            Transition::new(-907408800, 2),
            Transition::new(-818067600, 1),
            Transition::new(-7988400, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(41088, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_MARQUESAS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1806676920, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-33480, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-34200, false, Some(b"-0930")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-34200, false, Some(b"-0930")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_MIDWAY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177410232, 1),
            Transition::new(-428504400, 2),
            Transition::new(-420645600, 1),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-42568, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"-11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, true, Some(b"-10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-39600, false, Some(b"-11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_NAURU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1545131260, 1),
            Transition::new(-862918200, 2),
            Transition::new(-767350800, 1),
            Transition::new(287418600, 3),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(40060, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(41400, false, Some(b"+1130")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_NIUE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-543069620, 1),
            Transition::new(-173623200, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-40780, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-40800, false, Some(b"-1120")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"-11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-39600, false, Some(b"-11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_NORFOLK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177493112, 1),
            Transition::new(-599656320, 2),
            Transition::new(152029800, 3),
            Transition::new(162916200, 2),
            Transition::new(1443882600, 4),
            Transition::new(1570287600, 5),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(40312, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(40320, false, Some(b"+1112")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(41400, false, Some(b"+1130")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(45000, true, Some(b"+1230")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(39600, false, Some(b"+11")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(43200, true, Some(b"+12")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(4, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_NOUMEA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1829387148, 2),
            Transition::new(250002000, 1),
            Transition::new(257342400, 2),
            Transition::new(281451600, 1),
            Transition::new(288878400, 2),
            Transition::new(849366000, 1),
            Transition::new(857228400, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(39948, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, true, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_PAGO_PAGO: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2445424632, 1),
            Transition::new(-1861879032, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(45432, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-40968, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-39600, false, Some(b"SST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-39600, false, Some(b"SST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_PALAU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3944624276, 1),
            Transition::new(-2177485076, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-54124, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32276, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_PITCAIRN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177421580, 1),
            Transition::new(893665800, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(-31220, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-30600, false, Some(b"-0830")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-28800, false, Some(b"-08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-28800, false, Some(b"-08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_POHNPEI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3944629972, 1),
            Transition::new(-2177490772, 2),
            Transition::new(-1743678000, 3),
            Transition::new(-1606813200, 2),
            Transition::new(-1041418800, 4),
            Transition::new(-907408800, 3),
            Transition::new(-770634000, 2),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-48428, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(37972, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(39600, false, Some(b"+11")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_PORT_MORESBY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840176120, 1),
            Transition::new(-2366790512, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(35320, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(35312, false, Some(b"PMMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_RAROTONGA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2209555256, 1),
            Transition::new(-543072056, 2),
            Transition::new(279714600, 4),
            Transition::new(289387800, 3),
            Transition::new(309952800, 4),
            Transition::new(320837400, 3),
            Transition::new(341402400, 4),
            Transition::new(352287000, 3),
            Transition::new(372852000, 4),
            Transition::new(384341400, 3),
            Transition::new(404906400, 4),
            Transition::new(415791000, 3),
            Transition::new(436356000, 4),
            Transition::new(447240600, 3),
            Transition::new(467805600, 4),
            Transition::new(478690200, 3),
            Transition::new(499255200, 4),
            Transition::new(510139800, 3),
            Transition::new(530704800, 4),
            Transition::new(541589400, 3),
            Transition::new(562154400, 4),
            Transition::new(573643800, 3),
            Transition::new(594208800, 4),
            Transition::new(605093400, 3),
            Transition::new(625658400, 4),
            Transition::new(636543000, 3),
            Transition::new(657108000, 4),
            Transition::new(667992600, 3),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(48056, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-38344, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-37800, false, Some(b"-1030")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, false, Some(b"-10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-34200, true, Some(b"-0930")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-36000, false, Some(b"-10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_SAIPAN: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-3944626980, 1),
            Transition::new(-2177487780, 2),
            Transition::new(-7981200, 3),
            Transition::new(977493600, 4),
        ],
        &{
            const V: [LocalTimeType; 5] = [
                match LocalTimeType::new(-51420, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(34980, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"+10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, false, Some(b"ChST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(36000, false, Some(b"ChST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_TAHITI: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-1806674504, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(-35896, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-36000, false, Some(b"-10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(-36000, false, Some(b"-10")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_TARAWA: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2177494324, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(41524, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_TONGATAPU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-767189952, 1),
            Transition::new(-284041200, 2),
            Transition::new(939214800, 3),
            Transition::new(953384400, 2),
            Transition::new(973342800, 3),
            Transition::new(980596800, 2),
            Transition::new(1004792400, 3),
            Transition::new(1012046400, 2),
            Transition::new(1478350800, 3),
            Transition::new(1484398800, 2),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(44352, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(44400, false, Some(b"+1220")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(50400, true, Some(b"+14")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(46800, false, Some(b"+13")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_WAKE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2177492788, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(39988, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PACIFIC_WALLIS: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[Transition::new(-2177496920, 1)],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(44120, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(43200, false, Some(b"+12")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const POLAND: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840145840, 1),
            Transition::new(-1717032240, 3),
            Transition::new(-1693706400, 2),
            Transition::new(-1680483600, 3),
            Transition::new(-1663455600, 2),
            Transition::new(-1650150000, 3),
            Transition::new(-1632006000, 2),
            Transition::new(-1618700400, 5),
            Transition::new(-1600473600, 4),
            Transition::new(-1587168000, 5),
            Transition::new(-1501725600, 3),
            Transition::new(-931734000, 2),
            Transition::new(-857257200, 3),
            Transition::new(-844556400, 2),
            Transition::new(-828226800, 3),
            Transition::new(-812502000, 2),
            Transition::new(-796608000, 3),
            Transition::new(-778726800, 2),
            Transition::new(-762660000, 3),
            Transition::new(-748486800, 2),
            Transition::new(-733273200, 3),
            Transition::new(-715215600, 2),
            Transition::new(-701910000, 3),
            Transition::new(-684975600, 2),
            Transition::new(-670460400, 3),
            Transition::new(-654130800, 2),
            Transition::new(-639010800, 3),
            Transition::new(-397094400, 2),
            Transition::new(-386812800, 3),
            Transition::new(-371088000, 2),
            Transition::new(-355363200, 3),
            Transition::new(-334195200, 2),
            Transition::new(-323308800, 3),
            Transition::new(-307584000, 2),
            Transition::new(-291859200, 3),
            Transition::new(-271296000, 2),
            Transition::new(-260409600, 3),
            Transition::new(-239846400, 2),
            Transition::new(-228960000, 3),
            Transition::new(-208396800, 2),
            Transition::new(-197510400, 3),
            Transition::new(-176342400, 2),
            Transition::new(-166060800, 3),
            Transition::new(228873600, 2),
            Transition::new(243993600, 3),
            Transition::new(260323200, 2),
            Transition::new(276048000, 3),
            Transition::new(291772800, 2),
            Transition::new(307497600, 3),
            Transition::new(323827200, 2),
            Transition::new(338947200, 3),
            Transition::new(354672000, 2),
            Transition::new(370396800, 3),
            Transition::new(386121600, 2),
            Transition::new(401846400, 3),
            Transition::new(417571200, 2),
            Transition::new(433296000, 3),
            Transition::new(449020800, 2),
            Transition::new(465350400, 3),
            Transition::new(481075200, 2),
            Transition::new(496800000, 3),
            Transition::new(512524800, 2),
            Transition::new(528249600, 3),
            Transition::new(543974400, 2),
            Transition::new(559699200, 3),
            Transition::new(575427600, 2),
            Transition::new(591152400, 3),
            Transition::new(606877200, 2),
            Transition::new(622602000, 3),
            Transition::new(638326800, 2),
            Transition::new(654656400, 3),
            Transition::new(670381200, 2),
            Transition::new(686106000, 3),
            Transition::new(701830800, 2),
            Transition::new(717555600, 3),
            Transition::new(733280400, 2),
            Transition::new(749005200, 3),
            Transition::new(764730000, 2),
            Transition::new(780454800, 3),
            Transition::new(796179600, 2),
            Transition::new(811904400, 3),
            Transition::new(828234000, 2),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(5040, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(5040, false, Some(b"WMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(3600, false, Some(b"CET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(7200, true, Some(b"CEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    10800,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PORTUGAL: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2713908195, 0),
            Transition::new(-1830384000, 2),
            Transition::new(-1689555600, 1),
            Transition::new(-1677801600, 2),
            Transition::new(-1667437200, 1),
            Transition::new(-1647738000, 2),
            Transition::new(-1635814800, 1),
            Transition::new(-1616202000, 2),
            Transition::new(-1604365200, 1),
            Transition::new(-1584666000, 2),
            Transition::new(-1572742800, 1),
            Transition::new(-1553043600, 2),
            Transition::new(-1541206800, 1),
            Transition::new(-1521507600, 2),
            Transition::new(-1442451600, 1),
            Transition::new(-1426813200, 2),
            Transition::new(-1379293200, 1),
            Transition::new(-1364778000, 2),
            Transition::new(-1348448400, 1),
            Transition::new(-1333328400, 2),
            Transition::new(-1316394000, 1),
            Transition::new(-1301274000, 2),
            Transition::new(-1284339600, 1),
            Transition::new(-1269824400, 2),
            Transition::new(-1221440400, 1),
            Transition::new(-1206925200, 2),
            Transition::new(-1191200400, 1),
            Transition::new(-1175475600, 2),
            Transition::new(-1127696400, 1),
            Transition::new(-1111971600, 2),
            Transition::new(-1096851600, 1),
            Transition::new(-1080522000, 2),
            Transition::new(-1063587600, 1),
            Transition::new(-1049072400, 2),
            Transition::new(-1033347600, 1),
            Transition::new(-1017622800, 2),
            Transition::new(-1002502800, 1),
            Transition::new(-986173200, 2),
            Transition::new(-969238800, 1),
            Transition::new(-950490000, 2),
            Transition::new(-942022800, 1),
            Transition::new(-922669200, 2),
            Transition::new(-906944400, 1),
            Transition::new(-891133200, 2),
            Transition::new(-877309200, 1),
            Transition::new(-873684000, 3),
            Transition::new(-864007200, 1),
            Transition::new(-857955600, 2),
            Transition::new(-845859600, 1),
            Transition::new(-842839200, 3),
            Transition::new(-831348000, 1),
            Transition::new(-825901200, 2),
            Transition::new(-814410000, 1),
            Transition::new(-810784800, 3),
            Transition::new(-799898400, 1),
            Transition::new(-794451600, 2),
            Transition::new(-782960400, 1),
            Transition::new(-779335200, 3),
            Transition::new(-768448800, 1),
            Transition::new(-763002000, 2),
            Transition::new(-749091600, 1),
            Transition::new(-733366800, 2),
            Transition::new(-717631200, 1),
            Transition::new(-701906400, 2),
            Transition::new(-686181600, 1),
            Transition::new(-670456800, 2),
            Transition::new(-654732000, 1),
            Transition::new(-639007200, 2),
            Transition::new(-623282400, 1),
            Transition::new(-607557600, 2),
            Transition::new(-591832800, 1),
            Transition::new(-575503200, 2),
            Transition::new(-559778400, 1),
            Transition::new(-544053600, 2),
            Transition::new(-528328800, 1),
            Transition::new(-512604000, 2),
            Transition::new(-496879200, 1),
            Transition::new(-481154400, 2),
            Transition::new(-465429600, 1),
            Transition::new(-449704800, 2),
            Transition::new(-433980000, 1),
            Transition::new(-417650400, 2),
            Transition::new(-401925600, 1),
            Transition::new(-386200800, 2),
            Transition::new(-370476000, 1),
            Transition::new(-354751200, 2),
            Transition::new(-339026400, 1),
            Transition::new(-323301600, 2),
            Transition::new(-307576800, 1),
            Transition::new(-291852000, 2),
            Transition::new(-276127200, 1),
            Transition::new(-260402400, 2),
            Transition::new(-244677600, 1),
            Transition::new(-228348000, 2),
            Transition::new(-212623200, 1),
            Transition::new(-196898400, 2),
            Transition::new(-181173600, 1),
            Transition::new(-165448800, 2),
            Transition::new(-149724000, 1),
            Transition::new(-133999200, 2),
            Transition::new(-118274400, 4),
            Transition::new(212544000, 2),
            Transition::new(228268800, 1),
            Transition::new(243993600, 2),
            Transition::new(260323200, 1),
            Transition::new(276048000, 2),
            Transition::new(291772800, 1),
            Transition::new(307501200, 2),
            Transition::new(323222400, 1),
            Transition::new(338950800, 2),
            Transition::new(354675600, 1),
            Transition::new(370400400, 2),
            Transition::new(386125200, 1),
            Transition::new(401850000, 2),
            Transition::new(417578400, 1),
            Transition::new(433299600, 2),
            Transition::new(449024400, 1),
            Transition::new(465354000, 2),
            Transition::new(481078800, 1),
            Transition::new(496803600, 2),
            Transition::new(512528400, 1),
            Transition::new(528253200, 2),
            Transition::new(543978000, 1),
            Transition::new(559702800, 2),
            Transition::new(575427600, 1),
            Transition::new(591152400, 2),
            Transition::new(606877200, 1),
            Transition::new(622602000, 2),
            Transition::new(638326800, 1),
            Transition::new(654656400, 2),
            Transition::new(670381200, 1),
            Transition::new(686106000, 2),
            Transition::new(701830800, 1),
            Transition::new(717555600, 4),
            Transition::new(733280400, 5),
            Transition::new(749005200, 4),
            Transition::new(764730000, 5),
            Transition::new(780454800, 4),
            Transition::new(796179600, 5),
            Transition::new(811904400, 4),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(-2205, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"WEMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, false, Some(b"CET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, true, Some(b"CEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"WET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"WEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PRC: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177481943, 2),
            Transition::new(-1600675200, 1),
            Transition::new(-1585904400, 2),
            Transition::new(-933667200, 1),
            Transition::new(-922093200, 2),
            Transition::new(-908870400, 1),
            Transition::new(-888829200, 2),
            Transition::new(-881049600, 1),
            Transition::new(-767869200, 2),
            Transition::new(-745833600, 1),
            Transition::new(-733827600, 2),
            Transition::new(-716889600, 1),
            Transition::new(-699613200, 2),
            Transition::new(-683884800, 1),
            Transition::new(-670669200, 2),
            Transition::new(-652348800, 1),
            Transition::new(-650019600, 2),
            Transition::new(515527200, 1),
            Transition::new(527014800, 2),
            Transition::new(545162400, 1),
            Transition::new(558464400, 2),
            Transition::new(577216800, 1),
            Transition::new(589914000, 2),
            Transition::new(608666400, 1),
            Transition::new(621968400, 2),
            Transition::new(640116000, 1),
            Transition::new(653418000, 2),
            Transition::new(671565600, 1),
            Transition::new(684867600, 2),
        ],
        &{
            const V: [LocalTimeType; 3] = [
                match LocalTimeType::new(29143, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const PST_8_PDT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1633269600, 1),
            Transition::new(-1615129200, 0),
            Transition::new(-1601820000, 1),
            Transition::new(-1583679600, 0),
            Transition::new(-880207200, 2),
            Transition::new(-769395600, 3),
            Transition::new(-765385200, 0),
            Transition::new(-84376800, 1),
            Transition::new(-68655600, 0),
            Transition::new(-52927200, 1),
            Transition::new(-37206000, 0),
            Transition::new(-21477600, 1),
            Transition::new(-5756400, 0),
            Transition::new(9972000, 1),
            Transition::new(25693200, 0),
            Transition::new(41421600, 1),
            Transition::new(57747600, 0),
            Transition::new(73476000, 1),
            Transition::new(89197200, 0),
            Transition::new(104925600, 1),
            Transition::new(120646800, 0),
            Transition::new(126698400, 1),
            Transition::new(152096400, 0),
            Transition::new(162381600, 1),
            Transition::new(183546000, 0),
            Transition::new(199274400, 1),
            Transition::new(215600400, 0),
            Transition::new(230724000, 1),
            Transition::new(247050000, 0),
            Transition::new(262778400, 1),
            Transition::new(278499600, 0),
            Transition::new(294228000, 1),
            Transition::new(309949200, 0),
            Transition::new(325677600, 1),
            Transition::new(341398800, 0),
            Transition::new(357127200, 1),
            Transition::new(372848400, 0),
            Transition::new(388576800, 1),
            Transition::new(404902800, 0),
            Transition::new(420026400, 1),
            Transition::new(436352400, 0),
            Transition::new(452080800, 1),
            Transition::new(467802000, 0),
            Transition::new(483530400, 1),
            Transition::new(499251600, 0),
            Transition::new(514980000, 1),
            Transition::new(530701200, 0),
            Transition::new(544615200, 1),
            Transition::new(562150800, 0),
            Transition::new(576064800, 1),
            Transition::new(594205200, 0),
            Transition::new(607514400, 1),
            Transition::new(625654800, 0),
            Transition::new(638964000, 1),
            Transition::new(657104400, 0),
            Transition::new(671018400, 1),
            Transition::new(688554000, 0),
            Transition::new(702468000, 1),
            Transition::new(720003600, 0),
            Transition::new(733917600, 1),
            Transition::new(752058000, 0),
            Transition::new(765367200, 1),
            Transition::new(783507600, 0),
            Transition::new(796816800, 1),
            Transition::new(814957200, 0),
            Transition::new(828871200, 1),
            Transition::new(846406800, 0),
            Transition::new(860320800, 1),
            Transition::new(877856400, 0),
            Transition::new(891770400, 1),
            Transition::new(909306000, 0),
            Transition::new(923220000, 1),
            Transition::new(941360400, 0),
            Transition::new(954669600, 1),
            Transition::new(972810000, 0),
            Transition::new(986119200, 1),
            Transition::new(1004259600, 0),
            Transition::new(1018173600, 1),
            Transition::new(1035709200, 0),
            Transition::new(1049623200, 1),
            Transition::new(1067158800, 0),
            Transition::new(1081072800, 1),
            Transition::new(1099213200, 0),
            Transition::new(1112522400, 1),
            Transition::new(1130662800, 0),
            Transition::new(1143972000, 1),
            Transition::new(1162112400, 0),
            Transition::new(1173607200, 1),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(-28800, false, Some(b"PST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PWT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(-25200, true, Some(b"PPT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(-28800, false, Some(b"PST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(-25200, true, Some(b"PDT")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 2, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(11, 1, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ROC: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2335248360, 1),
            Transition::new(-1017820800, 2),
            Transition::new(-766224000, 1),
            Transition::new(-745833600, 3),
            Transition::new(-733827600, 1),
            Transition::new(-716889600, 3),
            Transition::new(-699613200, 1),
            Transition::new(-683884800, 3),
            Transition::new(-670669200, 1),
            Transition::new(-652348800, 3),
            Transition::new(-639133200, 1),
            Transition::new(-620812800, 3),
            Transition::new(-607597200, 1),
            Transition::new(-589276800, 3),
            Transition::new(-576061200, 1),
            Transition::new(-562924800, 3),
            Transition::new(-541760400, 1),
            Transition::new(-528710400, 3),
            Transition::new(-510224400, 1),
            Transition::new(-497174400, 3),
            Transition::new(-478688400, 1),
            Transition::new(-465638400, 3),
            Transition::new(-449830800, 1),
            Transition::new(-434016000, 3),
            Transition::new(-418208400, 1),
            Transition::new(-402480000, 3),
            Transition::new(-386672400, 1),
            Transition::new(-370944000, 3),
            Transition::new(-355136400, 1),
            Transition::new(-339408000, 3),
            Transition::new(-323600400, 1),
            Transition::new(-302515200, 3),
            Transition::new(-291978000, 1),
            Transition::new(-270979200, 3),
            Transition::new(-260442000, 1),
            Transition::new(133977600, 3),
            Transition::new(149785200, 1),
            Transition::new(165513600, 3),
            Transition::new(181321200, 1),
            Transition::new(299606400, 3),
            Transition::new(307551600, 1),
        ],
        &{
            const V: [LocalTimeType; 4] = [
                match LocalTimeType::new(29160, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"JST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, true, Some(b"CDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"CST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const ROK: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-1948782472, 1),
            Transition::new(-1830414600, 2),
            Transition::new(-767350800, 4),
            Transition::new(-681210000, 3),
            Transition::new(-672228000, 4),
            Transition::new(-654771600, 3),
            Transition::new(-640864800, 4),
            Transition::new(-623408400, 3),
            Transition::new(-609415200, 4),
            Transition::new(-588848400, 3),
            Transition::new(-577965600, 4),
            Transition::new(-498128400, 1),
            Transition::new(-462702600, 5),
            Transition::new(-451733400, 1),
            Transition::new(-429784200, 5),
            Transition::new(-418296600, 1),
            Transition::new(-399544200, 5),
            Transition::new(-387451800, 1),
            Transition::new(-368094600, 5),
            Transition::new(-356002200, 1),
            Transition::new(-336645000, 5),
            Transition::new(-324552600, 1),
            Transition::new(-305195400, 5),
            Transition::new(-293103000, 1),
            Transition::new(-264933000, 4),
            Transition::new(547578000, 3),
            Transition::new(560883600, 4),
            Transition::new(579027600, 3),
            Transition::new(592333200, 4),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(30472, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(30600, false, Some(b"KST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"JST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(36000, true, Some(b"KDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"KST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(34200, true, Some(b"KDT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(32400, false, Some(b"KST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const SINGAPORE: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2177477725, 1),
            Transition::new(-2038200925, 2),
            Transition::new(-1167634800, 3),
            Transition::new(-1073028000, 4),
            Transition::new(-894180000, 5),
            Transition::new(-879665400, 6),
            Transition::new(-767005200, 5),
            Transition::new(378664200, 7),
        ],
        &{
            const V: [LocalTimeType; 8] = [
                match LocalTimeType::new(24925, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(24925, false, Some(b"SMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(25200, false, Some(b"+07")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(26400, true, Some(b"+0720")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(26400, false, Some(b"+0720")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(27000, false, Some(b"+0730")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(32400, false, Some(b"+09")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(28800, false, Some(b"+08")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const TURKEY: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840147752, 1),
            Transition::new(-1869875816, 3),
            Transition::new(-1693706400, 2),
            Transition::new(-1680490800, 3),
            Transition::new(-1570413600, 2),
            Transition::new(-1552186800, 3),
            Transition::new(-1538359200, 2),
            Transition::new(-1522551600, 3),
            Transition::new(-1507514400, 2),
            Transition::new(-1490583600, 3),
            Transition::new(-1440208800, 2),
            Transition::new(-1428030000, 3),
            Transition::new(-1409709600, 2),
            Transition::new(-1396494000, 3),
            Transition::new(-931053600, 2),
            Transition::new(-922676400, 3),
            Transition::new(-917834400, 2),
            Transition::new(-892436400, 3),
            Transition::new(-875844000, 2),
            Transition::new(-764737200, 3),
            Transition::new(-744343200, 2),
            Transition::new(-733806000, 3),
            Transition::new(-716436000, 2),
            Transition::new(-701924400, 3),
            Transition::new(-684986400, 2),
            Transition::new(-670474800, 3),
            Transition::new(-654141600, 2),
            Transition::new(-639025200, 3),
            Transition::new(-622087200, 2),
            Transition::new(-606970800, 3),
            Transition::new(-590032800, 2),
            Transition::new(-575521200, 3),
            Transition::new(-235620000, 2),
            Transition::new(-194842800, 3),
            Transition::new(-177732000, 2),
            Transition::new(-165726000, 3),
            Transition::new(107910000, 2),
            Transition::new(121215600, 3),
            Transition::new(133920000, 2),
            Transition::new(152665200, 3),
            Transition::new(164678400, 2),
            Transition::new(184114800, 3),
            Transition::new(196214400, 2),
            Transition::new(215564400, 3),
            Transition::new(228873600, 2),
            Transition::new(245804400, 3),
            Transition::new(260323200, 2),
            Transition::new(267915600, 4),
            Transition::new(428454000, 5),
            Transition::new(433893600, 4),
            Transition::new(468111600, 3),
            Transition::new(482799600, 2),
            Transition::new(496710000, 3),
            Transition::new(512521200, 2),
            Transition::new(528246000, 3),
            Transition::new(543970800, 2),
            Transition::new(559695600, 3),
            Transition::new(575420400, 2),
            Transition::new(591145200, 3),
            Transition::new(606870000, 2),
            Transition::new(622594800, 3),
            Transition::new(638319600, 2),
            Transition::new(654649200, 3),
            Transition::new(670374000, 2),
            Transition::new(686098800, 3),
            Transition::new(701823600, 2),
            Transition::new(717548400, 3),
            Transition::new(733273200, 2),
            Transition::new(748998000, 3),
            Transition::new(764118000, 2),
            Transition::new(780447600, 3),
            Transition::new(796172400, 2),
            Transition::new(811897200, 3),
            Transition::new(828226800, 2),
            Transition::new(846370800, 3),
            Transition::new(859676400, 2),
            Transition::new(877820400, 3),
            Transition::new(891126000, 2),
            Transition::new(909270000, 3),
            Transition::new(922575600, 2),
            Transition::new(941324400, 3),
            Transition::new(954025200, 2),
            Transition::new(972774000, 3),
            Transition::new(985474800, 2),
            Transition::new(1004223600, 3),
            Transition::new(1017529200, 2),
            Transition::new(1035673200, 3),
            Transition::new(1048978800, 2),
            Transition::new(1067122800, 3),
            Transition::new(1080428400, 2),
            Transition::new(1099177200, 3),
            Transition::new(1111878000, 2),
            Transition::new(1130626800, 3),
            Transition::new(1143327600, 2),
            Transition::new(1162076400, 3),
            Transition::new(1174784400, 2),
            Transition::new(1193533200, 3),
            Transition::new(1206838800, 2),
            Transition::new(1224982800, 3),
            Transition::new(1238288400, 2),
            Transition::new(1256432400, 3),
            Transition::new(1269738000, 2),
            Transition::new(1288486800, 3),
            Transition::new(1301274000, 2),
            Transition::new(1319936400, 3),
            Transition::new(1332637200, 2),
            Transition::new(1351386000, 3),
            Transition::new(1364691600, 2),
            Transition::new(1382835600, 3),
            Transition::new(1396227600, 2),
            Transition::new(1414285200, 3),
            Transition::new(1427590800, 2),
            Transition::new(1446944400, 3),
            Transition::new(1459040400, 2),
            Transition::new(1473195600, 4),
        ],
        &{
            const V: [LocalTimeType; 6] = [
                match LocalTimeType::new(6952, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7016, false, Some(b"IMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"+04")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"+03")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const UCT: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[],
        &{
            const V: [LocalTimeType; 1] = [match LocalTimeType::new(0, false, Some(b"UTC")) {
                Ok(v) => v,
                Err(e) => panic!("{}", e.0),
            }];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(0, false, Some(b"UTC")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const WET: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(228877200, 1),
            Transition::new(243997200, 0),
            Transition::new(260326800, 1),
            Transition::new(276051600, 0),
            Transition::new(291776400, 1),
            Transition::new(307501200, 0),
            Transition::new(323830800, 1),
            Transition::new(338950800, 0),
            Transition::new(354675600, 1),
            Transition::new(370400400, 0),
            Transition::new(386125200, 1),
            Transition::new(401850000, 0),
            Transition::new(417574800, 1),
            Transition::new(433299600, 0),
            Transition::new(449024400, 1),
            Transition::new(465354000, 0),
            Transition::new(481078800, 1),
            Transition::new(496803600, 0),
            Transition::new(512528400, 1),
            Transition::new(528253200, 0),
            Transition::new(543978000, 1),
            Transition::new(559702800, 0),
            Transition::new(575427600, 1),
            Transition::new(591152400, 0),
            Transition::new(606877200, 1),
            Transition::new(622602000, 0),
            Transition::new(638326800, 1),
            Transition::new(654656400, 0),
            Transition::new(670381200, 1),
            Transition::new(686106000, 0),
            Transition::new(701830800, 1),
            Transition::new(717555600, 0),
            Transition::new(733280400, 1),
            Transition::new(749005200, 0),
            Transition::new(764730000, 1),
            Transition::new(780454800, 0),
            Transition::new(796179600, 1),
            Transition::new(811904400, 0),
            Transition::new(828234000, 1),
        ],
        &{
            const V: [LocalTimeType; 2] = [
                match LocalTimeType::new(0, false, Some(b"WET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(3600, true, Some(b"WEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule = TransitionRule::Alternate(
                match AlternateTime::new(
                    match LocalTimeType::new(0, false, Some(b"WET")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    match LocalTimeType::new(3600, true, Some(b"WEST")) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    },
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(3, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    3600,
                    RuleDay::MonthWeekDay(match MonthWeekDay::new(10, 5, 0) {
                        Ok(v) => v,
                        Err(e) => panic!("{}", e.0),
                    }),
                    7200,
                ) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            );
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };

    pub(crate) const W_SU: TimeZoneRef<'static> = match TimeZoneRef::<'static>::new(
        &[
            Transition::new(-2840149817, 1),
            Transition::new(-1688265017, 3),
            Transition::new(-1656819079, 2),
            Transition::new(-1641353479, 3),
            Transition::new(-1627965079, 4),
            Transition::new(-1618716679, 2),
            Transition::new(-1596429079, 4),
            Transition::new(-1593820800, 5),
            Transition::new(-1589860800, 6),
            Transition::new(-1542427200, 5),
            Transition::new(-1539493200, 7),
            Transition::new(-1525323600, 5),
            Transition::new(-1522728000, 6),
            Transition::new(-1491188400, 8),
            Transition::new(-1247536800, 6),
            Transition::new(354920400, 5),
            Transition::new(370728000, 6),
            Transition::new(386456400, 5),
            Transition::new(402264000, 6),
            Transition::new(417992400, 5),
            Transition::new(433800000, 6),
            Transition::new(449614800, 5),
            Transition::new(465346800, 6),
            Transition::new(481071600, 5),
            Transition::new(496796400, 6),
            Transition::new(512521200, 5),
            Transition::new(528246000, 6),
            Transition::new(543970800, 5),
            Transition::new(559695600, 6),
            Transition::new(575420400, 5),
            Transition::new(591145200, 6),
            Transition::new(606870000, 5),
            Transition::new(622594800, 6),
            Transition::new(638319600, 5),
            Transition::new(654649200, 6),
            Transition::new(670374000, 9),
            Transition::new(686102400, 8),
            Transition::new(695779200, 6),
            Transition::new(701823600, 5),
            Transition::new(717548400, 6),
            Transition::new(733273200, 5),
            Transition::new(748998000, 6),
            Transition::new(764722800, 5),
            Transition::new(780447600, 6),
            Transition::new(796172400, 5),
            Transition::new(811897200, 6),
            Transition::new(828226800, 5),
            Transition::new(846370800, 6),
            Transition::new(859676400, 5),
            Transition::new(877820400, 6),
            Transition::new(891126000, 5),
            Transition::new(909270000, 6),
            Transition::new(922575600, 5),
            Transition::new(941324400, 6),
            Transition::new(954025200, 5),
            Transition::new(972774000, 6),
            Transition::new(985474800, 5),
            Transition::new(1004223600, 6),
            Transition::new(1017529200, 5),
            Transition::new(1035673200, 6),
            Transition::new(1048978800, 5),
            Transition::new(1067122800, 6),
            Transition::new(1080428400, 5),
            Transition::new(1099177200, 6),
            Transition::new(1111878000, 5),
            Transition::new(1130626800, 6),
            Transition::new(1143327600, 5),
            Transition::new(1162076400, 6),
            Transition::new(1174777200, 5),
            Transition::new(1193526000, 6),
            Transition::new(1206831600, 5),
            Transition::new(1224975600, 6),
            Transition::new(1238281200, 5),
            Transition::new(1256425200, 6),
            Transition::new(1269730800, 5),
            Transition::new(1288479600, 6),
            Transition::new(1301180400, 10),
            Transition::new(1414274400, 6),
        ],
        &{
            const V: [LocalTimeType; 11] = [
                match LocalTimeType::new(9017, false, Some(b"LMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9017, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(12679, true, Some(b"MST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(9079, false, Some(b"MMT")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(16279, true, Some(b"MDST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, true, Some(b"MSD")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(18000, true, Some(b"+05")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(7200, false, Some(b"EET")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(10800, true, Some(b"EEST")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
                match LocalTimeType::new(14400, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                },
            ];
            V
        },
        &[],
        &Some({
            const V: TransitionRule =
                TransitionRule::Fixed(match LocalTimeType::new(10800, false, Some(b"MSK")) {
                    Ok(v) => v,
                    Err(e) => panic!("{}", e.0),
                });
            V
        }),
    ) {
        Ok(v) => v,
        Err(e) => panic!("{}", e.0),
    };
}

#[cfg(feature = "binary")]
mod raw_tzdata {
    pub(crate) const AFRICA_ABIDJAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 146, 230, 146, 72, 1, 255, 255, 252, 56, 0,
        0, 0, 0, 0, 0, 0, 4, 76, 77, 84, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_ACCRA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        61, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 154, 29, 148, 52, 255, 255, 255, 255, 161,
        192, 180, 128, 255, 255, 255, 255, 161, 242, 228, 240, 255, 255, 255, 255, 163, 52, 151,
        160, 255, 255, 255, 255, 163, 213, 105, 240, 255, 255, 255, 255, 165, 21, 203, 32, 255,
        255, 255, 255, 165, 182, 157, 112, 255, 255, 255, 255, 166, 246, 254, 160, 255, 255, 255,
        255, 167, 151, 208, 240, 255, 255, 255, 255, 168, 216, 50, 32, 255, 255, 255, 255, 169,
        121, 4, 112, 255, 255, 255, 255, 170, 186, 183, 32, 255, 255, 255, 255, 171, 91, 137, 112,
        255, 255, 255, 255, 172, 155, 234, 160, 255, 255, 255, 255, 173, 60, 188, 240, 255, 255,
        255, 255, 174, 125, 30, 32, 255, 255, 255, 255, 175, 29, 240, 112, 255, 255, 255, 255, 176,
        94, 81, 160, 255, 255, 255, 255, 176, 255, 35, 240, 255, 255, 255, 255, 178, 64, 214, 160,
        255, 255, 255, 255, 178, 225, 168, 240, 255, 255, 255, 255, 180, 34, 10, 32, 255, 255, 255,
        255, 180, 194, 220, 112, 255, 255, 255, 255, 182, 3, 61, 160, 255, 255, 255, 255, 182, 164,
        15, 240, 255, 255, 255, 255, 183, 228, 113, 32, 255, 255, 255, 255, 184, 133, 67, 112, 255,
        255, 255, 255, 185, 198, 246, 32, 255, 255, 255, 255, 186, 103, 200, 112, 255, 255, 255,
        255, 187, 168, 41, 160, 255, 255, 255, 255, 188, 72, 251, 240, 255, 255, 255, 255, 189,
        137, 93, 32, 255, 255, 255, 255, 190, 42, 47, 112, 255, 255, 255, 255, 191, 106, 144, 160,
        255, 255, 255, 255, 192, 11, 98, 240, 255, 255, 255, 255, 193, 77, 21, 160, 255, 255, 255,
        255, 193, 237, 231, 240, 255, 255, 255, 255, 195, 46, 73, 32, 255, 255, 255, 255, 195, 207,
        27, 112, 255, 255, 255, 255, 197, 15, 124, 160, 255, 255, 255, 255, 197, 176, 78, 240, 255,
        255, 255, 255, 198, 240, 176, 32, 255, 255, 255, 255, 199, 145, 130, 112, 255, 255, 255,
        255, 200, 49, 12, 160, 255, 255, 255, 255, 201, 116, 7, 112, 255, 255, 255, 255, 202, 18,
        64, 32, 255, 255, 255, 255, 203, 85, 58, 240, 255, 255, 255, 255, 203, 135, 60, 128, 255,
        255, 255, 255, 210, 225, 211, 120, 255, 255, 255, 255, 219, 161, 219, 32, 255, 255, 255,
        255, 220, 66, 171, 24, 255, 255, 255, 255, 221, 131, 14, 160, 255, 255, 255, 255, 222, 35,
        222, 152, 255, 255, 255, 255, 223, 101, 147, 160, 255, 255, 255, 255, 224, 6, 99, 152, 255,
        255, 255, 255, 225, 70, 199, 32, 255, 255, 255, 255, 225, 231, 151, 24, 255, 255, 255, 255,
        227, 39, 250, 160, 255, 255, 255, 255, 227, 200, 202, 152, 255, 255, 255, 255, 229, 9, 46,
        32, 255, 255, 255, 255, 229, 169, 254, 24, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 3, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 255, 255, 255, 204, 0, 0, 0, 0, 4, 176, 1, 4,
        0, 0, 0, 0, 0, 10, 0, 0, 7, 8, 0, 14, 0, 0, 7, 8, 1, 14, 76, 77, 84, 0, 43, 48, 48, 50, 48,
        0, 71, 77, 84, 0, 43, 48, 48, 51, 48, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_ADDIS_ABABA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 67, 232, 25, 184, 255, 255, 255, 255, 192,
        175, 242, 152, 1, 2, 0, 0, 36, 72, 0, 0, 0, 0, 36, 104, 0, 4, 0, 0, 42, 48, 0, 9, 76, 77,
        84, 0, 65, 68, 77, 84, 0, 69, 65, 84, 0, 10, 69, 65, 84, 45, 51, 10,
    ];
    pub(crate) const AFRICA_ALGIERS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        34, 0, 0, 0, 6, 0, 0, 0, 26, 255, 255, 255, 255, 107, 201, 155, 36, 255, 255, 255, 255,
        145, 96, 80, 79, 255, 255, 255, 255, 155, 71, 120, 240, 255, 255, 255, 255, 155, 215, 44,
        112, 255, 255, 255, 255, 156, 188, 145, 112, 255, 255, 255, 255, 157, 192, 72, 240, 255,
        255, 255, 255, 158, 137, 254, 112, 255, 255, 255, 255, 159, 160, 42, 240, 255, 255, 255,
        255, 160, 96, 165, 240, 255, 255, 255, 255, 161, 128, 12, 240, 255, 255, 255, 255, 162, 46,
        18, 240, 255, 255, 255, 255, 163, 122, 76, 240, 255, 255, 255, 255, 164, 53, 129, 240, 255,
        255, 255, 255, 164, 184, 6, 112, 255, 255, 255, 255, 198, 255, 6, 112, 255, 255, 255, 255,
        199, 88, 186, 128, 255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255, 207, 146, 52,
        16, 255, 255, 255, 255, 208, 138, 0, 0, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255,
        255, 255, 210, 78, 36, 112, 255, 255, 255, 255, 212, 75, 7, 112, 255, 255, 255, 255, 229,
        206, 211, 0, 255, 255, 255, 255, 243, 92, 176, 240, 0, 0, 0, 0, 2, 120, 193, 240, 0, 0, 0,
        0, 3, 67, 200, 240, 0, 0, 0, 0, 13, 207, 215, 0, 0, 0, 0, 0, 14, 173, 68, 240, 0, 0, 0, 0,
        15, 120, 90, 0, 0, 0, 0, 0, 16, 104, 89, 16, 0, 0, 0, 0, 18, 118, 67, 112, 0, 0, 0, 0, 19,
        102, 66, 128, 0, 0, 0, 0, 20, 95, 124, 16, 0, 0, 0, 0, 21, 79, 95, 0, 1, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 5, 4, 5, 4, 5, 3, 5, 3, 2, 3, 2, 5, 4, 5, 3, 2, 3, 5, 0, 0, 2,
        220, 0, 0, 0, 0, 2, 49, 0, 4, 0, 0, 14, 16, 1, 8, 0, 0, 0, 0, 0, 13, 0, 0, 28, 32, 1, 17,
        0, 0, 14, 16, 0, 22, 76, 77, 84, 0, 80, 77, 84, 0, 87, 69, 83, 84, 0, 87, 69, 84, 0, 67,
        69, 83, 84, 0, 67, 69, 84, 0, 10, 67, 69, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_ASMARA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 67, 232, 25, 140, 255, 255, 255, 255, 105,
        134, 183, 12, 255, 255, 255, 255, 192, 175, 242, 152, 1, 2, 3, 0, 0, 36, 116, 0, 0, 0, 0,
        36, 116, 0, 4, 0, 0, 36, 104, 0, 8, 0, 0, 42, 48, 0, 13, 76, 77, 84, 0, 65, 77, 84, 0, 65,
        68, 77, 84, 0, 69, 65, 84, 0, 10, 69, 65, 84, 45, 51, 10,
    ];
    pub(crate) const AFRICA_BAMAKO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 230, 150, 0, 255, 255, 255, 255, 188,
        146, 184, 128, 255, 255, 255, 255, 238, 17, 135, 16, 1, 2, 1, 255, 255, 248, 128, 0, 0, 0,
        0, 0, 0, 0, 4, 255, 255, 241, 240, 0, 8, 76, 77, 84, 0, 71, 77, 84, 0, 45, 48, 49, 0, 10,
        71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_BANGUI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 146, 230, 125, 20, 1, 0, 0, 17, 108, 0, 0,
        0, 0, 14, 16, 0, 4, 76, 77, 84, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_BANJUL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 146, 230, 158, 28, 255, 255, 255, 255, 186,
        222, 103, 156, 255, 255, 255, 255, 203, 126, 16, 16, 1, 2, 3, 255, 255, 240, 100, 0, 0,
        255, 255, 240, 100, 0, 4, 255, 255, 241, 240, 0, 8, 0, 0, 0, 0, 0, 12, 76, 77, 84, 0, 66,
        77, 84, 0, 45, 48, 49, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_BISSAU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 230, 156, 144, 0, 0, 0, 0, 9, 103, 97,
        16, 1, 2, 255, 255, 241, 100, 0, 0, 255, 255, 241, 240, 0, 4, 0, 0, 0, 0, 0, 8, 76, 77, 84,
        0, 45, 48, 49, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_BLANTYRE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 146, 18, 44, 48, 255, 255, 255, 255, 151,
        151, 115, 234, 255, 255, 255, 255, 172, 73, 240, 116, 1, 2, 3, 0, 0, 32, 208, 0, 0, 0, 0,
        33, 22, 0, 4, 0, 0, 33, 12, 0, 4, 0, 0, 28, 32, 0, 8, 76, 77, 84, 0, 90, 77, 84, 0, 67, 65,
        84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_BRAZZAVILLE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 146, 230, 128, 44, 1, 0, 0, 14, 84, 0, 0, 0,
        0, 14, 16, 0, 4, 76, 77, 84, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_BUJUMBURA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 105, 134, 191, 248, 1, 0, 0, 27, 136, 0, 0,
        0, 0, 28, 32, 0, 4, 76, 77, 84, 0, 67, 65, 84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_CASABLANCA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        197, 0, 0, 0, 5, 0, 0, 0, 12, 255, 255, 255, 255, 150, 81, 249, 156, 255, 255, 255, 255,
        198, 255, 20, 128, 255, 255, 255, 255, 199, 88, 172, 112, 255, 255, 255, 255, 199, 217,
        237, 128, 255, 255, 255, 255, 210, 161, 50, 240, 255, 255, 255, 255, 219, 53, 164, 0, 255,
        255, 255, 255, 219, 238, 39, 240, 255, 255, 255, 255, 251, 37, 114, 64, 255, 255, 255, 255,
        251, 194, 239, 112, 0, 0, 0, 0, 8, 107, 132, 128, 0, 0, 0, 0, 8, 198, 109, 240, 0, 0, 0, 0,
        11, 232, 12, 0, 0, 0, 0, 0, 12, 97, 71, 240, 0, 0, 0, 0, 13, 201, 63, 128, 0, 0, 0, 0, 14,
        142, 242, 112, 0, 0, 0, 0, 15, 211, 81, 128, 0, 0, 0, 0, 16, 39, 163, 112, 0, 0, 0, 0, 26,
        183, 166, 0, 0, 0, 0, 0, 30, 24, 111, 240, 0, 0, 0, 0, 72, 65, 230, 128, 0, 0, 0, 0, 72,
        187, 34, 112, 0, 0, 0, 0, 74, 35, 26, 0, 0, 0, 0, 0, 74, 141, 213, 112, 0, 0, 0, 0, 75,
        220, 192, 128, 0, 0, 0, 0, 76, 93, 229, 112, 0, 0, 0, 0, 77, 151, 184, 128, 0, 0, 0, 0, 78,
        52, 140, 240, 0, 0, 0, 0, 79, 156, 160, 160, 0, 0, 0, 0, 80, 8, 187, 160, 0, 0, 0, 0, 80,
        49, 154, 32, 0, 0, 0, 0, 80, 103, 167, 160, 0, 0, 0, 0, 81, 124, 130, 160, 0, 0, 0, 0, 81,
        216, 203, 160, 0, 0, 0, 0, 82, 5, 158, 160, 0, 0, 0, 0, 82, 108, 115, 160, 0, 0, 0, 0, 83,
        55, 122, 160, 0, 0, 0, 0, 83, 174, 33, 160, 0, 0, 0, 0, 83, 220, 70, 32, 0, 0, 0, 0, 84,
        76, 85, 160, 0, 0, 0, 0, 85, 23, 92, 160, 0, 0, 0, 0, 85, 124, 224, 32, 0, 0, 0, 0, 85,
        171, 4, 160, 0, 0, 0, 0, 86, 44, 55, 160, 0, 0, 0, 0, 86, 247, 62, 160, 0, 0, 0, 0, 87, 83,
        135, 160, 0, 0, 0, 0, 87, 129, 172, 32, 0, 0, 0, 0, 88, 21, 84, 32, 0, 0, 0, 0, 88, 215,
        32, 160, 0, 0, 0, 0, 89, 32, 244, 160, 0, 0, 0, 0, 89, 88, 83, 160, 0, 0, 0, 0, 89, 245,
        54, 32, 0, 0, 0, 0, 90, 183, 2, 160, 0, 0, 0, 0, 90, 247, 156, 32, 0, 0, 0, 0, 91, 37, 192,
        160, 0, 0, 0, 0, 91, 213, 24, 32, 0, 0, 0, 0, 92, 206, 67, 160, 0, 0, 0, 0, 92, 252, 104,
        32, 0, 0, 0, 0, 94, 155, 176, 160, 0, 0, 0, 0, 94, 211, 15, 160, 0, 0, 0, 0, 96, 114, 88,
        32, 0, 0, 0, 0, 96, 160, 124, 160, 0, 0, 0, 0, 98, 63, 197, 32, 0, 0, 0, 0, 98, 119, 36,
        32, 0, 0, 0, 0, 100, 22, 108, 160, 0, 0, 0, 0, 100, 77, 203, 160, 0, 0, 0, 0, 101, 237, 20,
        32, 0, 0, 0, 0, 102, 27, 56, 160, 0, 0, 0, 0, 103, 186, 129, 32, 0, 0, 0, 0, 103, 241, 224,
        32, 0, 0, 0, 0, 105, 145, 40, 160, 0, 0, 0, 0, 105, 191, 77, 32, 0, 0, 0, 0, 107, 103, 208,
        32, 0, 0, 0, 0, 107, 149, 244, 160, 0, 0, 0, 0, 109, 53, 61, 32, 0, 0, 0, 0, 109, 108, 156,
        32, 0, 0, 0, 0, 111, 11, 228, 160, 0, 0, 0, 0, 111, 58, 9, 32, 0, 0, 0, 0, 112, 217, 81,
        160, 0, 0, 0, 0, 113, 16, 176, 160, 0, 0, 0, 0, 114, 175, 249, 32, 0, 0, 0, 0, 114, 231,
        88, 32, 0, 0, 0, 0, 116, 134, 160, 160, 0, 0, 0, 0, 116, 180, 197, 32, 0, 0, 0, 0, 118, 84,
        13, 160, 0, 0, 0, 0, 118, 139, 108, 160, 0, 0, 0, 0, 120, 42, 181, 32, 0, 0, 0, 0, 120, 88,
        217, 160, 0, 0, 0, 0, 121, 248, 34, 32, 0, 0, 0, 0, 122, 47, 129, 32, 0, 0, 0, 0, 123, 206,
        201, 160, 0, 0, 0, 0, 124, 6, 40, 160, 0, 0, 0, 0, 125, 165, 113, 32, 0, 0, 0, 0, 125, 211,
        149, 160, 0, 0, 0, 0, 127, 114, 222, 32, 0, 0, 0, 0, 127, 170, 61, 32, 0, 0, 0, 0, 129, 73,
        133, 160, 0, 0, 0, 0, 129, 128, 228, 160, 0, 0, 0, 0, 131, 32, 45, 32, 0, 0, 0, 0, 131, 78,
        81, 160, 0, 0, 0, 0, 132, 237, 154, 32, 0, 0, 0, 0, 133, 36, 249, 32, 0, 0, 0, 0, 134, 196,
        65, 160, 0, 0, 0, 0, 134, 242, 102, 32, 0, 0, 0, 0, 136, 145, 174, 160, 0, 0, 0, 0, 136,
        201, 13, 160, 0, 0, 0, 0, 138, 104, 86, 32, 0, 0, 0, 0, 138, 159, 181, 32, 0, 0, 0, 0, 140,
        62, 253, 160, 0, 0, 0, 0, 140, 109, 34, 32, 0, 0, 0, 0, 142, 12, 106, 160, 0, 0, 0, 0, 142,
        67, 201, 160, 0, 0, 0, 0, 143, 227, 18, 32, 0, 0, 0, 0, 144, 26, 113, 32, 0, 0, 0, 0, 145,
        185, 185, 160, 0, 0, 0, 0, 145, 231, 222, 32, 0, 0, 0, 0, 147, 135, 38, 160, 0, 0, 0, 0,
        147, 190, 133, 160, 0, 0, 0, 0, 149, 93, 206, 32, 0, 0, 0, 0, 149, 139, 242, 160, 0, 0, 0,
        0, 151, 43, 59, 32, 0, 0, 0, 0, 151, 98, 154, 32, 0, 0, 0, 0, 153, 1, 226, 160, 0, 0, 0, 0,
        153, 57, 65, 160, 0, 0, 0, 0, 154, 216, 138, 32, 0, 0, 0, 0, 155, 6, 174, 160, 0, 0, 0, 0,
        156, 165, 247, 32, 0, 0, 0, 0, 156, 221, 86, 32, 0, 0, 0, 0, 158, 124, 158, 160, 0, 0, 0,
        0, 158, 179, 253, 160, 0, 0, 0, 0, 160, 83, 70, 32, 0, 0, 0, 0, 160, 129, 106, 160, 0, 0,
        0, 0, 162, 32, 179, 32, 0, 0, 0, 0, 162, 88, 18, 32, 0, 0, 0, 0, 163, 247, 90, 160, 0, 0,
        0, 0, 164, 37, 127, 32, 0, 0, 0, 0, 165, 196, 199, 160, 0, 0, 0, 0, 165, 252, 38, 160, 0,
        0, 0, 0, 167, 155, 111, 32, 0, 0, 0, 0, 167, 210, 206, 32, 0, 0, 0, 0, 169, 114, 22, 160,
        0, 0, 0, 0, 169, 160, 59, 32, 0, 0, 0, 0, 171, 63, 131, 160, 0, 0, 0, 0, 171, 118, 226,
        160, 0, 0, 0, 0, 173, 22, 43, 32, 0, 0, 0, 0, 173, 77, 138, 32, 0, 0, 0, 0, 174, 236, 210,
        160, 0, 0, 0, 0, 175, 26, 247, 32, 0, 0, 0, 0, 176, 186, 63, 160, 0, 0, 0, 0, 176, 241,
        158, 160, 0, 0, 0, 0, 178, 144, 231, 32, 0, 0, 0, 0, 178, 191, 11, 160, 0, 0, 0, 0, 180,
        94, 84, 32, 0, 0, 0, 0, 180, 149, 179, 32, 0, 0, 0, 0, 182, 52, 251, 160, 0, 0, 0, 0, 182,
        108, 90, 160, 0, 0, 0, 0, 184, 11, 163, 32, 0, 0, 0, 0, 184, 57, 199, 160, 0, 0, 0, 0, 185,
        217, 16, 32, 0, 0, 0, 0, 186, 16, 111, 32, 0, 0, 0, 0, 187, 175, 183, 160, 0, 0, 0, 0, 187,
        231, 22, 160, 0, 0, 0, 0, 189, 134, 95, 32, 0, 0, 0, 0, 189, 180, 131, 160, 0, 0, 0, 0,
        191, 83, 204, 32, 0, 0, 0, 0, 191, 139, 43, 32, 0, 0, 0, 0, 193, 42, 115, 160, 0, 0, 0, 0,
        193, 88, 152, 32, 0, 0, 0, 0, 194, 247, 224, 160, 0, 0, 0, 0, 195, 47, 63, 160, 0, 0, 0, 0,
        196, 206, 136, 32, 0, 0, 0, 0, 197, 5, 231, 32, 0, 0, 0, 0, 198, 165, 47, 160, 0, 0, 0, 0,
        198, 211, 84, 32, 0, 0, 0, 0, 200, 114, 156, 160, 0, 0, 0, 0, 200, 169, 251, 160, 0, 0, 0,
        0, 202, 73, 68, 32, 0, 0, 0, 0, 202, 128, 163, 32, 0, 0, 0, 0, 204, 31, 235, 160, 0, 0, 0,
        0, 204, 78, 16, 32, 0, 0, 0, 0, 205, 237, 88, 160, 0, 0, 0, 0, 206, 36, 183, 160, 0, 0, 0,
        0, 207, 196, 0, 32, 0, 0, 0, 0, 207, 242, 36, 160, 0, 0, 0, 0, 209, 145, 109, 32, 0, 0, 0,
        0, 209, 200, 204, 32, 0, 0, 0, 0, 211, 104, 20, 160, 0, 0, 0, 0, 211, 159, 115, 160, 0, 0,
        0, 0, 213, 62, 188, 32, 0, 0, 0, 0, 213, 108, 224, 160, 0, 0, 0, 0, 215, 12, 41, 32, 0, 0,
        0, 0, 215, 67, 136, 32, 0, 0, 0, 0, 216, 226, 208, 160, 0, 0, 0, 0, 217, 26, 47, 160, 0, 0,
        0, 0, 218, 185, 120, 32, 0, 0, 0, 0, 218, 231, 156, 160, 0, 0, 0, 0, 220, 134, 229, 32, 0,
        0, 0, 0, 220, 190, 68, 32, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 255, 255,
        248, 228, 0, 0, 0, 0, 14, 16, 1, 4, 0, 0, 0, 0, 0, 8, 0, 0, 14, 16, 0, 4, 0, 0, 0, 0, 1, 8,
        76, 77, 84, 0, 43, 48, 49, 0, 43, 48, 48, 0, 10, 60, 43, 48, 49, 62, 45, 49, 10,
    ];
    pub(crate) const AFRICA_CEUTA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        43, 0, 0, 0, 5, 0, 0, 0, 22, 255, 255, 255, 255, 126, 54, 181, 0, 255, 255, 255, 255, 158,
        214, 117, 112, 255, 255, 255, 255, 159, 161, 110, 96, 255, 255, 255, 255, 170, 5, 239, 112,
        255, 255, 255, 255, 170, 231, 110, 0, 255, 255, 255, 255, 173, 201, 167, 240, 255, 255,
        255, 255, 174, 167, 50, 0, 255, 255, 255, 255, 175, 160, 79, 112, 255, 255, 255, 255, 176,
        135, 20, 0, 255, 255, 255, 255, 177, 137, 122, 0, 255, 255, 255, 255, 178, 112, 48, 128,
        255, 255, 255, 255, 251, 37, 114, 64, 255, 255, 255, 255, 251, 194, 239, 112, 0, 0, 0, 0,
        8, 107, 132, 128, 0, 0, 0, 0, 8, 198, 109, 240, 0, 0, 0, 0, 11, 232, 12, 0, 0, 0, 0, 0, 12,
        97, 71, 240, 0, 0, 0, 0, 13, 201, 63, 128, 0, 0, 0, 0, 14, 142, 242, 112, 0, 0, 0, 0, 15,
        211, 81, 128, 0, 0, 0, 0, 16, 39, 163, 112, 0, 0, 0, 0, 26, 183, 166, 0, 0, 0, 0, 0, 30,
        140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33,
        92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54,
        16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0,
        0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0,
        0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0,
        0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144,
        0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 255, 255, 251, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 16, 1, 8, 0, 0, 14, 16, 0, 13,
        0, 0, 28, 32, 1, 17, 76, 77, 84, 0, 87, 69, 84, 0, 87, 69, 83, 84, 0, 67, 69, 84, 0, 67,
        69, 83, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77,
        49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const AFRICA_CONAKRY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 230, 155, 92, 255, 255, 255, 255, 188,
        146, 184, 128, 255, 255, 255, 255, 237, 48, 22, 144, 1, 2, 1, 255, 255, 243, 36, 0, 0, 0,
        0, 0, 0, 0, 4, 255, 255, 241, 240, 0, 8, 76, 77, 84, 0, 71, 77, 84, 0, 45, 48, 49, 0, 10,
        71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_DAKAR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 230, 158, 216, 255, 255, 255, 255,
        202, 59, 16, 144, 1, 2, 255, 255, 239, 168, 0, 0, 255, 255, 241, 240, 0, 4, 0, 0, 0, 0, 0,
        8, 76, 77, 84, 0, 45, 48, 49, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_DAR_ES_SALAAM: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 182, 163, 211, 172, 255, 255, 255, 255,
        214, 157, 127, 208, 255, 255, 255, 255, 239, 18, 102, 212, 1, 2, 1, 0, 0, 36, 212, 0, 0, 0,
        0, 42, 48, 0, 4, 0, 0, 38, 172, 0, 8, 76, 77, 84, 0, 69, 65, 84, 0, 43, 48, 50, 52, 53, 0,
        10, 69, 65, 84, 45, 51, 10,
    ];
    pub(crate) const AFRICA_DJIBOUTI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 243, 210, 12, 1, 0, 0, 40, 116, 0, 0,
        0, 0, 42, 48, 0, 4, 76, 77, 84, 0, 69, 65, 84, 0, 10, 69, 65, 84, 45, 51, 10,
    ];
    pub(crate) const AFRICA_DOUALA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 146, 230, 133, 104, 1, 0, 0, 9, 24, 0, 0, 0,
        0, 14, 16, 0, 4, 76, 77, 84, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_EL_AAIUN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        186, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 188, 72, 240, 224, 0, 0, 0, 0, 11, 209,
        176, 144, 0, 0, 0, 0, 11, 232, 12, 0, 0, 0, 0, 0, 12, 97, 71, 240, 0, 0, 0, 0, 13, 201, 63,
        128, 0, 0, 0, 0, 14, 142, 242, 112, 0, 0, 0, 0, 15, 211, 81, 128, 0, 0, 0, 0, 16, 39, 163,
        112, 0, 0, 0, 0, 72, 65, 230, 128, 0, 0, 0, 0, 72, 187, 34, 112, 0, 0, 0, 0, 74, 35, 26, 0,
        0, 0, 0, 0, 74, 141, 213, 112, 0, 0, 0, 0, 75, 220, 192, 128, 0, 0, 0, 0, 76, 93, 229, 112,
        0, 0, 0, 0, 77, 151, 184, 128, 0, 0, 0, 0, 78, 52, 140, 240, 0, 0, 0, 0, 79, 156, 160, 160,
        0, 0, 0, 0, 80, 8, 187, 160, 0, 0, 0, 0, 80, 49, 154, 32, 0, 0, 0, 0, 80, 103, 167, 160, 0,
        0, 0, 0, 81, 124, 130, 160, 0, 0, 0, 0, 81, 216, 203, 160, 0, 0, 0, 0, 82, 5, 158, 160, 0,
        0, 0, 0, 82, 108, 115, 160, 0, 0, 0, 0, 83, 55, 122, 160, 0, 0, 0, 0, 83, 174, 33, 160, 0,
        0, 0, 0, 83, 220, 70, 32, 0, 0, 0, 0, 84, 76, 85, 160, 0, 0, 0, 0, 85, 23, 92, 160, 0, 0,
        0, 0, 85, 124, 224, 32, 0, 0, 0, 0, 85, 171, 4, 160, 0, 0, 0, 0, 86, 44, 55, 160, 0, 0, 0,
        0, 86, 247, 62, 160, 0, 0, 0, 0, 87, 83, 135, 160, 0, 0, 0, 0, 87, 129, 172, 32, 0, 0, 0,
        0, 88, 21, 84, 32, 0, 0, 0, 0, 88, 215, 32, 160, 0, 0, 0, 0, 89, 32, 244, 160, 0, 0, 0, 0,
        89, 88, 83, 160, 0, 0, 0, 0, 89, 245, 54, 32, 0, 0, 0, 0, 90, 183, 2, 160, 0, 0, 0, 0, 90,
        247, 156, 32, 0, 0, 0, 0, 91, 37, 192, 160, 0, 0, 0, 0, 91, 213, 24, 32, 0, 0, 0, 0, 92,
        206, 67, 160, 0, 0, 0, 0, 92, 252, 104, 32, 0, 0, 0, 0, 94, 155, 176, 160, 0, 0, 0, 0, 94,
        211, 15, 160, 0, 0, 0, 0, 96, 114, 88, 32, 0, 0, 0, 0, 96, 160, 124, 160, 0, 0, 0, 0, 98,
        63, 197, 32, 0, 0, 0, 0, 98, 119, 36, 32, 0, 0, 0, 0, 100, 22, 108, 160, 0, 0, 0, 0, 100,
        77, 203, 160, 0, 0, 0, 0, 101, 237, 20, 32, 0, 0, 0, 0, 102, 27, 56, 160, 0, 0, 0, 0, 103,
        186, 129, 32, 0, 0, 0, 0, 103, 241, 224, 32, 0, 0, 0, 0, 105, 145, 40, 160, 0, 0, 0, 0,
        105, 191, 77, 32, 0, 0, 0, 0, 107, 103, 208, 32, 0, 0, 0, 0, 107, 149, 244, 160, 0, 0, 0,
        0, 109, 53, 61, 32, 0, 0, 0, 0, 109, 108, 156, 32, 0, 0, 0, 0, 111, 11, 228, 160, 0, 0, 0,
        0, 111, 58, 9, 32, 0, 0, 0, 0, 112, 217, 81, 160, 0, 0, 0, 0, 113, 16, 176, 160, 0, 0, 0,
        0, 114, 175, 249, 32, 0, 0, 0, 0, 114, 231, 88, 32, 0, 0, 0, 0, 116, 134, 160, 160, 0, 0,
        0, 0, 116, 180, 197, 32, 0, 0, 0, 0, 118, 84, 13, 160, 0, 0, 0, 0, 118, 139, 108, 160, 0,
        0, 0, 0, 120, 42, 181, 32, 0, 0, 0, 0, 120, 88, 217, 160, 0, 0, 0, 0, 121, 248, 34, 32, 0,
        0, 0, 0, 122, 47, 129, 32, 0, 0, 0, 0, 123, 206, 201, 160, 0, 0, 0, 0, 124, 6, 40, 160, 0,
        0, 0, 0, 125, 165, 113, 32, 0, 0, 0, 0, 125, 211, 149, 160, 0, 0, 0, 0, 127, 114, 222, 32,
        0, 0, 0, 0, 127, 170, 61, 32, 0, 0, 0, 0, 129, 73, 133, 160, 0, 0, 0, 0, 129, 128, 228,
        160, 0, 0, 0, 0, 131, 32, 45, 32, 0, 0, 0, 0, 131, 78, 81, 160, 0, 0, 0, 0, 132, 237, 154,
        32, 0, 0, 0, 0, 133, 36, 249, 32, 0, 0, 0, 0, 134, 196, 65, 160, 0, 0, 0, 0, 134, 242, 102,
        32, 0, 0, 0, 0, 136, 145, 174, 160, 0, 0, 0, 0, 136, 201, 13, 160, 0, 0, 0, 0, 138, 104,
        86, 32, 0, 0, 0, 0, 138, 159, 181, 32, 0, 0, 0, 0, 140, 62, 253, 160, 0, 0, 0, 0, 140, 109,
        34, 32, 0, 0, 0, 0, 142, 12, 106, 160, 0, 0, 0, 0, 142, 67, 201, 160, 0, 0, 0, 0, 143, 227,
        18, 32, 0, 0, 0, 0, 144, 26, 113, 32, 0, 0, 0, 0, 145, 185, 185, 160, 0, 0, 0, 0, 145, 231,
        222, 32, 0, 0, 0, 0, 147, 135, 38, 160, 0, 0, 0, 0, 147, 190, 133, 160, 0, 0, 0, 0, 149,
        93, 206, 32, 0, 0, 0, 0, 149, 139, 242, 160, 0, 0, 0, 0, 151, 43, 59, 32, 0, 0, 0, 0, 151,
        98, 154, 32, 0, 0, 0, 0, 153, 1, 226, 160, 0, 0, 0, 0, 153, 57, 65, 160, 0, 0, 0, 0, 154,
        216, 138, 32, 0, 0, 0, 0, 155, 6, 174, 160, 0, 0, 0, 0, 156, 165, 247, 32, 0, 0, 0, 0, 156,
        221, 86, 32, 0, 0, 0, 0, 158, 124, 158, 160, 0, 0, 0, 0, 158, 179, 253, 160, 0, 0, 0, 0,
        160, 83, 70, 32, 0, 0, 0, 0, 160, 129, 106, 160, 0, 0, 0, 0, 162, 32, 179, 32, 0, 0, 0, 0,
        162, 88, 18, 32, 0, 0, 0, 0, 163, 247, 90, 160, 0, 0, 0, 0, 164, 37, 127, 32, 0, 0, 0, 0,
        165, 196, 199, 160, 0, 0, 0, 0, 165, 252, 38, 160, 0, 0, 0, 0, 167, 155, 111, 32, 0, 0, 0,
        0, 167, 210, 206, 32, 0, 0, 0, 0, 169, 114, 22, 160, 0, 0, 0, 0, 169, 160, 59, 32, 0, 0, 0,
        0, 171, 63, 131, 160, 0, 0, 0, 0, 171, 118, 226, 160, 0, 0, 0, 0, 173, 22, 43, 32, 0, 0, 0,
        0, 173, 77, 138, 32, 0, 0, 0, 0, 174, 236, 210, 160, 0, 0, 0, 0, 175, 26, 247, 32, 0, 0, 0,
        0, 176, 186, 63, 160, 0, 0, 0, 0, 176, 241, 158, 160, 0, 0, 0, 0, 178, 144, 231, 32, 0, 0,
        0, 0, 178, 191, 11, 160, 0, 0, 0, 0, 180, 94, 84, 32, 0, 0, 0, 0, 180, 149, 179, 32, 0, 0,
        0, 0, 182, 52, 251, 160, 0, 0, 0, 0, 182, 108, 90, 160, 0, 0, 0, 0, 184, 11, 163, 32, 0, 0,
        0, 0, 184, 57, 199, 160, 0, 0, 0, 0, 185, 217, 16, 32, 0, 0, 0, 0, 186, 16, 111, 32, 0, 0,
        0, 0, 187, 175, 183, 160, 0, 0, 0, 0, 187, 231, 22, 160, 0, 0, 0, 0, 189, 134, 95, 32, 0,
        0, 0, 0, 189, 180, 131, 160, 0, 0, 0, 0, 191, 83, 204, 32, 0, 0, 0, 0, 191, 139, 43, 32, 0,
        0, 0, 0, 193, 42, 115, 160, 0, 0, 0, 0, 193, 88, 152, 32, 0, 0, 0, 0, 194, 247, 224, 160,
        0, 0, 0, 0, 195, 47, 63, 160, 0, 0, 0, 0, 196, 206, 136, 32, 0, 0, 0, 0, 197, 5, 231, 32,
        0, 0, 0, 0, 198, 165, 47, 160, 0, 0, 0, 0, 198, 211, 84, 32, 0, 0, 0, 0, 200, 114, 156,
        160, 0, 0, 0, 0, 200, 169, 251, 160, 0, 0, 0, 0, 202, 73, 68, 32, 0, 0, 0, 0, 202, 128,
        163, 32, 0, 0, 0, 0, 204, 31, 235, 160, 0, 0, 0, 0, 204, 78, 16, 32, 0, 0, 0, 0, 205, 237,
        88, 160, 0, 0, 0, 0, 206, 36, 183, 160, 0, 0, 0, 0, 207, 196, 0, 32, 0, 0, 0, 0, 207, 242,
        36, 160, 0, 0, 0, 0, 209, 145, 109, 32, 0, 0, 0, 0, 209, 200, 204, 32, 0, 0, 0, 0, 211,
        104, 20, 160, 0, 0, 0, 0, 211, 159, 115, 160, 0, 0, 0, 0, 213, 62, 188, 32, 0, 0, 0, 0,
        213, 108, 224, 160, 0, 0, 0, 0, 215, 12, 41, 32, 0, 0, 0, 0, 215, 67, 136, 32, 0, 0, 0, 0,
        216, 226, 208, 160, 0, 0, 0, 0, 217, 26, 47, 160, 0, 0, 0, 0, 218, 185, 120, 32, 0, 0, 0,
        0, 218, 231, 156, 160, 0, 0, 0, 0, 220, 134, 229, 32, 0, 0, 0, 0, 220, 190, 68, 32, 1, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 4, 5, 255, 255, 243, 160, 0, 0, 255, 255, 241, 240, 0, 4, 0, 0, 14, 16, 1, 8, 0, 0,
        0, 0, 0, 12, 0, 0, 0, 0, 1, 12, 0, 0, 14, 16, 0, 8, 76, 77, 84, 0, 45, 48, 49, 0, 43, 48,
        49, 0, 43, 48, 48, 0, 10, 60, 43, 48, 49, 62, 45, 49, 10,
    ];
    pub(crate) const AFRICA_FREETOWN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        19, 0, 0, 0, 5, 0, 0, 0, 22, 255, 255, 255, 255, 90, 122, 168, 236, 255, 255, 255, 255,
        149, 183, 191, 108, 255, 255, 255, 255, 186, 62, 224, 144, 255, 255, 255, 255, 186, 222,
        97, 96, 255, 255, 255, 255, 187, 168, 27, 144, 255, 255, 255, 255, 188, 191, 148, 224, 255,
        255, 255, 255, 189, 137, 79, 16, 255, 255, 255, 255, 190, 160, 200, 96, 255, 255, 255, 255,
        191, 106, 130, 144, 255, 255, 255, 255, 192, 131, 77, 96, 255, 255, 255, 255, 193, 77, 7,
        144, 255, 255, 255, 255, 194, 100, 128, 224, 255, 255, 255, 255, 195, 46, 59, 16, 255, 255,
        255, 255, 196, 69, 180, 96, 255, 255, 255, 255, 197, 15, 110, 144, 255, 255, 255, 255, 198,
        119, 83, 96, 255, 255, 255, 255, 198, 240, 162, 16, 255, 255, 255, 255, 198, 245, 227, 96,
        255, 255, 255, 255, 203, 52, 60, 16, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        4, 255, 255, 243, 148, 0, 0, 255, 255, 243, 148, 0, 4, 255, 255, 246, 160, 1, 8, 255, 255,
        241, 240, 0, 14, 0, 0, 4, 176, 1, 18, 76, 77, 84, 0, 70, 77, 84, 0, 45, 48, 48, 52, 48, 0,
        45, 48, 49, 0, 43, 48, 49, 0, 10, 88, 88, 88, 45, 48, 58, 52, 48, 60, 43, 48, 49, 62, 45,
        48, 58, 50, 48, 44, 48, 47, 48, 44, 74, 51, 54, 53, 47, 50, 51, 58, 52, 48, 10,
    ];
    pub(crate) const AFRICA_GABORONE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 96, 31, 112, 52, 255, 255, 255, 255, 130,
        70, 207, 104, 255, 255, 255, 255, 206, 142, 110, 128, 255, 255, 255, 255, 207, 126, 81,
        112, 1, 2, 3, 2, 0, 0, 24, 76, 0, 0, 0, 0, 21, 24, 0, 4, 0, 0, 28, 32, 0, 9, 0, 0, 42, 48,
        1, 13, 76, 77, 84, 0, 83, 65, 83, 84, 0, 67, 65, 84, 0, 67, 65, 83, 84, 0, 10, 67, 65, 84,
        45, 50, 10,
    ];
    pub(crate) const AFRICA_HARARE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 130, 70, 199, 100, 1, 0, 0, 29, 28, 0, 0, 0,
        0, 28, 32, 0, 4, 76, 77, 84, 0, 67, 65, 84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_JOHANNESBURG: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        6, 0, 0, 0, 4, 0, 0, 0, 9, 255, 255, 255, 255, 109, 123, 65, 64, 255, 255, 255, 255, 130,
        70, 207, 104, 255, 255, 255, 255, 204, 174, 140, 128, 255, 255, 255, 255, 205, 158, 111,
        112, 255, 255, 255, 255, 206, 142, 110, 128, 255, 255, 255, 255, 207, 126, 81, 112, 1, 3,
        2, 3, 2, 3, 0, 0, 26, 64, 0, 0, 0, 0, 21, 24, 0, 4, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0, 4,
        76, 77, 84, 0, 83, 65, 83, 84, 0, 10, 83, 65, 83, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_JUBA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        35, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 182, 163, 218, 220, 0, 0, 0, 0, 0, 158,
        23, 224, 0, 0, 0, 0, 1, 122, 52, 80, 0, 0, 0, 0, 2, 125, 249, 224, 0, 0, 0, 0, 3, 91, 103,
        208, 0, 0, 0, 0, 4, 96, 126, 224, 0, 0, 0, 0, 5, 61, 236, 208, 0, 0, 0, 0, 6, 64, 96, 224,
        0, 0, 0, 0, 7, 31, 32, 80, 0, 0, 0, 0, 8, 32, 66, 224, 0, 0, 0, 0, 9, 0, 83, 208, 0, 0, 0,
        0, 10, 0, 36, 224, 0, 0, 0, 0, 10, 225, 135, 80, 0, 0, 0, 0, 11, 224, 6, 224, 0, 0, 0, 0,
        12, 196, 12, 80, 0, 0, 0, 0, 13, 191, 232, 224, 0, 0, 0, 0, 14, 165, 63, 208, 0, 0, 0, 0,
        15, 169, 5, 96, 0, 0, 0, 0, 16, 134, 115, 80, 0, 0, 0, 0, 17, 136, 231, 96, 0, 0, 0, 0, 18,
        103, 166, 208, 0, 0, 0, 0, 19, 104, 201, 96, 0, 0, 0, 0, 20, 74, 43, 208, 0, 0, 0, 0, 21,
        72, 171, 96, 0, 0, 0, 0, 22, 43, 95, 80, 0, 0, 0, 0, 23, 40, 141, 96, 0, 0, 0, 0, 24, 12,
        146, 208, 0, 0, 0, 0, 25, 8, 111, 96, 0, 0, 0, 0, 25, 237, 198, 80, 0, 0, 0, 0, 26, 241,
        139, 224, 0, 0, 0, 0, 27, 208, 75, 80, 0, 0, 0, 0, 28, 209, 109, 224, 0, 0, 0, 0, 29, 177,
        126, 208, 0, 0, 0, 0, 56, 128, 69, 32, 0, 0, 0, 0, 96, 23, 26, 80, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 0, 0, 29,
        164, 0, 0, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0, 9, 0, 0, 42, 48, 0, 13, 76, 77, 84, 0, 67,
        65, 83, 84, 0, 67, 65, 84, 0, 69, 65, 84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_KAMPALA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 20, 255, 255, 255, 255, 177, 238, 223, 28, 255, 255, 255, 255, 180,
        194, 154, 208, 255, 255, 255, 255, 214, 157, 134, 216, 255, 255, 255, 255, 231, 140, 71,
        84, 1, 2, 3, 1, 0, 0, 30, 100, 0, 0, 0, 0, 42, 48, 0, 4, 0, 0, 35, 40, 0, 8, 0, 0, 38, 172,
        0, 14, 76, 77, 84, 0, 69, 65, 84, 0, 43, 48, 50, 51, 48, 0, 43, 48, 50, 52, 53, 0, 10, 69,
        65, 84, 45, 51, 10,
    ];
    pub(crate) const AFRICA_KHARTOUM: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        35, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 182, 163, 218, 0, 0, 0, 0, 0, 0, 158, 23,
        224, 0, 0, 0, 0, 1, 122, 52, 80, 0, 0, 0, 0, 2, 125, 249, 224, 0, 0, 0, 0, 3, 91, 103, 208,
        0, 0, 0, 0, 4, 96, 126, 224, 0, 0, 0, 0, 5, 61, 236, 208, 0, 0, 0, 0, 6, 64, 96, 224, 0, 0,
        0, 0, 7, 31, 32, 80, 0, 0, 0, 0, 8, 32, 66, 224, 0, 0, 0, 0, 9, 0, 83, 208, 0, 0, 0, 0, 10,
        0, 36, 224, 0, 0, 0, 0, 10, 225, 135, 80, 0, 0, 0, 0, 11, 224, 6, 224, 0, 0, 0, 0, 12, 196,
        12, 80, 0, 0, 0, 0, 13, 191, 232, 224, 0, 0, 0, 0, 14, 165, 63, 208, 0, 0, 0, 0, 15, 169,
        5, 96, 0, 0, 0, 0, 16, 134, 115, 80, 0, 0, 0, 0, 17, 136, 231, 96, 0, 0, 0, 0, 18, 103,
        166, 208, 0, 0, 0, 0, 19, 104, 201, 96, 0, 0, 0, 0, 20, 74, 43, 208, 0, 0, 0, 0, 21, 72,
        171, 96, 0, 0, 0, 0, 22, 43, 95, 80, 0, 0, 0, 0, 23, 40, 141, 96, 0, 0, 0, 0, 24, 12, 146,
        208, 0, 0, 0, 0, 25, 8, 111, 96, 0, 0, 0, 0, 25, 237, 198, 80, 0, 0, 0, 0, 26, 241, 139,
        224, 0, 0, 0, 0, 27, 208, 75, 80, 0, 0, 0, 0, 28, 209, 109, 224, 0, 0, 0, 0, 29, 177, 126,
        208, 0, 0, 0, 0, 56, 128, 69, 32, 0, 0, 0, 0, 89, 248, 228, 80, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 0, 0, 30,
        128, 0, 0, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0, 9, 0, 0, 42, 48, 0, 13, 76, 77, 84, 0, 67,
        65, 83, 84, 0, 67, 65, 84, 0, 69, 65, 84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_KIGALI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 190, 241, 14, 80, 1, 0, 0, 28, 48, 0, 0, 0,
        0, 28, 32, 0, 4, 76, 77, 84, 0, 67, 65, 84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_KINSHASA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 120, 77, 44, 168, 1, 0, 0, 14, 88, 0, 0, 0,
        0, 14, 16, 0, 4, 76, 77, 84, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_LAGOS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 134, 171, 112, 209, 255, 255, 255, 255,
        140, 80, 96, 0, 255, 255, 255, 255, 150, 170, 67, 209, 255, 255, 255, 255, 161, 81, 239,
        120, 1, 0, 2, 3, 0, 0, 3, 47, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 7, 8, 0, 8, 0, 0, 14, 16, 0,
        14, 76, 77, 84, 0, 71, 77, 84, 0, 43, 48, 48, 51, 48, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45,
        49, 10,
    ];
    pub(crate) const AFRICA_LIBREVILLE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 146, 230, 133, 164, 1, 0, 0, 8, 220, 0, 0,
        0, 0, 14, 16, 0, 4, 76, 77, 84, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_LOME: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 111, 43, 198, 92, 1, 0, 0, 1, 36, 0, 0, 0,
        0, 0, 0, 0, 4, 76, 77, 84, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_LUANDA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 8, 255, 255, 255, 255, 109, 73, 54, 24, 255, 255, 255, 255, 146,
        230, 128, 112, 1, 2, 0, 0, 12, 104, 0, 0, 0, 0, 12, 52, 0, 0, 0, 0, 14, 16, 0, 4, 76, 77,
        84, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_LUBUMBASHI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 120, 77, 33, 64, 255, 255, 255, 255, 162,
        138, 91, 240, 1, 2, 0, 0, 25, 192, 0, 0, 0, 0, 14, 16, 0, 4, 0, 0, 28, 32, 0, 8, 76, 77,
        84, 0, 87, 65, 84, 0, 67, 65, 84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_LUSAKA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 130, 70, 201, 252, 1, 0, 0, 26, 132, 0, 0,
        0, 0, 28, 32, 0, 4, 76, 77, 84, 0, 67, 65, 84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_MALABO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 230, 134, 68, 255, 255, 255, 255, 244,
        159, 190, 128, 1, 2, 0, 0, 8, 60, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 16, 0, 8, 76, 77, 84,
        0, 71, 77, 84, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_MAPUTO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 130, 70, 197, 244, 1, 0, 0, 30, 140, 0, 0,
        0, 0, 28, 32, 0, 4, 76, 77, 84, 0, 67, 65, 84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_MASERU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 9, 255, 255, 255, 255, 130, 70, 202, 184, 255, 255, 255, 255, 206,
        142, 110, 128, 255, 255, 255, 255, 207, 126, 81, 112, 1, 2, 1, 0, 0, 25, 200, 0, 0, 0, 0,
        28, 32, 0, 4, 0, 0, 42, 48, 1, 4, 76, 77, 84, 0, 83, 65, 83, 84, 0, 10, 83, 65, 83, 84, 45,
        50, 10,
    ];
    pub(crate) const AFRICA_MBABANE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 9, 255, 255, 255, 255, 130, 70, 199, 88, 1, 0, 0, 29, 40, 0, 0, 0,
        0, 28, 32, 0, 4, 76, 77, 84, 0, 83, 65, 83, 84, 0, 10, 83, 65, 83, 84, 45, 50, 10,
    ];
    pub(crate) const AFRICA_MOGADISHU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 112, 188, 100, 248, 255, 255, 255, 255,
        182, 163, 206, 80, 255, 255, 255, 255, 231, 140, 74, 216, 1, 2, 1, 0, 0, 42, 136, 0, 0, 0,
        0, 42, 48, 0, 4, 0, 0, 35, 40, 0, 8, 76, 77, 84, 0, 69, 65, 84, 0, 43, 48, 50, 51, 48, 0,
        10, 69, 65, 84, 45, 51, 10,
    ];
    pub(crate) const AFRICA_MONROVIA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 90, 122, 166, 156, 255, 255, 255, 255, 160,
        95, 108, 156, 0, 0, 0, 0, 3, 202, 90, 110, 1, 2, 3, 255, 255, 245, 228, 0, 0, 255, 255,
        245, 228, 0, 4, 255, 255, 245, 146, 0, 4, 0, 0, 0, 0, 0, 8, 76, 77, 84, 0, 77, 77, 84, 0,
        71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_NAIROBI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        5, 0, 0, 0, 4, 0, 0, 0, 20, 255, 255, 255, 255, 139, 255, 209, 252, 255, 255, 255, 255,
        177, 238, 218, 88, 255, 255, 255, 255, 180, 199, 224, 208, 255, 255, 255, 255, 193, 237,
        173, 88, 255, 255, 255, 255, 204, 108, 122, 212, 1, 2, 1, 3, 2, 0, 0, 34, 132, 0, 0, 0, 0,
        35, 40, 0, 4, 0, 0, 42, 48, 0, 10, 0, 0, 38, 172, 0, 14, 76, 77, 84, 0, 43, 48, 50, 51, 48,
        0, 69, 65, 84, 0, 43, 48, 50, 52, 53, 0, 10, 69, 65, 84, 45, 51, 10,
    ];
    pub(crate) const AFRICA_NDJAMENA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 146, 230, 128, 100, 0, 0, 0, 0, 18, 102,
        113, 112, 0, 0, 0, 0, 19, 38, 222, 96, 1, 2, 1, 0, 0, 14, 28, 0, 0, 0, 0, 14, 16, 0, 4, 0,
        0, 28, 32, 1, 8, 76, 77, 84, 0, 87, 65, 84, 0, 87, 65, 83, 84, 0, 10, 87, 65, 84, 45, 49,
        10,
    ];
    pub(crate) const AFRICA_NIAMEY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 146, 230, 140, 132, 255, 255, 255, 255,
        188, 146, 198, 144, 255, 255, 255, 255, 237, 48, 8, 128, 1, 2, 3, 0, 0, 1, 252, 0, 0, 255,
        255, 241, 240, 0, 4, 0, 0, 0, 0, 0, 8, 0, 0, 14, 16, 0, 12, 76, 77, 84, 0, 45, 48, 49, 0,
        71, 77, 84, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_NOUAKCHOTT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 230, 157, 116, 255, 255, 255, 255,
        188, 146, 184, 128, 255, 255, 255, 255, 238, 229, 200, 144, 1, 2, 1, 255, 255, 241, 12, 0,
        0, 0, 0, 0, 0, 0, 4, 255, 255, 241, 240, 0, 8, 76, 77, 84, 0, 71, 77, 84, 0, 45, 48, 49, 0,
        10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_OUAGADOUGOU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 146, 230, 143, 236, 1, 255, 255, 254, 148,
        0, 0, 0, 0, 0, 0, 0, 4, 76, 77, 84, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_PORTO_NOVO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 230, 140, 12, 255, 255, 255, 255, 188,
        146, 184, 128, 1, 2, 0, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 16, 0, 8, 76, 77, 84,
        0, 71, 77, 84, 0, 87, 65, 84, 0, 10, 87, 65, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_SAO_TOME: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 94, 60, 253, 48, 255, 255, 255, 255, 146,
        230, 142, 128, 0, 0, 0, 0, 90, 73, 136, 16, 0, 0, 0, 0, 92, 42, 187, 144, 1, 2, 3, 2, 0, 0,
        6, 80, 0, 0, 255, 255, 247, 99, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 16, 0, 8, 76, 77, 84, 0,
        71, 77, 84, 0, 87, 65, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_TIMBUKTU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 146, 230, 145, 84, 1, 255, 255, 253, 44, 0,
        0, 0, 0, 0, 0, 0, 4, 76, 77, 84, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AFRICA_TUNIS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        34, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 89, 70, 19, 244, 255, 255, 255, 255, 145,
        96, 80, 79, 255, 255, 255, 255, 198, 58, 136, 224, 255, 255, 255, 255, 199, 88, 158, 96,
        255, 255, 255, 255, 199, 219, 34, 224, 255, 255, 255, 255, 202, 226, 84, 224, 255, 255,
        255, 255, 203, 173, 105, 240, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255,
        205, 169, 23, 144, 255, 255, 255, 255, 205, 194, 22, 0, 255, 255, 255, 255, 205, 204, 176,
        16, 255, 255, 255, 255, 206, 162, 53, 0, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255,
        255, 255, 208, 137, 227, 224, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255,
        210, 78, 22, 96, 0, 0, 0, 0, 13, 199, 223, 240, 0, 0, 0, 0, 14, 137, 172, 112, 0, 0, 0, 0,
        15, 170, 100, 240, 0, 0, 0, 0, 16, 116, 26, 112, 0, 0, 0, 0, 34, 163, 58, 240, 0, 0, 0, 0,
        35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 10, 240, 0, 0, 0, 0, 38,
        60, 195, 112, 0, 0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 66, 116, 13, 240, 0, 0, 0, 0, 67, 60,
        128, 0, 0, 0, 0, 0, 68, 37, 231, 144, 0, 0, 0, 0, 69, 67, 253, 16, 0, 0, 0, 0, 70, 5, 201,
        144, 0, 0, 0, 0, 71, 35, 223, 16, 0, 0, 0, 0, 71, 238, 230, 16, 0, 0, 0, 0, 73, 3, 193, 16,
        1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 0, 0, 9, 140, 0, 0, 0, 0, 2, 49, 0, 4, 0, 0, 28, 32, 1, 8, 0, 0, 14, 16, 0, 13,
        76, 77, 84, 0, 80, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 10, 67, 69, 84, 45, 49, 10,
    ];
    pub(crate) const AFRICA_WINDHOEK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        53, 0, 0, 0, 6, 0, 0, 0, 23, 255, 255, 255, 255, 109, 123, 75, 120, 255, 255, 255, 255,
        130, 70, 207, 104, 255, 255, 255, 255, 204, 174, 140, 128, 255, 255, 255, 255, 205, 158,
        111, 112, 0, 0, 0, 0, 38, 6, 167, 224, 0, 0, 0, 0, 45, 140, 199, 96, 0, 0, 0, 0, 46, 105,
        28, 16, 0, 0, 0, 0, 47, 125, 233, 0, 0, 0, 0, 0, 48, 72, 254, 16, 0, 0, 0, 0, 49, 103, 5,
        128, 0, 0, 0, 0, 50, 40, 224, 16, 0, 0, 0, 0, 51, 70, 231, 128, 0, 0, 0, 0, 52, 17, 252,
        144, 0, 0, 0, 0, 53, 38, 201, 128, 0, 0, 0, 0, 53, 241, 222, 144, 0, 0, 0, 0, 55, 6, 171,
        128, 0, 0, 0, 0, 55, 209, 192, 144, 0, 0, 0, 0, 56, 230, 141, 128, 0, 0, 0, 0, 57, 177,
        162, 144, 0, 0, 0, 0, 58, 198, 111, 128, 0, 0, 0, 0, 59, 145, 132, 144, 0, 0, 0, 0, 60,
        175, 140, 0, 0, 0, 0, 0, 61, 113, 102, 144, 0, 0, 0, 0, 62, 143, 110, 0, 0, 0, 0, 0, 63,
        90, 131, 16, 0, 0, 0, 0, 64, 111, 80, 0, 0, 0, 0, 0, 65, 58, 101, 16, 0, 0, 0, 0, 66, 79,
        50, 0, 0, 0, 0, 0, 67, 26, 71, 16, 0, 0, 0, 0, 68, 47, 20, 0, 0, 0, 0, 0, 68, 250, 41, 16,
        0, 0, 0, 0, 70, 14, 246, 0, 0, 0, 0, 0, 70, 218, 11, 16, 0, 0, 0, 0, 71, 248, 18, 128, 0,
        0, 0, 0, 72, 195, 39, 144, 0, 0, 0, 0, 73, 215, 244, 128, 0, 0, 0, 0, 74, 163, 9, 144, 0,
        0, 0, 0, 75, 183, 214, 128, 0, 0, 0, 0, 76, 130, 235, 144, 0, 0, 0, 0, 77, 151, 184, 128,
        0, 0, 0, 0, 78, 98, 205, 144, 0, 0, 0, 0, 79, 119, 154, 128, 0, 0, 0, 0, 80, 66, 175, 144,
        0, 0, 0, 0, 81, 96, 183, 0, 0, 0, 0, 0, 82, 34, 145, 144, 0, 0, 0, 0, 83, 64, 153, 0, 0, 0,
        0, 0, 84, 11, 174, 16, 0, 0, 0, 0, 85, 32, 123, 0, 0, 0, 0, 0, 85, 235, 144, 16, 0, 0, 0,
        0, 87, 0, 93, 0, 0, 0, 0, 0, 87, 203, 114, 16, 0, 0, 0, 0, 88, 224, 63, 0, 0, 0, 0, 0, 89,
        171, 84, 16, 1, 2, 3, 2, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 0, 0, 16,
        8, 0, 0, 0, 0, 21, 24, 0, 4, 0, 0, 28, 32, 0, 10, 0, 0, 42, 48, 1, 10, 0, 0, 14, 16, 1, 15,
        0, 0, 28, 32, 0, 19, 76, 77, 84, 0, 43, 48, 49, 51, 48, 0, 83, 65, 83, 84, 0, 87, 65, 84,
        0, 67, 65, 84, 0, 10, 67, 65, 84, 45, 50, 10,
    ];
    pub(crate) const AMERICA_ADAK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        84, 0, 0, 0, 10, 0, 0, 0, 33, 255, 255, 255, 255, 63, 194, 253, 209, 255, 255, 255, 255,
        125, 135, 90, 94, 255, 255, 255, 255, 203, 137, 68, 208, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 97, 80, 64, 255, 255, 255, 255, 250, 210, 85, 176, 255, 255,
        255, 255, 254, 184, 113, 80, 255, 255, 255, 255, 255, 168, 84, 64, 0, 0, 0, 0, 0, 152, 83,
        80, 0, 0, 0, 0, 1, 136, 54, 64, 0, 0, 0, 0, 2, 120, 53, 80, 0, 0, 0, 0, 3, 113, 82, 192, 0,
        0, 0, 0, 4, 97, 81, 208, 0, 0, 0, 0, 5, 81, 52, 192, 0, 0, 0, 0, 6, 65, 51, 208, 0, 0, 0,
        0, 7, 49, 22, 192, 0, 0, 0, 0, 7, 141, 109, 208, 0, 0, 0, 0, 9, 16, 248, 192, 0, 0, 0, 0,
        9, 173, 233, 80, 0, 0, 0, 0, 10, 240, 218, 192, 0, 0, 0, 0, 11, 224, 217, 208, 0, 0, 0, 0,
        12, 217, 247, 64, 0, 0, 0, 0, 13, 192, 187, 208, 0, 0, 0, 0, 14, 185, 217, 64, 0, 0, 0, 0,
        15, 169, 216, 80, 0, 0, 0, 0, 16, 153, 187, 64, 0, 0, 0, 0, 17, 137, 186, 80, 0, 0, 0, 0,
        18, 121, 157, 64, 0, 0, 0, 0, 19, 105, 156, 80, 0, 0, 0, 0, 20, 89, 127, 64, 0, 0, 0, 0,
        21, 73, 126, 80, 0, 0, 0, 0, 22, 57, 97, 64, 0, 0, 0, 0, 23, 41, 96, 80, 0, 0, 0, 0, 24,
        34, 125, 192, 0, 0, 0, 0, 25, 9, 66, 80, 0, 0, 0, 0, 26, 2, 95, 192, 0, 0, 0, 0, 26, 43,
        34, 32, 0, 0, 0, 0, 26, 242, 80, 192, 0, 0, 0, 0, 27, 226, 51, 176, 0, 0, 0, 0, 28, 210,
        50, 192, 0, 0, 0, 0, 29, 194, 21, 176, 0, 0, 0, 0, 30, 178, 20, 192, 0, 0, 0, 0, 31, 161,
        247, 176, 0, 0, 0, 0, 32, 118, 71, 64, 0, 0, 0, 0, 33, 129, 217, 176, 0, 0, 0, 0, 34, 86,
        41, 64, 0, 0, 0, 0, 35, 106, 246, 48, 0, 0, 0, 0, 36, 54, 11, 64, 0, 0, 0, 0, 37, 74, 216,
        48, 0, 0, 0, 0, 38, 21, 237, 64, 0, 0, 0, 0, 39, 42, 186, 48, 0, 0, 0, 0, 39, 255, 9, 192,
        0, 0, 0, 0, 41, 10, 156, 48, 0, 0, 0, 0, 41, 222, 235, 192, 0, 0, 0, 0, 42, 234, 126, 48,
        0, 0, 0, 0, 43, 190, 205, 192, 0, 0, 0, 0, 44, 211, 154, 176, 0, 0, 0, 0, 45, 158, 175,
        192, 0, 0, 0, 0, 46, 179, 124, 176, 0, 0, 0, 0, 47, 126, 145, 192, 0, 0, 0, 0, 48, 147, 94,
        176, 0, 0, 0, 0, 49, 103, 174, 64, 0, 0, 0, 0, 50, 115, 64, 176, 0, 0, 0, 0, 51, 71, 144,
        64, 0, 0, 0, 0, 52, 83, 34, 176, 0, 0, 0, 0, 53, 39, 114, 64, 0, 0, 0, 0, 54, 51, 4, 176,
        0, 0, 0, 0, 55, 7, 84, 64, 0, 0, 0, 0, 56, 28, 33, 48, 0, 0, 0, 0, 56, 231, 54, 64, 0, 0,
        0, 0, 57, 252, 3, 48, 0, 0, 0, 0, 58, 199, 24, 64, 0, 0, 0, 0, 59, 219, 229, 48, 0, 0, 0,
        0, 60, 176, 52, 192, 0, 0, 0, 0, 61, 187, 199, 48, 0, 0, 0, 0, 62, 144, 22, 192, 0, 0, 0,
        0, 63, 155, 169, 48, 0, 0, 0, 0, 64, 111, 248, 192, 0, 0, 0, 0, 65, 132, 197, 176, 0, 0, 0,
        0, 66, 79, 218, 192, 0, 0, 0, 0, 67, 100, 167, 176, 0, 0, 0, 0, 68, 47, 188, 192, 0, 0, 0,
        0, 69, 68, 137, 176, 0, 0, 0, 0, 69, 243, 239, 64, 1, 2, 3, 4, 2, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 9, 8, 9, 8, 9, 8, 9,
        8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9,
        8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 0, 0, 171, 226, 0, 0, 255, 255, 90, 98, 0, 0, 255, 255,
        101, 80, 0, 4, 255, 255, 115, 96, 1, 8, 255, 255, 115, 96, 1, 12, 255, 255, 101, 80, 0, 16,
        255, 255, 115, 96, 1, 20, 255, 255, 115, 96, 0, 24, 255, 255, 129, 112, 1, 29, 255, 255,
        115, 96, 0, 25, 76, 77, 84, 0, 78, 83, 84, 0, 78, 87, 84, 0, 78, 80, 84, 0, 66, 83, 84, 0,
        66, 68, 84, 0, 65, 72, 83, 84, 0, 72, 68, 84, 0, 10, 72, 83, 84, 49, 48, 72, 68, 84, 44,
        77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_ANCHORAGE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        84, 0, 0, 0, 10, 0, 0, 0, 40, 255, 255, 255, 255, 63, 194, 253, 209, 255, 255, 255, 255,
        125, 135, 65, 72, 255, 255, 255, 255, 203, 137, 54, 192, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 97, 66, 48, 255, 255, 255, 255, 250, 210, 71, 160, 255, 255,
        255, 255, 254, 184, 99, 64, 255, 255, 255, 255, 255, 168, 70, 48, 0, 0, 0, 0, 0, 152, 69,
        64, 0, 0, 0, 0, 1, 136, 40, 48, 0, 0, 0, 0, 2, 120, 39, 64, 0, 0, 0, 0, 3, 113, 68, 176, 0,
        0, 0, 0, 4, 97, 67, 192, 0, 0, 0, 0, 5, 81, 38, 176, 0, 0, 0, 0, 6, 65, 37, 192, 0, 0, 0,
        0, 7, 49, 8, 176, 0, 0, 0, 0, 7, 141, 95, 192, 0, 0, 0, 0, 9, 16, 234, 176, 0, 0, 0, 0, 9,
        173, 219, 64, 0, 0, 0, 0, 10, 240, 204, 176, 0, 0, 0, 0, 11, 224, 203, 192, 0, 0, 0, 0, 12,
        217, 233, 48, 0, 0, 0, 0, 13, 192, 173, 192, 0, 0, 0, 0, 14, 185, 203, 48, 0, 0, 0, 0, 15,
        169, 202, 64, 0, 0, 0, 0, 16, 153, 173, 48, 0, 0, 0, 0, 17, 137, 172, 64, 0, 0, 0, 0, 18,
        121, 143, 48, 0, 0, 0, 0, 19, 105, 142, 64, 0, 0, 0, 0, 20, 89, 113, 48, 0, 0, 0, 0, 21,
        73, 112, 64, 0, 0, 0, 0, 22, 57, 83, 48, 0, 0, 0, 0, 23, 41, 82, 64, 0, 0, 0, 0, 24, 34,
        111, 176, 0, 0, 0, 0, 25, 9, 52, 64, 0, 0, 0, 0, 26, 2, 81, 176, 0, 0, 0, 0, 26, 43, 20,
        16, 0, 0, 0, 0, 26, 242, 66, 176, 0, 0, 0, 0, 27, 226, 37, 160, 0, 0, 0, 0, 28, 210, 36,
        176, 0, 0, 0, 0, 29, 194, 7, 160, 0, 0, 0, 0, 30, 178, 6, 176, 0, 0, 0, 0, 31, 161, 233,
        160, 0, 0, 0, 0, 32, 118, 57, 48, 0, 0, 0, 0, 33, 129, 203, 160, 0, 0, 0, 0, 34, 86, 27,
        48, 0, 0, 0, 0, 35, 106, 232, 32, 0, 0, 0, 0, 36, 53, 253, 48, 0, 0, 0, 0, 37, 74, 202, 32,
        0, 0, 0, 0, 38, 21, 223, 48, 0, 0, 0, 0, 39, 42, 172, 32, 0, 0, 0, 0, 39, 254, 251, 176, 0,
        0, 0, 0, 41, 10, 142, 32, 0, 0, 0, 0, 41, 222, 221, 176, 0, 0, 0, 0, 42, 234, 112, 32, 0,
        0, 0, 0, 43, 190, 191, 176, 0, 0, 0, 0, 44, 211, 140, 160, 0, 0, 0, 0, 45, 158, 161, 176,
        0, 0, 0, 0, 46, 179, 110, 160, 0, 0, 0, 0, 47, 126, 131, 176, 0, 0, 0, 0, 48, 147, 80, 160,
        0, 0, 0, 0, 49, 103, 160, 48, 0, 0, 0, 0, 50, 115, 50, 160, 0, 0, 0, 0, 51, 71, 130, 48, 0,
        0, 0, 0, 52, 83, 20, 160, 0, 0, 0, 0, 53, 39, 100, 48, 0, 0, 0, 0, 54, 50, 246, 160, 0, 0,
        0, 0, 55, 7, 70, 48, 0, 0, 0, 0, 56, 28, 19, 32, 0, 0, 0, 0, 56, 231, 40, 48, 0, 0, 0, 0,
        57, 251, 245, 32, 0, 0, 0, 0, 58, 199, 10, 48, 0, 0, 0, 0, 59, 219, 215, 32, 0, 0, 0, 0,
        60, 176, 38, 176, 0, 0, 0, 0, 61, 187, 185, 32, 0, 0, 0, 0, 62, 144, 8, 176, 0, 0, 0, 0,
        63, 155, 155, 32, 0, 0, 0, 0, 64, 111, 234, 176, 0, 0, 0, 0, 65, 132, 183, 160, 0, 0, 0, 0,
        66, 79, 204, 176, 0, 0, 0, 0, 67, 100, 153, 160, 0, 0, 0, 0, 68, 47, 174, 176, 0, 0, 0, 0,
        69, 68, 123, 160, 0, 0, 0, 0, 69, 243, 225, 48, 1, 2, 3, 4, 2, 5, 6, 5, 6, 5, 6, 5, 6, 5,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 9, 8, 9, 8, 9, 8, 9, 8,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 0, 0, 196, 248, 0, 0, 255, 255, 115, 120, 0, 0, 255, 255,
        115, 96, 0, 4, 255, 255, 129, 112, 1, 8, 255, 255, 129, 112, 1, 12, 255, 255, 115, 96, 0,
        16, 255, 255, 129, 112, 1, 21, 255, 255, 129, 112, 0, 26, 255, 255, 143, 128, 1, 30, 255,
        255, 129, 112, 0, 35, 76, 77, 84, 0, 65, 83, 84, 0, 65, 87, 84, 0, 65, 80, 84, 0, 65, 72,
        83, 84, 0, 65, 72, 68, 84, 0, 89, 83, 84, 0, 65, 75, 68, 84, 0, 65, 75, 83, 84, 0, 10, 65,
        75, 83, 84, 57, 65, 75, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48,
        10,
    ];
    pub(crate) const AMERICA_ANGUILLA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 147, 55, 53, 32, 1, 255, 255, 196, 224, 0,
        0, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_ANTIGUA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 147, 55, 51, 240, 255, 255, 255, 255, 220,
        66, 220, 80, 1, 2, 255, 255, 198, 16, 0, 0, 255, 255, 185, 176, 0, 4, 255, 255, 199, 192,
        0, 8, 76, 77, 84, 0, 69, 83, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_ARAGUAINA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        51, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 116, 48, 255, 255, 255, 255,
        184, 15, 73, 224, 255, 255, 255, 255, 184, 253, 64, 160, 255, 255, 255, 255, 185, 241, 52,
        48, 255, 255, 255, 255, 186, 222, 116, 32, 255, 255, 255, 255, 218, 56, 174, 48, 255, 255,
        255, 255, 218, 235, 250, 48, 255, 255, 255, 255, 220, 25, 225, 176, 255, 255, 255, 255,
        220, 185, 89, 32, 255, 255, 255, 255, 221, 251, 21, 48, 255, 255, 255, 255, 222, 155, 222,
        32, 255, 255, 255, 255, 223, 221, 154, 48, 255, 255, 255, 255, 224, 84, 51, 32, 255, 255,
        255, 255, 244, 151, 255, 176, 255, 255, 255, 255, 245, 5, 94, 32, 255, 255, 255, 255, 246,
        192, 100, 48, 255, 255, 255, 255, 247, 14, 30, 160, 255, 255, 255, 255, 248, 81, 44, 48,
        255, 255, 255, 255, 248, 199, 197, 32, 255, 255, 255, 255, 250, 10, 210, 176, 255, 255,
        255, 255, 250, 168, 248, 160, 255, 255, 255, 255, 251, 236, 6, 48, 255, 255, 255, 255, 252,
        139, 125, 160, 0, 0, 0, 0, 29, 201, 142, 48, 0, 0, 0, 0, 30, 120, 215, 160, 0, 0, 0, 0, 31,
        160, 53, 176, 0, 0, 0, 0, 32, 51, 207, 160, 0, 0, 0, 0, 33, 129, 105, 48, 0, 0, 0, 0, 34,
        11, 200, 160, 0, 0, 0, 0, 35, 88, 16, 176, 0, 0, 0, 0, 35, 226, 112, 32, 0, 0, 0, 0, 37,
        55, 242, 176, 0, 0, 0, 0, 37, 212, 199, 32, 0, 0, 0, 0, 48, 128, 121, 48, 0, 0, 0, 0, 49,
        29, 77, 160, 0, 0, 0, 0, 50, 87, 32, 176, 0, 0, 0, 0, 51, 6, 106, 32, 0, 0, 0, 0, 52, 56,
        84, 48, 0, 0, 0, 0, 52, 248, 193, 32, 0, 0, 0, 0, 54, 32, 31, 48, 0, 0, 0, 0, 54, 207, 104,
        160, 0, 0, 0, 0, 55, 246, 198, 176, 0, 0, 0, 0, 56, 184, 133, 32, 0, 0, 0, 0, 57, 223, 227,
        48, 0, 0, 0, 0, 58, 143, 44, 160, 0, 0, 0, 0, 59, 200, 255, 176, 0, 0, 0, 0, 60, 111, 14,
        160, 0, 0, 0, 0, 61, 196, 145, 48, 0, 0, 0, 0, 62, 78, 240, 160, 0, 0, 0, 0, 80, 131, 101,
        48, 0, 0, 0, 0, 81, 32, 57, 160, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 255, 255, 210, 208, 0, 0, 255, 255, 227, 224, 1, 4, 255, 255, 213, 208, 0, 8, 76, 77,
        84, 0, 45, 48, 50, 0, 45, 48, 51, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_ARUBA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 147, 30, 47, 56, 255, 255, 255, 255, 246,
        152, 236, 72, 1, 2, 255, 255, 190, 72, 0, 0, 255, 255, 192, 184, 0, 4, 255, 255, 199, 192,
        0, 10, 76, 77, 84, 0, 45, 48, 52, 51, 48, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_ASUNCION: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        79, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 105, 135, 17, 144, 255, 255, 255, 255,
        184, 23, 245, 144, 0, 0, 0, 0, 5, 43, 218, 64, 0, 0, 0, 0, 7, 252, 240, 176, 0, 0, 0, 0,
        10, 207, 116, 192, 0, 0, 0, 0, 11, 151, 202, 176, 0, 0, 0, 0, 12, 177, 249, 192, 0, 0, 0,
        0, 13, 120, 254, 48, 0, 0, 0, 0, 14, 147, 45, 64, 0, 0, 0, 0, 15, 90, 49, 176, 0, 0, 0, 0,
        16, 116, 96, 192, 0, 0, 0, 0, 17, 100, 67, 176, 0, 0, 0, 0, 18, 85, 148, 64, 0, 0, 0, 0,
        19, 70, 200, 176, 0, 0, 0, 0, 20, 56, 25, 64, 0, 0, 0, 0, 21, 39, 252, 48, 0, 0, 0, 0, 22,
        25, 76, 192, 0, 0, 0, 0, 23, 9, 47, 176, 0, 0, 0, 0, 23, 250, 128, 64, 0, 0, 0, 0, 24, 234,
        99, 48, 0, 0, 0, 0, 25, 219, 179, 192, 0, 0, 0, 0, 26, 204, 232, 48, 0, 0, 0, 0, 27, 190,
        56, 192, 0, 0, 0, 0, 28, 174, 27, 176, 0, 0, 0, 0, 29, 159, 108, 64, 0, 0, 0, 0, 30, 143,
        79, 48, 0, 0, 0, 0, 31, 128, 159, 192, 0, 0, 0, 0, 32, 112, 130, 176, 0, 0, 0, 0, 33, 97,
        211, 64, 0, 0, 0, 0, 34, 83, 7, 176, 0, 0, 0, 0, 35, 68, 88, 64, 0, 0, 0, 0, 36, 52, 59,
        48, 0, 0, 0, 0, 37, 65, 59, 64, 0, 0, 0, 0, 38, 21, 110, 176, 0, 0, 0, 0, 39, 6, 191, 64,
        0, 0, 0, 0, 39, 246, 162, 48, 0, 0, 0, 0, 40, 238, 138, 64, 0, 0, 0, 0, 41, 176, 72, 176,
        0, 0, 0, 0, 42, 207, 189, 192, 0, 0, 0, 0, 43, 185, 9, 48, 0, 0, 0, 0, 44, 171, 171, 64, 0,
        0, 0, 0, 45, 112, 12, 176, 0, 0, 0, 0, 46, 140, 222, 192, 0, 0, 0, 0, 47, 79, 238, 176, 0,
        0, 0, 0, 48, 110, 18, 64, 0, 0, 0, 0, 49, 54, 104, 48, 0, 0, 0, 0, 50, 87, 46, 192, 0, 0,
        0, 0, 51, 15, 178, 176, 0, 0, 0, 0, 52, 55, 16, 192, 0, 0, 0, 0, 52, 248, 207, 48, 0, 0, 0,
        0, 54, 22, 242, 192, 0, 0, 0, 0, 54, 225, 235, 176, 0, 0, 0, 0, 55, 246, 212, 192, 0, 0, 0,
        0, 56, 193, 205, 176, 0, 0, 0, 0, 57, 214, 182, 192, 0, 0, 0, 0, 58, 161, 175, 176, 0, 0,
        0, 0, 59, 191, 211, 64, 0, 0, 0, 0, 60, 175, 182, 48, 0, 0, 0, 0, 61, 113, 144, 192, 0, 0,
        0, 0, 62, 143, 152, 48, 0, 0, 0, 0, 63, 90, 173, 64, 0, 0, 0, 0, 64, 111, 122, 48, 0, 0, 0,
        0, 65, 113, 238, 64, 0, 0, 0, 0, 66, 51, 172, 176, 0, 0, 0, 0, 67, 81, 208, 64, 0, 0, 0, 0,
        68, 19, 142, 176, 0, 0, 0, 0, 69, 49, 178, 64, 0, 0, 0, 0, 69, 243, 112, 176, 0, 0, 0, 0,
        71, 26, 206, 192, 0, 0, 0, 0, 71, 211, 82, 176, 0, 0, 0, 0, 72, 250, 176, 192, 0, 0, 0, 0,
        73, 179, 52, 176, 0, 0, 0, 0, 74, 218, 146, 192, 0, 0, 0, 0, 75, 193, 59, 48, 0, 0, 0, 0,
        76, 167, 255, 192, 0, 0, 0, 0, 77, 161, 29, 48, 0, 0, 0, 0, 78, 135, 225, 192, 0, 0, 0, 0,
        79, 128, 255, 48, 0, 0, 0, 0, 80, 112, 254, 64, 1, 2, 3, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2,
        4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2,
        4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2,
        4, 2, 4, 2, 4, 255, 255, 201, 240, 0, 0, 255, 255, 201, 240, 0, 4, 255, 255, 199, 192, 0,
        8, 255, 255, 213, 208, 0, 12, 255, 255, 213, 208, 1, 12, 76, 77, 84, 0, 65, 77, 84, 0, 45,
        48, 52, 0, 45, 48, 51, 0, 10, 60, 45, 48, 52, 62, 52, 60, 45, 48, 51, 62, 44, 77, 49, 48,
        46, 49, 46, 48, 47, 48, 44, 77, 51, 46, 52, 46, 48, 47, 48, 10,
    ];
    pub(crate) const AMERICA_ATIKOKAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 114, 238, 132, 100, 255, 255, 255, 255,
        158, 184, 161, 128, 255, 255, 255, 255, 159, 186, 249, 112, 255, 255, 255, 255, 200, 248,
        87, 96, 255, 255, 255, 255, 203, 136, 254, 128, 255, 255, 255, 255, 210, 35, 244, 112, 255,
        255, 255, 255, 210, 97, 9, 240, 2, 1, 2, 1, 3, 4, 5, 255, 255, 170, 28, 0, 0, 255, 255,
        185, 176, 1, 4, 255, 255, 171, 160, 0, 8, 255, 255, 185, 176, 1, 12, 255, 255, 185, 176, 1,
        16, 255, 255, 185, 176, 0, 20, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 67, 87, 84, 0,
        67, 80, 84, 0, 69, 83, 84, 0, 10, 69, 83, 84, 53, 10,
    ];
    pub(crate) const AMERICA_BAHIA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        61, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 107, 28, 255, 255, 255, 255,
        184, 15, 73, 224, 255, 255, 255, 255, 184, 253, 64, 160, 255, 255, 255, 255, 185, 241, 52,
        48, 255, 255, 255, 255, 186, 222, 116, 32, 255, 255, 255, 255, 218, 56, 174, 48, 255, 255,
        255, 255, 218, 235, 250, 48, 255, 255, 255, 255, 220, 25, 225, 176, 255, 255, 255, 255,
        220, 185, 89, 32, 255, 255, 255, 255, 221, 251, 21, 48, 255, 255, 255, 255, 222, 155, 222,
        32, 255, 255, 255, 255, 223, 221, 154, 48, 255, 255, 255, 255, 224, 84, 51, 32, 255, 255,
        255, 255, 244, 151, 255, 176, 255, 255, 255, 255, 245, 5, 94, 32, 255, 255, 255, 255, 246,
        192, 100, 48, 255, 255, 255, 255, 247, 14, 30, 160, 255, 255, 255, 255, 248, 81, 44, 48,
        255, 255, 255, 255, 248, 199, 197, 32, 255, 255, 255, 255, 250, 10, 210, 176, 255, 255,
        255, 255, 250, 168, 248, 160, 255, 255, 255, 255, 251, 236, 6, 48, 255, 255, 255, 255, 252,
        139, 125, 160, 0, 0, 0, 0, 29, 201, 142, 48, 0, 0, 0, 0, 30, 120, 215, 160, 0, 0, 0, 0, 31,
        160, 53, 176, 0, 0, 0, 0, 32, 51, 207, 160, 0, 0, 0, 0, 33, 129, 105, 48, 0, 0, 0, 0, 34,
        11, 200, 160, 0, 0, 0, 0, 35, 88, 16, 176, 0, 0, 0, 0, 35, 226, 112, 32, 0, 0, 0, 0, 37,
        55, 242, 176, 0, 0, 0, 0, 37, 212, 199, 32, 0, 0, 0, 0, 39, 33, 15, 48, 0, 0, 0, 0, 39,
        189, 227, 160, 0, 0, 0, 0, 41, 0, 241, 48, 0, 0, 0, 0, 41, 148, 139, 32, 0, 0, 0, 0, 42,
        234, 13, 176, 0, 0, 0, 0, 43, 107, 50, 160, 0, 0, 0, 0, 44, 192, 181, 48, 0, 0, 0, 0, 45,
        102, 196, 32, 0, 0, 0, 0, 46, 160, 151, 48, 0, 0, 0, 0, 47, 70, 166, 32, 0, 0, 0, 0, 48,
        128, 121, 48, 0, 0, 0, 0, 49, 29, 77, 160, 0, 0, 0, 0, 50, 87, 32, 176, 0, 0, 0, 0, 51, 6,
        106, 32, 0, 0, 0, 0, 52, 56, 84, 48, 0, 0, 0, 0, 52, 248, 193, 32, 0, 0, 0, 0, 54, 32, 31,
        48, 0, 0, 0, 0, 54, 207, 104, 160, 0, 0, 0, 0, 55, 246, 198, 176, 0, 0, 0, 0, 56, 184, 133,
        32, 0, 0, 0, 0, 57, 223, 227, 48, 0, 0, 0, 0, 58, 143, 44, 160, 0, 0, 0, 0, 59, 200, 255,
        176, 0, 0, 0, 0, 60, 111, 14, 160, 0, 0, 0, 0, 61, 196, 145, 48, 0, 0, 0, 0, 62, 78, 240,
        160, 0, 0, 0, 0, 78, 154, 72, 176, 0, 0, 0, 0, 79, 73, 146, 32, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 219, 228, 0, 0,
        255, 255, 227, 224, 1, 4, 255, 255, 213, 208, 0, 8, 76, 77, 84, 0, 45, 48, 50, 0, 45, 48,
        51, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_BAHIA_BANDERAS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        39, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 165, 182, 232, 112, 255, 255, 255, 255,
        175, 242, 110, 224, 255, 255, 255, 255, 182, 102, 86, 96, 255, 255, 255, 255, 183, 67, 210,
        96, 255, 255, 255, 255, 184, 12, 54, 96, 255, 255, 255, 255, 184, 253, 134, 240, 255, 255,
        255, 255, 203, 234, 113, 96, 255, 255, 255, 255, 216, 145, 180, 240, 0, 0, 0, 0, 0, 0, 112,
        128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0, 0, 0, 50, 115, 22, 128, 0, 0, 0, 0, 51, 71, 102,
        16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0, 0, 53, 39, 72, 16, 0, 0, 0, 0, 54, 50, 218, 128,
        0, 0, 0, 0, 55, 7, 42, 16, 0, 0, 0, 0, 56, 27, 247, 0, 0, 0, 0, 0, 56, 231, 12, 16, 0, 0,
        0, 0, 57, 251, 217, 0, 0, 0, 0, 0, 58, 245, 18, 144, 0, 0, 0, 0, 59, 182, 209, 0, 0, 0, 0,
        0, 60, 176, 10, 144, 0, 0, 0, 0, 61, 187, 157, 0, 0, 0, 0, 0, 62, 143, 236, 144, 0, 0, 0,
        0, 63, 155, 127, 0, 0, 0, 0, 0, 64, 111, 206, 144, 0, 0, 0, 0, 65, 132, 155, 128, 0, 0, 0,
        0, 66, 79, 176, 144, 0, 0, 0, 0, 67, 100, 125, 128, 0, 0, 0, 0, 68, 47, 146, 144, 0, 0, 0,
        0, 69, 68, 95, 128, 0, 0, 0, 0, 70, 15, 116, 144, 0, 0, 0, 0, 71, 36, 65, 128, 0, 0, 0, 0,
        71, 248, 145, 16, 0, 0, 0, 0, 73, 4, 35, 128, 0, 0, 0, 0, 73, 216, 115, 16, 0, 0, 0, 0, 74,
        228, 5, 128, 0, 0, 0, 0, 75, 184, 85, 16, 0, 0, 0, 0, 76, 205, 19, 240, 1, 2, 1, 2, 1, 2,
        1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
        1, 5, 2, 255, 255, 157, 84, 0, 0, 255, 255, 157, 144, 0, 4, 255, 255, 171, 160, 0, 8, 255,
        255, 143, 128, 0, 12, 255, 255, 171, 160, 1, 16, 255, 255, 185, 176, 1, 20, 76, 77, 84, 0,
        77, 83, 84, 0, 67, 83, 84, 0, 80, 83, 84, 0, 77, 68, 84, 0, 67, 68, 84, 0, 10, 67, 83, 84,
        54, 67, 68, 84, 44, 77, 52, 46, 49, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const AMERICA_BARBADOS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        15, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 146, 64, 169, 101, 255, 255, 255, 255,
        203, 227, 203, 208, 255, 255, 255, 255, 204, 148, 130, 224, 255, 255, 255, 255, 205, 214,
        34, 208, 255, 255, 255, 255, 206, 124, 77, 224, 255, 255, 255, 255, 207, 155, 166, 208,
        255, 255, 255, 255, 208, 101, 106, 96, 0, 0, 0, 0, 14, 0, 242, 224, 0, 0, 0, 0, 14, 148,
        140, 208, 0, 0, 0, 0, 15, 151, 0, 224, 0, 0, 0, 0, 16, 116, 110, 208, 0, 0, 0, 0, 17, 118,
        226, 224, 0, 0, 0, 0, 18, 84, 80, 208, 0, 0, 0, 0, 19, 95, 255, 96, 0, 0, 0, 0, 20, 48, 62,
        80, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 200, 27, 0, 0, 255, 255, 213,
        208, 1, 4, 255, 255, 199, 192, 0, 8, 255, 255, 206, 200, 1, 12, 76, 77, 84, 0, 65, 68, 84,
        0, 65, 83, 84, 0, 45, 48, 51, 51, 48, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_BELEM: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        29, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 116, 116, 255, 255, 255, 255,
        184, 15, 73, 224, 255, 255, 255, 255, 184, 253, 64, 160, 255, 255, 255, 255, 185, 241, 52,
        48, 255, 255, 255, 255, 186, 222, 116, 32, 255, 255, 255, 255, 218, 56, 174, 48, 255, 255,
        255, 255, 218, 235, 250, 48, 255, 255, 255, 255, 220, 25, 225, 176, 255, 255, 255, 255,
        220, 185, 89, 32, 255, 255, 255, 255, 221, 251, 21, 48, 255, 255, 255, 255, 222, 155, 222,
        32, 255, 255, 255, 255, 223, 221, 154, 48, 255, 255, 255, 255, 224, 84, 51, 32, 255, 255,
        255, 255, 244, 151, 255, 176, 255, 255, 255, 255, 245, 5, 94, 32, 255, 255, 255, 255, 246,
        192, 100, 48, 255, 255, 255, 255, 247, 14, 30, 160, 255, 255, 255, 255, 248, 81, 44, 48,
        255, 255, 255, 255, 248, 199, 197, 32, 255, 255, 255, 255, 250, 10, 210, 176, 255, 255,
        255, 255, 250, 168, 248, 160, 255, 255, 255, 255, 251, 236, 6, 48, 255, 255, 255, 255, 252,
        139, 125, 160, 0, 0, 0, 0, 29, 201, 142, 48, 0, 0, 0, 0, 30, 120, 215, 160, 0, 0, 0, 0, 31,
        160, 53, 176, 0, 0, 0, 0, 32, 51, 207, 160, 0, 0, 0, 0, 33, 129, 105, 48, 0, 0, 0, 0, 34,
        11, 200, 160, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 255, 255, 210, 140, 0, 0, 255, 255, 227, 224, 1, 4, 255, 255, 213, 208, 0, 8, 76,
        77, 84, 0, 45, 48, 50, 0, 45, 48, 51, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_BELIZE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        98, 0, 0, 0, 6, 0, 0, 0, 26, 255, 255, 255, 255, 147, 94, 217, 176, 255, 255, 255, 255,
        159, 159, 59, 224, 255, 255, 255, 255, 160, 69, 81, 216, 255, 255, 255, 255, 161, 127, 29,
        224, 255, 255, 255, 255, 162, 46, 110, 88, 255, 255, 255, 255, 163, 94, 255, 224, 255, 255,
        255, 255, 164, 14, 80, 88, 255, 255, 255, 255, 165, 62, 225, 224, 255, 255, 255, 255, 165,
        238, 50, 88, 255, 255, 255, 255, 167, 39, 254, 96, 255, 255, 255, 255, 167, 206, 20, 88,
        255, 255, 255, 255, 169, 7, 224, 96, 255, 255, 255, 255, 169, 173, 246, 88, 255, 255, 255,
        255, 170, 231, 194, 96, 255, 255, 255, 255, 171, 151, 18, 216, 255, 255, 255, 255, 172,
        199, 164, 96, 255, 255, 255, 255, 173, 118, 244, 216, 255, 255, 255, 255, 174, 167, 134,
        96, 255, 255, 255, 255, 175, 86, 214, 216, 255, 255, 255, 255, 176, 135, 104, 96, 255, 255,
        255, 255, 177, 54, 184, 216, 255, 255, 255, 255, 178, 112, 132, 224, 255, 255, 255, 255,
        179, 22, 154, 216, 255, 255, 255, 255, 180, 80, 102, 224, 255, 255, 255, 255, 180, 246,
        124, 216, 255, 255, 255, 255, 182, 48, 72, 224, 255, 255, 255, 255, 182, 223, 153, 88, 255,
        255, 255, 255, 184, 16, 42, 224, 255, 255, 255, 255, 184, 191, 123, 88, 255, 255, 255, 255,
        185, 240, 12, 224, 255, 255, 255, 255, 186, 159, 93, 88, 255, 255, 255, 255, 187, 217, 41,
        96, 255, 255, 255, 255, 188, 127, 63, 88, 255, 255, 255, 255, 189, 185, 11, 96, 255, 255,
        255, 255, 190, 95, 33, 88, 255, 255, 255, 255, 191, 152, 237, 96, 255, 255, 255, 255, 192,
        63, 3, 88, 255, 255, 255, 255, 193, 120, 207, 96, 255, 255, 255, 255, 194, 40, 31, 216,
        255, 255, 255, 255, 195, 88, 177, 96, 255, 255, 255, 255, 196, 8, 1, 216, 255, 255, 255,
        255, 197, 56, 147, 96, 255, 255, 255, 255, 197, 231, 227, 216, 255, 255, 255, 255, 199, 33,
        175, 224, 255, 255, 255, 255, 199, 199, 197, 216, 255, 255, 255, 255, 201, 1, 145, 224,
        255, 255, 255, 255, 201, 167, 167, 216, 255, 255, 255, 255, 202, 225, 115, 224, 255, 255,
        255, 255, 203, 144, 196, 88, 255, 255, 255, 255, 204, 64, 34, 224, 255, 255, 255, 255, 210,
        35, 244, 112, 255, 255, 255, 255, 210, 198, 113, 80, 255, 255, 255, 255, 214, 41, 250, 96,
        255, 255, 255, 255, 214, 217, 74, 216, 255, 255, 255, 255, 216, 9, 220, 96, 255, 255, 255,
        255, 216, 185, 44, 216, 255, 255, 255, 255, 217, 233, 190, 96, 255, 255, 255, 255, 218,
        153, 14, 216, 255, 255, 255, 255, 219, 210, 218, 224, 255, 255, 255, 255, 220, 120, 240,
        216, 255, 255, 255, 255, 221, 178, 188, 224, 255, 255, 255, 255, 222, 88, 210, 216, 255,
        255, 255, 255, 223, 146, 158, 224, 255, 255, 255, 255, 224, 65, 239, 88, 255, 255, 255,
        255, 225, 114, 128, 224, 255, 255, 255, 255, 226, 33, 209, 88, 255, 255, 255, 255, 227, 82,
        98, 224, 255, 255, 255, 255, 228, 1, 179, 88, 255, 255, 255, 255, 229, 50, 68, 224, 255,
        255, 255, 255, 229, 225, 149, 88, 255, 255, 255, 255, 231, 27, 97, 96, 255, 255, 255, 255,
        231, 193, 119, 88, 255, 255, 255, 255, 232, 251, 67, 96, 255, 255, 255, 255, 233, 161, 89,
        88, 255, 255, 255, 255, 234, 219, 37, 96, 255, 255, 255, 255, 235, 138, 117, 216, 255, 255,
        255, 255, 236, 187, 7, 96, 255, 255, 255, 255, 237, 106, 87, 216, 255, 255, 255, 255, 238,
        154, 233, 96, 255, 255, 255, 255, 239, 74, 57, 216, 255, 255, 255, 255, 240, 132, 5, 224,
        255, 255, 255, 255, 241, 42, 27, 216, 255, 255, 255, 255, 242, 99, 231, 224, 255, 255, 255,
        255, 243, 9, 253, 216, 255, 255, 255, 255, 244, 67, 201, 224, 255, 255, 255, 255, 244, 233,
        223, 216, 255, 255, 255, 255, 246, 35, 171, 224, 255, 255, 255, 255, 246, 210, 252, 88,
        255, 255, 255, 255, 248, 3, 141, 224, 255, 255, 255, 255, 248, 178, 222, 88, 255, 255, 255,
        255, 249, 227, 111, 224, 255, 255, 255, 255, 250, 146, 192, 88, 255, 255, 255, 255, 251,
        204, 140, 96, 255, 255, 255, 255, 252, 114, 162, 88, 0, 0, 0, 0, 7, 98, 219, 96, 0, 0, 0,
        0, 7, 185, 208, 80, 0, 0, 0, 0, 24, 97, 113, 96, 0, 0, 0, 0, 24, 171, 55, 80, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        5, 2, 5, 2, 255, 255, 173, 80, 0, 0, 255, 255, 178, 168, 1, 4, 255, 255, 171, 160, 0, 10,
        255, 255, 185, 176, 1, 14, 255, 255, 185, 176, 1, 18, 255, 255, 185, 176, 1, 22, 76, 77,
        84, 0, 45, 48, 53, 51, 48, 0, 67, 83, 84, 0, 67, 87, 84, 0, 67, 80, 84, 0, 67, 68, 84, 0,
        10, 67, 83, 84, 54, 10,
    ];
    pub(crate) const AMERICA_BLANC_SABLON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        6, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 94, 61, 57, 12, 255, 255, 255, 255, 158,
        184, 133, 96, 255, 255, 255, 255, 159, 186, 221, 80, 255, 255, 255, 255, 203, 136, 226, 96,
        255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 96, 237, 208, 2, 1, 2, 3,
        4, 2, 255, 255, 202, 116, 0, 0, 255, 255, 213, 208, 1, 4, 255, 255, 199, 192, 0, 8, 255,
        255, 213, 208, 1, 12, 255, 255, 213, 208, 1, 16, 76, 77, 84, 0, 65, 68, 84, 0, 65, 83, 84,
        0, 65, 87, 84, 0, 65, 80, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_BOA_VISTA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        33, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 127, 224, 255, 255, 255, 255,
        184, 15, 87, 240, 255, 255, 255, 255, 184, 253, 78, 176, 255, 255, 255, 255, 185, 241, 66,
        64, 255, 255, 255, 255, 186, 222, 130, 48, 255, 255, 255, 255, 218, 56, 188, 64, 255, 255,
        255, 255, 218, 236, 8, 64, 255, 255, 255, 255, 220, 25, 239, 192, 255, 255, 255, 255, 220,
        185, 103, 48, 255, 255, 255, 255, 221, 251, 35, 64, 255, 255, 255, 255, 222, 155, 236, 48,
        255, 255, 255, 255, 223, 221, 168, 64, 255, 255, 255, 255, 224, 84, 65, 48, 255, 255, 255,
        255, 244, 152, 13, 192, 255, 255, 255, 255, 245, 5, 108, 48, 255, 255, 255, 255, 246, 192,
        114, 64, 255, 255, 255, 255, 247, 14, 44, 176, 255, 255, 255, 255, 248, 81, 58, 64, 255,
        255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255, 250, 10, 224, 192, 255, 255, 255,
        255, 250, 169, 6, 176, 255, 255, 255, 255, 251, 236, 20, 64, 255, 255, 255, 255, 252, 139,
        139, 176, 0, 0, 0, 0, 29, 201, 156, 64, 0, 0, 0, 0, 30, 120, 229, 176, 0, 0, 0, 0, 31, 160,
        67, 192, 0, 0, 0, 0, 32, 51, 221, 176, 0, 0, 0, 0, 33, 129, 119, 64, 0, 0, 0, 0, 34, 11,
        214, 176, 0, 0, 0, 0, 55, 246, 212, 192, 0, 0, 0, 0, 56, 184, 147, 48, 0, 0, 0, 0, 57, 223,
        241, 64, 0, 0, 0, 0, 57, 233, 29, 176, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 199, 32, 0, 0, 255, 255, 213,
        208, 1, 4, 255, 255, 199, 192, 0, 8, 76, 77, 84, 0, 45, 48, 51, 0, 45, 48, 52, 0, 10, 60,
        45, 48, 52, 62, 52, 10,
    ];
    pub(crate) const AMERICA_BOGOTA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 94, 156, 52, 240, 255, 255, 255, 255, 152,
        88, 85, 112, 0, 0, 0, 0, 42, 3, 115, 80, 0, 0, 0, 0, 43, 190, 93, 64, 1, 3, 2, 3, 255, 255,
        186, 144, 0, 0, 255, 255, 186, 144, 0, 4, 255, 255, 199, 192, 1, 8, 255, 255, 185, 176, 0,
        12, 76, 77, 84, 0, 66, 77, 84, 0, 45, 48, 52, 0, 45, 48, 53, 0, 10, 60, 45, 48, 53, 62, 53,
        10,
    ];
    pub(crate) const AMERICA_BOISE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        90, 0, 0, 0, 7, 0, 0, 0, 28, 255, 255, 255, 255, 94, 4, 26, 192, 255, 255, 255, 255, 158,
        166, 72, 160, 255, 255, 255, 255, 159, 187, 21, 144, 255, 255, 255, 255, 160, 134, 42, 160,
        255, 255, 255, 255, 161, 154, 247, 144, 255, 255, 255, 255, 168, 70, 76, 32, 255, 255, 255,
        255, 203, 137, 12, 144, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97,
        24, 0, 255, 255, 255, 255, 250, 248, 117, 16, 255, 255, 255, 255, 251, 232, 88, 0, 255,
        255, 255, 255, 252, 216, 87, 16, 255, 255, 255, 255, 253, 200, 58, 0, 255, 255, 255, 255,
        254, 184, 57, 16, 255, 255, 255, 255, 255, 168, 28, 0, 0, 0, 0, 0, 0, 152, 27, 16, 0, 0, 0,
        0, 1, 135, 254, 0, 0, 0, 0, 0, 2, 119, 253, 16, 0, 0, 0, 0, 3, 113, 26, 128, 0, 0, 0, 0, 4,
        97, 25, 144, 0, 0, 0, 0, 5, 80, 252, 128, 0, 0, 0, 0, 6, 64, 251, 144, 0, 0, 0, 0, 7, 48,
        222, 128, 0, 0, 0, 0, 7, 178, 31, 144, 0, 0, 0, 0, 9, 16, 192, 128, 0, 0, 0, 0, 9, 173,
        177, 16, 0, 0, 0, 0, 10, 240, 162, 128, 0, 0, 0, 0, 11, 224, 161, 144, 0, 0, 0, 0, 12, 217,
        191, 0, 0, 0, 0, 0, 13, 192, 131, 144, 0, 0, 0, 0, 14, 185, 161, 0, 0, 0, 0, 0, 15, 169,
        160, 16, 0, 0, 0, 0, 16, 153, 131, 0, 0, 0, 0, 0, 17, 137, 130, 16, 0, 0, 0, 0, 18, 121,
        101, 0, 0, 0, 0, 0, 19, 105, 100, 16, 0, 0, 0, 0, 20, 89, 71, 0, 0, 0, 0, 0, 21, 73, 70,
        16, 0, 0, 0, 0, 22, 57, 41, 0, 0, 0, 0, 0, 23, 41, 40, 16, 0, 0, 0, 0, 24, 34, 69, 128, 0,
        0, 0, 0, 25, 9, 10, 16, 0, 0, 0, 0, 26, 2, 39, 128, 0, 0, 0, 0, 26, 242, 38, 144, 0, 0, 0,
        0, 27, 226, 9, 128, 0, 0, 0, 0, 28, 210, 8, 144, 0, 0, 0, 0, 29, 193, 235, 128, 0, 0, 0, 0,
        30, 177, 234, 144, 0, 0, 0, 0, 31, 161, 205, 128, 0, 0, 0, 0, 32, 118, 29, 16, 0, 0, 0, 0,
        33, 129, 175, 128, 0, 0, 0, 0, 34, 85, 255, 16, 0, 0, 0, 0, 35, 106, 204, 0, 0, 0, 0, 0,
        36, 53, 225, 16, 0, 0, 0, 0, 37, 74, 174, 0, 0, 0, 0, 0, 38, 21, 195, 16, 0, 0, 0, 0, 39,
        42, 144, 0, 0, 0, 0, 0, 39, 254, 223, 144, 0, 0, 0, 0, 41, 10, 114, 0, 0, 0, 0, 0, 41, 222,
        193, 144, 0, 0, 0, 0, 42, 234, 84, 0, 0, 0, 0, 0, 43, 190, 163, 144, 0, 0, 0, 0, 44, 211,
        112, 128, 0, 0, 0, 0, 45, 158, 133, 144, 0, 0, 0, 0, 46, 179, 82, 128, 0, 0, 0, 0, 47, 126,
        103, 144, 0, 0, 0, 0, 48, 147, 52, 128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0, 0, 0, 50, 115,
        22, 128, 0, 0, 0, 0, 51, 71, 102, 16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0, 0, 53, 39, 72,
        16, 0, 0, 0, 0, 54, 50, 218, 128, 0, 0, 0, 0, 55, 7, 42, 16, 0, 0, 0, 0, 56, 27, 247, 0, 0,
        0, 0, 0, 56, 231, 12, 16, 0, 0, 0, 0, 57, 251, 217, 0, 0, 0, 0, 0, 58, 198, 238, 16, 0, 0,
        0, 0, 59, 219, 187, 0, 0, 0, 0, 0, 60, 176, 10, 144, 0, 0, 0, 0, 61, 187, 157, 0, 0, 0, 0,
        0, 62, 143, 236, 144, 0, 0, 0, 0, 63, 155, 127, 0, 0, 0, 0, 0, 64, 111, 206, 144, 0, 0, 0,
        0, 65, 132, 155, 128, 0, 0, 0, 0, 66, 79, 176, 144, 0, 0, 0, 0, 67, 100, 125, 128, 0, 0, 0,
        0, 68, 47, 146, 144, 0, 0, 0, 0, 69, 68, 95, 128, 0, 0, 0, 0, 69, 243, 197, 16, 2, 1, 2, 1,
        2, 5, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 255, 255,
        147, 15, 0, 0, 255, 255, 157, 144, 1, 4, 255, 255, 143, 128, 0, 8, 255, 255, 171, 160, 1,
        12, 255, 255, 171, 160, 1, 16, 255, 255, 157, 144, 0, 20, 255, 255, 171, 160, 1, 24, 76,
        77, 84, 0, 80, 68, 84, 0, 80, 83, 84, 0, 77, 87, 84, 0, 77, 80, 84, 0, 77, 83, 84, 0, 77,
        68, 84, 0, 10, 77, 83, 84, 55, 77, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46,
        49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_BUENOS_AIRES: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        61, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 114, 156, 168, 76, 255, 255, 255, 255,
        162, 146, 143, 48, 255, 255, 255, 255, 182, 123, 82, 64, 255, 255, 255, 255, 183, 26, 201,
        176, 255, 255, 255, 255, 184, 30, 143, 64, 255, 255, 255, 255, 184, 212, 112, 48, 255, 255,
        255, 255, 186, 23, 125, 192, 255, 255, 255, 255, 186, 181, 163, 176, 255, 255, 255, 255,
        187, 248, 177, 64, 255, 255, 255, 255, 188, 150, 215, 48, 255, 255, 255, 255, 189, 217,
        228, 192, 255, 255, 255, 255, 190, 120, 10, 176, 255, 255, 255, 255, 191, 187, 24, 64, 255,
        255, 255, 255, 192, 90, 143, 176, 255, 255, 255, 255, 193, 157, 157, 64, 255, 255, 255,
        255, 194, 59, 195, 48, 255, 255, 255, 255, 195, 126, 208, 192, 255, 255, 255, 255, 196, 28,
        246, 176, 255, 255, 255, 255, 197, 96, 4, 64, 255, 255, 255, 255, 197, 254, 42, 48, 255,
        255, 255, 255, 199, 65, 55, 192, 255, 255, 255, 255, 199, 224, 175, 48, 255, 255, 255, 255,
        200, 129, 148, 64, 255, 255, 255, 255, 202, 77, 161, 176, 255, 255, 255, 255, 202, 238,
        134, 192, 255, 255, 255, 255, 206, 77, 255, 48, 255, 255, 255, 255, 206, 176, 237, 192,
        255, 255, 255, 255, 211, 41, 53, 176, 255, 255, 255, 255, 212, 67, 100, 192, 255, 255, 255,
        255, 244, 61, 8, 48, 255, 255, 255, 255, 244, 159, 246, 192, 255, 255, 255, 255, 245, 5,
        108, 48, 255, 255, 255, 255, 246, 50, 16, 64, 255, 255, 255, 255, 246, 230, 159, 176, 255,
        255, 255, 255, 248, 19, 67, 192, 255, 255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255,
        249, 244, 119, 64, 255, 255, 255, 255, 250, 211, 54, 176, 255, 255, 255, 255, 251, 195, 53,
        192, 255, 255, 255, 255, 252, 188, 83, 48, 255, 255, 255, 255, 253, 172, 82, 64, 255, 255,
        255, 255, 254, 156, 53, 48, 255, 255, 255, 255, 255, 140, 52, 64, 0, 0, 0, 0, 7, 163, 74,
        176, 0, 0, 0, 0, 8, 36, 111, 160, 0, 0, 0, 0, 35, 148, 181, 176, 0, 0, 0, 0, 36, 16, 148,
        160, 0, 0, 0, 0, 37, 55, 242, 176, 0, 0, 0, 0, 37, 240, 118, 160, 0, 0, 0, 0, 39, 33, 15,
        48, 0, 0, 0, 0, 39, 208, 88, 160, 0, 0, 0, 0, 41, 0, 241, 48, 0, 0, 0, 0, 41, 176, 58, 160,
        0, 0, 0, 0, 42, 224, 211, 48, 0, 0, 0, 0, 43, 153, 87, 32, 0, 0, 0, 0, 55, 246, 198, 176,
        0, 0, 0, 0, 56, 191, 42, 176, 0, 0, 0, 0, 71, 119, 9, 176, 0, 0, 0, 0, 71, 220, 127, 32, 0,
        0, 0, 0, 72, 250, 162, 176, 0, 0, 0, 0, 73, 188, 97, 32, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 3, 5, 4, 5, 4, 5, 255, 255, 201, 52, 0, 0, 255,
        255, 195, 208, 0, 4, 255, 255, 199, 192, 0, 8, 255, 255, 213, 208, 1, 12, 255, 255, 227,
        224, 1, 16, 255, 255, 213, 208, 0, 12, 76, 77, 84, 0, 67, 77, 84, 0, 45, 48, 52, 0, 45, 48,
        51, 0, 45, 48, 50, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_CAMBRIDGE_BAY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        62, 0, 0, 0, 9, 0, 0, 0, 37, 255, 255, 255, 255, 161, 242, 205, 128, 255, 255, 255, 255,
        203, 137, 12, 144, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 24,
        0, 255, 255, 255, 255, 247, 47, 90, 112, 255, 255, 255, 255, 248, 40, 133, 240, 0, 0, 0, 0,
        19, 105, 100, 16, 0, 0, 0, 0, 20, 89, 71, 0, 0, 0, 0, 0, 21, 73, 70, 16, 0, 0, 0, 0, 22,
        57, 41, 0, 0, 0, 0, 0, 23, 41, 40, 16, 0, 0, 0, 0, 24, 34, 69, 128, 0, 0, 0, 0, 25, 9, 10,
        16, 0, 0, 0, 0, 26, 2, 39, 128, 0, 0, 0, 0, 26, 242, 38, 144, 0, 0, 0, 0, 27, 226, 9, 128,
        0, 0, 0, 0, 28, 210, 8, 144, 0, 0, 0, 0, 29, 193, 235, 128, 0, 0, 0, 0, 30, 177, 234, 144,
        0, 0, 0, 0, 31, 161, 205, 128, 0, 0, 0, 0, 32, 118, 29, 16, 0, 0, 0, 0, 33, 129, 175, 128,
        0, 0, 0, 0, 34, 85, 255, 16, 0, 0, 0, 0, 35, 106, 204, 0, 0, 0, 0, 0, 36, 53, 225, 16, 0,
        0, 0, 0, 37, 74, 174, 0, 0, 0, 0, 0, 38, 21, 195, 16, 0, 0, 0, 0, 39, 42, 144, 0, 0, 0, 0,
        0, 39, 254, 223, 144, 0, 0, 0, 0, 41, 10, 114, 0, 0, 0, 0, 0, 41, 222, 193, 144, 0, 0, 0,
        0, 42, 234, 84, 0, 0, 0, 0, 0, 43, 190, 163, 144, 0, 0, 0, 0, 44, 211, 112, 128, 0, 0, 0,
        0, 45, 158, 133, 144, 0, 0, 0, 0, 46, 179, 82, 128, 0, 0, 0, 0, 47, 126, 103, 144, 0, 0, 0,
        0, 48, 147, 52, 128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0, 0, 0, 50, 115, 22, 128, 0, 0, 0,
        0, 51, 71, 102, 16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0, 0, 53, 39, 72, 16, 0, 0, 0, 0,
        54, 50, 218, 128, 0, 0, 0, 0, 55, 7, 42, 16, 0, 0, 0, 0, 56, 27, 247, 0, 0, 0, 0, 0, 56,
        230, 254, 0, 0, 0, 0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 4, 233, 80, 0, 0, 0, 0, 58,
        198, 238, 16, 0, 0, 0, 0, 59, 219, 187, 0, 0, 0, 0, 0, 60, 176, 10, 144, 0, 0, 0, 0, 61,
        187, 157, 0, 0, 0, 0, 0, 62, 143, 236, 144, 0, 0, 0, 0, 63, 155, 127, 0, 0, 0, 0, 0, 64,
        111, 206, 144, 0, 0, 0, 0, 65, 132, 155, 128, 0, 0, 0, 0, 66, 79, 176, 144, 0, 0, 0, 0, 67,
        100, 125, 128, 0, 0, 0, 0, 68, 47, 146, 144, 0, 0, 0, 0, 69, 68, 95, 128, 0, 0, 0, 0, 69,
        243, 197, 16, 3, 1, 2, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3,
        5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 6, 8, 7, 5, 3, 5, 3, 5, 3, 5,
        3, 5, 3, 5, 3, 5, 0, 0, 0, 0, 0, 0, 255, 255, 171, 160, 1, 4, 255, 255, 171, 160, 1, 8,
        255, 255, 157, 144, 0, 12, 255, 255, 185, 176, 1, 16, 255, 255, 171, 160, 1, 21, 255, 255,
        185, 176, 1, 25, 255, 255, 171, 160, 0, 29, 255, 255, 185, 176, 0, 33, 45, 48, 48, 0, 77,
        87, 84, 0, 77, 80, 84, 0, 77, 83, 84, 0, 77, 68, 68, 84, 0, 77, 68, 84, 0, 67, 68, 84, 0,
        67, 83, 84, 0, 69, 83, 84, 0, 10, 77, 83, 84, 55, 77, 68, 84, 44, 77, 51, 46, 50, 46, 48,
        44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_CAMPO_GRANDE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        91, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 122, 52, 255, 255, 255, 255,
        184, 15, 87, 240, 255, 255, 255, 255, 184, 253, 78, 176, 255, 255, 255, 255, 185, 241, 66,
        64, 255, 255, 255, 255, 186, 222, 130, 48, 255, 255, 255, 255, 218, 56, 188, 64, 255, 255,
        255, 255, 218, 236, 8, 64, 255, 255, 255, 255, 220, 25, 239, 192, 255, 255, 255, 255, 220,
        185, 103, 48, 255, 255, 255, 255, 221, 251, 35, 64, 255, 255, 255, 255, 222, 155, 236, 48,
        255, 255, 255, 255, 223, 221, 168, 64, 255, 255, 255, 255, 224, 84, 65, 48, 255, 255, 255,
        255, 244, 152, 13, 192, 255, 255, 255, 255, 245, 5, 108, 48, 255, 255, 255, 255, 246, 192,
        114, 64, 255, 255, 255, 255, 247, 14, 44, 176, 255, 255, 255, 255, 248, 81, 58, 64, 255,
        255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255, 250, 10, 224, 192, 255, 255, 255,
        255, 250, 169, 6, 176, 255, 255, 255, 255, 251, 236, 20, 64, 255, 255, 255, 255, 252, 139,
        139, 176, 0, 0, 0, 0, 29, 201, 156, 64, 0, 0, 0, 0, 30, 120, 229, 176, 0, 0, 0, 0, 31, 160,
        67, 192, 0, 0, 0, 0, 32, 51, 221, 176, 0, 0, 0, 0, 33, 129, 119, 64, 0, 0, 0, 0, 34, 11,
        214, 176, 0, 0, 0, 0, 35, 88, 30, 192, 0, 0, 0, 0, 35, 226, 126, 48, 0, 0, 0, 0, 37, 56, 0,
        192, 0, 0, 0, 0, 37, 212, 213, 48, 0, 0, 0, 0, 39, 33, 29, 64, 0, 0, 0, 0, 39, 189, 241,
        176, 0, 0, 0, 0, 41, 0, 255, 64, 0, 0, 0, 0, 41, 148, 153, 48, 0, 0, 0, 0, 42, 234, 27,
        192, 0, 0, 0, 0, 43, 107, 64, 176, 0, 0, 0, 0, 44, 192, 195, 64, 0, 0, 0, 0, 45, 102, 210,
        48, 0, 0, 0, 0, 46, 160, 165, 64, 0, 0, 0, 0, 47, 70, 180, 48, 0, 0, 0, 0, 48, 128, 135,
        64, 0, 0, 0, 0, 49, 29, 91, 176, 0, 0, 0, 0, 50, 87, 46, 192, 0, 0, 0, 0, 51, 6, 120, 48,
        0, 0, 0, 0, 52, 56, 98, 64, 0, 0, 0, 0, 52, 248, 207, 48, 0, 0, 0, 0, 54, 32, 45, 64, 0, 0,
        0, 0, 54, 207, 118, 176, 0, 0, 0, 0, 55, 246, 212, 192, 0, 0, 0, 0, 56, 184, 147, 48, 0, 0,
        0, 0, 57, 223, 241, 64, 0, 0, 0, 0, 58, 143, 58, 176, 0, 0, 0, 0, 59, 201, 13, 192, 0, 0,
        0, 0, 60, 111, 28, 176, 0, 0, 0, 0, 61, 196, 159, 64, 0, 0, 0, 0, 62, 78, 254, 176, 0, 0,
        0, 0, 63, 146, 12, 64, 0, 0, 0, 0, 64, 46, 224, 176, 0, 0, 0, 0, 65, 135, 6, 64, 0, 0, 0,
        0, 66, 23, 253, 48, 0, 0, 0, 0, 67, 81, 208, 64, 0, 0, 0, 0, 67, 247, 223, 48, 0, 0, 0, 0,
        69, 77, 97, 192, 0, 0, 0, 0, 69, 224, 251, 176, 0, 0, 0, 0, 71, 17, 148, 64, 0, 0, 0, 0,
        71, 183, 163, 48, 0, 0, 0, 0, 72, 250, 176, 192, 0, 0, 0, 0, 73, 151, 133, 48, 0, 0, 0, 0,
        74, 218, 146, 192, 0, 0, 0, 0, 75, 128, 161, 176, 0, 0, 0, 0, 76, 186, 116, 192, 0, 0, 0,
        0, 77, 96, 131, 176, 0, 0, 0, 0, 78, 154, 86, 192, 0, 0, 0, 0, 79, 73, 160, 48, 0, 0, 0, 0,
        80, 131, 115, 64, 0, 0, 0, 0, 81, 32, 71, 176, 0, 0, 0, 0, 82, 99, 85, 64, 0, 0, 0, 0, 83,
        0, 41, 176, 0, 0, 0, 0, 84, 67, 55, 64, 0, 0, 0, 0, 84, 233, 70, 48, 0, 0, 0, 0, 86, 35,
        25, 64, 0, 0, 0, 0, 86, 201, 40, 48, 0, 0, 0, 0, 88, 2, 251, 64, 0, 0, 0, 0, 88, 169, 10,
        48, 0, 0, 0, 0, 89, 226, 221, 64, 0, 0, 0, 0, 90, 136, 236, 48, 0, 0, 0, 0, 91, 222, 110,
        192, 0, 0, 0, 0, 92, 104, 206, 48, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 204, 204, 0, 0, 255, 255, 213, 208, 1, 4,
        255, 255, 199, 192, 0, 8, 76, 77, 84, 0, 45, 48, 51, 0, 45, 48, 52, 0, 10, 60, 45, 48, 52,
        62, 52, 10,
    ];
    pub(crate) const AMERICA_CANCUN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        42, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 165, 182, 218, 96, 0, 0, 0, 0, 22, 134,
        213, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0, 0, 0, 0, 51, 71,
        73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0, 0, 0, 53, 196, 0,
        96, 0, 0, 0, 0, 54, 50, 204, 112, 0, 0, 0, 0, 55, 7, 28, 0, 0, 0, 0, 0, 56, 27, 232, 240,
        0, 0, 0, 0, 56, 230, 254, 0, 0, 0, 0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 245, 4, 128, 0,
        0, 0, 0, 59, 182, 194, 240, 0, 0, 0, 0, 60, 175, 252, 128, 0, 0, 0, 0, 61, 187, 142, 240,
        0, 0, 0, 0, 62, 143, 222, 128, 0, 0, 0, 0, 63, 155, 112, 240, 0, 0, 0, 0, 64, 111, 192,
        128, 0, 0, 0, 0, 65, 132, 141, 112, 0, 0, 0, 0, 66, 79, 162, 128, 0, 0, 0, 0, 67, 100, 111,
        112, 0, 0, 0, 0, 68, 47, 132, 128, 0, 0, 0, 0, 69, 68, 81, 112, 0, 0, 0, 0, 70, 15, 102,
        128, 0, 0, 0, 0, 71, 36, 51, 112, 0, 0, 0, 0, 71, 248, 131, 0, 0, 0, 0, 0, 73, 4, 21, 112,
        0, 0, 0, 0, 73, 216, 101, 0, 0, 0, 0, 0, 74, 227, 247, 112, 0, 0, 0, 0, 75, 184, 71, 0, 0,
        0, 0, 0, 76, 205, 19, 240, 0, 0, 0, 0, 77, 152, 41, 0, 0, 0, 0, 0, 78, 172, 245, 240, 0, 0,
        0, 0, 79, 120, 11, 0, 0, 0, 0, 0, 80, 140, 215, 240, 0, 0, 0, 0, 81, 97, 39, 128, 0, 0, 0,
        0, 82, 108, 185, 240, 0, 0, 0, 0, 83, 65, 9, 128, 0, 0, 0, 0, 84, 76, 155, 240, 0, 0, 0, 0,
        84, 205, 221, 0, 1, 3, 2, 3, 2, 3, 2, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
        4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 3, 255, 255, 174, 168, 0, 0, 255, 255, 171,
        160, 0, 4, 255, 255, 199, 192, 1, 8, 255, 255, 185, 176, 0, 12, 255, 255, 185, 176, 1, 16,
        76, 77, 84, 0, 67, 83, 84, 0, 69, 68, 84, 0, 69, 83, 84, 0, 67, 68, 84, 0, 10, 69, 83, 84,
        53, 10,
    ];
    pub(crate) const AMERICA_CARACAS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        5, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 105, 135, 26, 64, 255, 255, 255, 255, 147,
        30, 44, 60, 255, 255, 255, 255, 246, 152, 236, 72, 0, 0, 0, 0, 71, 91, 146, 112, 0, 0, 0,
        0, 87, 37, 169, 112, 1, 2, 3, 2, 3, 255, 255, 193, 64, 0, 0, 255, 255, 193, 68, 0, 4, 255,
        255, 192, 184, 0, 8, 255, 255, 199, 192, 0, 14, 76, 77, 84, 0, 67, 77, 84, 0, 45, 48, 52,
        51, 48, 0, 45, 48, 52, 0, 10, 60, 45, 48, 52, 62, 52, 10,
    ];
    pub(crate) const AMERICA_CATAMARCA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        61, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 114, 156, 175, 44, 255, 255, 255, 255,
        162, 146, 143, 48, 255, 255, 255, 255, 182, 123, 82, 64, 255, 255, 255, 255, 183, 26, 201,
        176, 255, 255, 255, 255, 184, 30, 143, 64, 255, 255, 255, 255, 184, 212, 112, 48, 255, 255,
        255, 255, 186, 23, 125, 192, 255, 255, 255, 255, 186, 181, 163, 176, 255, 255, 255, 255,
        187, 248, 177, 64, 255, 255, 255, 255, 188, 150, 215, 48, 255, 255, 255, 255, 189, 217,
        228, 192, 255, 255, 255, 255, 190, 120, 10, 176, 255, 255, 255, 255, 191, 187, 24, 64, 255,
        255, 255, 255, 192, 90, 143, 176, 255, 255, 255, 255, 193, 157, 157, 64, 255, 255, 255,
        255, 194, 59, 195, 48, 255, 255, 255, 255, 195, 126, 208, 192, 255, 255, 255, 255, 196, 28,
        246, 176, 255, 255, 255, 255, 197, 96, 4, 64, 255, 255, 255, 255, 197, 254, 42, 48, 255,
        255, 255, 255, 199, 65, 55, 192, 255, 255, 255, 255, 199, 224, 175, 48, 255, 255, 255, 255,
        200, 129, 148, 64, 255, 255, 255, 255, 202, 77, 161, 176, 255, 255, 255, 255, 202, 238,
        134, 192, 255, 255, 255, 255, 206, 77, 255, 48, 255, 255, 255, 255, 206, 176, 237, 192,
        255, 255, 255, 255, 211, 41, 53, 176, 255, 255, 255, 255, 212, 67, 100, 192, 255, 255, 255,
        255, 244, 61, 8, 48, 255, 255, 255, 255, 244, 159, 246, 192, 255, 255, 255, 255, 245, 5,
        108, 48, 255, 255, 255, 255, 246, 50, 16, 64, 255, 255, 255, 255, 246, 230, 159, 176, 255,
        255, 255, 255, 248, 19, 67, 192, 255, 255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255,
        249, 244, 119, 64, 255, 255, 255, 255, 250, 211, 54, 176, 255, 255, 255, 255, 251, 195, 53,
        192, 255, 255, 255, 255, 252, 188, 83, 48, 255, 255, 255, 255, 253, 172, 82, 64, 255, 255,
        255, 255, 254, 156, 53, 48, 255, 255, 255, 255, 255, 140, 52, 64, 0, 0, 0, 0, 7, 163, 74,
        176, 0, 0, 0, 0, 8, 36, 111, 160, 0, 0, 0, 0, 35, 148, 181, 176, 0, 0, 0, 0, 36, 16, 148,
        160, 0, 0, 0, 0, 37, 55, 242, 176, 0, 0, 0, 0, 37, 240, 118, 160, 0, 0, 0, 0, 39, 33, 15,
        48, 0, 0, 0, 0, 39, 208, 88, 160, 0, 0, 0, 0, 41, 0, 255, 64, 0, 0, 0, 0, 41, 176, 58, 160,
        0, 0, 0, 0, 42, 224, 211, 48, 0, 0, 0, 0, 43, 153, 87, 32, 0, 0, 0, 0, 55, 246, 198, 176,
        0, 0, 0, 0, 56, 191, 42, 176, 0, 0, 0, 0, 64, 187, 241, 48, 0, 0, 0, 0, 64, 213, 11, 192,
        0, 0, 0, 0, 71, 119, 9, 176, 0, 0, 0, 0, 71, 220, 127, 32, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 5, 4, 5, 4, 5, 4, 5, 4, 2, 4, 5, 4, 5, 3, 5, 2, 5, 4, 5, 255, 255, 194, 84, 0, 0, 255,
        255, 195, 208, 0, 4, 255, 255, 199, 192, 0, 8, 255, 255, 213, 208, 1, 12, 255, 255, 227,
        224, 1, 16, 255, 255, 213, 208, 0, 12, 76, 77, 84, 0, 67, 77, 84, 0, 45, 48, 52, 0, 45, 48,
        51, 0, 45, 48, 50, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_CAYENNE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 145, 244, 43, 144, 255, 255, 255, 255, 251,
        195, 53, 192, 1, 2, 255, 255, 206, 240, 0, 0, 255, 255, 199, 192, 0, 4, 255, 255, 213, 208,
        0, 8, 76, 77, 84, 0, 45, 48, 52, 0, 45, 48, 51, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_CAYMAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 105, 135, 39, 204, 255, 255, 255, 255, 147,
        15, 180, 254, 1, 2, 255, 255, 179, 180, 0, 0, 255, 255, 184, 2, 0, 4, 255, 255, 185, 176,
        0, 8, 76, 77, 84, 0, 75, 77, 84, 0, 69, 83, 84, 0, 10, 69, 83, 84, 53, 10,
    ];
    pub(crate) const AMERICA_CHICAGO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        175, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 94, 3, 254, 160, 255, 255, 255, 255, 158,
        166, 44, 128, 255, 255, 255, 255, 159, 186, 249, 112, 255, 255, 255, 255, 160, 134, 14,
        128, 255, 255, 255, 255, 161, 154, 219, 112, 255, 255, 255, 255, 162, 203, 116, 0, 255,
        255, 255, 255, 163, 131, 247, 240, 255, 255, 255, 255, 164, 69, 210, 128, 255, 255, 255,
        255, 165, 99, 217, 240, 255, 255, 255, 255, 166, 83, 217, 0, 255, 255, 255, 255, 167, 21,
        151, 112, 255, 255, 255, 255, 168, 51, 187, 0, 255, 255, 255, 255, 168, 254, 179, 240, 255,
        255, 255, 255, 170, 19, 157, 0, 255, 255, 255, 255, 170, 222, 149, 240, 255, 255, 255, 255,
        171, 243, 127, 0, 255, 255, 255, 255, 172, 190, 119, 240, 255, 255, 255, 255, 173, 211, 97,
        0, 255, 255, 255, 255, 174, 158, 89, 240, 255, 255, 255, 255, 175, 179, 67, 0, 255, 255,
        255, 255, 176, 126, 59, 240, 255, 255, 255, 255, 177, 156, 95, 128, 255, 255, 255, 255,
        178, 103, 88, 112, 255, 255, 255, 255, 179, 124, 65, 128, 255, 255, 255, 255, 180, 71, 58,
        112, 255, 255, 255, 255, 181, 92, 35, 128, 255, 255, 255, 255, 182, 39, 28, 112, 255, 255,
        255, 255, 183, 60, 5, 128, 255, 255, 255, 255, 184, 6, 254, 112, 255, 255, 255, 255, 185,
        27, 231, 128, 255, 255, 255, 255, 185, 230, 224, 112, 255, 255, 255, 255, 187, 5, 4, 0,
        255, 255, 255, 255, 187, 198, 194, 112, 255, 255, 255, 255, 188, 228, 230, 0, 255, 255,
        255, 255, 189, 175, 222, 240, 255, 255, 255, 255, 190, 196, 200, 0, 255, 255, 255, 255,
        191, 143, 192, 240, 255, 255, 255, 255, 192, 90, 214, 0, 255, 255, 255, 255, 193, 176, 60,
        112, 255, 255, 255, 255, 194, 132, 140, 0, 255, 255, 255, 255, 195, 79, 132, 240, 255, 255,
        255, 255, 196, 100, 110, 0, 255, 255, 255, 255, 197, 47, 102, 240, 255, 255, 255, 255, 198,
        77, 138, 128, 255, 255, 255, 255, 199, 15, 72, 240, 255, 255, 255, 255, 200, 45, 108, 128,
        255, 255, 255, 255, 200, 248, 101, 112, 255, 255, 255, 255, 202, 13, 78, 128, 255, 255,
        255, 255, 202, 216, 71, 112, 255, 255, 255, 255, 203, 136, 254, 128, 255, 255, 255, 255,
        210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 9, 240, 255, 255, 255, 255, 211, 117, 243,
        0, 255, 255, 255, 255, 212, 64, 235, 240, 255, 255, 255, 255, 213, 85, 213, 0, 255, 255,
        255, 255, 214, 32, 205, 240, 255, 255, 255, 255, 215, 53, 183, 0, 255, 255, 255, 255, 216,
        0, 175, 240, 255, 255, 255, 255, 217, 21, 153, 0, 255, 255, 255, 255, 217, 224, 145, 240,
        255, 255, 255, 255, 218, 254, 181, 128, 255, 255, 255, 255, 219, 192, 115, 240, 255, 255,
        255, 255, 220, 222, 151, 128, 255, 255, 255, 255, 221, 169, 144, 112, 255, 255, 255, 255,
        222, 190, 121, 128, 255, 255, 255, 255, 223, 137, 114, 112, 255, 255, 255, 255, 224, 158,
        91, 128, 255, 255, 255, 255, 225, 105, 84, 112, 255, 255, 255, 255, 226, 126, 61, 128, 255,
        255, 255, 255, 227, 73, 54, 112, 255, 255, 255, 255, 228, 94, 31, 128, 255, 255, 255, 255,
        229, 87, 60, 240, 255, 255, 255, 255, 230, 71, 60, 0, 255, 255, 255, 255, 231, 55, 30, 240,
        255, 255, 255, 255, 232, 39, 30, 0, 255, 255, 255, 255, 233, 23, 0, 240, 255, 255, 255,
        255, 234, 7, 0, 0, 255, 255, 255, 255, 234, 246, 226, 240, 255, 255, 255, 255, 235, 230,
        226, 0, 255, 255, 255, 255, 236, 214, 196, 240, 255, 255, 255, 255, 237, 198, 196, 0, 255,
        255, 255, 255, 238, 191, 225, 112, 255, 255, 255, 255, 239, 175, 224, 128, 255, 255, 255,
        255, 240, 159, 195, 112, 255, 255, 255, 255, 241, 143, 194, 128, 255, 255, 255, 255, 242,
        127, 165, 112, 255, 255, 255, 255, 243, 111, 164, 128, 255, 255, 255, 255, 244, 95, 135,
        112, 255, 255, 255, 255, 245, 79, 134, 128, 255, 255, 255, 255, 246, 63, 105, 112, 255,
        255, 255, 255, 247, 47, 104, 128, 255, 255, 255, 255, 248, 40, 133, 240, 255, 255, 255,
        255, 249, 15, 74, 128, 255, 255, 255, 255, 250, 8, 103, 240, 255, 255, 255, 255, 250, 248,
        103, 0, 255, 255, 255, 255, 251, 232, 73, 240, 255, 255, 255, 255, 252, 216, 73, 0, 255,
        255, 255, 255, 253, 200, 43, 240, 255, 255, 255, 255, 254, 184, 43, 0, 255, 255, 255, 255,
        255, 168, 13, 240, 0, 0, 0, 0, 0, 152, 13, 0, 0, 0, 0, 0, 1, 135, 239, 240, 0, 0, 0, 0, 2,
        119, 239, 0, 0, 0, 0, 0, 3, 113, 12, 112, 0, 0, 0, 0, 4, 97, 11, 128, 0, 0, 0, 0, 5, 80,
        238, 112, 0, 0, 0, 0, 6, 64, 237, 128, 0, 0, 0, 0, 7, 48, 208, 112, 0, 0, 0, 0, 7, 141, 39,
        128, 0, 0, 0, 0, 9, 16, 178, 112, 0, 0, 0, 0, 9, 173, 163, 0, 0, 0, 0, 0, 10, 240, 148,
        112, 0, 0, 0, 0, 11, 224, 147, 128, 0, 0, 0, 0, 12, 217, 176, 240, 0, 0, 0, 0, 13, 192,
        117, 128, 0, 0, 0, 0, 14, 185, 146, 240, 0, 0, 0, 0, 15, 169, 146, 0, 0, 0, 0, 0, 16, 153,
        116, 240, 0, 0, 0, 0, 17, 137, 116, 0, 0, 0, 0, 0, 18, 121, 86, 240, 0, 0, 0, 0, 19, 105,
        86, 0, 0, 0, 0, 0, 20, 89, 56, 240, 0, 0, 0, 0, 21, 73, 56, 0, 0, 0, 0, 0, 22, 57, 26, 240,
        0, 0, 0, 0, 23, 41, 26, 0, 0, 0, 0, 0, 24, 34, 55, 112, 0, 0, 0, 0, 25, 8, 252, 0, 0, 0, 0,
        0, 26, 2, 25, 112, 0, 0, 0, 0, 26, 242, 24, 128, 0, 0, 0, 0, 27, 225, 251, 112, 0, 0, 0, 0,
        28, 209, 250, 128, 0, 0, 0, 0, 29, 193, 221, 112, 0, 0, 0, 0, 30, 177, 220, 128, 0, 0, 0,
        0, 31, 161, 191, 112, 0, 0, 0, 0, 32, 118, 15, 0, 0, 0, 0, 0, 33, 129, 161, 112, 0, 0, 0,
        0, 34, 85, 241, 0, 0, 0, 0, 0, 35, 106, 189, 240, 0, 0, 0, 0, 36, 53, 211, 0, 0, 0, 0, 0,
        37, 74, 159, 240, 0, 0, 0, 0, 38, 21, 181, 0, 0, 0, 0, 0, 39, 42, 129, 240, 0, 0, 0, 0, 39,
        254, 209, 128, 0, 0, 0, 0, 41, 10, 99, 240, 0, 0, 0, 0, 41, 222, 179, 128, 0, 0, 0, 0, 42,
        234, 69, 240, 0, 0, 0, 0, 43, 190, 149, 128, 0, 0, 0, 0, 44, 211, 98, 112, 0, 0, 0, 0, 45,
        158, 119, 128, 0, 0, 0, 0, 46, 179, 68, 112, 0, 0, 0, 0, 47, 126, 89, 128, 0, 0, 0, 0, 48,
        147, 38, 112, 0, 0, 0, 0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8, 112, 0, 0, 0, 0, 51, 71,
        88, 0, 0, 0, 0, 0, 52, 82, 234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0, 0, 0, 0, 54, 50, 204,
        112, 0, 0, 0, 0, 55, 7, 28, 0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0, 0, 56, 230, 254, 0,
        0, 0, 0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 198, 224, 0, 0, 0, 0, 0, 59, 219, 172, 240,
        0, 0, 0, 0, 60, 175, 252, 128, 0, 0, 0, 0, 61, 187, 142, 240, 0, 0, 0, 0, 62, 143, 222,
        128, 0, 0, 0, 0, 63, 155, 112, 240, 0, 0, 0, 0, 64, 111, 192, 128, 0, 0, 0, 0, 65, 132,
        141, 112, 0, 0, 0, 0, 66, 79, 162, 128, 0, 0, 0, 0, 67, 100, 111, 112, 0, 0, 0, 0, 68, 47,
        132, 128, 0, 0, 0, 0, 69, 68, 81, 112, 0, 0, 0, 0, 69, 243, 183, 0, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 4, 5, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255, 173, 212, 0, 0, 255, 255, 185,
        176, 1, 4, 255, 255, 171, 160, 0, 8, 255, 255, 185, 176, 0, 12, 255, 255, 185, 176, 1, 16,
        255, 255, 185, 176, 1, 20, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 69, 83, 84, 0, 67,
        87, 84, 0, 67, 80, 84, 0, 10, 67, 83, 84, 54, 67, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44,
        77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_CHIHUAHUA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        19, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 165, 182, 232, 112, 255, 255, 255, 255,
        175, 242, 110, 224, 255, 255, 255, 255, 182, 102, 86, 96, 255, 255, 255, 255, 183, 67, 210,
        96, 255, 255, 255, 255, 184, 12, 54, 96, 255, 255, 255, 255, 184, 253, 134, 240, 0, 0, 0,
        0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8, 112, 0, 0, 0, 0, 51, 71, 88, 0, 0, 0, 0, 0, 52,
        82, 234, 112, 0, 0, 0, 0, 53, 39, 72, 16, 0, 0, 0, 0, 54, 50, 218, 128, 0, 0, 0, 0, 55, 7,
        42, 16, 0, 0, 0, 0, 56, 27, 247, 0, 0, 0, 0, 0, 56, 231, 12, 16, 0, 0, 0, 0, 57, 251, 217,
        0, 0, 0, 0, 0, 58, 245, 18, 144, 0, 0, 0, 0, 59, 182, 209, 0, 0, 0, 0, 0, 60, 176, 10, 144,
        1, 2, 1, 2, 1, 2, 3, 2, 3, 2, 4, 1, 4, 1, 4, 1, 4, 1, 4, 255, 255, 156, 140, 0, 0, 255,
        255, 157, 144, 0, 4, 255, 255, 171, 160, 0, 8, 255, 255, 185, 176, 1, 12, 255, 255, 171,
        160, 1, 16, 76, 77, 84, 0, 77, 83, 84, 0, 67, 83, 84, 0, 67, 68, 84, 0, 77, 68, 84, 0, 10,
        77, 83, 84, 55, 77, 68, 84, 44, 77, 52, 46, 49, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const AMERICA_CORAL_HARBOUR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 94, 61, 81, 120, 255, 255, 255, 255, 158,
        184, 147, 112, 255, 255, 255, 255, 159, 186, 235, 96, 255, 255, 255, 255, 160, 207, 212,
        112, 255, 255, 255, 255, 161, 162, 154, 64, 255, 255, 255, 255, 203, 136, 240, 112, 255,
        255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 96, 251, 224, 2, 1, 2, 1, 2, 3,
        4, 2, 255, 255, 178, 8, 0, 0, 255, 255, 199, 192, 1, 4, 255, 255, 185, 176, 0, 8, 255, 255,
        199, 192, 1, 12, 255, 255, 199, 192, 1, 16, 76, 77, 84, 0, 69, 68, 84, 0, 69, 83, 84, 0,
        69, 87, 84, 0, 69, 80, 84, 0, 10, 69, 83, 84, 53, 10,
    ];
    pub(crate) const AMERICA_CORDOBA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        61, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 114, 156, 173, 176, 255, 255, 255, 255,
        162, 146, 143, 48, 255, 255, 255, 255, 182, 123, 82, 64, 255, 255, 255, 255, 183, 26, 201,
        176, 255, 255, 255, 255, 184, 30, 143, 64, 255, 255, 255, 255, 184, 212, 112, 48, 255, 255,
        255, 255, 186, 23, 125, 192, 255, 255, 255, 255, 186, 181, 163, 176, 255, 255, 255, 255,
        187, 248, 177, 64, 255, 255, 255, 255, 188, 150, 215, 48, 255, 255, 255, 255, 189, 217,
        228, 192, 255, 255, 255, 255, 190, 120, 10, 176, 255, 255, 255, 255, 191, 187, 24, 64, 255,
        255, 255, 255, 192, 90, 143, 176, 255, 255, 255, 255, 193, 157, 157, 64, 255, 255, 255,
        255, 194, 59, 195, 48, 255, 255, 255, 255, 195, 126, 208, 192, 255, 255, 255, 255, 196, 28,
        246, 176, 255, 255, 255, 255, 197, 96, 4, 64, 255, 255, 255, 255, 197, 254, 42, 48, 255,
        255, 255, 255, 199, 65, 55, 192, 255, 255, 255, 255, 199, 224, 175, 48, 255, 255, 255, 255,
        200, 129, 148, 64, 255, 255, 255, 255, 202, 77, 161, 176, 255, 255, 255, 255, 202, 238,
        134, 192, 255, 255, 255, 255, 206, 77, 255, 48, 255, 255, 255, 255, 206, 176, 237, 192,
        255, 255, 255, 255, 211, 41, 53, 176, 255, 255, 255, 255, 212, 67, 100, 192, 255, 255, 255,
        255, 244, 61, 8, 48, 255, 255, 255, 255, 244, 159, 246, 192, 255, 255, 255, 255, 245, 5,
        108, 48, 255, 255, 255, 255, 246, 50, 16, 64, 255, 255, 255, 255, 246, 230, 159, 176, 255,
        255, 255, 255, 248, 19, 67, 192, 255, 255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255,
        249, 244, 119, 64, 255, 255, 255, 255, 250, 211, 54, 176, 255, 255, 255, 255, 251, 195, 53,
        192, 255, 255, 255, 255, 252, 188, 83, 48, 255, 255, 255, 255, 253, 172, 82, 64, 255, 255,
        255, 255, 254, 156, 53, 48, 255, 255, 255, 255, 255, 140, 52, 64, 0, 0, 0, 0, 7, 163, 74,
        176, 0, 0, 0, 0, 8, 36, 111, 160, 0, 0, 0, 0, 35, 148, 181, 176, 0, 0, 0, 0, 36, 16, 148,
        160, 0, 0, 0, 0, 37, 55, 242, 176, 0, 0, 0, 0, 37, 240, 118, 160, 0, 0, 0, 0, 39, 33, 15,
        48, 0, 0, 0, 0, 39, 208, 88, 160, 0, 0, 0, 0, 41, 0, 255, 64, 0, 0, 0, 0, 41, 176, 58, 160,
        0, 0, 0, 0, 42, 224, 211, 48, 0, 0, 0, 0, 43, 153, 87, 32, 0, 0, 0, 0, 55, 246, 198, 176,
        0, 0, 0, 0, 56, 191, 42, 176, 0, 0, 0, 0, 71, 119, 9, 176, 0, 0, 0, 0, 71, 220, 127, 32, 0,
        0, 0, 0, 72, 250, 162, 176, 0, 0, 0, 0, 73, 188, 97, 32, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 5, 4, 5, 4, 5, 4, 5, 4, 2, 4, 5, 4, 5, 3, 5, 4, 5, 4, 5, 255, 255, 195, 208, 0, 0, 255,
        255, 195, 208, 0, 4, 255, 255, 199, 192, 0, 8, 255, 255, 213, 208, 1, 12, 255, 255, 227,
        224, 1, 16, 255, 255, 213, 208, 0, 12, 76, 77, 84, 0, 67, 77, 84, 0, 45, 48, 52, 0, 45, 48,
        51, 0, 45, 48, 50, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_COSTA_RICA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 105, 135, 42, 77, 255, 255, 255, 255, 163,
        232, 22, 77, 0, 0, 0, 0, 17, 54, 73, 96, 0, 0, 0, 0, 17, 183, 110, 80, 0, 0, 0, 0, 19, 22,
        43, 96, 0, 0, 0, 0, 19, 151, 80, 80, 0, 0, 0, 0, 39, 151, 224, 96, 0, 0, 0, 0, 40, 110,
        182, 208, 0, 0, 0, 0, 41, 119, 194, 96, 0, 0, 0, 0, 41, 194, 217, 208, 1, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 255, 255, 177, 51, 0, 0, 255, 255, 177, 51, 0, 4, 255, 255, 185, 176, 1, 9, 255,
        255, 171, 160, 0, 13, 76, 77, 84, 0, 83, 74, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 10,
        67, 83, 84, 54, 10,
    ];
    pub(crate) const AMERICA_CRESTON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 94, 61, 112, 188, 255, 255, 255, 255, 155,
        214, 75, 112, 255, 255, 255, 255, 158, 249, 59, 0, 1, 2, 1, 255, 255, 146, 196, 0, 0, 255,
        255, 157, 144, 0, 4, 255, 255, 143, 128, 0, 8, 76, 77, 84, 0, 77, 83, 84, 0, 80, 83, 84, 0,
        10, 77, 83, 84, 55, 10,
    ];
    pub(crate) const AMERICA_CUIABA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        89, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 123, 148, 255, 255, 255, 255,
        184, 15, 87, 240, 255, 255, 255, 255, 184, 253, 78, 176, 255, 255, 255, 255, 185, 241, 66,
        64, 255, 255, 255, 255, 186, 222, 130, 48, 255, 255, 255, 255, 218, 56, 188, 64, 255, 255,
        255, 255, 218, 236, 8, 64, 255, 255, 255, 255, 220, 25, 239, 192, 255, 255, 255, 255, 220,
        185, 103, 48, 255, 255, 255, 255, 221, 251, 35, 64, 255, 255, 255, 255, 222, 155, 236, 48,
        255, 255, 255, 255, 223, 221, 168, 64, 255, 255, 255, 255, 224, 84, 65, 48, 255, 255, 255,
        255, 244, 152, 13, 192, 255, 255, 255, 255, 245, 5, 108, 48, 255, 255, 255, 255, 246, 192,
        114, 64, 255, 255, 255, 255, 247, 14, 44, 176, 255, 255, 255, 255, 248, 81, 58, 64, 255,
        255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255, 250, 10, 224, 192, 255, 255, 255,
        255, 250, 169, 6, 176, 255, 255, 255, 255, 251, 236, 20, 64, 255, 255, 255, 255, 252, 139,
        139, 176, 0, 0, 0, 0, 29, 201, 156, 64, 0, 0, 0, 0, 30, 120, 229, 176, 0, 0, 0, 0, 31, 160,
        67, 192, 0, 0, 0, 0, 32, 51, 221, 176, 0, 0, 0, 0, 33, 129, 119, 64, 0, 0, 0, 0, 34, 11,
        214, 176, 0, 0, 0, 0, 35, 88, 30, 192, 0, 0, 0, 0, 35, 226, 126, 48, 0, 0, 0, 0, 37, 56, 0,
        192, 0, 0, 0, 0, 37, 212, 213, 48, 0, 0, 0, 0, 39, 33, 29, 64, 0, 0, 0, 0, 39, 189, 241,
        176, 0, 0, 0, 0, 41, 0, 255, 64, 0, 0, 0, 0, 41, 148, 153, 48, 0, 0, 0, 0, 42, 234, 27,
        192, 0, 0, 0, 0, 43, 107, 64, 176, 0, 0, 0, 0, 44, 192, 195, 64, 0, 0, 0, 0, 45, 102, 210,
        48, 0, 0, 0, 0, 46, 160, 165, 64, 0, 0, 0, 0, 47, 70, 180, 48, 0, 0, 0, 0, 48, 128, 135,
        64, 0, 0, 0, 0, 49, 29, 91, 176, 0, 0, 0, 0, 50, 87, 46, 192, 0, 0, 0, 0, 51, 6, 120, 48,
        0, 0, 0, 0, 52, 56, 98, 64, 0, 0, 0, 0, 52, 248, 207, 48, 0, 0, 0, 0, 54, 32, 45, 64, 0, 0,
        0, 0, 54, 207, 118, 176, 0, 0, 0, 0, 55, 246, 212, 192, 0, 0, 0, 0, 56, 184, 147, 48, 0, 0,
        0, 0, 57, 223, 241, 64, 0, 0, 0, 0, 58, 143, 58, 176, 0, 0, 0, 0, 59, 201, 13, 192, 0, 0,
        0, 0, 60, 111, 28, 176, 0, 0, 0, 0, 61, 196, 159, 64, 0, 0, 0, 0, 62, 78, 254, 176, 0, 0,
        0, 0, 65, 135, 6, 64, 0, 0, 0, 0, 66, 23, 253, 48, 0, 0, 0, 0, 67, 81, 208, 64, 0, 0, 0, 0,
        67, 247, 223, 48, 0, 0, 0, 0, 69, 77, 97, 192, 0, 0, 0, 0, 69, 224, 251, 176, 0, 0, 0, 0,
        71, 17, 148, 64, 0, 0, 0, 0, 71, 183, 163, 48, 0, 0, 0, 0, 72, 250, 176, 192, 0, 0, 0, 0,
        73, 151, 133, 48, 0, 0, 0, 0, 74, 218, 146, 192, 0, 0, 0, 0, 75, 128, 161, 176, 0, 0, 0, 0,
        76, 186, 116, 192, 0, 0, 0, 0, 77, 96, 131, 176, 0, 0, 0, 0, 78, 154, 86, 192, 0, 0, 0, 0,
        79, 73, 160, 48, 0, 0, 0, 0, 80, 131, 115, 64, 0, 0, 0, 0, 81, 32, 71, 176, 0, 0, 0, 0, 82,
        99, 85, 64, 0, 0, 0, 0, 83, 0, 41, 176, 0, 0, 0, 0, 84, 67, 55, 64, 0, 0, 0, 0, 84, 233,
        70, 48, 0, 0, 0, 0, 86, 35, 25, 64, 0, 0, 0, 0, 86, 201, 40, 48, 0, 0, 0, 0, 88, 2, 251,
        64, 0, 0, 0, 0, 88, 169, 10, 48, 0, 0, 0, 0, 89, 226, 221, 64, 0, 0, 0, 0, 90, 136, 236,
        48, 0, 0, 0, 0, 91, 222, 110, 192, 0, 0, 0, 0, 92, 104, 206, 48, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 203, 108, 0, 0, 255,
        255, 213, 208, 1, 4, 255, 255, 199, 192, 0, 8, 76, 77, 84, 0, 45, 48, 51, 0, 45, 48, 52, 0,
        10, 60, 45, 48, 52, 62, 52, 10,
    ];
    pub(crate) const AMERICA_CURACAO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 147, 30, 46, 35, 255, 255, 255, 255, 246,
        152, 236, 72, 1, 2, 255, 255, 191, 93, 0, 0, 255, 255, 192, 184, 0, 4, 255, 255, 199, 192,
        0, 10, 76, 77, 84, 0, 45, 48, 52, 51, 48, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_DANMARKSHAVN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        34, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 155, 128, 73, 0, 0, 0, 0, 0, 19, 77, 124,
        80, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220,
        144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175,
        144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188,
        189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140,
        144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92,
        99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16,
        0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0,
        0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0,
        0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0,
        0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0,
        0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 48, 231, 78, 48, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 255, 255, 238, 128, 0,
        0, 255, 255, 213, 208, 0, 4, 255, 255, 227, 224, 1, 8, 0, 0, 0, 0, 0, 12, 76, 77, 84, 0,
        45, 48, 51, 0, 45, 48, 50, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AMERICA_DAWSON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        93, 0, 0, 0, 9, 0, 0, 0, 37, 255, 255, 255, 255, 125, 134, 142, 180, 255, 255, 255, 255,
        158, 184, 203, 176, 255, 255, 255, 255, 159, 187, 35, 160, 255, 255, 255, 255, 160, 208,
        12, 176, 255, 255, 255, 255, 161, 162, 210, 128, 255, 255, 255, 255, 203, 137, 40, 176,
        255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 52, 32, 255, 255, 255,
        255, 247, 47, 118, 144, 255, 255, 255, 255, 248, 40, 162, 16, 0, 0, 0, 0, 7, 48, 236, 144,
        0, 0, 0, 0, 19, 105, 114, 32, 0, 0, 0, 0, 20, 89, 85, 16, 0, 0, 0, 0, 21, 73, 84, 32, 0, 0,
        0, 0, 22, 57, 55, 16, 0, 0, 0, 0, 23, 41, 54, 32, 0, 0, 0, 0, 24, 34, 83, 144, 0, 0, 0, 0,
        25, 9, 24, 32, 0, 0, 0, 0, 26, 2, 53, 144, 0, 0, 0, 0, 26, 242, 52, 160, 0, 0, 0, 0, 27,
        226, 23, 144, 0, 0, 0, 0, 28, 210, 22, 160, 0, 0, 0, 0, 29, 193, 249, 144, 0, 0, 0, 0, 30,
        177, 248, 160, 0, 0, 0, 0, 31, 161, 219, 144, 0, 0, 0, 0, 32, 118, 43, 32, 0, 0, 0, 0, 33,
        129, 189, 144, 0, 0, 0, 0, 34, 86, 13, 32, 0, 0, 0, 0, 35, 106, 218, 16, 0, 0, 0, 0, 36,
        53, 239, 32, 0, 0, 0, 0, 37, 74, 188, 16, 0, 0, 0, 0, 38, 21, 209, 32, 0, 0, 0, 0, 39, 42,
        158, 16, 0, 0, 0, 0, 39, 254, 237, 160, 0, 0, 0, 0, 41, 10, 128, 16, 0, 0, 0, 0, 41, 222,
        207, 160, 0, 0, 0, 0, 42, 234, 98, 16, 0, 0, 0, 0, 43, 190, 177, 160, 0, 0, 0, 0, 44, 211,
        126, 144, 0, 0, 0, 0, 45, 158, 147, 160, 0, 0, 0, 0, 46, 179, 96, 144, 0, 0, 0, 0, 47, 126,
        117, 160, 0, 0, 0, 0, 48, 147, 66, 144, 0, 0, 0, 0, 49, 103, 146, 32, 0, 0, 0, 0, 50, 115,
        36, 144, 0, 0, 0, 0, 51, 71, 116, 32, 0, 0, 0, 0, 52, 83, 6, 144, 0, 0, 0, 0, 53, 39, 86,
        32, 0, 0, 0, 0, 54, 50, 232, 144, 0, 0, 0, 0, 55, 7, 56, 32, 0, 0, 0, 0, 56, 28, 5, 16, 0,
        0, 0, 0, 56, 231, 26, 32, 0, 0, 0, 0, 57, 251, 231, 16, 0, 0, 0, 0, 58, 198, 252, 32, 0, 0,
        0, 0, 59, 219, 201, 16, 0, 0, 0, 0, 60, 176, 24, 160, 0, 0, 0, 0, 61, 187, 171, 16, 0, 0,
        0, 0, 62, 143, 250, 160, 0, 0, 0, 0, 63, 155, 141, 16, 0, 0, 0, 0, 64, 111, 220, 160, 0, 0,
        0, 0, 65, 132, 169, 144, 0, 0, 0, 0, 66, 79, 190, 160, 0, 0, 0, 0, 67, 100, 139, 144, 0, 0,
        0, 0, 68, 47, 160, 160, 0, 0, 0, 0, 69, 68, 109, 144, 0, 0, 0, 0, 69, 243, 211, 32, 0, 0,
        0, 0, 71, 45, 138, 16, 0, 0, 0, 0, 71, 211, 181, 32, 0, 0, 0, 0, 73, 13, 108, 16, 0, 0, 0,
        0, 73, 179, 151, 32, 0, 0, 0, 0, 74, 237, 78, 16, 0, 0, 0, 0, 75, 156, 179, 160, 0, 0, 0,
        0, 76, 214, 106, 144, 0, 0, 0, 0, 77, 124, 149, 160, 0, 0, 0, 0, 78, 182, 76, 144, 0, 0, 0,
        0, 79, 92, 119, 160, 0, 0, 0, 0, 80, 150, 46, 144, 0, 0, 0, 0, 81, 60, 89, 160, 0, 0, 0, 0,
        82, 118, 16, 144, 0, 0, 0, 0, 83, 28, 59, 160, 0, 0, 0, 0, 84, 85, 242, 144, 0, 0, 0, 0,
        84, 252, 29, 160, 0, 0, 0, 0, 86, 53, 212, 144, 0, 0, 0, 0, 86, 229, 58, 32, 0, 0, 0, 0,
        88, 30, 241, 16, 0, 0, 0, 0, 88, 197, 28, 32, 0, 0, 0, 0, 89, 254, 211, 16, 0, 0, 0, 0, 90,
        164, 254, 32, 0, 0, 0, 0, 91, 222, 181, 16, 0, 0, 0, 0, 92, 132, 224, 32, 0, 0, 0, 0, 93,
        190, 151, 16, 0, 0, 0, 0, 94, 100, 194, 32, 0, 0, 0, 0, 95, 158, 92, 240, 2, 1, 2, 1, 2, 3,
        4, 2, 5, 2, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 8, 255, 255,
        125, 76, 0, 0, 255, 255, 143, 128, 1, 4, 255, 255, 129, 112, 0, 8, 255, 255, 143, 128, 1,
        12, 255, 255, 143, 128, 1, 16, 255, 255, 157, 144, 1, 20, 255, 255, 143, 128, 0, 25, 255,
        255, 157, 144, 1, 29, 255, 255, 157, 144, 0, 33, 76, 77, 84, 0, 89, 68, 84, 0, 89, 83, 84,
        0, 89, 87, 84, 0, 89, 80, 84, 0, 89, 68, 68, 84, 0, 80, 83, 84, 0, 80, 68, 84, 0, 77, 83,
        84, 0, 10, 77, 83, 84, 55, 10,
    ];
    pub(crate) const AMERICA_DAWSON_CREEK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        58, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 94, 61, 116, 56, 255, 255, 255, 255, 158,
        184, 189, 160, 255, 255, 255, 255, 159, 187, 21, 144, 255, 255, 255, 255, 203, 137, 26,
        160, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 38, 16, 255, 255,
        255, 255, 213, 85, 241, 32, 255, 255, 255, 255, 214, 32, 234, 16, 255, 255, 255, 255, 215,
        53, 211, 32, 255, 255, 255, 255, 216, 0, 204, 16, 255, 255, 255, 255, 217, 21, 181, 32,
        255, 255, 255, 255, 217, 224, 174, 16, 255, 255, 255, 255, 218, 254, 209, 160, 255, 255,
        255, 255, 219, 192, 144, 16, 255, 255, 255, 255, 220, 222, 179, 160, 255, 255, 255, 255,
        221, 169, 172, 144, 255, 255, 255, 255, 222, 190, 149, 160, 255, 255, 255, 255, 223, 137,
        142, 144, 255, 255, 255, 255, 224, 158, 119, 160, 255, 255, 255, 255, 225, 105, 112, 144,
        255, 255, 255, 255, 226, 126, 89, 160, 255, 255, 255, 255, 227, 73, 82, 144, 255, 255, 255,
        255, 228, 94, 59, 160, 255, 255, 255, 255, 229, 41, 52, 144, 255, 255, 255, 255, 230, 71,
        88, 32, 255, 255, 255, 255, 231, 18, 81, 16, 255, 255, 255, 255, 232, 39, 58, 32, 255, 255,
        255, 255, 232, 242, 51, 16, 255, 255, 255, 255, 234, 7, 28, 32, 255, 255, 255, 255, 234,
        210, 21, 16, 255, 255, 255, 255, 235, 230, 254, 32, 255, 255, 255, 255, 236, 177, 247, 16,
        255, 255, 255, 255, 237, 198, 224, 32, 255, 255, 255, 255, 238, 145, 217, 16, 255, 255,
        255, 255, 239, 175, 252, 160, 255, 255, 255, 255, 240, 113, 187, 16, 255, 255, 255, 255,
        241, 143, 222, 160, 255, 255, 255, 255, 242, 127, 193, 144, 255, 255, 255, 255, 243, 111,
        192, 160, 255, 255, 255, 255, 244, 95, 163, 144, 255, 255, 255, 255, 245, 79, 162, 160,
        255, 255, 255, 255, 246, 63, 133, 144, 255, 255, 255, 255, 247, 47, 132, 160, 255, 255,
        255, 255, 248, 40, 162, 16, 255, 255, 255, 255, 249, 15, 102, 160, 255, 255, 255, 255, 250,
        8, 132, 16, 255, 255, 255, 255, 250, 248, 131, 32, 255, 255, 255, 255, 251, 232, 102, 16,
        255, 255, 255, 255, 252, 216, 101, 32, 255, 255, 255, 255, 253, 200, 72, 16, 255, 255, 255,
        255, 254, 184, 71, 32, 255, 255, 255, 255, 255, 168, 42, 16, 0, 0, 0, 0, 0, 152, 41, 32, 0,
        0, 0, 0, 1, 136, 12, 16, 0, 0, 0, 0, 2, 120, 11, 32, 0, 0, 0, 0, 3, 113, 40, 144, 0, 0, 0,
        0, 4, 97, 39, 160, 0, 0, 0, 0, 5, 1, 240, 144, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 5, 255, 255, 143, 72, 0, 0, 255, 255, 157, 144, 1, 4,
        255, 255, 143, 128, 0, 8, 255, 255, 157, 144, 1, 12, 255, 255, 157, 144, 1, 16, 255, 255,
        157, 144, 0, 20, 76, 77, 84, 0, 80, 68, 84, 0, 80, 83, 84, 0, 80, 87, 84, 0, 80, 80, 84, 0,
        77, 83, 84, 0, 10, 77, 83, 84, 55, 10,
    ];
    pub(crate) const AMERICA_DETROIT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        80, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 133, 189, 34, 91, 255, 255, 255, 255, 153,
        60, 148, 0, 255, 255, 255, 255, 203, 136, 240, 112, 255, 255, 255, 255, 210, 35, 244, 112,
        255, 255, 255, 255, 210, 96, 251, 224, 255, 255, 255, 255, 215, 53, 168, 240, 255, 255,
        255, 255, 216, 0, 161, 224, 255, 255, 255, 255, 251, 51, 144, 140, 255, 255, 255, 255, 251,
        232, 59, 224, 255, 255, 255, 255, 252, 216, 58, 240, 255, 255, 255, 255, 253, 200, 29, 224,
        0, 0, 0, 0, 6, 64, 223, 112, 0, 0, 0, 0, 7, 48, 194, 96, 0, 0, 0, 0, 7, 141, 25, 112, 0, 0,
        0, 0, 9, 16, 164, 96, 0, 0, 0, 0, 10, 0, 163, 112, 0, 0, 0, 0, 10, 240, 134, 96, 0, 0, 0,
        0, 11, 224, 133, 112, 0, 0, 0, 0, 12, 217, 162, 224, 0, 0, 0, 0, 13, 192, 103, 112, 0, 0,
        0, 0, 14, 185, 132, 224, 0, 0, 0, 0, 15, 169, 131, 240, 0, 0, 0, 0, 16, 153, 102, 224, 0,
        0, 0, 0, 17, 137, 101, 240, 0, 0, 0, 0, 18, 121, 72, 224, 0, 0, 0, 0, 19, 105, 71, 240, 0,
        0, 0, 0, 20, 89, 42, 224, 0, 0, 0, 0, 21, 73, 41, 240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0,
        0, 0, 23, 41, 11, 240, 0, 0, 0, 0, 24, 34, 41, 96, 0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0,
        26, 2, 11, 96, 0, 0, 0, 0, 26, 242, 10, 112, 0, 0, 0, 0, 27, 225, 237, 96, 0, 0, 0, 0, 28,
        209, 236, 112, 0, 0, 0, 0, 29, 193, 207, 96, 0, 0, 0, 0, 30, 177, 206, 112, 0, 0, 0, 0, 31,
        161, 177, 96, 0, 0, 0, 0, 32, 118, 0, 240, 0, 0, 0, 0, 33, 129, 147, 96, 0, 0, 0, 0, 34,
        85, 226, 240, 0, 0, 0, 0, 35, 106, 175, 224, 0, 0, 0, 0, 36, 53, 196, 240, 0, 0, 0, 0, 37,
        74, 145, 224, 0, 0, 0, 0, 38, 21, 166, 240, 0, 0, 0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39,
        254, 195, 112, 0, 0, 0, 0, 41, 10, 85, 224, 0, 0, 0, 0, 41, 222, 165, 112, 0, 0, 0, 0, 42,
        234, 55, 224, 0, 0, 0, 0, 43, 190, 135, 112, 0, 0, 0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45,
        158, 105, 112, 0, 0, 0, 0, 46, 179, 54, 96, 0, 0, 0, 0, 47, 126, 75, 112, 0, 0, 0, 0, 48,
        147, 24, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0, 0, 0, 0, 51,
        71, 73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0, 0, 0, 54, 50,
        190, 96, 0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56, 27, 218, 224, 0, 0, 0, 0, 56, 230,
        239, 240, 0, 0, 0, 0, 57, 251, 188, 224, 0, 0, 0, 0, 58, 198, 209, 240, 0, 0, 0, 0, 59,
        219, 158, 224, 0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0, 61, 187, 128, 224, 0, 0, 0, 0,
        62, 143, 208, 112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112, 0, 0, 0, 0,
        65, 132, 127, 96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0, 0, 0, 0,
        68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 1, 2, 3, 4, 2,
        5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
        5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
        5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 255, 255, 178, 37, 0, 0, 255, 255, 171, 160,
        0, 4, 255, 255, 185, 176, 0, 8, 255, 255, 199, 192, 1, 12, 255, 255, 199, 192, 1, 16, 255,
        255, 199, 192, 1, 20, 76, 77, 84, 0, 67, 83, 84, 0, 69, 83, 84, 0, 69, 87, 84, 0, 69, 80,
        84, 0, 69, 68, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77,
        49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_DOMINICA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 244, 52, 76, 1, 255, 255, 198, 112, 0,
        0, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_EDMONTON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        89, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 136, 222, 206, 224, 255, 255, 255, 255,
        158, 184, 175, 144, 255, 255, 255, 255, 159, 187, 7, 128, 255, 255, 255, 255, 160, 152,
        145, 144, 255, 255, 255, 255, 160, 210, 133, 128, 255, 255, 255, 255, 162, 138, 232, 144,
        255, 255, 255, 255, 163, 132, 6, 0, 255, 255, 255, 255, 164, 106, 202, 144, 255, 255, 255,
        255, 165, 53, 195, 128, 255, 255, 255, 255, 166, 83, 231, 16, 255, 255, 255, 255, 167, 21,
        165, 128, 255, 255, 255, 255, 168, 51, 201, 16, 255, 255, 255, 255, 168, 254, 194, 0, 255,
        255, 255, 255, 203, 137, 12, 144, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255,
        255, 210, 97, 24, 0, 255, 255, 255, 255, 213, 85, 227, 16, 255, 255, 255, 255, 214, 32,
        220, 0, 0, 0, 0, 0, 4, 97, 25, 144, 0, 0, 0, 0, 5, 80, 252, 128, 0, 0, 0, 0, 6, 64, 251,
        144, 0, 0, 0, 0, 7, 48, 222, 128, 0, 0, 0, 0, 8, 32, 221, 144, 0, 0, 0, 0, 9, 16, 192, 128,
        0, 0, 0, 0, 10, 0, 191, 144, 0, 0, 0, 0, 10, 240, 162, 128, 0, 0, 0, 0, 11, 224, 161, 144,
        0, 0, 0, 0, 12, 217, 191, 0, 0, 0, 0, 0, 13, 192, 131, 144, 0, 0, 0, 0, 14, 185, 161, 0, 0,
        0, 0, 0, 15, 169, 160, 16, 0, 0, 0, 0, 16, 153, 131, 0, 0, 0, 0, 0, 17, 137, 130, 16, 0, 0,
        0, 0, 18, 121, 101, 0, 0, 0, 0, 0, 19, 105, 100, 16, 0, 0, 0, 0, 20, 89, 71, 0, 0, 0, 0, 0,
        21, 73, 70, 16, 0, 0, 0, 0, 22, 57, 41, 0, 0, 0, 0, 0, 23, 41, 40, 16, 0, 0, 0, 0, 24, 34,
        69, 128, 0, 0, 0, 0, 25, 9, 10, 16, 0, 0, 0, 0, 26, 2, 39, 128, 0, 0, 0, 0, 26, 242, 38,
        144, 0, 0, 0, 0, 27, 226, 9, 128, 0, 0, 0, 0, 28, 210, 8, 144, 0, 0, 0, 0, 29, 193, 235,
        128, 0, 0, 0, 0, 30, 177, 234, 144, 0, 0, 0, 0, 31, 161, 205, 128, 0, 0, 0, 0, 32, 118, 29,
        16, 0, 0, 0, 0, 33, 129, 175, 128, 0, 0, 0, 0, 34, 85, 255, 16, 0, 0, 0, 0, 35, 106, 204,
        0, 0, 0, 0, 0, 36, 53, 225, 16, 0, 0, 0, 0, 37, 74, 174, 0, 0, 0, 0, 0, 38, 21, 195, 16, 0,
        0, 0, 0, 39, 42, 144, 0, 0, 0, 0, 0, 39, 254, 223, 144, 0, 0, 0, 0, 41, 10, 114, 0, 0, 0,
        0, 0, 41, 222, 193, 144, 0, 0, 0, 0, 42, 234, 84, 0, 0, 0, 0, 0, 43, 190, 163, 144, 0, 0,
        0, 0, 44, 211, 112, 128, 0, 0, 0, 0, 45, 158, 133, 144, 0, 0, 0, 0, 46, 179, 82, 128, 0, 0,
        0, 0, 47, 126, 103, 144, 0, 0, 0, 0, 48, 147, 52, 128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0,
        0, 0, 50, 115, 22, 128, 0, 0, 0, 0, 51, 71, 102, 16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0,
        0, 53, 39, 72, 16, 0, 0, 0, 0, 54, 50, 218, 128, 0, 0, 0, 0, 55, 7, 42, 16, 0, 0, 0, 0, 56,
        27, 247, 0, 0, 0, 0, 0, 56, 231, 12, 16, 0, 0, 0, 0, 57, 251, 217, 0, 0, 0, 0, 0, 58, 198,
        238, 16, 0, 0, 0, 0, 59, 219, 187, 0, 0, 0, 0, 0, 60, 176, 10, 144, 0, 0, 0, 0, 61, 187,
        157, 0, 0, 0, 0, 0, 62, 143, 236, 144, 0, 0, 0, 0, 63, 155, 127, 0, 0, 0, 0, 0, 64, 111,
        206, 144, 0, 0, 0, 0, 65, 132, 155, 128, 0, 0, 0, 0, 66, 79, 176, 144, 0, 0, 0, 0, 67, 100,
        125, 128, 0, 0, 0, 0, 68, 47, 146, 144, 0, 0, 0, 0, 69, 68, 95, 128, 0, 0, 0, 0, 69, 243,
        197, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 255, 255, 149, 160, 0, 0, 255, 255, 171, 160, 1, 4, 255, 255, 157, 144, 0, 8, 255,
        255, 171, 160, 1, 12, 255, 255, 171, 160, 1, 16, 76, 77, 84, 0, 77, 68, 84, 0, 77, 83, 84,
        0, 77, 87, 84, 0, 77, 80, 84, 0, 10, 77, 83, 84, 55, 77, 68, 84, 44, 77, 51, 46, 50, 46,
        48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_EIRUNEPE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        33, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 136, 128, 255, 255, 255, 255,
        184, 15, 102, 0, 255, 255, 255, 255, 184, 253, 92, 192, 255, 255, 255, 255, 185, 241, 80,
        80, 255, 255, 255, 255, 186, 222, 144, 64, 255, 255, 255, 255, 218, 56, 202, 80, 255, 255,
        255, 255, 218, 236, 22, 80, 255, 255, 255, 255, 220, 25, 253, 208, 255, 255, 255, 255, 220,
        185, 117, 64, 255, 255, 255, 255, 221, 251, 49, 80, 255, 255, 255, 255, 222, 155, 250, 64,
        255, 255, 255, 255, 223, 221, 182, 80, 255, 255, 255, 255, 224, 84, 79, 64, 255, 255, 255,
        255, 244, 152, 27, 208, 255, 255, 255, 255, 245, 5, 122, 64, 255, 255, 255, 255, 246, 192,
        128, 80, 255, 255, 255, 255, 247, 14, 58, 192, 255, 255, 255, 255, 248, 81, 72, 80, 255,
        255, 255, 255, 248, 199, 225, 64, 255, 255, 255, 255, 250, 10, 238, 208, 255, 255, 255,
        255, 250, 169, 20, 192, 255, 255, 255, 255, 251, 236, 34, 80, 255, 255, 255, 255, 252, 139,
        153, 192, 0, 0, 0, 0, 29, 201, 170, 80, 0, 0, 0, 0, 30, 120, 243, 192, 0, 0, 0, 0, 31, 160,
        81, 208, 0, 0, 0, 0, 32, 51, 235, 192, 0, 0, 0, 0, 33, 129, 133, 80, 0, 0, 0, 0, 34, 11,
        228, 192, 0, 0, 0, 0, 44, 192, 209, 80, 0, 0, 0, 0, 45, 102, 224, 64, 0, 0, 0, 0, 72, 96,
        127, 80, 0, 0, 0, 0, 82, 127, 4, 192, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 255, 255, 190, 128, 0, 0, 255, 255, 199, 192,
        1, 4, 255, 255, 185, 176, 0, 8, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 45, 48, 52, 0, 45,
        48, 53, 0, 10, 60, 45, 48, 53, 62, 53, 10,
    ];
    pub(crate) const AMERICA_EL_SALVADOR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        5, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 163, 213, 166, 32, 0, 0, 0, 0, 32, 154,
        220, 224, 0, 0, 0, 0, 33, 92, 155, 80, 0, 0, 0, 0, 34, 122, 190, 224, 0, 0, 0, 0, 35, 60,
        125, 80, 2, 1, 2, 1, 2, 255, 255, 172, 96, 0, 0, 255, 255, 185, 176, 1, 4, 255, 255, 171,
        160, 0, 8, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 10, 67, 83, 84, 54, 10,
    ];
    pub(crate) const AMERICA_ENSENADA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        18, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 165, 182, 246, 128, 255, 255, 255, 255,
        175, 242, 124, 240, 255, 255, 255, 255, 182, 103, 181, 240, 255, 255, 255, 255, 203, 204,
        59, 0, 255, 255, 255, 255, 216, 145, 180, 240, 0, 0, 0, 0, 49, 103, 146, 32, 0, 0, 0, 0,
        50, 115, 36, 144, 0, 0, 0, 0, 51, 71, 116, 32, 0, 0, 0, 0, 52, 83, 6, 144, 0, 0, 0, 0, 53,
        39, 86, 32, 0, 0, 0, 0, 54, 50, 232, 144, 0, 0, 0, 0, 55, 7, 56, 32, 0, 0, 0, 0, 56, 28, 5,
        16, 0, 0, 0, 0, 56, 231, 26, 32, 0, 0, 0, 0, 57, 251, 231, 16, 0, 0, 0, 0, 58, 245, 32,
        160, 0, 0, 0, 0, 59, 182, 223, 16, 0, 0, 0, 0, 60, 176, 24, 160, 1, 2, 1, 2, 1, 3, 1, 3, 1,
        3, 1, 3, 1, 3, 1, 3, 1, 3, 255, 255, 146, 172, 0, 0, 255, 255, 143, 128, 0, 4, 255, 255,
        157, 144, 0, 8, 255, 255, 157, 144, 1, 12, 76, 77, 84, 0, 80, 83, 84, 0, 77, 83, 84, 0, 80,
        68, 84, 0, 10, 80, 83, 84, 56, 80, 68, 84, 44, 77, 52, 46, 49, 46, 48, 44, 77, 49, 48, 46,
        53, 46, 48, 10,
    ];
    pub(crate) const AMERICA_FORTALEZA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        39, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 107, 24, 255, 255, 255, 255,
        184, 15, 73, 224, 255, 255, 255, 255, 184, 253, 64, 160, 255, 255, 255, 255, 185, 241, 52,
        48, 255, 255, 255, 255, 186, 222, 116, 32, 255, 255, 255, 255, 218, 56, 174, 48, 255, 255,
        255, 255, 218, 235, 250, 48, 255, 255, 255, 255, 220, 25, 225, 176, 255, 255, 255, 255,
        220, 185, 89, 32, 255, 255, 255, 255, 221, 251, 21, 48, 255, 255, 255, 255, 222, 155, 222,
        32, 255, 255, 255, 255, 223, 221, 154, 48, 255, 255, 255, 255, 224, 84, 51, 32, 255, 255,
        255, 255, 244, 151, 255, 176, 255, 255, 255, 255, 245, 5, 94, 32, 255, 255, 255, 255, 246,
        192, 100, 48, 255, 255, 255, 255, 247, 14, 30, 160, 255, 255, 255, 255, 248, 81, 44, 48,
        255, 255, 255, 255, 248, 199, 197, 32, 255, 255, 255, 255, 250, 10, 210, 176, 255, 255,
        255, 255, 250, 168, 248, 160, 255, 255, 255, 255, 251, 236, 6, 48, 255, 255, 255, 255, 252,
        139, 125, 160, 0, 0, 0, 0, 29, 201, 142, 48, 0, 0, 0, 0, 30, 120, 215, 160, 0, 0, 0, 0, 31,
        160, 53, 176, 0, 0, 0, 0, 32, 51, 207, 160, 0, 0, 0, 0, 33, 129, 105, 48, 0, 0, 0, 0, 34,
        11, 200, 160, 0, 0, 0, 0, 35, 88, 16, 176, 0, 0, 0, 0, 35, 226, 112, 32, 0, 0, 0, 0, 37,
        55, 242, 176, 0, 0, 0, 0, 37, 212, 199, 32, 0, 0, 0, 0, 55, 246, 198, 176, 0, 0, 0, 0, 56,
        184, 133, 32, 0, 0, 0, 0, 57, 223, 227, 48, 0, 0, 0, 0, 57, 242, 74, 32, 0, 0, 0, 0, 59,
        200, 255, 176, 0, 0, 0, 0, 60, 111, 14, 160, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 219, 232,
        0, 0, 255, 255, 227, 224, 1, 4, 255, 255, 213, 208, 0, 8, 76, 77, 84, 0, 45, 48, 50, 0, 45,
        48, 51, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_FORT_NELSON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        143, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 94, 61, 118, 135, 255, 255, 255, 255,
        158, 184, 189, 160, 255, 255, 255, 255, 159, 187, 21, 144, 255, 255, 255, 255, 203, 137,
        26, 160, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 38, 16, 255,
        255, 255, 255, 213, 85, 241, 32, 255, 255, 255, 255, 214, 32, 234, 16, 255, 255, 255, 255,
        215, 53, 211, 32, 255, 255, 255, 255, 216, 0, 204, 16, 255, 255, 255, 255, 217, 21, 181,
        32, 255, 255, 255, 255, 217, 224, 174, 16, 255, 255, 255, 255, 218, 254, 209, 160, 255,
        255, 255, 255, 219, 192, 144, 16, 255, 255, 255, 255, 220, 222, 179, 160, 255, 255, 255,
        255, 221, 169, 172, 144, 255, 255, 255, 255, 222, 190, 149, 160, 255, 255, 255, 255, 223,
        137, 142, 144, 255, 255, 255, 255, 224, 158, 119, 160, 255, 255, 255, 255, 225, 105, 112,
        144, 255, 255, 255, 255, 226, 126, 89, 160, 255, 255, 255, 255, 227, 73, 82, 144, 255, 255,
        255, 255, 228, 94, 59, 160, 255, 255, 255, 255, 229, 41, 52, 144, 255, 255, 255, 255, 230,
        71, 88, 32, 255, 255, 255, 255, 231, 18, 81, 16, 255, 255, 255, 255, 232, 39, 58, 32, 255,
        255, 255, 255, 232, 242, 51, 16, 255, 255, 255, 255, 234, 7, 28, 32, 255, 255, 255, 255,
        234, 210, 21, 16, 255, 255, 255, 255, 235, 230, 254, 32, 255, 255, 255, 255, 236, 177, 247,
        16, 255, 255, 255, 255, 237, 198, 224, 32, 255, 255, 255, 255, 238, 145, 217, 16, 255, 255,
        255, 255, 239, 175, 252, 160, 255, 255, 255, 255, 240, 113, 187, 16, 255, 255, 255, 255,
        241, 143, 222, 160, 255, 255, 255, 255, 242, 127, 193, 144, 255, 255, 255, 255, 243, 111,
        192, 160, 255, 255, 255, 255, 244, 95, 163, 144, 255, 255, 255, 255, 245, 79, 162, 160,
        255, 255, 255, 255, 246, 63, 133, 144, 255, 255, 255, 255, 247, 47, 132, 160, 255, 255,
        255, 255, 248, 40, 162, 16, 255, 255, 255, 255, 249, 15, 102, 160, 255, 255, 255, 255, 250,
        8, 132, 16, 255, 255, 255, 255, 250, 248, 131, 32, 255, 255, 255, 255, 251, 232, 102, 16,
        255, 255, 255, 255, 252, 216, 101, 32, 255, 255, 255, 255, 253, 200, 72, 16, 255, 255, 255,
        255, 254, 184, 71, 32, 255, 255, 255, 255, 255, 168, 42, 16, 0, 0, 0, 0, 0, 152, 41, 32, 0,
        0, 0, 0, 1, 136, 12, 16, 0, 0, 0, 0, 2, 120, 11, 32, 0, 0, 0, 0, 3, 113, 40, 144, 0, 0, 0,
        0, 4, 97, 39, 160, 0, 0, 0, 0, 5, 81, 10, 144, 0, 0, 0, 0, 6, 65, 9, 160, 0, 0, 0, 0, 7,
        48, 236, 144, 0, 0, 0, 0, 8, 32, 235, 160, 0, 0, 0, 0, 9, 16, 206, 144, 0, 0, 0, 0, 10, 0,
        205, 160, 0, 0, 0, 0, 10, 240, 176, 144, 0, 0, 0, 0, 11, 224, 175, 160, 0, 0, 0, 0, 12,
        217, 205, 16, 0, 0, 0, 0, 13, 192, 145, 160, 0, 0, 0, 0, 14, 185, 175, 16, 0, 0, 0, 0, 15,
        169, 174, 32, 0, 0, 0, 0, 16, 153, 145, 16, 0, 0, 0, 0, 17, 137, 144, 32, 0, 0, 0, 0, 18,
        121, 115, 16, 0, 0, 0, 0, 19, 105, 114, 32, 0, 0, 0, 0, 20, 89, 85, 16, 0, 0, 0, 0, 21, 73,
        84, 32, 0, 0, 0, 0, 22, 57, 55, 16, 0, 0, 0, 0, 23, 41, 54, 32, 0, 0, 0, 0, 24, 34, 83,
        144, 0, 0, 0, 0, 25, 9, 24, 32, 0, 0, 0, 0, 26, 2, 53, 144, 0, 0, 0, 0, 26, 242, 52, 160,
        0, 0, 0, 0, 27, 226, 23, 144, 0, 0, 0, 0, 28, 210, 22, 160, 0, 0, 0, 0, 29, 193, 249, 144,
        0, 0, 0, 0, 30, 177, 248, 160, 0, 0, 0, 0, 31, 161, 219, 144, 0, 0, 0, 0, 32, 118, 43, 32,
        0, 0, 0, 0, 33, 129, 189, 144, 0, 0, 0, 0, 34, 86, 13, 32, 0, 0, 0, 0, 35, 106, 218, 16, 0,
        0, 0, 0, 36, 53, 239, 32, 0, 0, 0, 0, 37, 74, 188, 16, 0, 0, 0, 0, 38, 21, 209, 32, 0, 0,
        0, 0, 39, 42, 158, 16, 0, 0, 0, 0, 39, 254, 237, 160, 0, 0, 0, 0, 41, 10, 128, 16, 0, 0, 0,
        0, 41, 222, 207, 160, 0, 0, 0, 0, 42, 234, 98, 16, 0, 0, 0, 0, 43, 190, 177, 160, 0, 0, 0,
        0, 44, 211, 126, 144, 0, 0, 0, 0, 45, 158, 147, 160, 0, 0, 0, 0, 46, 179, 96, 144, 0, 0, 0,
        0, 47, 126, 117, 160, 0, 0, 0, 0, 48, 147, 66, 144, 0, 0, 0, 0, 49, 103, 146, 32, 0, 0, 0,
        0, 50, 115, 36, 144, 0, 0, 0, 0, 51, 71, 116, 32, 0, 0, 0, 0, 52, 83, 6, 144, 0, 0, 0, 0,
        53, 39, 86, 32, 0, 0, 0, 0, 54, 50, 232, 144, 0, 0, 0, 0, 55, 7, 56, 32, 0, 0, 0, 0, 56,
        28, 5, 16, 0, 0, 0, 0, 56, 231, 26, 32, 0, 0, 0, 0, 57, 251, 231, 16, 0, 0, 0, 0, 58, 198,
        252, 32, 0, 0, 0, 0, 59, 219, 201, 16, 0, 0, 0, 0, 60, 176, 24, 160, 0, 0, 0, 0, 61, 187,
        171, 16, 0, 0, 0, 0, 62, 143, 250, 160, 0, 0, 0, 0, 63, 155, 141, 16, 0, 0, 0, 0, 64, 111,
        220, 160, 0, 0, 0, 0, 65, 132, 169, 144, 0, 0, 0, 0, 66, 79, 190, 160, 0, 0, 0, 0, 67, 100,
        139, 144, 0, 0, 0, 0, 68, 47, 160, 160, 0, 0, 0, 0, 69, 68, 109, 144, 0, 0, 0, 0, 69, 243,
        211, 32, 0, 0, 0, 0, 71, 45, 138, 16, 0, 0, 0, 0, 71, 211, 181, 32, 0, 0, 0, 0, 73, 13,
        108, 16, 0, 0, 0, 0, 73, 179, 151, 32, 0, 0, 0, 0, 74, 237, 78, 16, 0, 0, 0, 0, 75, 156,
        179, 160, 0, 0, 0, 0, 76, 214, 106, 144, 0, 0, 0, 0, 77, 124, 149, 160, 0, 0, 0, 0, 78,
        182, 76, 144, 0, 0, 0, 0, 79, 92, 119, 160, 0, 0, 0, 0, 80, 150, 46, 144, 0, 0, 0, 0, 81,
        60, 89, 160, 0, 0, 0, 0, 82, 118, 16, 144, 0, 0, 0, 0, 83, 28, 59, 160, 0, 0, 0, 0, 84, 85,
        242, 144, 0, 0, 0, 0, 84, 252, 29, 160, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 5, 255, 255, 140, 249, 0, 0, 255, 255, 157, 144, 1, 4, 255, 255, 143, 128,
        0, 8, 255, 255, 157, 144, 1, 12, 255, 255, 157, 144, 1, 16, 255, 255, 157, 144, 0, 20, 76,
        77, 84, 0, 80, 68, 84, 0, 80, 83, 84, 0, 80, 87, 84, 0, 80, 80, 84, 0, 77, 83, 84, 0, 10,
        77, 83, 84, 55, 10,
    ];
    pub(crate) const AMERICA_FORT_WAYNE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        38, 0, 0, 0, 7, 0, 0, 0, 28, 255, 255, 255, 255, 94, 3, 254, 160, 255, 255, 255, 255, 158,
        166, 44, 128, 255, 255, 255, 255, 159, 186, 249, 112, 255, 255, 255, 255, 160, 134, 14,
        128, 255, 255, 255, 255, 161, 154, 219, 112, 255, 255, 255, 255, 202, 87, 34, 128, 255,
        255, 255, 255, 202, 216, 71, 112, 255, 255, 255, 255, 203, 136, 254, 128, 255, 255, 255,
        255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 9, 240, 255, 255, 255, 255, 211, 117,
        243, 0, 255, 255, 255, 255, 212, 64, 235, 240, 255, 255, 255, 255, 213, 85, 213, 0, 255,
        255, 255, 255, 214, 32, 205, 240, 255, 255, 255, 255, 215, 53, 183, 0, 255, 255, 255, 255,
        216, 0, 175, 240, 255, 255, 255, 255, 217, 21, 153, 0, 255, 255, 255, 255, 217, 224, 145,
        240, 255, 255, 255, 255, 218, 254, 181, 128, 255, 255, 255, 255, 219, 192, 115, 240, 255,
        255, 255, 255, 220, 222, 151, 128, 255, 255, 255, 255, 221, 169, 144, 112, 255, 255, 255,
        255, 222, 190, 121, 128, 255, 255, 255, 255, 223, 137, 114, 112, 255, 255, 255, 255, 224,
        158, 91, 128, 255, 255, 255, 255, 225, 105, 84, 112, 255, 255, 255, 255, 226, 126, 61, 128,
        255, 255, 255, 255, 227, 73, 54, 112, 255, 255, 255, 255, 228, 94, 31, 128, 255, 255, 255,
        255, 232, 242, 22, 240, 255, 255, 255, 255, 234, 7, 0, 0, 255, 255, 255, 255, 254, 184, 28,
        240, 255, 255, 255, 255, 255, 167, 255, 224, 0, 0, 0, 0, 0, 151, 254, 240, 0, 0, 0, 0, 1,
        135, 225, 224, 0, 0, 0, 0, 68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69,
        243, 168, 240, 2, 1, 2, 1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 5, 2, 5, 6, 5, 6, 5, 6, 5, 6, 255, 255, 175, 58, 0, 0, 255, 255, 185, 176, 1, 4,
        255, 255, 171, 160, 0, 8, 255, 255, 185, 176, 1, 12, 255, 255, 185, 176, 1, 16, 255, 255,
        185, 176, 0, 20, 255, 255, 199, 192, 1, 24, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0,
        67, 87, 84, 0, 67, 80, 84, 0, 69, 83, 84, 0, 69, 68, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84,
        44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_GLACE_BAY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        79, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 128, 241, 168, 52, 255, 255, 255, 255,
        158, 184, 133, 96, 255, 255, 255, 255, 159, 186, 221, 80, 255, 255, 255, 255, 203, 136,
        226, 96, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 96, 237, 208, 255,
        255, 255, 255, 224, 158, 63, 96, 255, 255, 255, 255, 225, 105, 56, 80, 0, 0, 0, 0, 4, 96,
        239, 96, 0, 0, 0, 0, 5, 80, 210, 80, 0, 0, 0, 0, 6, 64, 209, 96, 0, 0, 0, 0, 7, 48, 180,
        80, 0, 0, 0, 0, 8, 32, 179, 96, 0, 0, 0, 0, 9, 16, 150, 80, 0, 0, 0, 0, 10, 0, 149, 96, 0,
        0, 0, 0, 10, 240, 120, 80, 0, 0, 0, 0, 11, 224, 119, 96, 0, 0, 0, 0, 12, 217, 148, 208, 0,
        0, 0, 0, 13, 192, 89, 96, 0, 0, 0, 0, 14, 185, 118, 208, 0, 0, 0, 0, 15, 169, 117, 224, 0,
        0, 0, 0, 16, 153, 88, 208, 0, 0, 0, 0, 17, 137, 87, 224, 0, 0, 0, 0, 18, 121, 58, 208, 0,
        0, 0, 0, 19, 105, 57, 224, 0, 0, 0, 0, 20, 89, 28, 208, 0, 0, 0, 0, 21, 73, 27, 224, 0, 0,
        0, 0, 22, 56, 254, 208, 0, 0, 0, 0, 23, 40, 253, 224, 0, 0, 0, 0, 24, 34, 27, 80, 0, 0, 0,
        0, 25, 8, 223, 224, 0, 0, 0, 0, 26, 1, 253, 80, 0, 0, 0, 0, 26, 241, 252, 96, 0, 0, 0, 0,
        27, 225, 223, 80, 0, 0, 0, 0, 28, 209, 222, 96, 0, 0, 0, 0, 29, 193, 193, 80, 0, 0, 0, 0,
        30, 177, 192, 96, 0, 0, 0, 0, 31, 161, 163, 80, 0, 0, 0, 0, 32, 117, 242, 224, 0, 0, 0, 0,
        33, 129, 133, 80, 0, 0, 0, 0, 34, 85, 212, 224, 0, 0, 0, 0, 35, 106, 161, 208, 0, 0, 0, 0,
        36, 53, 182, 224, 0, 0, 0, 0, 37, 74, 131, 208, 0, 0, 0, 0, 38, 21, 152, 224, 0, 0, 0, 0,
        39, 42, 101, 208, 0, 0, 0, 0, 39, 254, 181, 96, 0, 0, 0, 0, 41, 10, 71, 208, 0, 0, 0, 0,
        41, 222, 151, 96, 0, 0, 0, 0, 42, 234, 41, 208, 0, 0, 0, 0, 43, 190, 121, 96, 0, 0, 0, 0,
        44, 211, 70, 80, 0, 0, 0, 0, 45, 158, 91, 96, 0, 0, 0, 0, 46, 179, 40, 80, 0, 0, 0, 0, 47,
        126, 61, 96, 0, 0, 0, 0, 48, 147, 10, 80, 0, 0, 0, 0, 49, 103, 89, 224, 0, 0, 0, 0, 50,
        114, 236, 80, 0, 0, 0, 0, 51, 71, 59, 224, 0, 0, 0, 0, 52, 82, 206, 80, 0, 0, 0, 0, 53, 39,
        29, 224, 0, 0, 0, 0, 54, 50, 176, 80, 0, 0, 0, 0, 55, 6, 255, 224, 0, 0, 0, 0, 56, 27, 204,
        208, 0, 0, 0, 0, 56, 230, 225, 224, 0, 0, 0, 0, 57, 251, 174, 208, 0, 0, 0, 0, 58, 198,
        195, 224, 0, 0, 0, 0, 59, 219, 144, 208, 0, 0, 0, 0, 60, 175, 224, 96, 0, 0, 0, 0, 61, 187,
        114, 208, 0, 0, 0, 0, 62, 143, 194, 96, 0, 0, 0, 0, 63, 155, 84, 208, 0, 0, 0, 0, 64, 111,
        164, 96, 0, 0, 0, 0, 65, 132, 113, 80, 0, 0, 0, 0, 66, 79, 134, 96, 0, 0, 0, 0, 67, 100,
        83, 80, 0, 0, 0, 0, 68, 47, 104, 96, 0, 0, 0, 0, 69, 68, 53, 80, 0, 0, 0, 0, 69, 243, 154,
        224, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255, 199, 204, 0, 0, 255,
        255, 213, 208, 1, 4, 255, 255, 199, 192, 0, 8, 255, 255, 213, 208, 1, 12, 255, 255, 213,
        208, 1, 16, 76, 77, 84, 0, 65, 68, 84, 0, 65, 83, 84, 0, 65, 87, 84, 0, 65, 80, 84, 0, 10,
        65, 83, 84, 52, 65, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_GODTHAB: &[u8] = &[
        84, 90, 105, 102, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 51,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        34, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 155, 128, 104, 0, 0, 0, 0, 0, 19, 77, 124,
        80, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220,
        144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175,
        144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188,
        189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140,
        144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92,
        99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16,
        0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0,
        0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0,
        0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0,
        0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0,
        0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 207, 128, 0,
        0, 255, 255, 213, 208, 0, 4, 255, 255, 227, 224, 1, 8, 76, 77, 84, 0, 45, 48, 51, 0, 45,
        48, 50, 0, 10, 60, 45, 48, 51, 62, 51, 60, 45, 48, 50, 62, 44, 77, 51, 46, 53, 46, 48, 47,
        45, 50, 44, 77, 49, 48, 46, 53, 46, 48, 47, 45, 49, 10,
    ];
    pub(crate) const AMERICA_GOOSE_BAY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        152, 0, 0, 0, 10, 0, 0, 0, 33, 255, 255, 255, 255, 94, 61, 60, 36, 255, 255, 255, 255, 158,
        184, 126, 140, 255, 255, 255, 255, 159, 186, 214, 124, 255, 255, 255, 255, 190, 158, 77,
        108, 255, 255, 255, 255, 192, 184, 49, 56, 255, 255, 255, 255, 193, 121, 239, 168, 255,
        255, 255, 255, 194, 152, 19, 56, 255, 255, 255, 255, 195, 89, 209, 168, 255, 255, 255, 255,
        196, 119, 245, 56, 255, 255, 255, 255, 197, 57, 179, 168, 255, 255, 255, 255, 198, 97, 17,
        184, 255, 255, 255, 255, 199, 25, 149, 168, 255, 255, 255, 255, 200, 64, 243, 184, 255,
        255, 255, 255, 201, 2, 178, 40, 255, 255, 255, 255, 202, 32, 213, 184, 255, 255, 255, 255,
        202, 226, 148, 40, 255, 255, 255, 255, 204, 0, 183, 184, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 96, 230, 200, 255, 255, 255, 255, 211, 136, 68, 216, 255,
        255, 255, 255, 212, 74, 3, 72, 255, 255, 255, 255, 213, 104, 38, 216, 255, 255, 255, 255,
        214, 41, 229, 72, 255, 255, 255, 255, 215, 72, 8, 216, 255, 255, 255, 255, 216, 9, 199, 72,
        255, 255, 255, 255, 217, 39, 234, 216, 255, 255, 255, 255, 217, 233, 169, 72, 255, 255,
        255, 255, 219, 17, 7, 88, 255, 255, 255, 255, 219, 210, 197, 200, 255, 255, 255, 255, 220,
        222, 116, 88, 255, 255, 255, 255, 221, 169, 109, 72, 255, 255, 255, 255, 222, 190, 86, 88,
        255, 255, 255, 255, 223, 137, 79, 72, 255, 255, 255, 255, 224, 158, 56, 88, 255, 255, 255,
        255, 225, 105, 49, 72, 255, 255, 255, 255, 226, 126, 26, 88, 255, 255, 255, 255, 227, 73,
        19, 72, 255, 255, 255, 255, 228, 93, 252, 88, 255, 255, 255, 255, 229, 40, 245, 72, 255,
        255, 255, 255, 230, 71, 24, 216, 255, 255, 255, 255, 231, 18, 17, 200, 255, 255, 255, 255,
        232, 38, 250, 216, 255, 255, 255, 255, 232, 241, 243, 200, 255, 255, 255, 255, 234, 6, 220,
        216, 255, 255, 255, 255, 234, 209, 213, 200, 255, 255, 255, 255, 235, 230, 190, 216, 255,
        255, 255, 255, 236, 177, 183, 200, 255, 255, 255, 255, 237, 198, 160, 216, 255, 255, 255,
        255, 238, 191, 190, 72, 255, 255, 255, 255, 239, 175, 189, 88, 255, 255, 255, 255, 240,
        159, 160, 72, 255, 255, 255, 255, 241, 143, 159, 88, 255, 255, 255, 255, 242, 127, 130, 72,
        255, 255, 255, 255, 243, 111, 129, 88, 255, 255, 255, 255, 244, 95, 100, 72, 255, 255, 255,
        255, 245, 79, 99, 88, 255, 255, 255, 255, 246, 63, 70, 72, 255, 255, 255, 255, 247, 47, 69,
        88, 255, 255, 255, 255, 248, 40, 98, 200, 255, 255, 255, 255, 248, 218, 107, 88, 255, 255,
        255, 255, 249, 15, 46, 96, 255, 255, 255, 255, 250, 8, 75, 208, 255, 255, 255, 255, 250,
        248, 74, 224, 255, 255, 255, 255, 251, 232, 45, 208, 255, 255, 255, 255, 252, 216, 44, 224,
        255, 255, 255, 255, 253, 200, 15, 208, 255, 255, 255, 255, 254, 184, 14, 224, 255, 255,
        255, 255, 255, 167, 241, 208, 0, 0, 0, 0, 0, 151, 240, 224, 0, 0, 0, 0, 1, 135, 211, 208,
        0, 0, 0, 0, 2, 119, 210, 224, 0, 0, 0, 0, 3, 112, 240, 80, 0, 0, 0, 0, 4, 96, 239, 96, 0,
        0, 0, 0, 5, 80, 210, 80, 0, 0, 0, 0, 6, 64, 209, 96, 0, 0, 0, 0, 7, 48, 180, 80, 0, 0, 0,
        0, 8, 32, 179, 96, 0, 0, 0, 0, 9, 16, 150, 80, 0, 0, 0, 0, 10, 0, 149, 96, 0, 0, 0, 0, 10,
        240, 120, 80, 0, 0, 0, 0, 11, 224, 119, 96, 0, 0, 0, 0, 12, 217, 148, 208, 0, 0, 0, 0, 13,
        192, 89, 96, 0, 0, 0, 0, 14, 185, 118, 208, 0, 0, 0, 0, 15, 169, 117, 224, 0, 0, 0, 0, 16,
        153, 88, 208, 0, 0, 0, 0, 17, 137, 87, 224, 0, 0, 0, 0, 18, 121, 58, 208, 0, 0, 0, 0, 19,
        105, 57, 224, 0, 0, 0, 0, 20, 89, 28, 208, 0, 0, 0, 0, 21, 73, 27, 224, 0, 0, 0, 0, 22, 56,
        254, 208, 0, 0, 0, 0, 23, 40, 253, 224, 0, 0, 0, 0, 24, 34, 27, 80, 0, 0, 0, 0, 25, 8, 223,
        224, 0, 0, 0, 0, 26, 1, 253, 80, 0, 0, 0, 0, 26, 241, 252, 96, 0, 0, 0, 0, 27, 225, 223,
        80, 0, 0, 0, 0, 28, 209, 222, 96, 0, 0, 0, 0, 29, 193, 193, 80, 0, 0, 0, 0, 30, 177, 192,
        96, 0, 0, 0, 0, 31, 161, 163, 80, 0, 0, 0, 0, 32, 117, 214, 252, 0, 0, 0, 0, 33, 129, 105,
        108, 0, 0, 0, 0, 34, 85, 184, 252, 0, 0, 0, 0, 35, 106, 119, 220, 0, 0, 0, 0, 36, 53, 154,
        252, 0, 0, 0, 0, 37, 74, 103, 236, 0, 0, 0, 0, 38, 21, 124, 252, 0, 0, 0, 0, 39, 42, 73,
        236, 0, 0, 0, 0, 39, 254, 153, 124, 0, 0, 0, 0, 41, 10, 43, 236, 0, 0, 0, 0, 41, 222, 123,
        124, 0, 0, 0, 0, 42, 234, 13, 236, 0, 0, 0, 0, 43, 190, 93, 124, 0, 0, 0, 0, 44, 211, 42,
        108, 0, 0, 0, 0, 45, 158, 63, 124, 0, 0, 0, 0, 46, 179, 12, 108, 0, 0, 0, 0, 47, 126, 33,
        124, 0, 0, 0, 0, 48, 146, 238, 108, 0, 0, 0, 0, 49, 103, 61, 252, 0, 0, 0, 0, 50, 114, 208,
        108, 0, 0, 0, 0, 51, 71, 31, 252, 0, 0, 0, 0, 52, 82, 178, 108, 0, 0, 0, 0, 53, 39, 1, 252,
        0, 0, 0, 0, 54, 50, 148, 108, 0, 0, 0, 0, 55, 6, 227, 252, 0, 0, 0, 0, 56, 27, 176, 236, 0,
        0, 0, 0, 56, 230, 197, 252, 0, 0, 0, 0, 57, 251, 146, 236, 0, 0, 0, 0, 58, 198, 167, 252,
        0, 0, 0, 0, 59, 219, 116, 236, 0, 0, 0, 0, 60, 175, 196, 124, 0, 0, 0, 0, 61, 187, 86, 236,
        0, 0, 0, 0, 62, 143, 166, 124, 0, 0, 0, 0, 63, 155, 56, 236, 0, 0, 0, 0, 64, 111, 136, 124,
        0, 0, 0, 0, 65, 132, 85, 108, 0, 0, 0, 0, 66, 79, 106, 124, 0, 0, 0, 0, 67, 100, 55, 108,
        0, 0, 0, 0, 68, 47, 76, 124, 0, 0, 0, 0, 69, 68, 25, 108, 0, 0, 0, 0, 69, 243, 126, 252, 0,
        0, 0, 0, 71, 45, 53, 236, 0, 0, 0, 0, 71, 211, 96, 252, 0, 0, 0, 0, 73, 13, 23, 236, 0, 0,
        0, 0, 73, 179, 66, 252, 0, 0, 0, 0, 74, 236, 249, 236, 0, 0, 0, 0, 75, 156, 95, 124, 0, 0,
        0, 0, 76, 214, 22, 108, 0, 0, 0, 0, 77, 124, 65, 124, 0, 0, 0, 0, 78, 182, 20, 80, 1, 2, 1,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 6, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 8, 7, 8, 7,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 9, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 255,
        255, 199, 92, 0, 0, 255, 255, 206, 148, 0, 4, 255, 255, 220, 164, 1, 8, 255, 255, 206, 200,
        0, 4, 255, 255, 220, 216, 1, 8, 255, 255, 220, 216, 1, 12, 255, 255, 220, 216, 1, 16, 255,
        255, 213, 208, 1, 20, 255, 255, 199, 192, 0, 24, 255, 255, 227, 224, 1, 28, 76, 77, 84, 0,
        78, 83, 84, 0, 78, 68, 84, 0, 78, 80, 84, 0, 78, 87, 84, 0, 65, 68, 84, 0, 65, 83, 84, 0,
        65, 68, 68, 84, 0, 10, 65, 83, 84, 52, 65, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49,
        49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_GRAND_TURK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        76, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 105, 135, 30, 48, 255, 255, 255, 255, 147,
        15, 180, 254, 0, 0, 0, 0, 17, 137, 101, 240, 0, 0, 0, 0, 18, 121, 72, 224, 0, 0, 0, 0, 19,
        105, 71, 240, 0, 0, 0, 0, 20, 89, 42, 224, 0, 0, 0, 0, 21, 73, 41, 240, 0, 0, 0, 0, 22, 57,
        12, 224, 0, 0, 0, 0, 23, 41, 11, 240, 0, 0, 0, 0, 24, 34, 41, 96, 0, 0, 0, 0, 25, 8, 237,
        240, 0, 0, 0, 0, 26, 2, 11, 96, 0, 0, 0, 0, 26, 242, 10, 112, 0, 0, 0, 0, 27, 225, 237, 96,
        0, 0, 0, 0, 28, 209, 236, 112, 0, 0, 0, 0, 29, 193, 207, 96, 0, 0, 0, 0, 30, 177, 206, 112,
        0, 0, 0, 0, 31, 161, 177, 96, 0, 0, 0, 0, 32, 118, 0, 240, 0, 0, 0, 0, 33, 129, 147, 96, 0,
        0, 0, 0, 34, 85, 226, 240, 0, 0, 0, 0, 35, 106, 175, 224, 0, 0, 0, 0, 36, 53, 196, 240, 0,
        0, 0, 0, 37, 74, 145, 224, 0, 0, 0, 0, 38, 21, 166, 240, 0, 0, 0, 0, 39, 42, 115, 224, 0,
        0, 0, 0, 39, 254, 195, 112, 0, 0, 0, 0, 41, 10, 85, 224, 0, 0, 0, 0, 41, 222, 165, 112, 0,
        0, 0, 0, 42, 234, 55, 224, 0, 0, 0, 0, 43, 190, 135, 112, 0, 0, 0, 0, 44, 211, 84, 96, 0,
        0, 0, 0, 45, 158, 105, 112, 0, 0, 0, 0, 46, 179, 54, 96, 0, 0, 0, 0, 47, 126, 75, 112, 0,
        0, 0, 0, 48, 147, 24, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0,
        0, 0, 0, 51, 71, 73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0,
        0, 0, 54, 50, 190, 96, 0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56, 27, 218, 224, 0, 0, 0,
        0, 56, 230, 239, 240, 0, 0, 0, 0, 57, 251, 188, 224, 0, 0, 0, 0, 58, 198, 209, 240, 0, 0,
        0, 0, 59, 219, 158, 224, 0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0, 61, 187, 128, 224, 0,
        0, 0, 0, 62, 143, 208, 112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112, 0,
        0, 0, 0, 65, 132, 127, 96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0, 0,
        0, 0, 68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 0, 0, 0,
        0, 71, 45, 95, 224, 0, 0, 0, 0, 71, 211, 138, 240, 0, 0, 0, 0, 73, 13, 65, 224, 0, 0, 0, 0,
        73, 179, 108, 240, 0, 0, 0, 0, 74, 237, 35, 224, 0, 0, 0, 0, 75, 156, 137, 112, 0, 0, 0, 0,
        76, 214, 64, 96, 0, 0, 0, 0, 77, 124, 107, 112, 0, 0, 0, 0, 78, 182, 34, 96, 0, 0, 0, 0,
        79, 92, 77, 112, 0, 0, 0, 0, 80, 150, 4, 96, 0, 0, 0, 0, 81, 60, 47, 112, 0, 0, 0, 0, 82,
        117, 230, 96, 0, 0, 0, 0, 83, 28, 17, 112, 0, 0, 0, 0, 84, 85, 200, 96, 0, 0, 0, 0, 84,
        251, 243, 112, 0, 0, 0, 0, 90, 164, 211, 240, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4,
        3, 255, 255, 189, 80, 0, 0, 255, 255, 184, 2, 0, 4, 255, 255, 185, 176, 0, 8, 255, 255,
        199, 192, 1, 12, 255, 255, 199, 192, 0, 16, 76, 77, 84, 0, 75, 77, 84, 0, 69, 83, 84, 0,
        69, 68, 84, 0, 65, 83, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77, 51, 46, 50, 46, 48,
        44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_GRENADA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 244, 52, 100, 1, 255, 255, 198, 28, 0,
        0, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_GUADELOUPE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 213, 225, 176, 1, 255, 255, 198, 80, 0,
        0, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_GUATEMALA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        9, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 159, 157, 234, 220, 0, 0, 0, 0, 7, 85, 172,
        96, 0, 0, 0, 0, 7, 205, 150, 208, 0, 0, 0, 0, 25, 44, 120, 96, 0, 0, 0, 0, 25, 207, 228,
        80, 0, 0, 0, 0, 39, 234, 238, 224, 0, 0, 0, 0, 40, 200, 92, 208, 0, 0, 0, 0, 68, 84, 82,
        96, 0, 0, 0, 0, 69, 31, 75, 80, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 171, 36, 0, 0, 255,
        255, 185, 176, 1, 4, 255, 255, 171, 160, 0, 8, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0,
        10, 67, 83, 84, 54, 10,
    ];
    pub(crate) const AMERICA_GUAYAQUIL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 105, 135, 38, 88, 255, 255, 255, 255, 182,
        164, 66, 24, 0, 0, 0, 0, 43, 22, 252, 208, 0, 0, 0, 0, 43, 113, 230, 64, 1, 3, 2, 3, 255,
        255, 181, 40, 0, 0, 255, 255, 182, 104, 0, 4, 255, 255, 199, 192, 1, 8, 255, 255, 185, 176,
        0, 12, 76, 77, 84, 0, 81, 77, 84, 0, 45, 48, 52, 0, 45, 48, 53, 0, 10, 60, 45, 48, 53, 62,
        53, 10,
    ];
    pub(crate) const AMERICA_GUYANA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 146, 29, 15, 135, 255, 255, 255, 255, 152,
        217, 123, 64, 0, 0, 0, 0, 10, 127, 5, 188, 0, 0, 0, 0, 41, 213, 64, 192, 1, 2, 3, 1, 255,
        255, 201, 121, 0, 0, 255, 255, 199, 192, 0, 4, 255, 255, 203, 68, 0, 8, 255, 255, 213, 208,
        0, 14, 76, 77, 84, 0, 45, 48, 52, 0, 45, 48, 51, 52, 53, 0, 45, 48, 51, 0, 10, 60, 45, 48,
        52, 62, 52, 10,
    ];
    pub(crate) const AMERICA_HALIFAX: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        167, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 128, 241, 171, 160, 255, 255, 255, 255,
        154, 228, 222, 192, 255, 255, 255, 255, 155, 214, 19, 48, 255, 255, 255, 255, 158, 184,
        133, 96, 255, 255, 255, 255, 159, 186, 221, 80, 255, 255, 255, 255, 162, 157, 23, 64, 255,
        255, 255, 255, 163, 48, 177, 48, 255, 255, 255, 255, 164, 122, 86, 64, 255, 255, 255, 255,
        165, 27, 31, 48, 255, 255, 255, 255, 166, 83, 160, 192, 255, 255, 255, 255, 166, 252, 82,
        176, 255, 255, 255, 255, 168, 60, 189, 64, 255, 255, 255, 255, 168, 220, 52, 176, 255, 255,
        255, 255, 170, 28, 159, 64, 255, 255, 255, 255, 170, 205, 58, 48, 255, 255, 255, 255, 171,
        252, 129, 64, 255, 255, 255, 255, 172, 191, 145, 48, 255, 255, 255, 255, 173, 238, 216, 64,
        255, 255, 255, 255, 174, 140, 254, 48, 255, 255, 255, 255, 175, 188, 69, 64, 255, 255, 255,
        255, 176, 127, 85, 48, 255, 255, 255, 255, 177, 174, 156, 64, 255, 255, 255, 255, 178, 75,
        112, 176, 255, 255, 255, 255, 179, 142, 126, 64, 255, 255, 255, 255, 180, 36, 187, 48, 255,
        255, 255, 255, 181, 110, 96, 64, 255, 255, 255, 255, 182, 21, 192, 176, 255, 255, 255, 255,
        183, 78, 66, 64, 255, 255, 255, 255, 184, 8, 23, 176, 255, 255, 255, 255, 185, 36, 233,
        192, 255, 255, 255, 255, 185, 231, 249, 176, 255, 255, 255, 255, 187, 4, 203, 192, 255,
        255, 255, 255, 187, 209, 22, 48, 255, 255, 255, 255, 189, 0, 93, 64, 255, 255, 255, 255,
        189, 157, 49, 176, 255, 255, 255, 255, 190, 242, 180, 64, 255, 255, 255, 255, 191, 144,
        218, 48, 255, 255, 255, 255, 192, 211, 231, 192, 255, 255, 255, 255, 193, 94, 71, 48, 255,
        255, 255, 255, 194, 141, 142, 64, 255, 255, 255, 255, 195, 80, 158, 48, 255, 255, 255, 255,
        196, 109, 112, 64, 255, 255, 255, 255, 197, 48, 128, 48, 255, 255, 255, 255, 198, 114, 60,
        64, 255, 255, 255, 255, 199, 16, 98, 48, 255, 255, 255, 255, 200, 54, 110, 192, 255, 255,
        255, 255, 200, 249, 126, 176, 255, 255, 255, 255, 202, 22, 80, 192, 255, 255, 255, 255,
        202, 217, 96, 176, 255, 255, 255, 255, 203, 136, 226, 96, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 96, 237, 208, 255, 255, 255, 255, 211, 117, 214, 224, 255,
        255, 255, 255, 212, 64, 207, 208, 255, 255, 255, 255, 213, 85, 184, 224, 255, 255, 255,
        255, 214, 32, 177, 208, 255, 255, 255, 255, 215, 53, 154, 224, 255, 255, 255, 255, 216, 0,
        147, 208, 255, 255, 255, 255, 217, 21, 124, 224, 255, 255, 255, 255, 217, 224, 117, 208,
        255, 255, 255, 255, 220, 222, 123, 96, 255, 255, 255, 255, 221, 169, 116, 80, 255, 255,
        255, 255, 222, 190, 93, 96, 255, 255, 255, 255, 223, 137, 86, 80, 255, 255, 255, 255, 224,
        158, 63, 96, 255, 255, 255, 255, 225, 105, 56, 80, 255, 255, 255, 255, 226, 126, 33, 96,
        255, 255, 255, 255, 227, 73, 26, 80, 255, 255, 255, 255, 230, 71, 31, 224, 255, 255, 255,
        255, 231, 18, 24, 208, 255, 255, 255, 255, 232, 39, 1, 224, 255, 255, 255, 255, 232, 241,
        250, 208, 255, 255, 255, 255, 234, 6, 227, 224, 255, 255, 255, 255, 234, 209, 220, 208,
        255, 255, 255, 255, 235, 230, 197, 224, 255, 255, 255, 255, 236, 177, 190, 208, 255, 255,
        255, 255, 241, 143, 166, 96, 255, 255, 255, 255, 242, 127, 137, 80, 255, 255, 255, 255,
        243, 111, 136, 96, 255, 255, 255, 255, 244, 95, 107, 80, 255, 255, 255, 255, 245, 79, 106,
        96, 255, 255, 255, 255, 246, 63, 77, 80, 255, 255, 255, 255, 247, 47, 76, 96, 255, 255,
        255, 255, 248, 40, 105, 208, 255, 255, 255, 255, 249, 15, 46, 96, 255, 255, 255, 255, 250,
        8, 75, 208, 255, 255, 255, 255, 250, 248, 74, 224, 255, 255, 255, 255, 251, 232, 45, 208,
        255, 255, 255, 255, 252, 216, 44, 224, 255, 255, 255, 255, 253, 200, 15, 208, 255, 255,
        255, 255, 254, 184, 14, 224, 255, 255, 255, 255, 255, 167, 241, 208, 0, 0, 0, 0, 0, 151,
        240, 224, 0, 0, 0, 0, 1, 135, 211, 208, 0, 0, 0, 0, 2, 119, 210, 224, 0, 0, 0, 0, 3, 112,
        240, 80, 0, 0, 0, 0, 4, 96, 239, 96, 0, 0, 0, 0, 5, 80, 210, 80, 0, 0, 0, 0, 6, 64, 209,
        96, 0, 0, 0, 0, 7, 48, 180, 80, 0, 0, 0, 0, 8, 32, 179, 96, 0, 0, 0, 0, 9, 16, 150, 80, 0,
        0, 0, 0, 10, 0, 149, 96, 0, 0, 0, 0, 10, 240, 120, 80, 0, 0, 0, 0, 11, 224, 119, 96, 0, 0,
        0, 0, 12, 217, 148, 208, 0, 0, 0, 0, 13, 192, 89, 96, 0, 0, 0, 0, 14, 185, 118, 208, 0, 0,
        0, 0, 15, 169, 117, 224, 0, 0, 0, 0, 16, 153, 88, 208, 0, 0, 0, 0, 17, 137, 87, 224, 0, 0,
        0, 0, 18, 121, 58, 208, 0, 0, 0, 0, 19, 105, 57, 224, 0, 0, 0, 0, 20, 89, 28, 208, 0, 0, 0,
        0, 21, 73, 27, 224, 0, 0, 0, 0, 22, 56, 254, 208, 0, 0, 0, 0, 23, 40, 253, 224, 0, 0, 0, 0,
        24, 34, 27, 80, 0, 0, 0, 0, 25, 8, 223, 224, 0, 0, 0, 0, 26, 1, 253, 80, 0, 0, 0, 0, 26,
        241, 252, 96, 0, 0, 0, 0, 27, 225, 223, 80, 0, 0, 0, 0, 28, 209, 222, 96, 0, 0, 0, 0, 29,
        193, 193, 80, 0, 0, 0, 0, 30, 177, 192, 96, 0, 0, 0, 0, 31, 161, 163, 80, 0, 0, 0, 0, 32,
        117, 242, 224, 0, 0, 0, 0, 33, 129, 133, 80, 0, 0, 0, 0, 34, 85, 212, 224, 0, 0, 0, 0, 35,
        106, 161, 208, 0, 0, 0, 0, 36, 53, 182, 224, 0, 0, 0, 0, 37, 74, 131, 208, 0, 0, 0, 0, 38,
        21, 152, 224, 0, 0, 0, 0, 39, 42, 101, 208, 0, 0, 0, 0, 39, 254, 181, 96, 0, 0, 0, 0, 41,
        10, 71, 208, 0, 0, 0, 0, 41, 222, 151, 96, 0, 0, 0, 0, 42, 234, 41, 208, 0, 0, 0, 0, 43,
        190, 121, 96, 0, 0, 0, 0, 44, 211, 70, 80, 0, 0, 0, 0, 45, 158, 91, 96, 0, 0, 0, 0, 46,
        179, 40, 80, 0, 0, 0, 0, 47, 126, 61, 96, 0, 0, 0, 0, 48, 147, 10, 80, 0, 0, 0, 0, 49, 103,
        89, 224, 0, 0, 0, 0, 50, 114, 236, 80, 0, 0, 0, 0, 51, 71, 59, 224, 0, 0, 0, 0, 52, 82,
        206, 80, 0, 0, 0, 0, 53, 39, 29, 224, 0, 0, 0, 0, 54, 50, 176, 80, 0, 0, 0, 0, 55, 6, 255,
        224, 0, 0, 0, 0, 56, 27, 204, 208, 0, 0, 0, 0, 56, 230, 225, 224, 0, 0, 0, 0, 57, 251, 174,
        208, 0, 0, 0, 0, 58, 198, 195, 224, 0, 0, 0, 0, 59, 219, 144, 208, 0, 0, 0, 0, 60, 175,
        224, 96, 0, 0, 0, 0, 61, 187, 114, 208, 0, 0, 0, 0, 62, 143, 194, 96, 0, 0, 0, 0, 63, 155,
        84, 208, 0, 0, 0, 0, 64, 111, 164, 96, 0, 0, 0, 0, 65, 132, 113, 80, 0, 0, 0, 0, 66, 79,
        134, 96, 0, 0, 0, 0, 67, 100, 83, 80, 0, 0, 0, 0, 68, 47, 104, 96, 0, 0, 0, 0, 69, 68, 53,
        80, 0, 0, 0, 0, 69, 243, 154, 224, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255,
        255, 196, 96, 0, 0, 255, 255, 213, 208, 1, 4, 255, 255, 199, 192, 0, 8, 255, 255, 213, 208,
        1, 12, 255, 255, 213, 208, 1, 16, 76, 77, 84, 0, 65, 68, 84, 0, 65, 83, 84, 0, 65, 87, 84,
        0, 65, 80, 84, 0, 10, 65, 83, 84, 52, 65, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49,
        49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_HERMOSILLO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        15, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 165, 182, 232, 112, 255, 255, 255, 255,
        175, 242, 110, 224, 255, 255, 255, 255, 182, 102, 86, 96, 255, 255, 255, 255, 183, 67, 210,
        96, 255, 255, 255, 255, 184, 12, 54, 96, 255, 255, 255, 255, 184, 253, 134, 240, 255, 255,
        255, 255, 203, 234, 113, 96, 255, 255, 255, 255, 216, 145, 180, 240, 0, 0, 0, 0, 0, 0, 112,
        128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0, 0, 0, 50, 115, 22, 128, 0, 0, 0, 0, 51, 71, 102,
        16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0, 0, 53, 39, 72, 16, 0, 0, 0, 0, 54, 50, 218, 128,
        1, 2, 1, 2, 1, 2, 1, 3, 1, 4, 1, 4, 1, 4, 1, 255, 255, 151, 248, 0, 0, 255, 255, 157, 144,
        0, 4, 255, 255, 171, 160, 0, 8, 255, 255, 143, 128, 0, 12, 255, 255, 171, 160, 1, 16, 76,
        77, 84, 0, 77, 83, 84, 0, 67, 83, 84, 0, 80, 83, 84, 0, 77, 68, 84, 0, 10, 77, 83, 84, 55,
        10,
    ];
    pub(crate) const AMERICA_INUVIK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        59, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 224, 6, 78, 128, 255, 255, 255, 255, 247,
        47, 104, 128, 255, 255, 255, 255, 248, 40, 148, 0, 0, 0, 0, 0, 17, 137, 144, 32, 0, 0, 0,
        0, 19, 105, 100, 16, 0, 0, 0, 0, 20, 89, 71, 0, 0, 0, 0, 0, 21, 73, 70, 16, 0, 0, 0, 0, 22,
        57, 41, 0, 0, 0, 0, 0, 23, 41, 40, 16, 0, 0, 0, 0, 24, 34, 69, 128, 0, 0, 0, 0, 25, 9, 10,
        16, 0, 0, 0, 0, 26, 2, 39, 128, 0, 0, 0, 0, 26, 242, 38, 144, 0, 0, 0, 0, 27, 226, 9, 128,
        0, 0, 0, 0, 28, 210, 8, 144, 0, 0, 0, 0, 29, 193, 235, 128, 0, 0, 0, 0, 30, 177, 234, 144,
        0, 0, 0, 0, 31, 161, 205, 128, 0, 0, 0, 0, 32, 118, 29, 16, 0, 0, 0, 0, 33, 129, 175, 128,
        0, 0, 0, 0, 34, 85, 255, 16, 0, 0, 0, 0, 35, 106, 204, 0, 0, 0, 0, 0, 36, 53, 225, 16, 0,
        0, 0, 0, 37, 74, 174, 0, 0, 0, 0, 0, 38, 21, 195, 16, 0, 0, 0, 0, 39, 42, 144, 0, 0, 0, 0,
        0, 39, 254, 223, 144, 0, 0, 0, 0, 41, 10, 114, 0, 0, 0, 0, 0, 41, 222, 193, 144, 0, 0, 0,
        0, 42, 234, 84, 0, 0, 0, 0, 0, 43, 190, 163, 144, 0, 0, 0, 0, 44, 211, 112, 128, 0, 0, 0,
        0, 45, 158, 133, 144, 0, 0, 0, 0, 46, 179, 82, 128, 0, 0, 0, 0, 47, 126, 103, 144, 0, 0, 0,
        0, 48, 147, 52, 128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0, 0, 0, 50, 115, 22, 128, 0, 0, 0,
        0, 51, 71, 102, 16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0, 0, 53, 39, 72, 16, 0, 0, 0, 0,
        54, 50, 218, 128, 0, 0, 0, 0, 55, 7, 42, 16, 0, 0, 0, 0, 56, 27, 247, 0, 0, 0, 0, 0, 56,
        231, 12, 16, 0, 0, 0, 0, 57, 251, 217, 0, 0, 0, 0, 0, 58, 198, 238, 16, 0, 0, 0, 0, 59,
        219, 187, 0, 0, 0, 0, 0, 60, 176, 10, 144, 0, 0, 0, 0, 61, 187, 157, 0, 0, 0, 0, 0, 62,
        143, 236, 144, 0, 0, 0, 0, 63, 155, 127, 0, 0, 0, 0, 0, 64, 111, 206, 144, 0, 0, 0, 0, 65,
        132, 155, 128, 0, 0, 0, 0, 66, 79, 176, 144, 0, 0, 0, 0, 67, 100, 125, 128, 0, 0, 0, 0, 68,
        47, 146, 144, 0, 0, 0, 0, 69, 68, 95, 128, 0, 0, 0, 0, 69, 243, 197, 16, 2, 1, 2, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 0, 0, 0, 0, 0, 0, 255,
        255, 171, 160, 1, 4, 255, 255, 143, 128, 0, 9, 255, 255, 157, 144, 0, 13, 255, 255, 171,
        160, 1, 17, 45, 48, 48, 0, 80, 68, 68, 84, 0, 80, 83, 84, 0, 77, 83, 84, 0, 77, 68, 84, 0,
        10, 77, 83, 84, 55, 77, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48,
        10,
    ];
    pub(crate) const AMERICA_IQALUIT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        60, 0, 0, 0, 8, 0, 0, 0, 33, 255, 255, 255, 255, 204, 108, 161, 128, 255, 255, 255, 255,
        210, 35, 244, 112, 255, 255, 255, 255, 210, 96, 251, 224, 255, 255, 255, 255, 247, 47, 62,
        80, 255, 255, 255, 255, 248, 40, 105, 208, 0, 0, 0, 0, 19, 105, 71, 240, 0, 0, 0, 0, 20,
        89, 42, 224, 0, 0, 0, 0, 21, 73, 41, 240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0, 0, 0, 23, 41,
        11, 240, 0, 0, 0, 0, 24, 34, 41, 96, 0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0, 26, 2, 11,
        96, 0, 0, 0, 0, 26, 242, 10, 112, 0, 0, 0, 0, 27, 225, 237, 96, 0, 0, 0, 0, 28, 209, 236,
        112, 0, 0, 0, 0, 29, 193, 207, 96, 0, 0, 0, 0, 30, 177, 206, 112, 0, 0, 0, 0, 31, 161, 177,
        96, 0, 0, 0, 0, 32, 118, 0, 240, 0, 0, 0, 0, 33, 129, 147, 96, 0, 0, 0, 0, 34, 85, 226,
        240, 0, 0, 0, 0, 35, 106, 175, 224, 0, 0, 0, 0, 36, 53, 196, 240, 0, 0, 0, 0, 37, 74, 145,
        224, 0, 0, 0, 0, 38, 21, 166, 240, 0, 0, 0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39, 254, 195,
        112, 0, 0, 0, 0, 41, 10, 85, 224, 0, 0, 0, 0, 41, 222, 165, 112, 0, 0, 0, 0, 42, 234, 55,
        224, 0, 0, 0, 0, 43, 190, 135, 112, 0, 0, 0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45, 158, 105,
        112, 0, 0, 0, 0, 46, 179, 54, 96, 0, 0, 0, 0, 47, 126, 75, 112, 0, 0, 0, 0, 48, 147, 24,
        96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0, 0, 0, 0, 51, 71, 73,
        240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0, 0, 0, 54, 50, 190, 96,
        0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56, 27, 218, 224, 0, 0, 0, 0, 56, 230, 254, 0, 0,
        0, 0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 198, 209, 240, 0, 0, 0, 0, 59, 219, 158, 224,
        0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0, 61, 187, 128, 224, 0, 0, 0, 0, 62, 143, 208,
        112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112, 0, 0, 0, 0, 65, 132, 127,
        96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0, 0, 0, 0, 68, 47, 118,
        112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 5, 1, 2, 3, 2, 4, 2, 4, 2,
        4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2,
        4, 2, 4, 2, 4, 6, 7, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 0, 0, 0, 0, 0, 0, 255, 255,
        199, 192, 1, 4, 255, 255, 185, 176, 0, 8, 255, 255, 213, 208, 1, 12, 255, 255, 199, 192, 1,
        17, 255, 255, 199, 192, 1, 21, 255, 255, 171, 160, 0, 25, 255, 255, 185, 176, 1, 29, 45,
        48, 48, 0, 69, 80, 84, 0, 69, 83, 84, 0, 69, 68, 68, 84, 0, 69, 68, 84, 0, 69, 87, 84, 0,
        67, 83, 84, 0, 67, 68, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77, 51, 46, 50, 46, 48,
        44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_JUJUY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        59, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 114, 156, 174, 184, 255, 255, 255, 255,
        162, 146, 143, 48, 255, 255, 255, 255, 182, 123, 82, 64, 255, 255, 255, 255, 183, 26, 201,
        176, 255, 255, 255, 255, 184, 30, 143, 64, 255, 255, 255, 255, 184, 212, 112, 48, 255, 255,
        255, 255, 186, 23, 125, 192, 255, 255, 255, 255, 186, 181, 163, 176, 255, 255, 255, 255,
        187, 248, 177, 64, 255, 255, 255, 255, 188, 150, 215, 48, 255, 255, 255, 255, 189, 217,
        228, 192, 255, 255, 255, 255, 190, 120, 10, 176, 255, 255, 255, 255, 191, 187, 24, 64, 255,
        255, 255, 255, 192, 90, 143, 176, 255, 255, 255, 255, 193, 157, 157, 64, 255, 255, 255,
        255, 194, 59, 195, 48, 255, 255, 255, 255, 195, 126, 208, 192, 255, 255, 255, 255, 196, 28,
        246, 176, 255, 255, 255, 255, 197, 96, 4, 64, 255, 255, 255, 255, 197, 254, 42, 48, 255,
        255, 255, 255, 199, 65, 55, 192, 255, 255, 255, 255, 199, 224, 175, 48, 255, 255, 255, 255,
        200, 129, 148, 64, 255, 255, 255, 255, 202, 77, 161, 176, 255, 255, 255, 255, 202, 238,
        134, 192, 255, 255, 255, 255, 206, 77, 255, 48, 255, 255, 255, 255, 206, 176, 237, 192,
        255, 255, 255, 255, 211, 41, 53, 176, 255, 255, 255, 255, 212, 67, 100, 192, 255, 255, 255,
        255, 244, 61, 8, 48, 255, 255, 255, 255, 244, 159, 246, 192, 255, 255, 255, 255, 245, 5,
        108, 48, 255, 255, 255, 255, 246, 50, 16, 64, 255, 255, 255, 255, 246, 230, 159, 176, 255,
        255, 255, 255, 248, 19, 67, 192, 255, 255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255,
        249, 244, 119, 64, 255, 255, 255, 255, 250, 211, 54, 176, 255, 255, 255, 255, 251, 195, 53,
        192, 255, 255, 255, 255, 252, 188, 83, 48, 255, 255, 255, 255, 253, 172, 82, 64, 255, 255,
        255, 255, 254, 156, 53, 48, 255, 255, 255, 255, 255, 140, 52, 64, 0, 0, 0, 0, 7, 163, 74,
        176, 0, 0, 0, 0, 8, 36, 111, 160, 0, 0, 0, 0, 35, 148, 181, 176, 0, 0, 0, 0, 36, 16, 148,
        160, 0, 0, 0, 0, 37, 55, 242, 176, 0, 0, 0, 0, 37, 240, 118, 160, 0, 0, 0, 0, 39, 42, 87,
        192, 0, 0, 0, 0, 39, 226, 219, 176, 0, 0, 0, 0, 40, 238, 138, 64, 0, 0, 0, 0, 41, 176, 58,
        160, 0, 0, 0, 0, 42, 224, 211, 48, 0, 0, 0, 0, 43, 153, 87, 32, 0, 0, 0, 0, 55, 246, 198,
        176, 0, 0, 0, 0, 56, 191, 42, 176, 0, 0, 0, 0, 71, 119, 9, 176, 0, 0, 0, 0, 71, 220, 127,
        32, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 4, 5, 4, 5, 4, 2, 3, 2, 4, 5, 4, 5, 3, 5, 4, 5,
        255, 255, 194, 200, 0, 0, 255, 255, 195, 208, 0, 4, 255, 255, 199, 192, 0, 8, 255, 255,
        213, 208, 1, 12, 255, 255, 227, 224, 1, 16, 255, 255, 213, 208, 0, 12, 76, 77, 84, 0, 67,
        77, 84, 0, 45, 48, 52, 0, 45, 48, 51, 0, 45, 48, 50, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_JUNEAU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        83, 0, 0, 0, 10, 0, 0, 0, 38, 255, 255, 255, 255, 63, 194, 253, 209, 255, 255, 255, 255,
        125, 135, 50, 197, 255, 255, 255, 255, 203, 137, 26, 160, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 97, 38, 16, 255, 255, 255, 255, 254, 184, 71, 32, 255, 255,
        255, 255, 255, 168, 42, 16, 0, 0, 0, 0, 0, 152, 41, 32, 0, 0, 0, 0, 1, 136, 12, 16, 0, 0,
        0, 0, 2, 120, 11, 32, 0, 0, 0, 0, 3, 113, 40, 144, 0, 0, 0, 0, 4, 97, 39, 160, 0, 0, 0, 0,
        5, 81, 10, 144, 0, 0, 0, 0, 6, 65, 9, 160, 0, 0, 0, 0, 7, 48, 236, 144, 0, 0, 0, 0, 7, 141,
        67, 160, 0, 0, 0, 0, 9, 16, 206, 144, 0, 0, 0, 0, 9, 173, 191, 32, 0, 0, 0, 0, 10, 240,
        176, 144, 0, 0, 0, 0, 11, 224, 175, 160, 0, 0, 0, 0, 12, 217, 205, 16, 0, 0, 0, 0, 13, 192,
        145, 160, 0, 0, 0, 0, 14, 185, 175, 16, 0, 0, 0, 0, 15, 169, 174, 32, 0, 0, 0, 0, 16, 153,
        145, 16, 0, 0, 0, 0, 17, 137, 144, 32, 0, 0, 0, 0, 18, 121, 115, 16, 0, 0, 0, 0, 19, 105,
        114, 32, 0, 0, 0, 0, 20, 89, 99, 32, 0, 0, 0, 0, 21, 73, 84, 32, 0, 0, 0, 0, 22, 57, 55,
        16, 0, 0, 0, 0, 23, 41, 54, 32, 0, 0, 0, 0, 24, 34, 83, 144, 0, 0, 0, 0, 25, 9, 24, 32, 0,
        0, 0, 0, 26, 2, 53, 144, 0, 0, 0, 0, 26, 43, 20, 16, 0, 0, 0, 0, 26, 242, 66, 176, 0, 0, 0,
        0, 27, 226, 37, 160, 0, 0, 0, 0, 28, 210, 36, 176, 0, 0, 0, 0, 29, 194, 7, 160, 0, 0, 0, 0,
        30, 178, 6, 176, 0, 0, 0, 0, 31, 161, 233, 160, 0, 0, 0, 0, 32, 118, 57, 48, 0, 0, 0, 0,
        33, 129, 203, 160, 0, 0, 0, 0, 34, 86, 27, 48, 0, 0, 0, 0, 35, 106, 232, 32, 0, 0, 0, 0,
        36, 53, 253, 48, 0, 0, 0, 0, 37, 74, 202, 32, 0, 0, 0, 0, 38, 21, 223, 48, 0, 0, 0, 0, 39,
        42, 172, 32, 0, 0, 0, 0, 39, 254, 251, 176, 0, 0, 0, 0, 41, 10, 142, 32, 0, 0, 0, 0, 41,
        222, 221, 176, 0, 0, 0, 0, 42, 234, 112, 32, 0, 0, 0, 0, 43, 190, 191, 176, 0, 0, 0, 0, 44,
        211, 140, 160, 0, 0, 0, 0, 45, 158, 161, 176, 0, 0, 0, 0, 46, 179, 110, 160, 0, 0, 0, 0,
        47, 126, 131, 176, 0, 0, 0, 0, 48, 147, 80, 160, 0, 0, 0, 0, 49, 103, 160, 48, 0, 0, 0, 0,
        50, 115, 50, 160, 0, 0, 0, 0, 51, 71, 130, 48, 0, 0, 0, 0, 52, 83, 20, 160, 0, 0, 0, 0, 53,
        39, 100, 48, 0, 0, 0, 0, 54, 50, 246, 160, 0, 0, 0, 0, 55, 7, 70, 48, 0, 0, 0, 0, 56, 28,
        19, 32, 0, 0, 0, 0, 56, 231, 40, 48, 0, 0, 0, 0, 57, 251, 245, 32, 0, 0, 0, 0, 58, 199, 10,
        48, 0, 0, 0, 0, 59, 219, 215, 32, 0, 0, 0, 0, 60, 176, 38, 176, 0, 0, 0, 0, 61, 187, 185,
        32, 0, 0, 0, 0, 62, 144, 8, 176, 0, 0, 0, 0, 63, 155, 155, 32, 0, 0, 0, 0, 64, 111, 234,
        176, 0, 0, 0, 0, 65, 132, 183, 160, 0, 0, 0, 0, 66, 79, 204, 176, 0, 0, 0, 0, 67, 100, 153,
        160, 0, 0, 0, 0, 68, 47, 174, 176, 0, 0, 0, 0, 69, 68, 123, 160, 0, 0, 0, 0, 69, 243, 225,
        48, 1, 2, 3, 4, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 6, 2,
        5, 2, 5, 2, 5, 7, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 0, 0, 211, 123, 0,
        0, 255, 255, 129, 251, 0, 0, 255, 255, 143, 128, 0, 4, 255, 255, 157, 144, 1, 8, 255, 255,
        157, 144, 1, 12, 255, 255, 157, 144, 1, 16, 255, 255, 143, 128, 1, 20, 255, 255, 129, 112,
        0, 24, 255, 255, 143, 128, 1, 28, 255, 255, 129, 112, 0, 33, 76, 77, 84, 0, 80, 83, 84, 0,
        80, 87, 84, 0, 80, 80, 84, 0, 80, 68, 84, 0, 89, 68, 84, 0, 89, 83, 84, 0, 65, 75, 68, 84,
        0, 65, 75, 83, 84, 0, 10, 65, 75, 83, 84, 57, 65, 75, 68, 84, 44, 77, 51, 46, 50, 46, 48,
        44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_KNOX_IN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        93, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 94, 3, 254, 160, 255, 255, 255, 255, 158,
        166, 44, 128, 255, 255, 255, 255, 159, 186, 249, 112, 255, 255, 255, 255, 160, 134, 14,
        128, 255, 255, 255, 255, 161, 154, 219, 112, 255, 255, 255, 255, 203, 136, 254, 128, 255,
        255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 9, 240, 255, 255, 255, 255,
        213, 85, 213, 0, 255, 255, 255, 255, 214, 32, 205, 240, 255, 255, 255, 255, 215, 53, 183,
        0, 255, 255, 255, 255, 216, 0, 175, 240, 255, 255, 255, 255, 217, 21, 153, 0, 255, 255,
        255, 255, 217, 224, 145, 240, 255, 255, 255, 255, 218, 254, 181, 128, 255, 255, 255, 255,
        219, 192, 115, 240, 255, 255, 255, 255, 220, 222, 151, 128, 255, 255, 255, 255, 221, 169,
        144, 112, 255, 255, 255, 255, 222, 190, 121, 128, 255, 255, 255, 255, 223, 137, 114, 112,
        255, 255, 255, 255, 224, 158, 91, 128, 255, 255, 255, 255, 225, 105, 84, 112, 255, 255,
        255, 255, 226, 126, 61, 128, 255, 255, 255, 255, 227, 73, 54, 112, 255, 255, 255, 255, 228,
        94, 31, 128, 255, 255, 255, 255, 229, 87, 60, 240, 255, 255, 255, 255, 230, 71, 60, 0, 255,
        255, 255, 255, 231, 55, 30, 240, 255, 255, 255, 255, 232, 39, 30, 0, 255, 255, 255, 255,
        232, 242, 22, 240, 255, 255, 255, 255, 234, 7, 0, 0, 255, 255, 255, 255, 234, 209, 248,
        240, 255, 255, 255, 255, 235, 230, 226, 0, 255, 255, 255, 255, 236, 214, 196, 240, 255,
        255, 255, 255, 237, 198, 196, 0, 255, 255, 255, 255, 238, 191, 225, 112, 255, 255, 255,
        255, 239, 175, 224, 128, 255, 255, 255, 255, 240, 159, 195, 112, 255, 255, 255, 255, 241,
        143, 194, 128, 255, 255, 255, 255, 244, 95, 135, 112, 255, 255, 255, 255, 250, 248, 103, 0,
        255, 255, 255, 255, 251, 232, 73, 240, 255, 255, 255, 255, 252, 216, 73, 0, 255, 255, 255,
        255, 253, 200, 43, 240, 255, 255, 255, 255, 254, 184, 43, 0, 255, 255, 255, 255, 255, 168,
        13, 240, 0, 0, 0, 0, 0, 152, 13, 0, 0, 0, 0, 0, 1, 135, 239, 240, 0, 0, 0, 0, 2, 119, 239,
        0, 0, 0, 0, 0, 3, 113, 12, 112, 0, 0, 0, 0, 4, 97, 11, 128, 0, 0, 0, 0, 5, 80, 238, 112, 0,
        0, 0, 0, 6, 64, 237, 128, 0, 0, 0, 0, 7, 48, 208, 112, 0, 0, 0, 0, 7, 141, 39, 128, 0, 0,
        0, 0, 9, 16, 178, 112, 0, 0, 0, 0, 9, 173, 163, 0, 0, 0, 0, 0, 10, 240, 148, 112, 0, 0, 0,
        0, 11, 224, 147, 128, 0, 0, 0, 0, 12, 217, 176, 240, 0, 0, 0, 0, 13, 192, 117, 128, 0, 0,
        0, 0, 14, 185, 146, 240, 0, 0, 0, 0, 15, 169, 146, 0, 0, 0, 0, 0, 16, 153, 116, 240, 0, 0,
        0, 0, 17, 137, 116, 0, 0, 0, 0, 0, 18, 121, 86, 240, 0, 0, 0, 0, 19, 105, 86, 0, 0, 0, 0,
        0, 20, 89, 56, 240, 0, 0, 0, 0, 21, 73, 56, 0, 0, 0, 0, 0, 22, 57, 26, 240, 0, 0, 0, 0, 23,
        41, 26, 0, 0, 0, 0, 0, 24, 34, 55, 112, 0, 0, 0, 0, 25, 8, 252, 0, 0, 0, 0, 0, 26, 2, 25,
        112, 0, 0, 0, 0, 26, 242, 24, 128, 0, 0, 0, 0, 27, 225, 251, 112, 0, 0, 0, 0, 28, 209, 250,
        128, 0, 0, 0, 0, 29, 193, 221, 112, 0, 0, 0, 0, 30, 177, 220, 128, 0, 0, 0, 0, 31, 161,
        191, 112, 0, 0, 0, 0, 32, 118, 15, 0, 0, 0, 0, 0, 33, 129, 161, 112, 0, 0, 0, 0, 34, 85,
        241, 0, 0, 0, 0, 0, 35, 106, 189, 240, 0, 0, 0, 0, 36, 53, 211, 0, 0, 0, 0, 0, 37, 74, 159,
        240, 0, 0, 0, 0, 38, 21, 181, 0, 0, 0, 0, 0, 39, 42, 129, 240, 0, 0, 0, 0, 39, 254, 209,
        128, 0, 0, 0, 0, 41, 10, 99, 240, 0, 0, 0, 0, 68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 81,
        112, 0, 0, 0, 0, 69, 243, 183, 0, 2, 1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 5, 1, 2, 1, 255, 255, 174, 202, 0, 0, 255, 255, 185, 176, 1,
        4, 255, 255, 171, 160, 0, 8, 255, 255, 185, 176, 1, 12, 255, 255, 185, 176, 1, 16, 255,
        255, 185, 176, 0, 20, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 67, 87, 84, 0, 67, 80,
        84, 0, 69, 83, 84, 0, 10, 67, 83, 84, 54, 67, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77,
        49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_LA_PAZ: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 105, 135, 27, 100, 255, 255, 255, 255, 184,
        30, 150, 228, 255, 255, 255, 255, 184, 238, 213, 212, 1, 2, 3, 255, 255, 192, 28, 0, 0,
        255, 255, 192, 28, 0, 4, 255, 255, 206, 44, 1, 8, 255, 255, 199, 192, 0, 12, 76, 77, 84, 0,
        67, 77, 84, 0, 66, 83, 84, 0, 45, 48, 52, 0, 10, 60, 45, 48, 52, 62, 52, 10,
    ];
    pub(crate) const AMERICA_LIMA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 105, 135, 35, 188, 255, 255, 255, 255,
        140, 116, 64, 212, 255, 255, 255, 255, 195, 207, 74, 80, 255, 255, 255, 255, 196, 69, 227,
        64, 255, 255, 255, 255, 197, 47, 74, 208, 255, 255, 255, 255, 198, 31, 45, 192, 255, 255,
        255, 255, 199, 15, 44, 208, 255, 255, 255, 255, 199, 255, 15, 192, 0, 0, 0, 0, 30, 24, 196,
        80, 0, 0, 0, 0, 30, 143, 93, 64, 0, 0, 0, 0, 31, 249, 247, 208, 0, 0, 0, 0, 32, 112, 144,
        192, 0, 0, 0, 0, 37, 158, 227, 208, 0, 0, 0, 0, 38, 21, 124, 192, 0, 0, 0, 0, 45, 37, 3,
        80, 0, 0, 0, 0, 45, 155, 156, 64, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 255, 255,
        183, 196, 0, 0, 255, 255, 183, 172, 0, 0, 255, 255, 199, 192, 1, 4, 255, 255, 185, 176, 0,
        8, 76, 77, 84, 0, 45, 48, 52, 0, 45, 48, 53, 0, 10, 60, 45, 48, 53, 62, 53, 10,
    ];
    pub(crate) const AMERICA_LOS_ANGELES: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        125, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 94, 4, 26, 192, 255, 255, 255, 255, 158,
        166, 72, 160, 255, 255, 255, 255, 159, 187, 21, 144, 255, 255, 255, 255, 160, 134, 42, 160,
        255, 255, 255, 255, 161, 154, 247, 144, 255, 255, 255, 255, 203, 137, 26, 160, 255, 255,
        255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 38, 16, 255, 255, 255, 255, 214,
        254, 116, 92, 255, 255, 255, 255, 216, 128, 173, 144, 255, 255, 255, 255, 218, 254, 195,
        144, 255, 255, 255, 255, 219, 192, 144, 16, 255, 255, 255, 255, 220, 222, 165, 144, 255,
        255, 255, 255, 221, 169, 172, 144, 255, 255, 255, 255, 222, 190, 135, 144, 255, 255, 255,
        255, 223, 137, 142, 144, 255, 255, 255, 255, 224, 158, 105, 144, 255, 255, 255, 255, 225,
        105, 112, 144, 255, 255, 255, 255, 226, 126, 75, 144, 255, 255, 255, 255, 227, 73, 82, 144,
        255, 255, 255, 255, 228, 94, 45, 144, 255, 255, 255, 255, 229, 41, 52, 144, 255, 255, 255,
        255, 230, 71, 74, 16, 255, 255, 255, 255, 231, 18, 81, 16, 255, 255, 255, 255, 232, 39, 44,
        16, 255, 255, 255, 255, 232, 242, 51, 16, 255, 255, 255, 255, 234, 7, 14, 16, 255, 255,
        255, 255, 234, 210, 21, 16, 255, 255, 255, 255, 235, 230, 240, 16, 255, 255, 255, 255, 236,
        177, 247, 16, 255, 255, 255, 255, 237, 198, 210, 16, 255, 255, 255, 255, 238, 145, 217, 16,
        255, 255, 255, 255, 239, 175, 238, 144, 255, 255, 255, 255, 240, 113, 187, 16, 255, 255,
        255, 255, 241, 143, 208, 144, 255, 255, 255, 255, 242, 127, 193, 144, 255, 255, 255, 255,
        243, 111, 178, 144, 255, 255, 255, 255, 244, 95, 163, 144, 255, 255, 255, 255, 245, 79,
        148, 144, 255, 255, 255, 255, 246, 63, 133, 144, 255, 255, 255, 255, 247, 47, 118, 144,
        255, 255, 255, 255, 248, 40, 162, 16, 255, 255, 255, 255, 249, 15, 88, 144, 255, 255, 255,
        255, 250, 8, 132, 16, 255, 255, 255, 255, 250, 248, 131, 32, 255, 255, 255, 255, 251, 232,
        102, 16, 255, 255, 255, 255, 252, 216, 101, 32, 255, 255, 255, 255, 253, 200, 72, 16, 255,
        255, 255, 255, 254, 184, 71, 32, 255, 255, 255, 255, 255, 168, 42, 16, 0, 0, 0, 0, 0, 152,
        41, 32, 0, 0, 0, 0, 1, 136, 12, 16, 0, 0, 0, 0, 2, 120, 11, 32, 0, 0, 0, 0, 3, 113, 40,
        144, 0, 0, 0, 0, 4, 97, 39, 160, 0, 0, 0, 0, 5, 81, 10, 144, 0, 0, 0, 0, 6, 65, 9, 160, 0,
        0, 0, 0, 7, 48, 236, 144, 0, 0, 0, 0, 7, 141, 67, 160, 0, 0, 0, 0, 9, 16, 206, 144, 0, 0,
        0, 0, 9, 173, 191, 32, 0, 0, 0, 0, 10, 240, 176, 144, 0, 0, 0, 0, 11, 224, 175, 160, 0, 0,
        0, 0, 12, 217, 205, 16, 0, 0, 0, 0, 13, 192, 145, 160, 0, 0, 0, 0, 14, 185, 175, 16, 0, 0,
        0, 0, 15, 169, 174, 32, 0, 0, 0, 0, 16, 153, 145, 16, 0, 0, 0, 0, 17, 137, 144, 32, 0, 0,
        0, 0, 18, 121, 115, 16, 0, 0, 0, 0, 19, 105, 114, 32, 0, 0, 0, 0, 20, 89, 85, 16, 0, 0, 0,
        0, 21, 73, 84, 32, 0, 0, 0, 0, 22, 57, 55, 16, 0, 0, 0, 0, 23, 41, 54, 32, 0, 0, 0, 0, 24,
        34, 83, 144, 0, 0, 0, 0, 25, 9, 24, 32, 0, 0, 0, 0, 26, 2, 53, 144, 0, 0, 0, 0, 26, 242,
        52, 160, 0, 0, 0, 0, 27, 226, 23, 144, 0, 0, 0, 0, 28, 210, 22, 160, 0, 0, 0, 0, 29, 193,
        249, 144, 0, 0, 0, 0, 30, 177, 248, 160, 0, 0, 0, 0, 31, 161, 219, 144, 0, 0, 0, 0, 32,
        118, 43, 32, 0, 0, 0, 0, 33, 129, 189, 144, 0, 0, 0, 0, 34, 86, 13, 32, 0, 0, 0, 0, 35,
        106, 218, 16, 0, 0, 0, 0, 36, 53, 239, 32, 0, 0, 0, 0, 37, 74, 188, 16, 0, 0, 0, 0, 38, 21,
        209, 32, 0, 0, 0, 0, 39, 42, 158, 16, 0, 0, 0, 0, 39, 254, 237, 160, 0, 0, 0, 0, 41, 10,
        128, 16, 0, 0, 0, 0, 41, 222, 207, 160, 0, 0, 0, 0, 42, 234, 98, 16, 0, 0, 0, 0, 43, 190,
        177, 160, 0, 0, 0, 0, 44, 211, 126, 144, 0, 0, 0, 0, 45, 158, 147, 160, 0, 0, 0, 0, 46,
        179, 96, 144, 0, 0, 0, 0, 47, 126, 117, 160, 0, 0, 0, 0, 48, 147, 66, 144, 0, 0, 0, 0, 49,
        103, 146, 32, 0, 0, 0, 0, 50, 115, 36, 144, 0, 0, 0, 0, 51, 71, 116, 32, 0, 0, 0, 0, 52,
        83, 6, 144, 0, 0, 0, 0, 53, 39, 86, 32, 0, 0, 0, 0, 54, 50, 232, 144, 0, 0, 0, 0, 55, 7,
        56, 32, 0, 0, 0, 0, 56, 28, 5, 16, 0, 0, 0, 0, 56, 231, 26, 32, 0, 0, 0, 0, 57, 251, 231,
        16, 0, 0, 0, 0, 58, 198, 252, 32, 0, 0, 0, 0, 59, 219, 201, 16, 0, 0, 0, 0, 60, 176, 24,
        160, 0, 0, 0, 0, 61, 187, 171, 16, 0, 0, 0, 0, 62, 143, 250, 160, 0, 0, 0, 0, 63, 155, 141,
        16, 0, 0, 0, 0, 64, 111, 220, 160, 0, 0, 0, 0, 65, 132, 169, 144, 0, 0, 0, 0, 66, 79, 190,
        160, 0, 0, 0, 0, 67, 100, 139, 144, 0, 0, 0, 0, 68, 47, 160, 160, 0, 0, 0, 0, 69, 68, 109,
        144, 0, 0, 0, 0, 69, 243, 211, 32, 2, 1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255, 145, 38, 0, 0, 255, 255, 157,
        144, 1, 4, 255, 255, 143, 128, 0, 8, 255, 255, 157, 144, 1, 12, 255, 255, 157, 144, 1, 16,
        76, 77, 84, 0, 80, 68, 84, 0, 80, 83, 84, 0, 80, 87, 84, 0, 80, 80, 84, 0, 10, 80, 83, 84,
        56, 80, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_LOUISVILLE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        117, 0, 0, 0, 7, 0, 0, 0, 28, 255, 255, 255, 255, 94, 3, 254, 160, 255, 255, 255, 255, 158,
        166, 44, 128, 255, 255, 255, 255, 159, 186, 249, 112, 255, 255, 255, 255, 160, 134, 14,
        128, 255, 255, 255, 255, 161, 154, 219, 112, 255, 255, 255, 255, 164, 115, 247, 0, 255,
        255, 255, 255, 165, 22, 17, 112, 255, 255, 255, 255, 202, 13, 78, 128, 255, 255, 255, 255,
        202, 216, 71, 112, 255, 255, 255, 255, 203, 136, 254, 128, 255, 255, 255, 255, 210, 35,
        244, 112, 255, 255, 255, 255, 210, 97, 9, 240, 255, 255, 255, 255, 211, 117, 215, 28, 255,
        255, 255, 255, 211, 164, 9, 112, 255, 255, 255, 255, 218, 254, 181, 128, 255, 255, 255,
        255, 219, 192, 115, 240, 255, 255, 255, 255, 220, 222, 151, 128, 255, 255, 255, 255, 221,
        169, 144, 112, 255, 255, 255, 255, 222, 190, 121, 128, 255, 255, 255, 255, 223, 137, 114,
        112, 255, 255, 255, 255, 224, 158, 91, 128, 255, 255, 255, 255, 225, 105, 84, 112, 255,
        255, 255, 255, 226, 126, 61, 128, 255, 255, 255, 255, 227, 73, 54, 112, 255, 255, 255, 255,
        228, 94, 31, 128, 255, 255, 255, 255, 229, 41, 24, 112, 255, 255, 255, 255, 230, 71, 60, 0,
        255, 255, 255, 255, 231, 55, 30, 240, 255, 255, 255, 255, 232, 39, 30, 0, 255, 255, 255,
        255, 233, 23, 0, 240, 255, 255, 255, 255, 234, 7, 0, 0, 255, 255, 255, 255, 234, 246, 226,
        240, 255, 255, 255, 255, 235, 230, 226, 0, 255, 255, 255, 255, 236, 214, 196, 240, 255,
        255, 255, 255, 237, 198, 196, 0, 255, 255, 255, 255, 238, 191, 225, 112, 255, 255, 255,
        255, 239, 175, 224, 128, 255, 255, 255, 255, 240, 30, 144, 112, 255, 255, 255, 255, 252,
        216, 58, 240, 255, 255, 255, 255, 253, 200, 29, 224, 255, 255, 255, 255, 254, 184, 28, 240,
        255, 255, 255, 255, 255, 167, 255, 224, 0, 0, 0, 0, 0, 151, 254, 240, 0, 0, 0, 0, 1, 135,
        225, 224, 0, 0, 0, 0, 2, 119, 224, 240, 0, 0, 0, 0, 3, 112, 254, 96, 0, 0, 0, 0, 4, 96,
        253, 112, 0, 0, 0, 0, 5, 80, 224, 96, 0, 0, 0, 0, 6, 64, 223, 112, 0, 0, 0, 0, 7, 48, 194,
        96, 0, 0, 0, 0, 7, 141, 25, 112, 0, 0, 0, 0, 9, 16, 178, 112, 0, 0, 0, 0, 9, 173, 148, 240,
        0, 0, 0, 0, 10, 240, 134, 96, 0, 0, 0, 0, 11, 224, 133, 112, 0, 0, 0, 0, 12, 217, 162, 224,
        0, 0, 0, 0, 13, 192, 103, 112, 0, 0, 0, 0, 14, 185, 132, 224, 0, 0, 0, 0, 15, 169, 131,
        240, 0, 0, 0, 0, 16, 153, 102, 224, 0, 0, 0, 0, 17, 137, 101, 240, 0, 0, 0, 0, 18, 121, 72,
        224, 0, 0, 0, 0, 19, 105, 71, 240, 0, 0, 0, 0, 20, 89, 42, 224, 0, 0, 0, 0, 21, 73, 41,
        240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0, 0, 0, 23, 41, 11, 240, 0, 0, 0, 0, 24, 34, 41, 96,
        0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0, 26, 2, 11, 96, 0, 0, 0, 0, 26, 242, 10, 112, 0, 0,
        0, 0, 27, 225, 237, 96, 0, 0, 0, 0, 28, 209, 236, 112, 0, 0, 0, 0, 29, 193, 207, 96, 0, 0,
        0, 0, 30, 177, 206, 112, 0, 0, 0, 0, 31, 161, 177, 96, 0, 0, 0, 0, 32, 118, 0, 240, 0, 0,
        0, 0, 33, 129, 147, 96, 0, 0, 0, 0, 34, 85, 226, 240, 0, 0, 0, 0, 35, 106, 175, 224, 0, 0,
        0, 0, 36, 53, 196, 240, 0, 0, 0, 0, 37, 74, 145, 224, 0, 0, 0, 0, 38, 21, 166, 240, 0, 0,
        0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39, 254, 195, 112, 0, 0, 0, 0, 41, 10, 85, 224, 0, 0,
        0, 0, 41, 222, 165, 112, 0, 0, 0, 0, 42, 234, 55, 224, 0, 0, 0, 0, 43, 190, 135, 112, 0, 0,
        0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45, 158, 105, 112, 0, 0, 0, 0, 46, 179, 54, 96, 0, 0, 0,
        0, 47, 126, 75, 112, 0, 0, 0, 0, 48, 147, 24, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0,
        0, 50, 114, 250, 96, 0, 0, 0, 0, 51, 71, 73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0,
        53, 39, 43, 240, 0, 0, 0, 0, 54, 50, 190, 96, 0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56,
        27, 218, 224, 0, 0, 0, 0, 56, 230, 239, 240, 0, 0, 0, 0, 57, 251, 188, 224, 0, 0, 0, 0, 58,
        198, 209, 240, 0, 0, 0, 0, 59, 219, 158, 224, 0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0,
        61, 187, 128, 224, 0, 0, 0, 0, 62, 143, 208, 112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0,
        64, 111, 178, 112, 0, 0, 0, 0, 65, 132, 127, 96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0,
        67, 100, 97, 96, 0, 0, 0, 0, 68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69,
        243, 168, 240, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 1, 5, 6, 5, 6,
        5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 6, 255, 255, 175, 154, 0, 0, 255, 255, 185, 176, 1, 4, 255, 255, 171, 160, 0, 8, 255,
        255, 185, 176, 1, 12, 255, 255, 185, 176, 1, 16, 255, 255, 185, 176, 0, 20, 255, 255, 199,
        192, 1, 24, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 67, 87, 84, 0, 67, 80, 84, 0, 69,
        83, 84, 0, 69, 68, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44,
        77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_MACEIO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        41, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 104, 124, 255, 255, 255, 255,
        184, 15, 73, 224, 255, 255, 255, 255, 184, 253, 64, 160, 255, 255, 255, 255, 185, 241, 52,
        48, 255, 255, 255, 255, 186, 222, 116, 32, 255, 255, 255, 255, 218, 56, 174, 48, 255, 255,
        255, 255, 218, 235, 250, 48, 255, 255, 255, 255, 220, 25, 225, 176, 255, 255, 255, 255,
        220, 185, 89, 32, 255, 255, 255, 255, 221, 251, 21, 48, 255, 255, 255, 255, 222, 155, 222,
        32, 255, 255, 255, 255, 223, 221, 154, 48, 255, 255, 255, 255, 224, 84, 51, 32, 255, 255,
        255, 255, 244, 151, 255, 176, 255, 255, 255, 255, 245, 5, 94, 32, 255, 255, 255, 255, 246,
        192, 100, 48, 255, 255, 255, 255, 247, 14, 30, 160, 255, 255, 255, 255, 248, 81, 44, 48,
        255, 255, 255, 255, 248, 199, 197, 32, 255, 255, 255, 255, 250, 10, 210, 176, 255, 255,
        255, 255, 250, 168, 248, 160, 255, 255, 255, 255, 251, 236, 6, 48, 255, 255, 255, 255, 252,
        139, 125, 160, 0, 0, 0, 0, 29, 201, 142, 48, 0, 0, 0, 0, 30, 120, 215, 160, 0, 0, 0, 0, 31,
        160, 53, 176, 0, 0, 0, 0, 32, 51, 207, 160, 0, 0, 0, 0, 33, 129, 105, 48, 0, 0, 0, 0, 34,
        11, 200, 160, 0, 0, 0, 0, 35, 88, 16, 176, 0, 0, 0, 0, 35, 226, 112, 32, 0, 0, 0, 0, 37,
        55, 242, 176, 0, 0, 0, 0, 37, 212, 199, 32, 0, 0, 0, 0, 48, 128, 121, 48, 0, 0, 0, 0, 49,
        29, 77, 160, 0, 0, 0, 0, 55, 246, 198, 176, 0, 0, 0, 0, 56, 184, 133, 32, 0, 0, 0, 0, 57,
        223, 227, 48, 0, 0, 0, 0, 57, 242, 74, 32, 0, 0, 0, 0, 59, 200, 255, 176, 0, 0, 0, 0, 60,
        111, 14, 160, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 222, 132, 0, 0, 255, 255, 227, 224,
        1, 4, 255, 255, 213, 208, 0, 8, 76, 77, 84, 0, 45, 48, 50, 0, 45, 48, 51, 0, 10, 60, 45,
        48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_MANAGUA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 105, 135, 44, 100, 255, 255, 255, 255,
        189, 45, 72, 232, 0, 0, 0, 0, 6, 67, 116, 96, 0, 0, 0, 0, 9, 164, 62, 80, 0, 0, 0, 0, 17,
        81, 248, 224, 0, 0, 0, 0, 17, 212, 111, 80, 0, 0, 0, 0, 19, 49, 218, 224, 0, 0, 0, 0, 19,
        180, 81, 80, 0, 0, 0, 0, 41, 97, 145, 32, 0, 0, 0, 0, 42, 193, 75, 80, 0, 0, 0, 0, 43, 67,
        221, 224, 0, 0, 0, 0, 50, 201, 239, 80, 0, 0, 0, 0, 66, 88, 192, 224, 0, 0, 0, 0, 67, 63,
        105, 80, 0, 0, 0, 0, 68, 84, 110, 128, 0, 0, 0, 0, 69, 31, 89, 96, 1, 2, 3, 2, 4, 2, 4, 2,
        3, 2, 3, 2, 4, 2, 4, 2, 255, 255, 175, 28, 0, 0, 255, 255, 175, 24, 0, 4, 255, 255, 171,
        160, 0, 8, 255, 255, 185, 176, 0, 12, 255, 255, 185, 176, 1, 16, 76, 77, 84, 0, 77, 77, 84,
        0, 67, 83, 84, 0, 69, 83, 84, 0, 67, 68, 84, 0, 10, 67, 83, 84, 54, 10,
    ];
    pub(crate) const AMERICA_MANAUS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        31, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 127, 68, 255, 255, 255, 255,
        184, 15, 87, 240, 255, 255, 255, 255, 184, 253, 78, 176, 255, 255, 255, 255, 185, 241, 66,
        64, 255, 255, 255, 255, 186, 222, 130, 48, 255, 255, 255, 255, 218, 56, 188, 64, 255, 255,
        255, 255, 218, 236, 8, 64, 255, 255, 255, 255, 220, 25, 239, 192, 255, 255, 255, 255, 220,
        185, 103, 48, 255, 255, 255, 255, 221, 251, 35, 64, 255, 255, 255, 255, 222, 155, 236, 48,
        255, 255, 255, 255, 223, 221, 168, 64, 255, 255, 255, 255, 224, 84, 65, 48, 255, 255, 255,
        255, 244, 152, 13, 192, 255, 255, 255, 255, 245, 5, 108, 48, 255, 255, 255, 255, 246, 192,
        114, 64, 255, 255, 255, 255, 247, 14, 44, 176, 255, 255, 255, 255, 248, 81, 58, 64, 255,
        255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255, 250, 10, 224, 192, 255, 255, 255,
        255, 250, 169, 6, 176, 255, 255, 255, 255, 251, 236, 20, 64, 255, 255, 255, 255, 252, 139,
        139, 176, 0, 0, 0, 0, 29, 201, 156, 64, 0, 0, 0, 0, 30, 120, 229, 176, 0, 0, 0, 0, 31, 160,
        67, 192, 0, 0, 0, 0, 32, 51, 221, 176, 0, 0, 0, 0, 33, 129, 119, 64, 0, 0, 0, 0, 34, 11,
        214, 176, 0, 0, 0, 0, 44, 192, 195, 64, 0, 0, 0, 0, 45, 102, 210, 48, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 199, 188,
        0, 0, 255, 255, 213, 208, 1, 4, 255, 255, 199, 192, 0, 8, 76, 77, 84, 0, 45, 48, 51, 0, 45,
        48, 52, 0, 10, 60, 45, 48, 52, 62, 52, 10,
    ];
    pub(crate) const AMERICA_MARIGOT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 147, 55, 51, 172, 1, 255, 255, 198, 84, 0,
        0, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_MARTINIQUE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 105, 135, 20, 196, 255, 255, 255, 255, 145,
        163, 200, 68, 0, 0, 0, 0, 19, 77, 110, 64, 0, 0, 0, 0, 20, 52, 22, 176, 1, 2, 3, 2, 255,
        255, 198, 188, 0, 0, 255, 255, 198, 188, 0, 4, 255, 255, 199, 192, 0, 9, 255, 255, 213,
        208, 1, 13, 76, 77, 84, 0, 70, 70, 77, 84, 0, 65, 83, 84, 0, 65, 68, 84, 0, 10, 65, 83, 84,
        52, 10,
    ];
    pub(crate) const AMERICA_MATAMOROS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        32, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 165, 182, 218, 96, 0, 0, 0, 0, 34, 85,
        241, 0, 0, 0, 0, 0, 35, 106, 189, 240, 0, 0, 0, 0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8,
        112, 0, 0, 0, 0, 51, 71, 88, 0, 0, 0, 0, 0, 52, 82, 234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0,
        0, 0, 0, 54, 50, 204, 112, 0, 0, 0, 0, 55, 7, 28, 0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0,
        0, 56, 230, 254, 0, 0, 0, 0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 245, 4, 128, 0, 0, 0, 0,
        59, 182, 194, 240, 0, 0, 0, 0, 60, 175, 252, 128, 0, 0, 0, 0, 61, 187, 142, 240, 0, 0, 0,
        0, 62, 143, 222, 128, 0, 0, 0, 0, 63, 155, 112, 240, 0, 0, 0, 0, 64, 111, 192, 128, 0, 0,
        0, 0, 65, 132, 141, 112, 0, 0, 0, 0, 66, 79, 162, 128, 0, 0, 0, 0, 67, 100, 111, 112, 0, 0,
        0, 0, 68, 47, 132, 128, 0, 0, 0, 0, 69, 68, 81, 112, 0, 0, 0, 0, 70, 15, 102, 128, 0, 0, 0,
        0, 71, 36, 51, 112, 0, 0, 0, 0, 71, 248, 131, 0, 0, 0, 0, 0, 73, 4, 21, 112, 0, 0, 0, 0,
        73, 216, 101, 0, 0, 0, 0, 0, 74, 227, 247, 112, 0, 0, 0, 0, 75, 156, 151, 128, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255,
        255, 162, 64, 0, 0, 255, 255, 171, 160, 0, 4, 255, 255, 185, 176, 1, 8, 76, 77, 84, 0, 67,
        83, 84, 0, 67, 68, 84, 0, 10, 67, 83, 84, 54, 67, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44,
        77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_MAZATLAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        22, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 165, 182, 232, 112, 255, 255, 255, 255,
        175, 242, 110, 224, 255, 255, 255, 255, 182, 102, 86, 96, 255, 255, 255, 255, 183, 67, 210,
        96, 255, 255, 255, 255, 184, 12, 54, 96, 255, 255, 255, 255, 184, 253, 134, 240, 255, 255,
        255, 255, 203, 234, 113, 96, 255, 255, 255, 255, 216, 145, 180, 240, 0, 0, 0, 0, 0, 0, 112,
        128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0, 0, 0, 50, 115, 22, 128, 0, 0, 0, 0, 51, 71, 102,
        16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0, 0, 53, 39, 72, 16, 0, 0, 0, 0, 54, 50, 218, 128,
        0, 0, 0, 0, 55, 7, 42, 16, 0, 0, 0, 0, 56, 27, 247, 0, 0, 0, 0, 0, 56, 231, 12, 16, 0, 0,
        0, 0, 57, 251, 217, 0, 0, 0, 0, 0, 58, 245, 18, 144, 0, 0, 0, 0, 59, 182, 209, 0, 0, 0, 0,
        0, 60, 176, 10, 144, 1, 2, 1, 2, 1, 2, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 255,
        255, 156, 60, 0, 0, 255, 255, 157, 144, 0, 4, 255, 255, 171, 160, 0, 8, 255, 255, 143, 128,
        0, 12, 255, 255, 171, 160, 1, 16, 76, 77, 84, 0, 77, 83, 84, 0, 67, 83, 84, 0, 80, 83, 84,
        0, 77, 68, 84, 0, 10, 77, 83, 84, 55, 77, 68, 84, 44, 77, 52, 46, 49, 46, 48, 44, 77, 49,
        48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const AMERICA_MENDOZA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        61, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 114, 156, 178, 4, 255, 255, 255, 255, 162,
        146, 143, 48, 255, 255, 255, 255, 182, 123, 82, 64, 255, 255, 255, 255, 183, 26, 201, 176,
        255, 255, 255, 255, 184, 30, 143, 64, 255, 255, 255, 255, 184, 212, 112, 48, 255, 255, 255,
        255, 186, 23, 125, 192, 255, 255, 255, 255, 186, 181, 163, 176, 255, 255, 255, 255, 187,
        248, 177, 64, 255, 255, 255, 255, 188, 150, 215, 48, 255, 255, 255, 255, 189, 217, 228,
        192, 255, 255, 255, 255, 190, 120, 10, 176, 255, 255, 255, 255, 191, 187, 24, 64, 255, 255,
        255, 255, 192, 90, 143, 176, 255, 255, 255, 255, 193, 157, 157, 64, 255, 255, 255, 255,
        194, 59, 195, 48, 255, 255, 255, 255, 195, 126, 208, 192, 255, 255, 255, 255, 196, 28, 246,
        176, 255, 255, 255, 255, 197, 96, 4, 64, 255, 255, 255, 255, 197, 254, 42, 48, 255, 255,
        255, 255, 199, 65, 55, 192, 255, 255, 255, 255, 199, 224, 175, 48, 255, 255, 255, 255, 200,
        129, 148, 64, 255, 255, 255, 255, 202, 77, 161, 176, 255, 255, 255, 255, 202, 238, 134,
        192, 255, 255, 255, 255, 206, 77, 255, 48, 255, 255, 255, 255, 206, 176, 237, 192, 255,
        255, 255, 255, 211, 41, 53, 176, 255, 255, 255, 255, 212, 67, 100, 192, 255, 255, 255, 255,
        244, 61, 8, 48, 255, 255, 255, 255, 244, 159, 246, 192, 255, 255, 255, 255, 245, 5, 108,
        48, 255, 255, 255, 255, 246, 50, 16, 64, 255, 255, 255, 255, 246, 230, 159, 176, 255, 255,
        255, 255, 248, 19, 67, 192, 255, 255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255, 249,
        244, 119, 64, 255, 255, 255, 255, 250, 211, 54, 176, 255, 255, 255, 255, 251, 195, 53, 192,
        255, 255, 255, 255, 252, 188, 83, 48, 255, 255, 255, 255, 253, 172, 82, 64, 255, 255, 255,
        255, 254, 156, 53, 48, 255, 255, 255, 255, 255, 140, 52, 64, 0, 0, 0, 0, 7, 163, 74, 176,
        0, 0, 0, 0, 8, 36, 111, 160, 0, 0, 0, 0, 35, 148, 181, 176, 0, 0, 0, 0, 36, 16, 148, 160,
        0, 0, 0, 0, 37, 55, 242, 176, 0, 0, 0, 0, 37, 240, 118, 160, 0, 0, 0, 0, 39, 25, 52, 64, 0,
        0, 0, 0, 39, 205, 195, 176, 0, 0, 0, 0, 40, 250, 103, 192, 0, 0, 0, 0, 41, 176, 72, 176, 0,
        0, 0, 0, 42, 224, 225, 64, 0, 0, 0, 0, 43, 153, 87, 32, 0, 0, 0, 0, 55, 246, 198, 176, 0,
        0, 0, 0, 56, 191, 42, 176, 0, 0, 0, 0, 64, 176, 19, 176, 0, 0, 0, 0, 65, 86, 62, 192, 0, 0,
        0, 0, 71, 119, 9, 176, 0, 0, 0, 0, 71, 220, 127, 32, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5,
        4, 5, 4, 5, 4, 2, 3, 2, 3, 2, 4, 5, 3, 5, 2, 5, 4, 5, 255, 255, 191, 124, 0, 0, 255, 255,
        195, 208, 0, 4, 255, 255, 199, 192, 0, 8, 255, 255, 213, 208, 1, 12, 255, 255, 227, 224, 1,
        16, 255, 255, 213, 208, 0, 12, 76, 77, 84, 0, 67, 77, 84, 0, 45, 48, 52, 0, 45, 48, 51, 0,
        45, 48, 50, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_MENOMINEE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        82, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 97, 119, 73, 99, 255, 255, 255, 255, 158,
        166, 44, 128, 255, 255, 255, 255, 159, 186, 249, 112, 255, 255, 255, 255, 160, 134, 14,
        128, 255, 255, 255, 255, 161, 154, 219, 112, 255, 255, 255, 255, 203, 136, 254, 128, 255,
        255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 9, 240, 255, 255, 255, 255,
        211, 117, 243, 0, 255, 255, 255, 255, 212, 64, 235, 240, 255, 255, 255, 255, 249, 15, 74,
        128, 255, 255, 255, 255, 250, 8, 103, 240, 255, 255, 255, 255, 254, 184, 43, 0, 0, 0, 0, 0,
        6, 64, 223, 112, 0, 0, 0, 0, 7, 48, 208, 112, 0, 0, 0, 0, 7, 141, 39, 128, 0, 0, 0, 0, 9,
        16, 178, 112, 0, 0, 0, 0, 9, 173, 163, 0, 0, 0, 0, 0, 10, 240, 148, 112, 0, 0, 0, 0, 11,
        224, 147, 128, 0, 0, 0, 0, 12, 217, 176, 240, 0, 0, 0, 0, 13, 192, 117, 128, 0, 0, 0, 0,
        14, 185, 146, 240, 0, 0, 0, 0, 15, 169, 146, 0, 0, 0, 0, 0, 16, 153, 116, 240, 0, 0, 0, 0,
        17, 137, 116, 0, 0, 0, 0, 0, 18, 121, 86, 240, 0, 0, 0, 0, 19, 105, 86, 0, 0, 0, 0, 0, 20,
        89, 56, 240, 0, 0, 0, 0, 21, 73, 56, 0, 0, 0, 0, 0, 22, 57, 26, 240, 0, 0, 0, 0, 23, 41,
        26, 0, 0, 0, 0, 0, 24, 34, 55, 112, 0, 0, 0, 0, 25, 8, 252, 0, 0, 0, 0, 0, 26, 2, 25, 112,
        0, 0, 0, 0, 26, 242, 24, 128, 0, 0, 0, 0, 27, 225, 251, 112, 0, 0, 0, 0, 28, 209, 250, 128,
        0, 0, 0, 0, 29, 193, 221, 112, 0, 0, 0, 0, 30, 177, 220, 128, 0, 0, 0, 0, 31, 161, 191,
        112, 0, 0, 0, 0, 32, 118, 15, 0, 0, 0, 0, 0, 33, 129, 161, 112, 0, 0, 0, 0, 34, 85, 241, 0,
        0, 0, 0, 0, 35, 106, 189, 240, 0, 0, 0, 0, 36, 53, 211, 0, 0, 0, 0, 0, 37, 74, 159, 240, 0,
        0, 0, 0, 38, 21, 181, 0, 0, 0, 0, 0, 39, 42, 129, 240, 0, 0, 0, 0, 39, 254, 209, 128, 0, 0,
        0, 0, 41, 10, 99, 240, 0, 0, 0, 0, 41, 222, 179, 128, 0, 0, 0, 0, 42, 234, 69, 240, 0, 0,
        0, 0, 43, 190, 149, 128, 0, 0, 0, 0, 44, 211, 98, 112, 0, 0, 0, 0, 45, 158, 119, 128, 0, 0,
        0, 0, 46, 179, 68, 112, 0, 0, 0, 0, 47, 126, 89, 128, 0, 0, 0, 0, 48, 147, 38, 112, 0, 0,
        0, 0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8, 112, 0, 0, 0, 0, 51, 71, 88, 0, 0, 0, 0, 0,
        52, 82, 234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0, 0, 0, 0, 54, 50, 204, 112, 0, 0, 0, 0, 55,
        7, 28, 0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0, 0, 56, 230, 254, 0, 0, 0, 0, 0, 57, 251,
        202, 240, 0, 0, 0, 0, 58, 198, 224, 0, 0, 0, 0, 0, 59, 219, 172, 240, 0, 0, 0, 0, 60, 175,
        252, 128, 0, 0, 0, 0, 61, 187, 142, 240, 0, 0, 0, 0, 62, 143, 222, 128, 0, 0, 0, 0, 63,
        155, 112, 240, 0, 0, 0, 0, 64, 111, 192, 128, 0, 0, 0, 0, 65, 132, 141, 112, 0, 0, 0, 0,
        66, 79, 162, 128, 0, 0, 0, 0, 67, 100, 111, 112, 0, 0, 0, 0, 68, 47, 132, 128, 0, 0, 0, 0,
        69, 68, 81, 112, 0, 0, 0, 0, 69, 243, 183, 0, 2, 1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 5, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 255, 255, 173, 221, 0, 0, 255, 255, 185, 176, 1, 4, 255, 255, 171,
        160, 0, 8, 255, 255, 185, 176, 1, 12, 255, 255, 185, 176, 1, 16, 255, 255, 185, 176, 0, 20,
        76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 67, 87, 84, 0, 67, 80, 84, 0, 69, 83, 84, 0,
        10, 67, 83, 84, 54, 67, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48,
        10,
    ];
    pub(crate) const AMERICA_MERIDA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 165, 182, 218, 96, 0, 0, 0, 0, 22, 134,
        213, 96, 0, 0, 0, 0, 24, 76, 75, 80, 0, 0, 0, 0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8,
        112, 0, 0, 0, 0, 51, 71, 88, 0, 0, 0, 0, 0, 52, 82, 234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0,
        0, 0, 0, 54, 50, 204, 112, 0, 0, 0, 0, 55, 7, 28, 0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0,
        0, 56, 230, 254, 0, 0, 0, 0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 245, 4, 128, 0, 0, 0, 0,
        59, 182, 194, 240, 0, 0, 0, 0, 60, 175, 252, 128, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
        1, 3, 255, 255, 171, 252, 0, 0, 255, 255, 171, 160, 0, 4, 255, 255, 185, 176, 0, 8, 255,
        255, 185, 176, 1, 12, 76, 77, 84, 0, 67, 83, 84, 0, 69, 83, 84, 0, 67, 68, 84, 0, 10, 67,
        83, 84, 54, 67, 68, 84, 44, 77, 52, 46, 49, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const AMERICA_METLAKATLA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        44, 0, 0, 0, 8, 0, 0, 0, 30, 255, 255, 255, 255, 63, 194, 253, 209, 255, 255, 255, 255,
        125, 135, 48, 26, 255, 255, 255, 255, 203, 137, 26, 160, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 97, 38, 16, 255, 255, 255, 255, 254, 184, 71, 32, 255, 255,
        255, 255, 255, 168, 42, 16, 0, 0, 0, 0, 0, 152, 41, 32, 0, 0, 0, 0, 1, 136, 12, 16, 0, 0,
        0, 0, 2, 120, 11, 32, 0, 0, 0, 0, 3, 113, 40, 144, 0, 0, 0, 0, 4, 97, 39, 160, 0, 0, 0, 0,
        5, 81, 10, 144, 0, 0, 0, 0, 6, 65, 9, 160, 0, 0, 0, 0, 7, 48, 236, 144, 0, 0, 0, 0, 7, 141,
        67, 160, 0, 0, 0, 0, 9, 16, 206, 144, 0, 0, 0, 0, 9, 173, 191, 32, 0, 0, 0, 0, 10, 240,
        176, 144, 0, 0, 0, 0, 11, 224, 175, 160, 0, 0, 0, 0, 12, 217, 205, 16, 0, 0, 0, 0, 13, 192,
        145, 160, 0, 0, 0, 0, 14, 185, 175, 16, 0, 0, 0, 0, 15, 169, 174, 32, 0, 0, 0, 0, 16, 153,
        145, 16, 0, 0, 0, 0, 17, 137, 144, 32, 0, 0, 0, 0, 18, 121, 115, 16, 0, 0, 0, 0, 19, 105,
        114, 32, 0, 0, 0, 0, 20, 89, 85, 16, 0, 0, 0, 0, 21, 73, 84, 32, 0, 0, 0, 0, 22, 57, 55,
        16, 0, 0, 0, 0, 23, 41, 54, 32, 0, 0, 0, 0, 24, 34, 83, 144, 0, 0, 0, 0, 25, 9, 24, 32, 0,
        0, 0, 0, 26, 2, 53, 144, 0, 0, 0, 0, 86, 53, 226, 160, 0, 0, 0, 0, 86, 229, 72, 48, 0, 0,
        0, 0, 88, 30, 255, 32, 0, 0, 0, 0, 88, 197, 42, 48, 0, 0, 0, 0, 89, 254, 225, 32, 0, 0, 0,
        0, 90, 165, 12, 48, 0, 0, 0, 0, 91, 222, 195, 32, 0, 0, 0, 0, 92, 68, 70, 160, 0, 0, 0, 0,
        92, 132, 238, 48, 1, 2, 3, 4, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 6, 7, 6, 7, 6, 7, 2, 6, 7, 0, 0, 214, 38, 0, 0, 255, 255,
        132, 166, 0, 0, 255, 255, 143, 128, 0, 4, 255, 255, 157, 144, 1, 8, 255, 255, 157, 144, 1,
        12, 255, 255, 157, 144, 1, 16, 255, 255, 129, 112, 0, 20, 255, 255, 143, 128, 1, 25, 76,
        77, 84, 0, 80, 83, 84, 0, 80, 87, 84, 0, 80, 80, 84, 0, 80, 68, 84, 0, 65, 75, 83, 84, 0,
        65, 75, 68, 84, 0, 10, 65, 75, 83, 84, 57, 65, 75, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44,
        77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_MEXICO_CITY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        27, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 165, 182, 232, 112, 255, 255, 255, 255,
        175, 242, 110, 224, 255, 255, 255, 255, 182, 102, 86, 96, 255, 255, 255, 255, 183, 67, 210,
        96, 255, 255, 255, 255, 184, 12, 54, 96, 255, 255, 255, 255, 184, 253, 134, 240, 255, 255,
        255, 255, 197, 222, 176, 96, 255, 255, 255, 255, 198, 151, 52, 80, 255, 255, 255, 255, 201,
        85, 241, 224, 255, 255, 255, 255, 201, 234, 221, 80, 255, 255, 255, 255, 207, 2, 198, 224,
        255, 255, 255, 255, 207, 183, 86, 80, 255, 255, 255, 255, 218, 153, 21, 224, 255, 255, 255,
        255, 219, 118, 131, 208, 0, 0, 0, 0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8, 112, 0, 0, 0,
        0, 51, 71, 88, 0, 0, 0, 0, 0, 52, 82, 234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0, 0, 0, 0, 54,
        50, 204, 112, 0, 0, 0, 0, 55, 7, 28, 0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0, 0, 56, 230,
        254, 0, 0, 0, 0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 245, 4, 128, 0, 0, 0, 0, 59, 182,
        194, 240, 0, 0, 0, 0, 60, 175, 252, 128, 1, 2, 1, 2, 1, 2, 3, 2, 3, 2, 4, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 255, 255, 163, 12, 0, 0, 255, 255, 157, 144, 0, 4, 255, 255,
        171, 160, 0, 8, 255, 255, 185, 176, 1, 12, 255, 255, 185, 176, 1, 16, 76, 77, 84, 0, 77,
        83, 84, 0, 67, 83, 84, 0, 67, 68, 84, 0, 67, 87, 84, 0, 10, 67, 83, 84, 54, 67, 68, 84, 44,
        77, 52, 46, 49, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const AMERICA_MIQUELON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        43, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 145, 182, 56, 168, 0, 0, 0, 0, 19, 110,
        99, 192, 0, 0, 0, 0, 32, 117, 228, 208, 0, 0, 0, 0, 33, 129, 119, 64, 0, 0, 0, 0, 34, 85,
        198, 208, 0, 0, 0, 0, 35, 106, 147, 192, 0, 0, 0, 0, 36, 53, 168, 208, 0, 0, 0, 0, 37, 74,
        117, 192, 0, 0, 0, 0, 38, 21, 138, 208, 0, 0, 0, 0, 39, 42, 87, 192, 0, 0, 0, 0, 39, 254,
        167, 80, 0, 0, 0, 0, 41, 10, 57, 192, 0, 0, 0, 0, 41, 222, 137, 80, 0, 0, 0, 0, 42, 234,
        27, 192, 0, 0, 0, 0, 43, 190, 107, 80, 0, 0, 0, 0, 44, 211, 56, 64, 0, 0, 0, 0, 45, 158,
        77, 80, 0, 0, 0, 0, 46, 179, 26, 64, 0, 0, 0, 0, 47, 126, 47, 80, 0, 0, 0, 0, 48, 146, 252,
        64, 0, 0, 0, 0, 49, 103, 75, 208, 0, 0, 0, 0, 50, 114, 222, 64, 0, 0, 0, 0, 51, 71, 45,
        208, 0, 0, 0, 0, 52, 82, 192, 64, 0, 0, 0, 0, 53, 39, 15, 208, 0, 0, 0, 0, 54, 50, 162, 64,
        0, 0, 0, 0, 55, 6, 241, 208, 0, 0, 0, 0, 56, 27, 190, 192, 0, 0, 0, 0, 56, 230, 211, 208,
        0, 0, 0, 0, 57, 251, 160, 192, 0, 0, 0, 0, 58, 198, 181, 208, 0, 0, 0, 0, 59, 219, 130,
        192, 0, 0, 0, 0, 60, 175, 210, 80, 0, 0, 0, 0, 61, 187, 100, 192, 0, 0, 0, 0, 62, 143, 180,
        80, 0, 0, 0, 0, 63, 155, 70, 192, 0, 0, 0, 0, 64, 111, 150, 80, 0, 0, 0, 0, 65, 132, 99,
        64, 0, 0, 0, 0, 66, 79, 120, 80, 0, 0, 0, 0, 67, 100, 69, 64, 0, 0, 0, 0, 68, 47, 90, 80,
        0, 0, 0, 0, 69, 68, 39, 64, 0, 0, 0, 0, 69, 243, 140, 208, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 255, 255, 203, 88, 0, 0, 255, 255, 199, 192, 0, 4, 255, 255, 213, 208, 0, 8, 255,
        255, 227, 224, 1, 12, 76, 77, 84, 0, 65, 83, 84, 0, 45, 48, 51, 0, 45, 48, 50, 0, 10, 60,
        45, 48, 51, 62, 51, 60, 45, 48, 50, 62, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49,
        46, 48, 10,
    ];
    pub(crate) const AMERICA_MONCTON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        146, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 94, 30, 237, 188, 255, 255, 255, 255,
        128, 241, 182, 80, 255, 255, 255, 255, 158, 184, 133, 96, 255, 255, 255, 255, 159, 186,
        221, 80, 255, 255, 255, 255, 187, 60, 56, 208, 255, 255, 255, 255, 187, 180, 35, 64, 255,
        255, 255, 255, 189, 28, 26, 208, 255, 255, 255, 255, 189, 148, 5, 64, 255, 255, 255, 255,
        190, 251, 252, 208, 255, 255, 255, 255, 191, 115, 231, 64, 255, 255, 255, 255, 192, 219,
        222, 208, 255, 255, 255, 255, 193, 83, 201, 64, 255, 255, 255, 255, 194, 187, 192, 208,
        255, 255, 255, 255, 195, 51, 171, 64, 255, 255, 255, 255, 196, 155, 162, 208, 255, 255,
        255, 255, 197, 19, 141, 64, 255, 255, 255, 255, 198, 112, 248, 208, 255, 255, 255, 255,
        199, 13, 205, 64, 255, 255, 255, 255, 200, 72, 241, 208, 255, 255, 255, 255, 200, 237, 175,
        64, 255, 255, 255, 255, 202, 22, 94, 208, 255, 255, 255, 255, 202, 214, 203, 192, 255, 255,
        255, 255, 203, 136, 226, 96, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255,
        210, 96, 237, 208, 255, 255, 255, 255, 211, 117, 214, 224, 255, 255, 255, 255, 212, 64,
        207, 208, 255, 255, 255, 255, 213, 85, 184, 224, 255, 255, 255, 255, 214, 32, 177, 208,
        255, 255, 255, 255, 215, 53, 154, 224, 255, 255, 255, 255, 216, 0, 147, 208, 255, 255, 255,
        255, 217, 21, 124, 224, 255, 255, 255, 255, 217, 224, 117, 208, 255, 255, 255, 255, 218,
        254, 153, 96, 255, 255, 255, 255, 219, 192, 87, 208, 255, 255, 255, 255, 220, 222, 123, 96,
        255, 255, 255, 255, 221, 169, 116, 80, 255, 255, 255, 255, 222, 190, 93, 96, 255, 255, 255,
        255, 223, 137, 86, 80, 255, 255, 255, 255, 224, 158, 63, 96, 255, 255, 255, 255, 225, 105,
        56, 80, 255, 255, 255, 255, 226, 126, 33, 96, 255, 255, 255, 255, 227, 73, 26, 80, 255,
        255, 255, 255, 228, 94, 3, 96, 255, 255, 255, 255, 229, 40, 252, 80, 255, 255, 255, 255,
        230, 71, 31, 224, 255, 255, 255, 255, 231, 18, 24, 208, 255, 255, 255, 255, 232, 39, 1,
        224, 255, 255, 255, 255, 233, 22, 228, 208, 255, 255, 255, 255, 234, 6, 227, 224, 255, 255,
        255, 255, 234, 246, 198, 208, 255, 255, 255, 255, 235, 230, 197, 224, 255, 255, 255, 255,
        236, 214, 168, 208, 255, 255, 255, 255, 237, 198, 167, 224, 255, 255, 255, 255, 238, 191,
        197, 80, 255, 255, 255, 255, 239, 175, 196, 96, 255, 255, 255, 255, 240, 159, 167, 80, 255,
        255, 255, 255, 241, 143, 166, 96, 255, 255, 255, 255, 242, 127, 137, 80, 255, 255, 255,
        255, 243, 111, 136, 96, 255, 255, 255, 255, 244, 95, 107, 80, 255, 255, 255, 255, 245, 79,
        106, 96, 255, 255, 255, 255, 246, 63, 77, 80, 255, 255, 255, 255, 247, 47, 76, 96, 255,
        255, 255, 255, 248, 40, 105, 208, 255, 255, 255, 255, 249, 15, 46, 96, 255, 255, 255, 255,
        250, 8, 75, 208, 255, 255, 255, 255, 250, 248, 74, 224, 255, 255, 255, 255, 251, 232, 45,
        208, 255, 255, 255, 255, 252, 216, 44, 224, 255, 255, 255, 255, 253, 200, 15, 208, 255,
        255, 255, 255, 254, 184, 14, 224, 255, 255, 255, 255, 255, 167, 241, 208, 0, 0, 0, 0, 0,
        151, 240, 224, 0, 0, 0, 0, 1, 135, 211, 208, 0, 0, 0, 0, 2, 119, 210, 224, 0, 0, 0, 0, 3,
        112, 240, 80, 0, 0, 0, 0, 4, 96, 239, 96, 0, 0, 0, 0, 5, 80, 210, 80, 0, 0, 0, 0, 8, 32,
        179, 96, 0, 0, 0, 0, 9, 16, 150, 80, 0, 0, 0, 0, 10, 0, 149, 96, 0, 0, 0, 0, 10, 240, 120,
        80, 0, 0, 0, 0, 11, 224, 119, 96, 0, 0, 0, 0, 12, 217, 148, 208, 0, 0, 0, 0, 13, 192, 89,
        96, 0, 0, 0, 0, 14, 185, 118, 208, 0, 0, 0, 0, 15, 169, 117, 224, 0, 0, 0, 0, 16, 153, 88,
        208, 0, 0, 0, 0, 17, 137, 87, 224, 0, 0, 0, 0, 18, 121, 58, 208, 0, 0, 0, 0, 19, 105, 57,
        224, 0, 0, 0, 0, 20, 89, 28, 208, 0, 0, 0, 0, 21, 73, 27, 224, 0, 0, 0, 0, 22, 56, 254,
        208, 0, 0, 0, 0, 23, 40, 253, 224, 0, 0, 0, 0, 24, 34, 27, 80, 0, 0, 0, 0, 25, 8, 223, 224,
        0, 0, 0, 0, 26, 1, 253, 80, 0, 0, 0, 0, 26, 241, 252, 96, 0, 0, 0, 0, 27, 225, 223, 80, 0,
        0, 0, 0, 28, 209, 222, 96, 0, 0, 0, 0, 29, 193, 193, 80, 0, 0, 0, 0, 30, 177, 192, 96, 0,
        0, 0, 0, 31, 161, 163, 80, 0, 0, 0, 0, 32, 117, 242, 224, 0, 0, 0, 0, 33, 129, 133, 80, 0,
        0, 0, 0, 34, 85, 212, 224, 0, 0, 0, 0, 35, 106, 161, 208, 0, 0, 0, 0, 36, 53, 182, 224, 0,
        0, 0, 0, 37, 74, 131, 208, 0, 0, 0, 0, 38, 21, 152, 224, 0, 0, 0, 0, 39, 42, 101, 208, 0,
        0, 0, 0, 39, 254, 181, 96, 0, 0, 0, 0, 41, 10, 71, 208, 0, 0, 0, 0, 41, 222, 151, 96, 0, 0,
        0, 0, 42, 234, 41, 208, 0, 0, 0, 0, 43, 190, 93, 124, 0, 0, 0, 0, 44, 211, 42, 108, 0, 0,
        0, 0, 45, 158, 63, 124, 0, 0, 0, 0, 46, 179, 12, 108, 0, 0, 0, 0, 47, 126, 33, 124, 0, 0,
        0, 0, 48, 146, 238, 108, 0, 0, 0, 0, 49, 103, 61, 252, 0, 0, 0, 0, 50, 114, 208, 108, 0, 0,
        0, 0, 51, 71, 31, 252, 0, 0, 0, 0, 52, 82, 178, 108, 0, 0, 0, 0, 53, 39, 1, 252, 0, 0, 0,
        0, 54, 50, 148, 108, 0, 0, 0, 0, 55, 6, 227, 252, 0, 0, 0, 0, 56, 27, 176, 236, 0, 0, 0, 0,
        56, 230, 197, 252, 0, 0, 0, 0, 57, 251, 146, 236, 0, 0, 0, 0, 58, 198, 167, 252, 0, 0, 0,
        0, 59, 219, 116, 236, 0, 0, 0, 0, 60, 175, 196, 124, 0, 0, 0, 0, 61, 187, 86, 236, 0, 0, 0,
        0, 62, 143, 166, 124, 0, 0, 0, 0, 63, 155, 56, 236, 0, 0, 0, 0, 64, 111, 136, 124, 0, 0, 0,
        0, 65, 132, 85, 108, 0, 0, 0, 0, 66, 79, 106, 124, 0, 0, 0, 0, 67, 100, 55, 108, 0, 0, 0,
        0, 68, 47, 76, 124, 0, 0, 0, 0, 69, 68, 25, 108, 0, 0, 0, 0, 69, 243, 154, 224, 1, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 5, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 255, 255, 195, 68, 0, 0,
        255, 255, 185, 176, 0, 4, 255, 255, 213, 208, 1, 8, 255, 255, 199, 192, 0, 12, 255, 255,
        213, 208, 1, 16, 255, 255, 213, 208, 1, 20, 76, 77, 84, 0, 69, 83, 84, 0, 65, 68, 84, 0,
        65, 83, 84, 0, 65, 87, 84, 0, 65, 80, 84, 0, 10, 65, 83, 84, 52, 65, 68, 84, 44, 77, 51,
        46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_MONTERREY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        16, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 165, 182, 218, 96, 0, 0, 0, 0, 34, 85,
        241, 0, 0, 0, 0, 0, 35, 106, 189, 240, 0, 0, 0, 0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8,
        112, 0, 0, 0, 0, 51, 71, 88, 0, 0, 0, 0, 0, 52, 82, 234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0,
        0, 0, 0, 54, 50, 204, 112, 0, 0, 0, 0, 55, 7, 28, 0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0,
        0, 56, 230, 254, 0, 0, 0, 0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 245, 4, 128, 0, 0, 0, 0,
        59, 182, 194, 240, 0, 0, 0, 0, 60, 175, 252, 128, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 255, 255, 161, 244, 0, 0, 255, 255, 171, 160, 0, 4, 255, 255, 185, 176, 1, 8, 76, 77,
        84, 0, 67, 83, 84, 0, 67, 68, 84, 0, 10, 67, 83, 84, 54, 67, 68, 84, 44, 77, 52, 46, 49,
        46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const AMERICA_MONTEVIDEO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        86, 0, 0, 0, 9, 0, 0, 0, 38, 255, 255, 255, 255, 140, 52, 229, 51, 255, 255, 255, 255, 162,
        146, 135, 179, 255, 255, 255, 255, 168, 255, 219, 64, 255, 255, 255, 255, 169, 241, 15,
        176, 255, 255, 255, 255, 170, 226, 89, 56, 255, 255, 255, 255, 171, 210, 67, 48, 255, 255,
        255, 255, 172, 195, 140, 184, 255, 255, 255, 255, 173, 179, 118, 176, 255, 255, 255, 255,
        187, 244, 181, 184, 255, 255, 255, 255, 188, 191, 181, 176, 255, 255, 255, 255, 189, 212,
        151, 184, 255, 255, 255, 255, 190, 159, 151, 176, 255, 255, 255, 255, 191, 180, 121, 184,
        255, 255, 255, 255, 192, 127, 121, 176, 255, 255, 255, 255, 193, 148, 91, 184, 255, 255,
        255, 255, 194, 95, 91, 176, 255, 255, 255, 255, 195, 125, 120, 56, 255, 255, 255, 255, 196,
        63, 61, 176, 255, 255, 255, 255, 197, 93, 90, 56, 255, 255, 255, 255, 198, 31, 31, 176,
        255, 255, 255, 255, 199, 24, 82, 56, 255, 255, 255, 255, 200, 8, 60, 48, 255, 255, 255,
        255, 201, 29, 30, 56, 255, 255, 255, 255, 201, 232, 30, 48, 255, 255, 255, 255, 202, 139,
        159, 56, 255, 255, 255, 255, 205, 30, 198, 48, 255, 255, 255, 255, 205, 149, 102, 40, 255,
        255, 255, 255, 236, 11, 133, 176, 255, 255, 255, 255, 236, 242, 53, 40, 255, 255, 255, 255,
        237, 69, 74, 176, 255, 255, 255, 255, 237, 133, 214, 32, 255, 255, 255, 255, 247, 19, 114,
        176, 255, 255, 255, 255, 247, 250, 27, 32, 255, 255, 255, 255, 252, 254, 62, 48, 255, 255,
        255, 255, 253, 246, 17, 40, 0, 0, 0, 0, 0, 150, 117, 48, 0, 0, 0, 0, 0, 216, 82, 32, 0, 0,
        0, 0, 4, 87, 138, 176, 0, 0, 0, 0, 4, 198, 58, 160, 0, 0, 0, 0, 7, 150, 27, 176, 0, 0, 0,
        0, 7, 223, 218, 152, 0, 0, 0, 0, 8, 198, 159, 40, 0, 0, 0, 0, 9, 90, 78, 48, 0, 0, 0, 0, 9,
        219, 115, 32, 0, 0, 0, 0, 13, 26, 18, 48, 0, 0, 0, 0, 13, 127, 135, 160, 0, 0, 0, 0, 14,
        231, 127, 48, 0, 0, 0, 0, 15, 95, 105, 160, 0, 0, 0, 0, 16, 217, 214, 48, 0, 0, 0, 0, 17,
        63, 75, 160, 0, 0, 0, 0, 17, 137, 45, 176, 0, 0, 0, 0, 19, 49, 162, 160, 0, 0, 0, 0, 33,
        195, 84, 48, 0, 0, 0, 0, 34, 39, 120, 32, 0, 0, 0, 0, 35, 161, 228, 176, 0, 0, 0, 0, 36,
        16, 148, 160, 0, 0, 0, 0, 37, 74, 103, 176, 0, 0, 0, 0, 37, 231, 60, 32, 0, 0, 0, 0, 39,
        33, 15, 48, 0, 0, 0, 0, 39, 208, 88, 160, 0, 0, 0, 0, 41, 10, 43, 176, 0, 0, 0, 0, 41, 176,
        58, 160, 0, 0, 0, 0, 42, 224, 211, 48, 0, 0, 0, 0, 43, 144, 28, 160, 0, 0, 0, 0, 65, 76,
        246, 48, 0, 0, 0, 0, 66, 70, 47, 192, 0, 0, 0, 0, 67, 72, 163, 208, 0, 0, 0, 0, 68, 19,
        156, 192, 0, 0, 0, 0, 69, 31, 75, 80, 0, 0, 0, 0, 69, 243, 126, 192, 0, 0, 0, 0, 71, 8,
        103, 208, 0, 0, 0, 0, 71, 211, 96, 192, 0, 0, 0, 0, 72, 232, 73, 208, 0, 0, 0, 0, 73, 179,
        66, 192, 0, 0, 0, 0, 74, 200, 43, 208, 0, 0, 0, 0, 75, 156, 95, 64, 0, 0, 0, 0, 76, 168,
        13, 208, 0, 0, 0, 0, 77, 124, 65, 64, 0, 0, 0, 0, 78, 135, 239, 208, 0, 0, 0, 0, 79, 92,
        35, 64, 0, 0, 0, 0, 80, 113, 12, 80, 0, 0, 0, 0, 81, 60, 5, 64, 0, 0, 0, 0, 82, 80, 238,
        80, 0, 0, 0, 0, 83, 27, 231, 64, 0, 0, 0, 0, 84, 48, 208, 80, 0, 0, 0, 0, 84, 251, 201, 64,
        1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 6, 5, 6, 5, 7,
        5, 7, 5, 6, 5, 7, 5, 7, 5, 8, 6, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5,
        7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 255, 255,
        203, 77, 0, 0, 255, 255, 203, 77, 0, 4, 255, 255, 199, 192, 0, 8, 255, 255, 206, 200, 0,
        12, 255, 255, 213, 208, 1, 18, 255, 255, 213, 208, 0, 18, 255, 255, 220, 216, 1, 22, 255,
        255, 227, 224, 1, 28, 255, 255, 234, 232, 1, 32, 76, 77, 84, 0, 77, 77, 84, 0, 45, 48, 52,
        0, 45, 48, 51, 51, 48, 0, 45, 48, 51, 0, 45, 48, 50, 51, 48, 0, 45, 48, 50, 0, 45, 48, 49,
        51, 48, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_MONTREAL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        172, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 94, 61, 72, 120, 255, 255, 255, 255, 156,
        189, 1, 240, 255, 255, 255, 255, 156, 228, 100, 192, 255, 255, 255, 255, 158, 184, 147,
        112, 255, 255, 255, 255, 159, 186, 235, 96, 255, 255, 255, 255, 160, 135, 88, 248, 255,
        255, 255, 255, 161, 153, 130, 232, 255, 255, 255, 255, 162, 148, 13, 248, 255, 255, 255,
        255, 163, 95, 6, 232, 255, 255, 255, 255, 164, 115, 232, 240, 255, 255, 255, 255, 165, 62,
        232, 232, 255, 255, 255, 255, 166, 83, 202, 240, 255, 255, 255, 255, 167, 30, 202, 232,
        255, 255, 255, 255, 170, 45, 236, 240, 255, 255, 255, 255, 170, 222, 142, 232, 255, 255,
        255, 255, 171, 252, 171, 112, 255, 255, 255, 255, 172, 190, 112, 232, 255, 255, 255, 255,
        173, 220, 141, 112, 255, 255, 255, 255, 174, 158, 82, 232, 255, 255, 255, 255, 175, 188,
        83, 80, 255, 255, 255, 255, 176, 126, 17, 192, 255, 255, 255, 255, 177, 156, 53, 80, 255,
        255, 255, 255, 178, 103, 46, 64, 255, 255, 255, 255, 179, 124, 23, 80, 255, 255, 255, 255,
        180, 71, 16, 64, 255, 255, 255, 255, 181, 91, 249, 80, 255, 255, 255, 255, 182, 38, 242,
        64, 255, 255, 255, 255, 183, 59, 219, 80, 255, 255, 255, 255, 184, 6, 212, 64, 255, 255,
        255, 255, 185, 36, 247, 208, 255, 255, 255, 255, 185, 230, 182, 64, 255, 255, 255, 255,
        187, 4, 217, 208, 255, 255, 255, 255, 187, 207, 210, 192, 255, 255, 255, 255, 188, 228,
        187, 208, 255, 255, 255, 255, 189, 175, 180, 192, 255, 255, 255, 255, 190, 196, 157, 208,
        255, 255, 255, 255, 191, 143, 150, 192, 255, 255, 255, 255, 192, 164, 127, 208, 255, 255,
        255, 255, 193, 111, 120, 192, 255, 255, 255, 255, 194, 132, 97, 208, 255, 255, 255, 255,
        195, 79, 90, 192, 255, 255, 255, 255, 196, 100, 67, 208, 255, 255, 255, 255, 197, 47, 60,
        192, 255, 255, 255, 255, 198, 77, 96, 80, 255, 255, 255, 255, 199, 15, 30, 192, 255, 255,
        255, 255, 200, 45, 66, 80, 255, 255, 255, 255, 203, 136, 240, 112, 255, 255, 255, 255, 210,
        35, 244, 112, 255, 255, 255, 255, 210, 96, 251, 224, 255, 255, 255, 255, 211, 117, 228,
        240, 255, 255, 255, 255, 212, 64, 221, 224, 255, 255, 255, 255, 213, 85, 198, 240, 255,
        255, 255, 255, 214, 32, 191, 224, 255, 255, 255, 255, 215, 53, 168, 240, 255, 255, 255,
        255, 216, 0, 161, 224, 255, 255, 255, 255, 217, 21, 138, 240, 255, 255, 255, 255, 218, 14,
        168, 96, 255, 255, 255, 255, 218, 254, 167, 112, 255, 255, 255, 255, 219, 238, 138, 96,
        255, 255, 255, 255, 220, 222, 137, 112, 255, 255, 255, 255, 221, 169, 130, 96, 255, 255,
        255, 255, 222, 190, 107, 112, 255, 255, 255, 255, 223, 137, 100, 96, 255, 255, 255, 255,
        224, 158, 77, 112, 255, 255, 255, 255, 225, 105, 70, 96, 255, 255, 255, 255, 226, 126, 47,
        112, 255, 255, 255, 255, 227, 73, 40, 96, 255, 255, 255, 255, 228, 94, 17, 112, 255, 255,
        255, 255, 229, 41, 10, 96, 255, 255, 255, 255, 230, 71, 45, 240, 255, 255, 255, 255, 231,
        18, 38, 224, 255, 255, 255, 255, 232, 39, 15, 240, 255, 255, 255, 255, 233, 22, 242, 224,
        255, 255, 255, 255, 234, 6, 241, 240, 255, 255, 255, 255, 234, 246, 212, 224, 255, 255,
        255, 255, 235, 230, 211, 240, 255, 255, 255, 255, 236, 214, 182, 224, 255, 255, 255, 255,
        237, 198, 181, 240, 255, 255, 255, 255, 238, 191, 211, 96, 255, 255, 255, 255, 239, 175,
        210, 112, 255, 255, 255, 255, 240, 159, 181, 96, 255, 255, 255, 255, 241, 143, 180, 112,
        255, 255, 255, 255, 242, 127, 151, 96, 255, 255, 255, 255, 243, 111, 150, 112, 255, 255,
        255, 255, 244, 95, 121, 96, 255, 255, 255, 255, 245, 79, 120, 112, 255, 255, 255, 255, 246,
        63, 91, 96, 255, 255, 255, 255, 247, 47, 90, 112, 255, 255, 255, 255, 248, 40, 119, 224,
        255, 255, 255, 255, 249, 15, 60, 112, 255, 255, 255, 255, 250, 8, 89, 224, 255, 255, 255,
        255, 250, 248, 88, 240, 255, 255, 255, 255, 251, 232, 59, 224, 255, 255, 255, 255, 252,
        216, 58, 240, 255, 255, 255, 255, 253, 200, 29, 224, 255, 255, 255, 255, 254, 184, 28, 240,
        255, 255, 255, 255, 255, 167, 255, 224, 0, 0, 0, 0, 0, 151, 254, 240, 0, 0, 0, 0, 1, 135,
        225, 224, 0, 0, 0, 0, 2, 119, 224, 240, 0, 0, 0, 0, 3, 112, 254, 96, 0, 0, 0, 0, 4, 96,
        253, 112, 0, 0, 0, 0, 5, 80, 224, 96, 0, 0, 0, 0, 6, 64, 223, 112, 0, 0, 0, 0, 7, 48, 194,
        96, 0, 0, 0, 0, 8, 32, 193, 112, 0, 0, 0, 0, 9, 16, 164, 96, 0, 0, 0, 0, 10, 0, 163, 112,
        0, 0, 0, 0, 10, 240, 134, 96, 0, 0, 0, 0, 11, 224, 133, 112, 0, 0, 0, 0, 12, 217, 162, 224,
        0, 0, 0, 0, 13, 192, 103, 112, 0, 0, 0, 0, 14, 185, 132, 224, 0, 0, 0, 0, 15, 169, 131,
        240, 0, 0, 0, 0, 16, 153, 102, 224, 0, 0, 0, 0, 17, 137, 101, 240, 0, 0, 0, 0, 18, 121, 72,
        224, 0, 0, 0, 0, 19, 105, 71, 240, 0, 0, 0, 0, 20, 89, 42, 224, 0, 0, 0, 0, 21, 73, 41,
        240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0, 0, 0, 23, 41, 11, 240, 0, 0, 0, 0, 24, 34, 41, 96,
        0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0, 26, 2, 11, 96, 0, 0, 0, 0, 26, 242, 10, 112, 0, 0,
        0, 0, 27, 225, 237, 96, 0, 0, 0, 0, 28, 209, 236, 112, 0, 0, 0, 0, 29, 193, 207, 96, 0, 0,
        0, 0, 30, 177, 206, 112, 0, 0, 0, 0, 31, 161, 177, 96, 0, 0, 0, 0, 32, 118, 0, 240, 0, 0,
        0, 0, 33, 129, 147, 96, 0, 0, 0, 0, 34, 85, 226, 240, 0, 0, 0, 0, 35, 106, 175, 224, 0, 0,
        0, 0, 36, 53, 196, 240, 0, 0, 0, 0, 37, 74, 145, 224, 0, 0, 0, 0, 38, 21, 166, 240, 0, 0,
        0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39, 254, 195, 112, 0, 0, 0, 0, 41, 10, 85, 224, 0, 0,
        0, 0, 41, 222, 165, 112, 0, 0, 0, 0, 42, 234, 55, 224, 0, 0, 0, 0, 43, 190, 135, 112, 0, 0,
        0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45, 158, 105, 112, 0, 0, 0, 0, 46, 179, 54, 96, 0, 0, 0,
        0, 47, 126, 75, 112, 0, 0, 0, 0, 48, 147, 24, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0,
        0, 50, 114, 250, 96, 0, 0, 0, 0, 51, 71, 73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0,
        53, 39, 43, 240, 0, 0, 0, 0, 54, 50, 190, 96, 0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56,
        27, 218, 224, 0, 0, 0, 0, 56, 230, 239, 240, 0, 0, 0, 0, 57, 251, 188, 224, 0, 0, 0, 0, 58,
        198, 209, 240, 0, 0, 0, 0, 59, 219, 158, 224, 0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0,
        61, 187, 128, 224, 0, 0, 0, 0, 62, 143, 208, 112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0,
        64, 111, 178, 112, 0, 0, 0, 0, 65, 132, 127, 96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0,
        67, 100, 97, 96, 0, 0, 0, 0, 68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69,
        243, 168, 240, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 4, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255,
        187, 8, 0, 0, 255, 255, 199, 192, 1, 4, 255, 255, 185, 176, 0, 8, 255, 255, 199, 192, 1,
        12, 255, 255, 199, 192, 1, 16, 76, 77, 84, 0, 69, 68, 84, 0, 69, 83, 84, 0, 69, 87, 84, 0,
        69, 80, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49,
        46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_MONTSERRAT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 244, 53, 16, 1, 255, 255, 197, 172, 0,
        0, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_NASSAU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        93, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 147, 55, 66, 138, 255, 255, 255, 255, 203,
        244, 239, 80, 255, 255, 255, 255, 208, 250, 71, 192, 255, 255, 255, 255, 209, 35, 52, 80,
        255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 120, 154, 192, 255, 255,
        255, 255, 245, 79, 120, 112, 255, 255, 255, 255, 246, 63, 91, 96, 255, 255, 255, 255, 247,
        47, 90, 112, 255, 255, 255, 255, 248, 40, 119, 224, 255, 255, 255, 255, 249, 15, 60, 112,
        255, 255, 255, 255, 250, 8, 89, 224, 255, 255, 255, 255, 250, 248, 88, 240, 255, 255, 255,
        255, 251, 232, 59, 224, 255, 255, 255, 255, 252, 216, 58, 240, 255, 255, 255, 255, 253,
        200, 29, 224, 255, 255, 255, 255, 254, 184, 28, 240, 255, 255, 255, 255, 255, 167, 255,
        224, 0, 0, 0, 0, 0, 151, 254, 240, 0, 0, 0, 0, 1, 135, 225, 224, 0, 0, 0, 0, 2, 119, 224,
        240, 0, 0, 0, 0, 3, 112, 254, 96, 0, 0, 0, 0, 4, 96, 253, 112, 0, 0, 0, 0, 5, 80, 224, 96,
        0, 0, 0, 0, 6, 64, 223, 112, 0, 0, 0, 0, 7, 48, 194, 96, 0, 0, 0, 0, 8, 32, 193, 112, 0, 0,
        0, 0, 9, 16, 164, 96, 0, 0, 0, 0, 10, 0, 163, 112, 0, 0, 0, 0, 10, 240, 134, 96, 0, 0, 0,
        0, 11, 224, 133, 112, 0, 0, 0, 0, 12, 217, 162, 224, 0, 0, 0, 0, 13, 192, 103, 112, 0, 0,
        0, 0, 14, 185, 132, 224, 0, 0, 0, 0, 15, 169, 131, 240, 0, 0, 0, 0, 16, 153, 102, 224, 0,
        0, 0, 0, 17, 137, 101, 240, 0, 0, 0, 0, 18, 121, 72, 224, 0, 0, 0, 0, 19, 105, 71, 240, 0,
        0, 0, 0, 20, 89, 42, 224, 0, 0, 0, 0, 21, 73, 41, 240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0,
        0, 0, 23, 41, 11, 240, 0, 0, 0, 0, 24, 34, 41, 96, 0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0,
        26, 2, 11, 96, 0, 0, 0, 0, 26, 242, 10, 112, 0, 0, 0, 0, 27, 225, 237, 96, 0, 0, 0, 0, 28,
        209, 236, 112, 0, 0, 0, 0, 29, 193, 207, 96, 0, 0, 0, 0, 30, 177, 206, 112, 0, 0, 0, 0, 31,
        161, 177, 96, 0, 0, 0, 0, 32, 118, 0, 240, 0, 0, 0, 0, 33, 129, 147, 96, 0, 0, 0, 0, 34,
        85, 226, 240, 0, 0, 0, 0, 35, 106, 175, 224, 0, 0, 0, 0, 36, 53, 196, 240, 0, 0, 0, 0, 37,
        74, 145, 224, 0, 0, 0, 0, 38, 21, 166, 240, 0, 0, 0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39,
        254, 195, 112, 0, 0, 0, 0, 41, 10, 85, 224, 0, 0, 0, 0, 41, 222, 165, 112, 0, 0, 0, 0, 42,
        234, 55, 224, 0, 0, 0, 0, 43, 190, 135, 112, 0, 0, 0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45,
        158, 105, 112, 0, 0, 0, 0, 46, 179, 54, 96, 0, 0, 0, 0, 47, 126, 75, 112, 0, 0, 0, 0, 48,
        147, 24, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0, 0, 0, 0, 51,
        71, 73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0, 0, 0, 54, 50,
        190, 96, 0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56, 27, 218, 224, 0, 0, 0, 0, 56, 230,
        239, 240, 0, 0, 0, 0, 57, 251, 188, 224, 0, 0, 0, 0, 58, 198, 209, 240, 0, 0, 0, 0, 59,
        219, 158, 224, 0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0, 61, 187, 128, 224, 0, 0, 0, 0,
        62, 143, 208, 112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112, 0, 0, 0, 0,
        65, 132, 127, 96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0, 0, 0, 0,
        68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 2, 1, 2, 1, 3,
        2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4,
        2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4,
        2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 255,
        255, 183, 118, 0, 0, 255, 255, 199, 192, 1, 4, 255, 255, 185, 176, 0, 8, 255, 255, 199,
        192, 1, 12, 255, 255, 199, 192, 1, 16, 76, 77, 84, 0, 69, 87, 84, 0, 69, 83, 84, 0, 69, 80,
        84, 0, 69, 68, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77,
        49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_NEW_YORK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        175, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 94, 3, 240, 144, 255, 255, 255, 255, 158,
        166, 30, 112, 255, 255, 255, 255, 159, 186, 235, 96, 255, 255, 255, 255, 160, 134, 0, 112,
        255, 255, 255, 255, 161, 154, 205, 96, 255, 255, 255, 255, 162, 101, 226, 112, 255, 255,
        255, 255, 163, 131, 233, 224, 255, 255, 255, 255, 164, 106, 174, 112, 255, 255, 255, 255,
        165, 53, 167, 96, 255, 255, 255, 255, 166, 83, 202, 240, 255, 255, 255, 255, 167, 21, 137,
        96, 255, 255, 255, 255, 168, 51, 172, 240, 255, 255, 255, 255, 168, 254, 165, 224, 255,
        255, 255, 255, 170, 19, 142, 240, 255, 255, 255, 255, 170, 222, 135, 224, 255, 255, 255,
        255, 171, 243, 112, 240, 255, 255, 255, 255, 172, 190, 105, 224, 255, 255, 255, 255, 173,
        211, 82, 240, 255, 255, 255, 255, 174, 158, 75, 224, 255, 255, 255, 255, 175, 179, 52, 240,
        255, 255, 255, 255, 176, 126, 45, 224, 255, 255, 255, 255, 177, 156, 81, 112, 255, 255,
        255, 255, 178, 103, 74, 96, 255, 255, 255, 255, 179, 124, 51, 112, 255, 255, 255, 255, 180,
        71, 44, 96, 255, 255, 255, 255, 181, 92, 21, 112, 255, 255, 255, 255, 182, 39, 14, 96, 255,
        255, 255, 255, 183, 59, 247, 112, 255, 255, 255, 255, 184, 6, 240, 96, 255, 255, 255, 255,
        185, 27, 217, 112, 255, 255, 255, 255, 185, 230, 210, 96, 255, 255, 255, 255, 187, 4, 245,
        240, 255, 255, 255, 255, 187, 198, 180, 96, 255, 255, 255, 255, 188, 228, 215, 240, 255,
        255, 255, 255, 189, 175, 208, 224, 255, 255, 255, 255, 190, 196, 185, 240, 255, 255, 255,
        255, 191, 143, 178, 224, 255, 255, 255, 255, 192, 164, 155, 240, 255, 255, 255, 255, 193,
        111, 148, 224, 255, 255, 255, 255, 194, 132, 125, 240, 255, 255, 255, 255, 195, 79, 118,
        224, 255, 255, 255, 255, 196, 100, 95, 240, 255, 255, 255, 255, 197, 47, 88, 224, 255, 255,
        255, 255, 198, 77, 124, 112, 255, 255, 255, 255, 199, 15, 58, 224, 255, 255, 255, 255, 200,
        45, 94, 112, 255, 255, 255, 255, 200, 248, 87, 96, 255, 255, 255, 255, 202, 13, 64, 112,
        255, 255, 255, 255, 202, 216, 57, 96, 255, 255, 255, 255, 203, 136, 240, 112, 255, 255,
        255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 96, 251, 224, 255, 255, 255, 255,
        211, 117, 228, 240, 255, 255, 255, 255, 212, 64, 221, 224, 255, 255, 255, 255, 213, 85,
        198, 240, 255, 255, 255, 255, 214, 32, 191, 224, 255, 255, 255, 255, 215, 53, 168, 240,
        255, 255, 255, 255, 216, 0, 161, 224, 255, 255, 255, 255, 217, 21, 138, 240, 255, 255, 255,
        255, 217, 224, 131, 224, 255, 255, 255, 255, 218, 254, 167, 112, 255, 255, 255, 255, 219,
        192, 101, 224, 255, 255, 255, 255, 220, 222, 137, 112, 255, 255, 255, 255, 221, 169, 130,
        96, 255, 255, 255, 255, 222, 190, 107, 112, 255, 255, 255, 255, 223, 137, 100, 96, 255,
        255, 255, 255, 224, 158, 77, 112, 255, 255, 255, 255, 225, 105, 70, 96, 255, 255, 255, 255,
        226, 126, 47, 112, 255, 255, 255, 255, 227, 73, 40, 96, 255, 255, 255, 255, 228, 94, 17,
        112, 255, 255, 255, 255, 229, 87, 46, 224, 255, 255, 255, 255, 230, 71, 45, 240, 255, 255,
        255, 255, 231, 55, 16, 224, 255, 255, 255, 255, 232, 39, 15, 240, 255, 255, 255, 255, 233,
        22, 242, 224, 255, 255, 255, 255, 234, 6, 241, 240, 255, 255, 255, 255, 234, 246, 212, 224,
        255, 255, 255, 255, 235, 230, 211, 240, 255, 255, 255, 255, 236, 214, 182, 224, 255, 255,
        255, 255, 237, 198, 181, 240, 255, 255, 255, 255, 238, 191, 211, 96, 255, 255, 255, 255,
        239, 175, 210, 112, 255, 255, 255, 255, 240, 159, 181, 96, 255, 255, 255, 255, 241, 143,
        180, 112, 255, 255, 255, 255, 242, 127, 151, 96, 255, 255, 255, 255, 243, 111, 150, 112,
        255, 255, 255, 255, 244, 95, 121, 96, 255, 255, 255, 255, 245, 79, 120, 112, 255, 255, 255,
        255, 246, 63, 91, 96, 255, 255, 255, 255, 247, 47, 90, 112, 255, 255, 255, 255, 248, 40,
        119, 224, 255, 255, 255, 255, 249, 15, 60, 112, 255, 255, 255, 255, 250, 8, 89, 224, 255,
        255, 255, 255, 250, 248, 88, 240, 255, 255, 255, 255, 251, 232, 59, 224, 255, 255, 255,
        255, 252, 216, 58, 240, 255, 255, 255, 255, 253, 200, 29, 224, 255, 255, 255, 255, 254,
        184, 28, 240, 255, 255, 255, 255, 255, 167, 255, 224, 0, 0, 0, 0, 0, 151, 254, 240, 0, 0,
        0, 0, 1, 135, 225, 224, 0, 0, 0, 0, 2, 119, 224, 240, 0, 0, 0, 0, 3, 112, 254, 96, 0, 0, 0,
        0, 4, 96, 253, 112, 0, 0, 0, 0, 5, 80, 224, 96, 0, 0, 0, 0, 6, 64, 223, 112, 0, 0, 0, 0, 7,
        48, 194, 96, 0, 0, 0, 0, 7, 141, 25, 112, 0, 0, 0, 0, 9, 16, 164, 96, 0, 0, 0, 0, 9, 173,
        148, 240, 0, 0, 0, 0, 10, 240, 134, 96, 0, 0, 0, 0, 11, 224, 133, 112, 0, 0, 0, 0, 12, 217,
        162, 224, 0, 0, 0, 0, 13, 192, 103, 112, 0, 0, 0, 0, 14, 185, 132, 224, 0, 0, 0, 0, 15,
        169, 131, 240, 0, 0, 0, 0, 16, 153, 102, 224, 0, 0, 0, 0, 17, 137, 101, 240, 0, 0, 0, 0,
        18, 121, 72, 224, 0, 0, 0, 0, 19, 105, 71, 240, 0, 0, 0, 0, 20, 89, 42, 224, 0, 0, 0, 0,
        21, 73, 41, 240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0, 0, 0, 23, 41, 11, 240, 0, 0, 0, 0, 24,
        34, 41, 96, 0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0, 26, 2, 11, 96, 0, 0, 0, 0, 26, 242,
        10, 112, 0, 0, 0, 0, 27, 225, 237, 96, 0, 0, 0, 0, 28, 209, 236, 112, 0, 0, 0, 0, 29, 193,
        207, 96, 0, 0, 0, 0, 30, 177, 206, 112, 0, 0, 0, 0, 31, 161, 177, 96, 0, 0, 0, 0, 32, 118,
        0, 240, 0, 0, 0, 0, 33, 129, 147, 96, 0, 0, 0, 0, 34, 85, 226, 240, 0, 0, 0, 0, 35, 106,
        175, 224, 0, 0, 0, 0, 36, 53, 196, 240, 0, 0, 0, 0, 37, 74, 145, 224, 0, 0, 0, 0, 38, 21,
        166, 240, 0, 0, 0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39, 254, 195, 112, 0, 0, 0, 0, 41, 10,
        85, 224, 0, 0, 0, 0, 41, 222, 165, 112, 0, 0, 0, 0, 42, 234, 55, 224, 0, 0, 0, 0, 43, 190,
        135, 112, 0, 0, 0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45, 158, 105, 112, 0, 0, 0, 0, 46, 179,
        54, 96, 0, 0, 0, 0, 47, 126, 75, 112, 0, 0, 0, 0, 48, 147, 24, 96, 0, 0, 0, 0, 49, 103,
        103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0, 0, 0, 0, 51, 71, 73, 240, 0, 0, 0, 0, 52, 82,
        220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0, 0, 0, 54, 50, 190, 96, 0, 0, 0, 0, 55, 7, 13,
        240, 0, 0, 0, 0, 56, 27, 218, 224, 0, 0, 0, 0, 56, 230, 239, 240, 0, 0, 0, 0, 57, 251, 188,
        224, 0, 0, 0, 0, 58, 198, 209, 240, 0, 0, 0, 0, 59, 219, 158, 224, 0, 0, 0, 0, 60, 175,
        238, 112, 0, 0, 0, 0, 61, 187, 128, 224, 0, 0, 0, 0, 62, 143, 208, 112, 0, 0, 0, 0, 63,
        155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112, 0, 0, 0, 0, 65, 132, 127, 96, 0, 0, 0, 0, 66,
        79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0, 0, 0, 0, 68, 47, 118, 112, 0, 0, 0, 0, 69,
        68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255, 186, 158, 0, 0, 255, 255, 199, 192, 1, 4, 255, 255,
        185, 176, 0, 8, 255, 255, 199, 192, 1, 12, 255, 255, 199, 192, 1, 16, 76, 77, 84, 0, 69,
        68, 84, 0, 69, 83, 84, 0, 69, 87, 84, 0, 69, 80, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44,
        77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_NIPIGON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        74, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 114, 238, 129, 64, 255, 255, 255, 255,
        158, 184, 147, 112, 255, 255, 255, 255, 159, 186, 235, 96, 255, 255, 255, 255, 200, 248,
        73, 80, 255, 255, 255, 255, 203, 136, 240, 112, 255, 255, 255, 255, 210, 35, 244, 112, 255,
        255, 255, 255, 210, 96, 251, 224, 0, 0, 0, 0, 8, 32, 193, 112, 0, 0, 0, 0, 9, 16, 164, 96,
        0, 0, 0, 0, 10, 0, 163, 112, 0, 0, 0, 0, 10, 240, 134, 96, 0, 0, 0, 0, 11, 224, 133, 112,
        0, 0, 0, 0, 12, 217, 162, 224, 0, 0, 0, 0, 13, 192, 103, 112, 0, 0, 0, 0, 14, 185, 132,
        224, 0, 0, 0, 0, 15, 169, 131, 240, 0, 0, 0, 0, 16, 153, 102, 224, 0, 0, 0, 0, 17, 137,
        101, 240, 0, 0, 0, 0, 18, 121, 72, 224, 0, 0, 0, 0, 19, 105, 71, 240, 0, 0, 0, 0, 20, 89,
        42, 224, 0, 0, 0, 0, 21, 73, 41, 240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0, 0, 0, 23, 41, 11,
        240, 0, 0, 0, 0, 24, 34, 41, 96, 0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0, 26, 2, 11, 96, 0,
        0, 0, 0, 26, 242, 10, 112, 0, 0, 0, 0, 27, 225, 237, 96, 0, 0, 0, 0, 28, 209, 236, 112, 0,
        0, 0, 0, 29, 193, 207, 96, 0, 0, 0, 0, 30, 177, 206, 112, 0, 0, 0, 0, 31, 161, 177, 96, 0,
        0, 0, 0, 32, 118, 0, 240, 0, 0, 0, 0, 33, 129, 147, 96, 0, 0, 0, 0, 34, 85, 226, 240, 0, 0,
        0, 0, 35, 106, 175, 224, 0, 0, 0, 0, 36, 53, 196, 240, 0, 0, 0, 0, 37, 74, 145, 224, 0, 0,
        0, 0, 38, 21, 166, 240, 0, 0, 0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39, 254, 195, 112, 0, 0,
        0, 0, 41, 10, 85, 224, 0, 0, 0, 0, 41, 222, 165, 112, 0, 0, 0, 0, 42, 234, 55, 224, 0, 0,
        0, 0, 43, 190, 135, 112, 0, 0, 0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45, 158, 105, 112, 0, 0,
        0, 0, 46, 179, 54, 96, 0, 0, 0, 0, 47, 126, 75, 112, 0, 0, 0, 0, 48, 147, 24, 96, 0, 0, 0,
        0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0, 0, 0, 0, 51, 71, 73, 240, 0, 0, 0,
        0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0, 0, 0, 54, 50, 190, 96, 0, 0, 0, 0,
        55, 7, 13, 240, 0, 0, 0, 0, 56, 27, 218, 224, 0, 0, 0, 0, 56, 230, 239, 240, 0, 0, 0, 0,
        57, 251, 188, 224, 0, 0, 0, 0, 58, 198, 209, 240, 0, 0, 0, 0, 59, 219, 158, 224, 0, 0, 0,
        0, 60, 175, 238, 112, 0, 0, 0, 0, 61, 187, 128, 224, 0, 0, 0, 0, 62, 143, 208, 112, 0, 0,
        0, 0, 63, 155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112, 0, 0, 0, 0, 65, 132, 127, 96, 0, 0,
        0, 0, 66, 79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0, 0, 0, 0, 68, 47, 118, 112, 0, 0, 0,
        0, 69, 68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 2, 1, 2, 1, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        255, 255, 173, 64, 0, 0, 255, 255, 199, 192, 1, 4, 255, 255, 185, 176, 0, 8, 255, 255, 199,
        192, 1, 12, 255, 255, 199, 192, 1, 16, 76, 77, 84, 0, 69, 68, 84, 0, 69, 83, 84, 0, 69, 87,
        84, 0, 69, 80, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77,
        49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_NOME: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        84, 0, 0, 0, 10, 0, 0, 0, 38, 255, 255, 255, 255, 63, 194, 253, 209, 255, 255, 255, 255,
        125, 135, 79, 210, 255, 255, 255, 255, 203, 137, 68, 208, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 97, 80, 64, 255, 255, 255, 255, 250, 210, 85, 176, 255, 255,
        255, 255, 254, 184, 113, 80, 255, 255, 255, 255, 255, 168, 84, 64, 0, 0, 0, 0, 0, 152, 83,
        80, 0, 0, 0, 0, 1, 136, 54, 64, 0, 0, 0, 0, 2, 120, 53, 80, 0, 0, 0, 0, 3, 113, 82, 192, 0,
        0, 0, 0, 4, 97, 81, 208, 0, 0, 0, 0, 5, 81, 52, 192, 0, 0, 0, 0, 6, 65, 51, 208, 0, 0, 0,
        0, 7, 49, 22, 192, 0, 0, 0, 0, 7, 141, 109, 208, 0, 0, 0, 0, 9, 16, 248, 192, 0, 0, 0, 0,
        9, 173, 233, 80, 0, 0, 0, 0, 10, 240, 218, 192, 0, 0, 0, 0, 11, 224, 217, 208, 0, 0, 0, 0,
        12, 217, 247, 64, 0, 0, 0, 0, 13, 192, 187, 208, 0, 0, 0, 0, 14, 185, 217, 64, 0, 0, 0, 0,
        15, 169, 216, 80, 0, 0, 0, 0, 16, 153, 187, 64, 0, 0, 0, 0, 17, 137, 186, 80, 0, 0, 0, 0,
        18, 121, 157, 64, 0, 0, 0, 0, 19, 105, 156, 80, 0, 0, 0, 0, 20, 89, 127, 64, 0, 0, 0, 0,
        21, 73, 126, 80, 0, 0, 0, 0, 22, 57, 97, 64, 0, 0, 0, 0, 23, 41, 96, 80, 0, 0, 0, 0, 24,
        34, 125, 192, 0, 0, 0, 0, 25, 9, 66, 80, 0, 0, 0, 0, 26, 2, 95, 192, 0, 0, 0, 0, 26, 43,
        20, 16, 0, 0, 0, 0, 26, 242, 66, 176, 0, 0, 0, 0, 27, 226, 37, 160, 0, 0, 0, 0, 28, 210,
        36, 176, 0, 0, 0, 0, 29, 194, 7, 160, 0, 0, 0, 0, 30, 178, 6, 176, 0, 0, 0, 0, 31, 161,
        233, 160, 0, 0, 0, 0, 32, 118, 57, 48, 0, 0, 0, 0, 33, 129, 203, 160, 0, 0, 0, 0, 34, 86,
        27, 48, 0, 0, 0, 0, 35, 106, 232, 32, 0, 0, 0, 0, 36, 53, 253, 48, 0, 0, 0, 0, 37, 74, 202,
        32, 0, 0, 0, 0, 38, 21, 223, 48, 0, 0, 0, 0, 39, 42, 172, 32, 0, 0, 0, 0, 39, 254, 251,
        176, 0, 0, 0, 0, 41, 10, 142, 32, 0, 0, 0, 0, 41, 222, 221, 176, 0, 0, 0, 0, 42, 234, 112,
        32, 0, 0, 0, 0, 43, 190, 191, 176, 0, 0, 0, 0, 44, 211, 140, 160, 0, 0, 0, 0, 45, 158, 161,
        176, 0, 0, 0, 0, 46, 179, 110, 160, 0, 0, 0, 0, 47, 126, 131, 176, 0, 0, 0, 0, 48, 147, 80,
        160, 0, 0, 0, 0, 49, 103, 160, 48, 0, 0, 0, 0, 50, 115, 50, 160, 0, 0, 0, 0, 51, 71, 130,
        48, 0, 0, 0, 0, 52, 83, 20, 160, 0, 0, 0, 0, 53, 39, 100, 48, 0, 0, 0, 0, 54, 50, 246, 160,
        0, 0, 0, 0, 55, 7, 70, 48, 0, 0, 0, 0, 56, 28, 19, 32, 0, 0, 0, 0, 56, 231, 40, 48, 0, 0,
        0, 0, 57, 251, 245, 32, 0, 0, 0, 0, 58, 199, 10, 48, 0, 0, 0, 0, 59, 219, 215, 32, 0, 0, 0,
        0, 60, 176, 38, 176, 0, 0, 0, 0, 61, 187, 185, 32, 0, 0, 0, 0, 62, 144, 8, 176, 0, 0, 0, 0,
        63, 155, 155, 32, 0, 0, 0, 0, 64, 111, 234, 176, 0, 0, 0, 0, 65, 132, 183, 160, 0, 0, 0, 0,
        66, 79, 204, 176, 0, 0, 0, 0, 67, 100, 153, 160, 0, 0, 0, 0, 68, 47, 174, 176, 0, 0, 0, 0,
        69, 68, 123, 160, 0, 0, 0, 0, 69, 243, 225, 48, 1, 2, 3, 4, 2, 5, 6, 5, 6, 5, 6, 5, 6, 5,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 9, 8, 9, 8, 9, 8, 9, 8,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8,
        9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 0, 0, 182, 110, 0, 0, 255, 255, 100, 238, 0, 0, 255, 255,
        101, 80, 0, 4, 255, 255, 115, 96, 1, 8, 255, 255, 115, 96, 1, 12, 255, 255, 101, 80, 0, 16,
        255, 255, 115, 96, 1, 20, 255, 255, 129, 112, 0, 24, 255, 255, 143, 128, 1, 28, 255, 255,
        129, 112, 0, 33, 76, 77, 84, 0, 78, 83, 84, 0, 78, 87, 84, 0, 78, 80, 84, 0, 66, 83, 84, 0,
        66, 68, 84, 0, 89, 83, 84, 0, 65, 75, 68, 84, 0, 65, 75, 83, 84, 0, 10, 65, 75, 83, 84, 57,
        65, 75, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_NORONHA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        39, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 101, 100, 255, 255, 255, 255,
        184, 15, 59, 208, 255, 255, 255, 255, 184, 253, 50, 144, 255, 255, 255, 255, 185, 241, 38,
        32, 255, 255, 255, 255, 186, 222, 102, 16, 255, 255, 255, 255, 218, 56, 160, 32, 255, 255,
        255, 255, 218, 235, 236, 32, 255, 255, 255, 255, 220, 25, 211, 160, 255, 255, 255, 255,
        220, 185, 75, 16, 255, 255, 255, 255, 221, 251, 7, 32, 255, 255, 255, 255, 222, 155, 208,
        16, 255, 255, 255, 255, 223, 221, 140, 32, 255, 255, 255, 255, 224, 84, 37, 16, 255, 255,
        255, 255, 244, 151, 241, 160, 255, 255, 255, 255, 245, 5, 80, 16, 255, 255, 255, 255, 246,
        192, 86, 32, 255, 255, 255, 255, 247, 14, 16, 144, 255, 255, 255, 255, 248, 81, 30, 32,
        255, 255, 255, 255, 248, 199, 183, 16, 255, 255, 255, 255, 250, 10, 196, 160, 255, 255,
        255, 255, 250, 168, 234, 144, 255, 255, 255, 255, 251, 235, 248, 32, 255, 255, 255, 255,
        252, 139, 111, 144, 0, 0, 0, 0, 29, 201, 128, 32, 0, 0, 0, 0, 30, 120, 201, 144, 0, 0, 0,
        0, 31, 160, 39, 160, 0, 0, 0, 0, 32, 51, 193, 144, 0, 0, 0, 0, 33, 129, 91, 32, 0, 0, 0, 0,
        34, 11, 186, 144, 0, 0, 0, 0, 35, 88, 2, 160, 0, 0, 0, 0, 35, 226, 98, 16, 0, 0, 0, 0, 37,
        55, 228, 160, 0, 0, 0, 0, 37, 212, 185, 16, 0, 0, 0, 0, 55, 246, 184, 160, 0, 0, 0, 0, 56,
        184, 119, 16, 0, 0, 0, 0, 57, 223, 213, 32, 0, 0, 0, 0, 57, 233, 1, 144, 0, 0, 0, 0, 59,
        200, 241, 160, 0, 0, 0, 0, 60, 111, 0, 144, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 225, 156, 0,
        0, 255, 255, 241, 240, 1, 4, 255, 255, 227, 224, 0, 8, 76, 77, 84, 0, 45, 48, 49, 0, 45,
        48, 50, 0, 10, 60, 45, 48, 50, 62, 50, 10,
    ];
    pub(crate) const AMERICA_OJINAGA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        35, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 165, 182, 232, 112, 255, 255, 255, 255,
        175, 242, 110, 224, 255, 255, 255, 255, 182, 102, 86, 96, 255, 255, 255, 255, 183, 67, 210,
        96, 255, 255, 255, 255, 184, 12, 54, 96, 255, 255, 255, 255, 184, 253, 134, 240, 0, 0, 0,
        0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8, 112, 0, 0, 0, 0, 51, 71, 88, 0, 0, 0, 0, 0, 52,
        82, 234, 112, 0, 0, 0, 0, 53, 39, 72, 16, 0, 0, 0, 0, 54, 50, 218, 128, 0, 0, 0, 0, 55, 7,
        42, 16, 0, 0, 0, 0, 56, 27, 247, 0, 0, 0, 0, 0, 56, 231, 12, 16, 0, 0, 0, 0, 57, 251, 217,
        0, 0, 0, 0, 0, 58, 245, 18, 144, 0, 0, 0, 0, 59, 182, 209, 0, 0, 0, 0, 0, 60, 176, 10, 144,
        0, 0, 0, 0, 61, 187, 157, 0, 0, 0, 0, 0, 62, 143, 236, 144, 0, 0, 0, 0, 63, 155, 127, 0, 0,
        0, 0, 0, 64, 111, 206, 144, 0, 0, 0, 0, 65, 132, 155, 128, 0, 0, 0, 0, 66, 79, 176, 144, 0,
        0, 0, 0, 67, 100, 125, 128, 0, 0, 0, 0, 68, 47, 146, 144, 0, 0, 0, 0, 69, 68, 95, 128, 0,
        0, 0, 0, 70, 15, 116, 144, 0, 0, 0, 0, 71, 36, 65, 128, 0, 0, 0, 0, 71, 248, 145, 16, 0, 0,
        0, 0, 73, 4, 35, 128, 0, 0, 0, 0, 73, 216, 115, 16, 0, 0, 0, 0, 74, 228, 5, 128, 0, 0, 0,
        0, 75, 156, 165, 144, 1, 2, 1, 2, 1, 2, 3, 2, 3, 2, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
        1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 255, 255, 158, 28, 0, 0, 255, 255, 157, 144, 0, 4, 255,
        255, 171, 160, 0, 8, 255, 255, 185, 176, 1, 12, 255, 255, 171, 160, 1, 16, 76, 77, 84, 0,
        77, 83, 84, 0, 67, 83, 84, 0, 67, 68, 84, 0, 77, 68, 84, 0, 10, 77, 83, 84, 55, 77, 68, 84,
        44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_PANAMA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 105, 135, 38, 16, 255, 255, 255, 255, 139,
        244, 97, 232, 1, 2, 255, 255, 181, 112, 0, 0, 255, 255, 181, 24, 0, 4, 255, 255, 185, 176,
        0, 8, 76, 77, 84, 0, 67, 77, 84, 0, 69, 83, 84, 0, 10, 69, 83, 84, 53, 10,
    ];
    pub(crate) const AMERICA_PANGNIRTUNG: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        61, 0, 0, 0, 10, 0, 0, 0, 41, 255, 255, 255, 255, 163, 213, 82, 128, 255, 255, 255, 255,
        203, 136, 226, 96, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 96, 237,
        208, 255, 255, 255, 255, 247, 47, 48, 64, 255, 255, 255, 255, 248, 40, 91, 192, 0, 0, 0, 0,
        19, 105, 57, 224, 0, 0, 0, 0, 20, 89, 28, 208, 0, 0, 0, 0, 21, 73, 27, 224, 0, 0, 0, 0, 22,
        56, 254, 208, 0, 0, 0, 0, 23, 40, 253, 224, 0, 0, 0, 0, 24, 34, 27, 80, 0, 0, 0, 0, 25, 8,
        223, 224, 0, 0, 0, 0, 26, 1, 253, 80, 0, 0, 0, 0, 26, 241, 252, 96, 0, 0, 0, 0, 27, 225,
        223, 80, 0, 0, 0, 0, 28, 209, 222, 96, 0, 0, 0, 0, 29, 193, 193, 80, 0, 0, 0, 0, 30, 177,
        192, 96, 0, 0, 0, 0, 31, 161, 163, 80, 0, 0, 0, 0, 32, 117, 242, 224, 0, 0, 0, 0, 33, 129,
        133, 80, 0, 0, 0, 0, 34, 85, 212, 224, 0, 0, 0, 0, 35, 106, 161, 208, 0, 0, 0, 0, 36, 53,
        182, 224, 0, 0, 0, 0, 37, 74, 131, 208, 0, 0, 0, 0, 38, 21, 152, 224, 0, 0, 0, 0, 39, 42,
        101, 208, 0, 0, 0, 0, 39, 254, 181, 96, 0, 0, 0, 0, 41, 10, 71, 208, 0, 0, 0, 0, 41, 222,
        151, 96, 0, 0, 0, 0, 42, 234, 41, 208, 0, 0, 0, 0, 43, 190, 121, 96, 0, 0, 0, 0, 44, 211,
        70, 80, 0, 0, 0, 0, 45, 158, 91, 96, 0, 0, 0, 0, 46, 179, 40, 80, 0, 0, 0, 0, 47, 126, 61,
        96, 0, 0, 0, 0, 48, 147, 24, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250,
        96, 0, 0, 0, 0, 51, 71, 73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240,
        0, 0, 0, 0, 54, 50, 190, 96, 0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56, 27, 218, 224, 0,
        0, 0, 0, 56, 230, 254, 0, 0, 0, 0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 198, 209, 240, 0,
        0, 0, 0, 59, 219, 158, 224, 0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0, 61, 187, 128, 224,
        0, 0, 0, 0, 62, 143, 208, 112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112,
        0, 0, 0, 0, 65, 132, 127, 96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0,
        0, 0, 0, 68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 3, 1,
        2, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3,
        5, 3, 5, 3, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 9, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 0,
        0, 0, 0, 0, 0, 255, 255, 213, 208, 1, 4, 255, 255, 213, 208, 1, 8, 255, 255, 199, 192, 0,
        12, 255, 255, 227, 224, 1, 16, 255, 255, 213, 208, 1, 21, 255, 255, 199, 192, 1, 25, 255,
        255, 185, 176, 0, 29, 255, 255, 171, 160, 0, 33, 255, 255, 185, 176, 1, 37, 45, 48, 48, 0,
        65, 87, 84, 0, 65, 80, 84, 0, 65, 83, 84, 0, 65, 68, 68, 84, 0, 65, 68, 84, 0, 69, 68, 84,
        0, 69, 83, 84, 0, 67, 83, 84, 0, 67, 68, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77, 51,
        46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_PARAMARIBO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 5, 0, 0, 0, 18, 255, 255, 255, 255, 145, 5, 142, 184, 255, 255, 255, 255, 190,
        42, 75, 196, 255, 255, 255, 255, 210, 98, 44, 180, 0, 0, 0, 0, 27, 190, 49, 184, 1, 2, 3,
        4, 255, 255, 204, 72, 0, 0, 255, 255, 204, 60, 0, 4, 255, 255, 204, 76, 0, 4, 255, 255,
        206, 200, 0, 8, 255, 255, 213, 208, 0, 14, 76, 77, 84, 0, 80, 77, 84, 0, 45, 48, 51, 51,
        48, 0, 45, 48, 51, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_PHOENIX: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        11, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 94, 4, 12, 176, 255, 255, 255, 255, 158,
        166, 58, 144, 255, 255, 255, 255, 159, 187, 7, 128, 255, 255, 255, 255, 160, 134, 28, 144,
        255, 255, 255, 255, 161, 154, 233, 128, 255, 255, 255, 255, 203, 137, 12, 144, 255, 255,
        255, 255, 207, 23, 223, 28, 255, 255, 255, 255, 207, 143, 229, 172, 255, 255, 255, 255,
        208, 129, 26, 28, 255, 255, 255, 255, 250, 248, 117, 16, 255, 255, 255, 255, 251, 232, 88,
        0, 2, 1, 2, 1, 2, 3, 2, 3, 2, 1, 2, 255, 255, 150, 238, 0, 0, 255, 255, 171, 160, 1, 4,
        255, 255, 157, 144, 0, 8, 255, 255, 171, 160, 1, 12, 76, 77, 84, 0, 77, 68, 84, 0, 77, 83,
        84, 0, 77, 87, 84, 0, 10, 77, 83, 84, 55, 10,
    ];
    pub(crate) const AMERICA_PORTO_ACRE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        31, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 134, 144, 255, 255, 255, 255,
        184, 15, 102, 0, 255, 255, 255, 255, 184, 253, 92, 192, 255, 255, 255, 255, 185, 241, 80,
        80, 255, 255, 255, 255, 186, 222, 144, 64, 255, 255, 255, 255, 218, 56, 202, 80, 255, 255,
        255, 255, 218, 236, 22, 80, 255, 255, 255, 255, 220, 25, 253, 208, 255, 255, 255, 255, 220,
        185, 117, 64, 255, 255, 255, 255, 221, 251, 49, 80, 255, 255, 255, 255, 222, 155, 250, 64,
        255, 255, 255, 255, 223, 221, 182, 80, 255, 255, 255, 255, 224, 84, 79, 64, 255, 255, 255,
        255, 244, 152, 27, 208, 255, 255, 255, 255, 245, 5, 122, 64, 255, 255, 255, 255, 246, 192,
        128, 80, 255, 255, 255, 255, 247, 14, 58, 192, 255, 255, 255, 255, 248, 81, 72, 80, 255,
        255, 255, 255, 248, 199, 225, 64, 255, 255, 255, 255, 250, 10, 238, 208, 255, 255, 255,
        255, 250, 169, 20, 192, 255, 255, 255, 255, 251, 236, 34, 80, 255, 255, 255, 255, 252, 139,
        153, 192, 0, 0, 0, 0, 29, 201, 170, 80, 0, 0, 0, 0, 30, 120, 243, 192, 0, 0, 0, 0, 31, 160,
        81, 208, 0, 0, 0, 0, 32, 51, 235, 192, 0, 0, 0, 0, 33, 129, 133, 80, 0, 0, 0, 0, 34, 11,
        228, 192, 0, 0, 0, 0, 72, 96, 127, 80, 0, 0, 0, 0, 82, 127, 4, 192, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 255, 255, 192, 112, 0,
        0, 255, 255, 199, 192, 1, 4, 255, 255, 185, 176, 0, 8, 255, 255, 199, 192, 0, 4, 76, 77,
        84, 0, 45, 48, 52, 0, 45, 48, 53, 0, 10, 60, 45, 48, 53, 62, 53, 10,
    ];
    pub(crate) const AMERICA_PORTO_VELHO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        29, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 130, 232, 255, 255, 255, 255,
        184, 15, 87, 240, 255, 255, 255, 255, 184, 253, 78, 176, 255, 255, 255, 255, 185, 241, 66,
        64, 255, 255, 255, 255, 186, 222, 130, 48, 255, 255, 255, 255, 218, 56, 188, 64, 255, 255,
        255, 255, 218, 236, 8, 64, 255, 255, 255, 255, 220, 25, 239, 192, 255, 255, 255, 255, 220,
        185, 103, 48, 255, 255, 255, 255, 221, 251, 35, 64, 255, 255, 255, 255, 222, 155, 236, 48,
        255, 255, 255, 255, 223, 221, 168, 64, 255, 255, 255, 255, 224, 84, 65, 48, 255, 255, 255,
        255, 244, 152, 13, 192, 255, 255, 255, 255, 245, 5, 108, 48, 255, 255, 255, 255, 246, 192,
        114, 64, 255, 255, 255, 255, 247, 14, 44, 176, 255, 255, 255, 255, 248, 81, 58, 64, 255,
        255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255, 250, 10, 224, 192, 255, 255, 255,
        255, 250, 169, 6, 176, 255, 255, 255, 255, 251, 236, 20, 64, 255, 255, 255, 255, 252, 139,
        139, 176, 0, 0, 0, 0, 29, 201, 156, 64, 0, 0, 0, 0, 30, 120, 229, 176, 0, 0, 0, 0, 31, 160,
        67, 192, 0, 0, 0, 0, 32, 51, 221, 176, 0, 0, 0, 0, 33, 129, 119, 64, 0, 0, 0, 0, 34, 11,
        214, 176, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 255, 255, 196, 24, 0, 0, 255, 255, 213, 208, 1, 4, 255, 255, 199, 192, 0, 8, 76, 77,
        84, 0, 45, 48, 51, 0, 45, 48, 52, 0, 10, 60, 45, 48, 52, 62, 52, 10,
    ];
    pub(crate) const AMERICA_PORT_AU_PRINCE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        45, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 105, 135, 31, 80, 255, 255, 255, 255, 156,
        110, 113, 252, 0, 0, 0, 0, 25, 27, 70, 208, 0, 0, 0, 0, 26, 1, 239, 64, 0, 0, 0, 0, 26,
        241, 238, 80, 0, 0, 0, 0, 27, 225, 209, 64, 0, 0, 0, 0, 28, 209, 208, 80, 0, 0, 0, 0, 29,
        193, 179, 64, 0, 0, 0, 0, 30, 177, 178, 80, 0, 0, 0, 0, 31, 161, 149, 64, 0, 0, 0, 0, 32,
        145, 148, 80, 0, 0, 0, 0, 33, 129, 119, 64, 0, 0, 0, 0, 34, 85, 212, 224, 0, 0, 0, 0, 35,
        106, 175, 224, 0, 0, 0, 0, 36, 53, 182, 224, 0, 0, 0, 0, 37, 74, 145, 224, 0, 0, 0, 0, 38,
        21, 152, 224, 0, 0, 0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39, 254, 181, 96, 0, 0, 0, 0, 41,
        10, 85, 224, 0, 0, 0, 0, 41, 222, 151, 96, 0, 0, 0, 0, 42, 234, 55, 224, 0, 0, 0, 0, 43,
        190, 121, 96, 0, 0, 0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45, 158, 91, 96, 0, 0, 0, 0, 46,
        179, 54, 96, 0, 0, 0, 0, 47, 126, 61, 96, 0, 0, 0, 0, 48, 147, 24, 96, 0, 0, 0, 0, 49, 103,
        89, 224, 0, 0, 0, 0, 50, 114, 250, 96, 0, 0, 0, 0, 51, 71, 59, 224, 0, 0, 0, 0, 52, 82,
        220, 96, 0, 0, 0, 0, 66, 79, 120, 80, 0, 0, 0, 0, 67, 100, 69, 64, 0, 0, 0, 0, 68, 47, 90,
        80, 0, 0, 0, 0, 69, 68, 39, 64, 0, 0, 0, 0, 79, 92, 77, 112, 0, 0, 0, 0, 80, 150, 4, 96, 0,
        0, 0, 0, 81, 60, 47, 112, 0, 0, 0, 0, 82, 117, 230, 96, 0, 0, 0, 0, 83, 28, 17, 112, 0, 0,
        0, 0, 84, 85, 200, 96, 0, 0, 0, 0, 84, 251, 243, 112, 0, 0, 0, 0, 86, 53, 170, 96, 0, 0, 0,
        0, 88, 196, 241, 240, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 255, 255, 188, 48, 0, 0,
        255, 255, 188, 68, 0, 4, 255, 255, 199, 192, 1, 9, 255, 255, 185, 176, 0, 13, 76, 77, 84,
        0, 80, 80, 77, 84, 0, 69, 68, 84, 0, 69, 83, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77,
        51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_PUERTO_RICO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 122, 230, 149, 185, 255, 255, 255, 255,
        203, 246, 50, 192, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 96, 237,
        208, 1, 3, 2, 1, 255, 255, 194, 7, 0, 0, 255, 255, 199, 192, 0, 4, 255, 255, 213, 208, 1,
        8, 255, 255, 213, 208, 1, 12, 76, 77, 84, 0, 65, 83, 84, 0, 65, 80, 84, 0, 65, 87, 84, 0,
        10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_PUNTA_ARENAS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        116, 0, 0, 0, 7, 0, 0, 0, 20, 255, 255, 255, 255, 105, 135, 29, 252, 255, 255, 255, 255,
        143, 48, 71, 69, 255, 255, 255, 255, 155, 92, 229, 80, 255, 255, 255, 255, 159, 124, 226,
        197, 255, 255, 255, 255, 161, 0, 113, 192, 255, 255, 255, 255, 176, 94, 119, 197, 255, 255,
        255, 255, 177, 119, 61, 64, 255, 255, 255, 255, 178, 65, 0, 208, 255, 255, 255, 255, 179,
        88, 112, 192, 255, 255, 255, 255, 180, 34, 52, 80, 255, 255, 255, 255, 181, 57, 164, 64,
        255, 255, 255, 255, 182, 3, 103, 208, 255, 255, 255, 255, 183, 26, 215, 192, 255, 255, 255,
        255, 183, 228, 155, 80, 255, 255, 255, 255, 184, 253, 92, 192, 255, 255, 255, 255, 185,
        199, 32, 80, 255, 255, 255, 255, 204, 28, 110, 64, 255, 255, 255, 255, 204, 108, 231, 208,
        255, 255, 255, 255, 213, 51, 85, 192, 255, 255, 255, 255, 213, 118, 146, 64, 255, 255, 255,
        255, 253, 209, 60, 64, 255, 255, 255, 255, 254, 146, 250, 176, 255, 255, 255, 255, 255,
        204, 205, 192, 0, 0, 0, 0, 0, 114, 220, 176, 0, 0, 0, 0, 1, 117, 80, 192, 0, 0, 0, 0, 2,
        64, 73, 176, 0, 0, 0, 0, 3, 85, 50, 192, 0, 0, 0, 0, 4, 32, 43, 176, 0, 0, 0, 0, 5, 62, 79,
        64, 0, 0, 0, 0, 6, 0, 13, 176, 0, 0, 0, 0, 7, 11, 188, 64, 0, 0, 0, 0, 7, 223, 239, 176, 0,
        0, 0, 0, 8, 254, 19, 64, 0, 0, 0, 0, 9, 191, 209, 176, 0, 0, 0, 0, 10, 221, 245, 64, 0, 0,
        0, 0, 11, 168, 238, 48, 0, 0, 0, 0, 12, 189, 215, 64, 0, 0, 0, 0, 13, 136, 208, 48, 0, 0,
        0, 0, 14, 157, 185, 64, 0, 0, 0, 0, 15, 104, 178, 48, 0, 0, 0, 0, 16, 134, 213, 192, 0, 0,
        0, 0, 17, 72, 148, 48, 0, 0, 0, 0, 18, 102, 183, 192, 0, 0, 0, 0, 19, 40, 118, 48, 0, 0, 0,
        0, 20, 70, 153, 192, 0, 0, 0, 0, 21, 17, 146, 176, 0, 0, 0, 0, 22, 38, 123, 192, 0, 0, 0,
        0, 22, 241, 116, 176, 0, 0, 0, 0, 24, 6, 93, 192, 0, 0, 0, 0, 24, 209, 86, 176, 0, 0, 0, 0,
        25, 230, 63, 192, 0, 0, 0, 0, 26, 177, 56, 176, 0, 0, 0, 0, 27, 207, 92, 64, 0, 0, 0, 0,
        28, 145, 26, 176, 0, 0, 0, 0, 29, 175, 62, 64, 0, 0, 0, 0, 30, 112, 252, 176, 0, 0, 0, 0,
        31, 143, 32, 64, 0, 0, 0, 0, 32, 127, 3, 48, 0, 0, 0, 0, 33, 111, 2, 64, 0, 0, 0, 0, 34,
        57, 251, 48, 0, 0, 0, 0, 35, 78, 228, 64, 0, 0, 0, 0, 36, 25, 221, 48, 0, 0, 0, 0, 37, 56,
        0, 192, 0, 0, 0, 0, 37, 249, 191, 48, 0, 0, 0, 0, 38, 242, 248, 192, 0, 0, 0, 0, 39, 217,
        161, 48, 0, 0, 0, 0, 40, 247, 196, 192, 0, 0, 0, 0, 41, 194, 189, 176, 0, 0, 0, 0, 42, 215,
        166, 192, 0, 0, 0, 0, 43, 162, 159, 176, 0, 0, 0, 0, 44, 183, 136, 192, 0, 0, 0, 0, 45,
        130, 129, 176, 0, 0, 0, 0, 46, 151, 106, 192, 0, 0, 0, 0, 47, 98, 99, 176, 0, 0, 0, 0, 48,
        128, 135, 64, 0, 0, 0, 0, 49, 66, 69, 176, 0, 0, 0, 0, 50, 96, 105, 64, 0, 0, 0, 0, 51, 61,
        215, 48, 0, 0, 0, 0, 52, 64, 75, 64, 0, 0, 0, 0, 53, 11, 68, 48, 0, 0, 0, 0, 54, 13, 184,
        64, 0, 0, 0, 0, 55, 6, 213, 176, 0, 0, 0, 0, 56, 0, 15, 64, 0, 0, 0, 0, 56, 203, 8, 48, 0,
        0, 0, 0, 57, 233, 43, 192, 0, 0, 0, 0, 58, 170, 234, 48, 0, 0, 0, 0, 59, 201, 13, 192, 0,
        0, 0, 0, 60, 138, 204, 48, 0, 0, 0, 0, 61, 168, 239, 192, 0, 0, 0, 0, 62, 106, 174, 48, 0,
        0, 0, 0, 63, 136, 209, 192, 0, 0, 0, 0, 64, 83, 202, 176, 0, 0, 0, 0, 65, 104, 179, 192, 0,
        0, 0, 0, 66, 51, 172, 176, 0, 0, 0, 0, 67, 72, 149, 192, 0, 0, 0, 0, 68, 19, 142, 176, 0,
        0, 0, 0, 69, 49, 178, 64, 0, 0, 0, 0, 69, 243, 112, 176, 0, 0, 0, 0, 71, 17, 148, 64, 0, 0,
        0, 0, 71, 239, 2, 48, 0, 0, 0, 0, 72, 241, 118, 64, 0, 0, 0, 0, 73, 188, 111, 48, 0, 0, 0,
        0, 74, 209, 88, 64, 0, 0, 0, 0, 75, 184, 0, 176, 0, 0, 0, 0, 76, 177, 58, 64, 0, 0, 0, 0,
        77, 198, 7, 48, 0, 0, 0, 0, 78, 80, 130, 192, 0, 0, 0, 0, 79, 156, 174, 176, 0, 0, 0, 0,
        80, 66, 217, 192, 0, 0, 0, 0, 81, 124, 144, 176, 0, 0, 0, 0, 82, 43, 246, 64, 0, 0, 0, 0,
        83, 92, 114, 176, 0, 0, 0, 0, 84, 11, 216, 64, 0, 0, 0, 0, 87, 55, 230, 48, 0, 0, 0, 0, 87,
        175, 236, 192, 0, 0, 0, 0, 88, 67, 134, 176, 1, 2, 1, 3, 1, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2,
        3, 2, 3, 2, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
        3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
        3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
        3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 6, 255, 255, 189, 132, 0, 0, 255, 255, 189, 187, 0, 4, 255,
        255, 185, 176, 0, 8, 255, 255, 199, 192, 0, 12, 255, 255, 199, 192, 1, 12, 255, 255, 213,
        208, 1, 16, 255, 255, 213, 208, 0, 16, 76, 77, 84, 0, 83, 77, 84, 0, 45, 48, 53, 0, 45, 48,
        52, 0, 45, 48, 51, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_RAINY_RIVER: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        74, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 114, 238, 135, 40, 255, 255, 255, 255,
        158, 184, 161, 128, 255, 255, 255, 255, 159, 186, 249, 112, 255, 255, 255, 255, 200, 248,
        87, 96, 255, 255, 255, 255, 203, 136, 254, 128, 255, 255, 255, 255, 210, 35, 244, 112, 255,
        255, 255, 255, 210, 97, 9, 240, 0, 0, 0, 0, 8, 32, 207, 128, 0, 0, 0, 0, 9, 16, 178, 112,
        0, 0, 0, 0, 10, 0, 177, 128, 0, 0, 0, 0, 10, 240, 148, 112, 0, 0, 0, 0, 11, 224, 147, 128,
        0, 0, 0, 0, 12, 217, 176, 240, 0, 0, 0, 0, 13, 192, 117, 128, 0, 0, 0, 0, 14, 185, 146,
        240, 0, 0, 0, 0, 15, 169, 146, 0, 0, 0, 0, 0, 16, 153, 116, 240, 0, 0, 0, 0, 17, 137, 116,
        0, 0, 0, 0, 0, 18, 121, 86, 240, 0, 0, 0, 0, 19, 105, 86, 0, 0, 0, 0, 0, 20, 89, 56, 240,
        0, 0, 0, 0, 21, 73, 56, 0, 0, 0, 0, 0, 22, 57, 26, 240, 0, 0, 0, 0, 23, 41, 26, 0, 0, 0, 0,
        0, 24, 34, 55, 112, 0, 0, 0, 0, 25, 8, 252, 0, 0, 0, 0, 0, 26, 2, 25, 112, 0, 0, 0, 0, 26,
        242, 24, 128, 0, 0, 0, 0, 27, 225, 251, 112, 0, 0, 0, 0, 28, 209, 250, 128, 0, 0, 0, 0, 29,
        193, 221, 112, 0, 0, 0, 0, 30, 177, 220, 128, 0, 0, 0, 0, 31, 161, 191, 112, 0, 0, 0, 0,
        32, 118, 15, 0, 0, 0, 0, 0, 33, 129, 161, 112, 0, 0, 0, 0, 34, 85, 241, 0, 0, 0, 0, 0, 35,
        106, 189, 240, 0, 0, 0, 0, 36, 53, 211, 0, 0, 0, 0, 0, 37, 74, 159, 240, 0, 0, 0, 0, 38,
        21, 181, 0, 0, 0, 0, 0, 39, 42, 129, 240, 0, 0, 0, 0, 39, 254, 209, 128, 0, 0, 0, 0, 41,
        10, 99, 240, 0, 0, 0, 0, 41, 222, 179, 128, 0, 0, 0, 0, 42, 234, 69, 240, 0, 0, 0, 0, 43,
        190, 149, 128, 0, 0, 0, 0, 44, 211, 98, 112, 0, 0, 0, 0, 45, 158, 119, 128, 0, 0, 0, 0, 46,
        179, 68, 112, 0, 0, 0, 0, 47, 126, 89, 128, 0, 0, 0, 0, 48, 147, 38, 112, 0, 0, 0, 0, 49,
        103, 118, 0, 0, 0, 0, 0, 50, 115, 8, 112, 0, 0, 0, 0, 51, 71, 88, 0, 0, 0, 0, 0, 52, 82,
        234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0, 0, 0, 0, 54, 50, 204, 112, 0, 0, 0, 0, 55, 7, 28,
        0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0, 0, 56, 230, 254, 0, 0, 0, 0, 0, 57, 251, 202,
        240, 0, 0, 0, 0, 58, 198, 224, 0, 0, 0, 0, 0, 59, 219, 172, 240, 0, 0, 0, 0, 60, 175, 252,
        128, 0, 0, 0, 0, 61, 187, 142, 240, 0, 0, 0, 0, 62, 143, 222, 128, 0, 0, 0, 0, 63, 155,
        112, 240, 0, 0, 0, 0, 64, 111, 192, 128, 0, 0, 0, 0, 65, 132, 141, 112, 0, 0, 0, 0, 66, 79,
        162, 128, 0, 0, 0, 0, 67, 100, 111, 112, 0, 0, 0, 0, 68, 47, 132, 128, 0, 0, 0, 0, 69, 68,
        81, 112, 0, 0, 0, 0, 69, 243, 183, 0, 2, 1, 2, 1, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255,
        167, 88, 0, 0, 255, 255, 185, 176, 1, 4, 255, 255, 171, 160, 0, 8, 255, 255, 185, 176, 1,
        12, 255, 255, 185, 176, 1, 16, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 67, 87, 84, 0,
        67, 80, 84, 0, 10, 67, 83, 84, 54, 67, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49,
        46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_RANKIN_INLET: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        58, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 231, 140, 110, 0, 255, 255, 255, 255, 247,
        47, 76, 96, 255, 255, 255, 255, 248, 40, 119, 224, 0, 0, 0, 0, 19, 105, 86, 0, 0, 0, 0, 0,
        20, 89, 56, 240, 0, 0, 0, 0, 21, 73, 56, 0, 0, 0, 0, 0, 22, 57, 26, 240, 0, 0, 0, 0, 23,
        41, 26, 0, 0, 0, 0, 0, 24, 34, 55, 112, 0, 0, 0, 0, 25, 8, 252, 0, 0, 0, 0, 0, 26, 2, 25,
        112, 0, 0, 0, 0, 26, 242, 24, 128, 0, 0, 0, 0, 27, 225, 251, 112, 0, 0, 0, 0, 28, 209, 250,
        128, 0, 0, 0, 0, 29, 193, 221, 112, 0, 0, 0, 0, 30, 177, 220, 128, 0, 0, 0, 0, 31, 161,
        191, 112, 0, 0, 0, 0, 32, 118, 15, 0, 0, 0, 0, 0, 33, 129, 161, 112, 0, 0, 0, 0, 34, 85,
        241, 0, 0, 0, 0, 0, 35, 106, 189, 240, 0, 0, 0, 0, 36, 53, 211, 0, 0, 0, 0, 0, 37, 74, 159,
        240, 0, 0, 0, 0, 38, 21, 181, 0, 0, 0, 0, 0, 39, 42, 129, 240, 0, 0, 0, 0, 39, 254, 209,
        128, 0, 0, 0, 0, 41, 10, 99, 240, 0, 0, 0, 0, 41, 222, 179, 128, 0, 0, 0, 0, 42, 234, 69,
        240, 0, 0, 0, 0, 43, 190, 149, 128, 0, 0, 0, 0, 44, 211, 98, 112, 0, 0, 0, 0, 45, 158, 119,
        128, 0, 0, 0, 0, 46, 179, 68, 112, 0, 0, 0, 0, 47, 126, 89, 128, 0, 0, 0, 0, 48, 147, 38,
        112, 0, 0, 0, 0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8, 112, 0, 0, 0, 0, 51, 71, 88, 0,
        0, 0, 0, 0, 52, 82, 234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0, 0, 0, 0, 54, 50, 204, 112, 0,
        0, 0, 0, 55, 7, 28, 0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0, 0, 56, 230, 254, 0, 0, 0, 0,
        0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 198, 224, 0, 0, 0, 0, 0, 59, 219, 172, 240, 0, 0, 0,
        0, 60, 175, 252, 128, 0, 0, 0, 0, 61, 187, 142, 240, 0, 0, 0, 0, 62, 143, 222, 128, 0, 0,
        0, 0, 63, 155, 112, 240, 0, 0, 0, 0, 64, 111, 192, 128, 0, 0, 0, 0, 65, 132, 141, 112, 0,
        0, 0, 0, 66, 79, 162, 128, 0, 0, 0, 0, 67, 100, 111, 112, 0, 0, 0, 0, 68, 47, 132, 128, 0,
        0, 0, 0, 69, 68, 81, 112, 0, 0, 0, 0, 69, 243, 183, 0, 2, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0, 0, 0, 0, 0, 255, 255, 199, 192, 1, 4,
        255, 255, 171, 160, 0, 9, 255, 255, 185, 176, 1, 13, 255, 255, 185, 176, 0, 17, 45, 48, 48,
        0, 67, 68, 68, 84, 0, 67, 83, 84, 0, 67, 68, 84, 0, 69, 83, 84, 0, 10, 67, 83, 84, 54, 67,
        68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_RECIFE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        39, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 103, 184, 255, 255, 255, 255,
        184, 15, 73, 224, 255, 255, 255, 255, 184, 253, 64, 160, 255, 255, 255, 255, 185, 241, 52,
        48, 255, 255, 255, 255, 186, 222, 116, 32, 255, 255, 255, 255, 218, 56, 174, 48, 255, 255,
        255, 255, 218, 235, 250, 48, 255, 255, 255, 255, 220, 25, 225, 176, 255, 255, 255, 255,
        220, 185, 89, 32, 255, 255, 255, 255, 221, 251, 21, 48, 255, 255, 255, 255, 222, 155, 222,
        32, 255, 255, 255, 255, 223, 221, 154, 48, 255, 255, 255, 255, 224, 84, 51, 32, 255, 255,
        255, 255, 244, 151, 255, 176, 255, 255, 255, 255, 245, 5, 94, 32, 255, 255, 255, 255, 246,
        192, 100, 48, 255, 255, 255, 255, 247, 14, 30, 160, 255, 255, 255, 255, 248, 81, 44, 48,
        255, 255, 255, 255, 248, 199, 197, 32, 255, 255, 255, 255, 250, 10, 210, 176, 255, 255,
        255, 255, 250, 168, 248, 160, 255, 255, 255, 255, 251, 236, 6, 48, 255, 255, 255, 255, 252,
        139, 125, 160, 0, 0, 0, 0, 29, 201, 142, 48, 0, 0, 0, 0, 30, 120, 215, 160, 0, 0, 0, 0, 31,
        160, 53, 176, 0, 0, 0, 0, 32, 51, 207, 160, 0, 0, 0, 0, 33, 129, 105, 48, 0, 0, 0, 0, 34,
        11, 200, 160, 0, 0, 0, 0, 35, 88, 16, 176, 0, 0, 0, 0, 35, 226, 112, 32, 0, 0, 0, 0, 37,
        55, 242, 176, 0, 0, 0, 0, 37, 212, 199, 32, 0, 0, 0, 0, 55, 246, 198, 176, 0, 0, 0, 0, 56,
        184, 133, 32, 0, 0, 0, 0, 57, 223, 227, 48, 0, 0, 0, 0, 57, 233, 15, 160, 0, 0, 0, 0, 59,
        200, 255, 176, 0, 0, 0, 0, 60, 111, 14, 160, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 223, 72,
        0, 0, 255, 255, 227, 224, 1, 4, 255, 255, 213, 208, 0, 8, 76, 77, 84, 0, 45, 48, 50, 0, 45,
        48, 51, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_REGINA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        53, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 134, 253, 147, 28, 255, 255, 255, 255,
        158, 184, 175, 144, 255, 255, 255, 255, 159, 187, 7, 128, 255, 255, 255, 255, 181, 101, 79,
        240, 255, 255, 255, 255, 182, 48, 72, 224, 255, 255, 255, 255, 183, 69, 49, 240, 255, 255,
        255, 255, 184, 16, 42, 224, 255, 255, 255, 255, 185, 37, 19, 240, 255, 255, 255, 255, 185,
        240, 12, 224, 255, 255, 255, 255, 187, 14, 48, 112, 255, 255, 255, 255, 187, 207, 238, 224,
        255, 255, 255, 255, 188, 238, 18, 112, 255, 255, 255, 255, 189, 185, 11, 96, 255, 255, 255,
        255, 194, 114, 8, 240, 255, 255, 255, 255, 195, 97, 235, 224, 255, 255, 255, 255, 196, 81,
        234, 240, 255, 255, 255, 255, 197, 56, 147, 96, 255, 255, 255, 255, 198, 49, 204, 240, 255,
        255, 255, 255, 199, 33, 175, 224, 255, 255, 255, 255, 200, 26, 233, 112, 255, 255, 255,
        255, 201, 10, 204, 96, 255, 255, 255, 255, 201, 250, 203, 112, 255, 255, 255, 255, 202,
        234, 174, 96, 255, 255, 255, 255, 203, 137, 12, 144, 255, 255, 255, 255, 210, 35, 244, 112,
        255, 255, 255, 255, 210, 97, 24, 0, 255, 255, 255, 255, 211, 99, 140, 16, 255, 255, 255,
        255, 212, 83, 111, 0, 255, 255, 255, 255, 213, 85, 227, 16, 255, 255, 255, 255, 214, 32,
        220, 0, 255, 255, 255, 255, 215, 53, 197, 16, 255, 255, 255, 255, 216, 0, 190, 0, 255, 255,
        255, 255, 217, 21, 167, 16, 255, 255, 255, 255, 217, 224, 160, 0, 255, 255, 255, 255, 218,
        254, 195, 144, 255, 255, 255, 255, 219, 192, 130, 0, 255, 255, 255, 255, 220, 222, 165,
        144, 255, 255, 255, 255, 221, 169, 158, 128, 255, 255, 255, 255, 222, 190, 135, 144, 255,
        255, 255, 255, 223, 137, 128, 128, 255, 255, 255, 255, 224, 158, 105, 144, 255, 255, 255,
        255, 225, 105, 98, 128, 255, 255, 255, 255, 226, 126, 75, 144, 255, 255, 255, 255, 227, 73,
        68, 128, 255, 255, 255, 255, 228, 94, 45, 144, 255, 255, 255, 255, 229, 41, 38, 128, 255,
        255, 255, 255, 230, 71, 74, 16, 255, 255, 255, 255, 231, 18, 67, 0, 255, 255, 255, 255,
        232, 39, 44, 16, 255, 255, 255, 255, 232, 242, 37, 0, 255, 255, 255, 255, 235, 230, 240,
        16, 255, 255, 255, 255, 236, 214, 211, 0, 255, 255, 255, 255, 237, 198, 210, 16, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 5, 255, 255, 157, 228, 0, 0, 255,
        255, 171, 160, 1, 4, 255, 255, 157, 144, 0, 8, 255, 255, 171, 160, 1, 12, 255, 255, 171,
        160, 1, 16, 255, 255, 171, 160, 0, 20, 76, 77, 84, 0, 77, 68, 84, 0, 77, 83, 84, 0, 77, 87,
        84, 0, 77, 80, 84, 0, 67, 83, 84, 0, 10, 67, 83, 84, 54, 10,
    ];
    pub(crate) const AMERICA_RESOLUTE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        58, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 213, 251, 129, 128, 255, 255, 255, 255,
        247, 47, 76, 96, 255, 255, 255, 255, 248, 40, 119, 224, 0, 0, 0, 0, 19, 105, 86, 0, 0, 0,
        0, 0, 20, 89, 56, 240, 0, 0, 0, 0, 21, 73, 56, 0, 0, 0, 0, 0, 22, 57, 26, 240, 0, 0, 0, 0,
        23, 41, 26, 0, 0, 0, 0, 0, 24, 34, 55, 112, 0, 0, 0, 0, 25, 8, 252, 0, 0, 0, 0, 0, 26, 2,
        25, 112, 0, 0, 0, 0, 26, 242, 24, 128, 0, 0, 0, 0, 27, 225, 251, 112, 0, 0, 0, 0, 28, 209,
        250, 128, 0, 0, 0, 0, 29, 193, 221, 112, 0, 0, 0, 0, 30, 177, 220, 128, 0, 0, 0, 0, 31,
        161, 191, 112, 0, 0, 0, 0, 32, 118, 15, 0, 0, 0, 0, 0, 33, 129, 161, 112, 0, 0, 0, 0, 34,
        85, 241, 0, 0, 0, 0, 0, 35, 106, 189, 240, 0, 0, 0, 0, 36, 53, 211, 0, 0, 0, 0, 0, 37, 74,
        159, 240, 0, 0, 0, 0, 38, 21, 181, 0, 0, 0, 0, 0, 39, 42, 129, 240, 0, 0, 0, 0, 39, 254,
        209, 128, 0, 0, 0, 0, 41, 10, 99, 240, 0, 0, 0, 0, 41, 222, 179, 128, 0, 0, 0, 0, 42, 234,
        69, 240, 0, 0, 0, 0, 43, 190, 149, 128, 0, 0, 0, 0, 44, 211, 98, 112, 0, 0, 0, 0, 45, 158,
        119, 128, 0, 0, 0, 0, 46, 179, 68, 112, 0, 0, 0, 0, 47, 126, 89, 128, 0, 0, 0, 0, 48, 147,
        38, 112, 0, 0, 0, 0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8, 112, 0, 0, 0, 0, 51, 71, 88,
        0, 0, 0, 0, 0, 52, 82, 234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0, 0, 0, 0, 54, 50, 204, 112,
        0, 0, 0, 0, 55, 7, 28, 0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0, 0, 56, 230, 254, 0, 0, 0,
        0, 0, 57, 251, 202, 240, 0, 0, 0, 0, 58, 198, 224, 0, 0, 0, 0, 0, 59, 219, 172, 240, 0, 0,
        0, 0, 60, 175, 252, 128, 0, 0, 0, 0, 61, 187, 142, 240, 0, 0, 0, 0, 62, 143, 222, 128, 0,
        0, 0, 0, 63, 155, 112, 240, 0, 0, 0, 0, 64, 111, 192, 128, 0, 0, 0, 0, 65, 132, 141, 112,
        0, 0, 0, 0, 66, 79, 162, 128, 0, 0, 0, 0, 67, 100, 111, 112, 0, 0, 0, 0, 68, 47, 132, 128,
        0, 0, 0, 0, 69, 68, 81, 112, 0, 0, 0, 0, 69, 243, 183, 0, 2, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 3, 0, 0, 0, 0, 0, 0, 255, 255, 199, 192, 1,
        4, 255, 255, 171, 160, 0, 9, 255, 255, 185, 176, 1, 13, 255, 255, 185, 176, 0, 17, 45, 48,
        48, 0, 67, 68, 68, 84, 0, 67, 83, 84, 0, 67, 68, 84, 0, 69, 83, 84, 0, 10, 67, 83, 84, 54,
        67, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_ROSARIO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        53, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 114, 157, 251, 224, 255, 255, 255, 255,
        162, 146, 143, 44, 255, 255, 255, 255, 182, 123, 82, 64, 255, 255, 255, 255, 183, 26, 201,
        176, 255, 255, 255, 255, 184, 30, 143, 64, 255, 255, 255, 255, 184, 212, 112, 48, 255, 255,
        255, 255, 186, 23, 125, 192, 255, 255, 255, 255, 186, 181, 163, 176, 255, 255, 255, 255,
        187, 248, 177, 64, 255, 255, 255, 255, 188, 150, 215, 48, 255, 255, 255, 255, 189, 217,
        228, 192, 255, 255, 255, 255, 190, 120, 10, 176, 255, 255, 255, 255, 191, 187, 24, 64, 255,
        255, 255, 255, 192, 90, 143, 176, 255, 255, 255, 255, 193, 157, 157, 64, 255, 255, 255,
        255, 194, 59, 195, 48, 255, 255, 255, 255, 195, 126, 208, 192, 255, 255, 255, 255, 196, 28,
        246, 176, 255, 255, 255, 255, 197, 96, 4, 64, 255, 255, 255, 255, 197, 254, 42, 48, 255,
        255, 255, 255, 199, 65, 55, 192, 255, 255, 255, 255, 199, 224, 175, 48, 255, 255, 255, 255,
        200, 129, 148, 64, 255, 255, 255, 255, 202, 77, 161, 176, 255, 255, 255, 255, 202, 238,
        134, 192, 255, 255, 255, 255, 206, 77, 255, 48, 255, 255, 255, 255, 206, 176, 237, 192,
        255, 255, 255, 255, 211, 41, 53, 176, 255, 255, 255, 255, 212, 67, 100, 192, 255, 255, 255,
        255, 244, 61, 8, 48, 255, 255, 255, 255, 244, 159, 246, 192, 255, 255, 255, 255, 245, 5,
        108, 48, 255, 255, 255, 255, 246, 50, 16, 64, 255, 255, 255, 255, 246, 230, 159, 176, 255,
        255, 255, 255, 248, 19, 67, 192, 255, 255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255,
        249, 244, 119, 64, 255, 255, 255, 255, 250, 211, 54, 176, 255, 255, 255, 255, 251, 195, 53,
        192, 255, 255, 255, 255, 252, 188, 83, 48, 255, 255, 255, 255, 253, 172, 82, 64, 255, 255,
        255, 255, 254, 156, 53, 48, 255, 255, 255, 255, 255, 140, 52, 64, 0, 0, 0, 0, 7, 163, 74,
        176, 0, 0, 0, 0, 8, 36, 111, 160, 0, 0, 0, 0, 35, 148, 181, 176, 0, 0, 0, 0, 36, 16, 148,
        160, 0, 0, 0, 0, 37, 55, 242, 176, 0, 0, 0, 0, 37, 240, 118, 160, 0, 0, 0, 0, 39, 33, 15,
        48, 0, 0, 0, 0, 39, 208, 88, 160, 0, 0, 0, 0, 55, 246, 198, 176, 0, 0, 0, 0, 56, 191, 42,
        176, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 4, 5, 4, 5, 4, 5, 4, 5, 3, 5, 255, 255, 199, 32,
        0, 0, 255, 255, 195, 212, 0, 4, 255, 255, 199, 192, 0, 8, 255, 255, 213, 208, 1, 12, 255,
        255, 227, 224, 1, 16, 255, 255, 213, 208, 0, 12, 76, 77, 84, 0, 67, 77, 84, 0, 45, 48, 52,
        0, 45, 48, 51, 0, 45, 48, 50, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_SANTAREM: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        30, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 122, 72, 255, 255, 255, 255,
        184, 15, 87, 240, 255, 255, 255, 255, 184, 253, 78, 176, 255, 255, 255, 255, 185, 241, 66,
        64, 255, 255, 255, 255, 186, 222, 130, 48, 255, 255, 255, 255, 218, 56, 188, 64, 255, 255,
        255, 255, 218, 236, 8, 64, 255, 255, 255, 255, 220, 25, 239, 192, 255, 255, 255, 255, 220,
        185, 103, 48, 255, 255, 255, 255, 221, 251, 35, 64, 255, 255, 255, 255, 222, 155, 236, 48,
        255, 255, 255, 255, 223, 221, 168, 64, 255, 255, 255, 255, 224, 84, 65, 48, 255, 255, 255,
        255, 244, 152, 13, 192, 255, 255, 255, 255, 245, 5, 108, 48, 255, 255, 255, 255, 246, 192,
        114, 64, 255, 255, 255, 255, 247, 14, 44, 176, 255, 255, 255, 255, 248, 81, 58, 64, 255,
        255, 255, 255, 248, 199, 211, 48, 255, 255, 255, 255, 250, 10, 224, 192, 255, 255, 255,
        255, 250, 169, 6, 176, 255, 255, 255, 255, 251, 236, 20, 64, 255, 255, 255, 255, 252, 139,
        139, 176, 0, 0, 0, 0, 29, 201, 156, 64, 0, 0, 0, 0, 30, 120, 229, 176, 0, 0, 0, 0, 31, 160,
        67, 192, 0, 0, 0, 0, 32, 51, 221, 176, 0, 0, 0, 0, 33, 129, 119, 64, 0, 0, 0, 0, 34, 11,
        214, 176, 0, 0, 0, 0, 72, 96, 113, 64, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 255, 255, 204, 184, 0, 0, 255, 255, 213, 208, 1, 4,
        255, 255, 199, 192, 0, 8, 255, 255, 213, 208, 0, 4, 76, 77, 84, 0, 45, 48, 51, 0, 45, 48,
        52, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_SANTA_ISABEL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        94, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 165, 182, 246, 128, 255, 255, 255, 255,
        169, 121, 79, 112, 255, 255, 255, 255, 175, 242, 124, 240, 255, 255, 255, 255, 182, 102,
        100, 112, 255, 255, 255, 255, 183, 27, 16, 0, 255, 255, 255, 255, 184, 10, 242, 240, 255,
        255, 255, 255, 203, 234, 141, 128, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255,
        255, 210, 153, 186, 112, 255, 255, 255, 255, 215, 27, 89, 0, 255, 255, 255, 255, 216, 145,
        180, 240, 255, 255, 255, 255, 226, 126, 75, 144, 255, 255, 255, 255, 227, 73, 82, 144, 255,
        255, 255, 255, 228, 94, 45, 144, 255, 255, 255, 255, 229, 41, 52, 144, 255, 255, 255, 255,
        230, 71, 74, 16, 255, 255, 255, 255, 231, 18, 81, 16, 255, 255, 255, 255, 232, 39, 44, 16,
        255, 255, 255, 255, 232, 242, 51, 16, 255, 255, 255, 255, 234, 7, 14, 16, 255, 255, 255,
        255, 234, 210, 21, 16, 255, 255, 255, 255, 235, 230, 240, 16, 255, 255, 255, 255, 236, 177,
        247, 16, 255, 255, 255, 255, 237, 198, 210, 16, 255, 255, 255, 255, 238, 145, 217, 16, 0,
        0, 0, 0, 11, 224, 175, 160, 0, 0, 0, 0, 12, 217, 205, 16, 0, 0, 0, 0, 13, 192, 145, 160, 0,
        0, 0, 0, 14, 185, 175, 16, 0, 0, 0, 0, 15, 169, 174, 32, 0, 0, 0, 0, 16, 153, 145, 16, 0,
        0, 0, 0, 17, 137, 144, 32, 0, 0, 0, 0, 18, 121, 115, 16, 0, 0, 0, 0, 19, 105, 114, 32, 0,
        0, 0, 0, 20, 89, 85, 16, 0, 0, 0, 0, 21, 73, 84, 32, 0, 0, 0, 0, 22, 57, 55, 16, 0, 0, 0,
        0, 23, 41, 54, 32, 0, 0, 0, 0, 24, 34, 83, 144, 0, 0, 0, 0, 25, 9, 24, 32, 0, 0, 0, 0, 26,
        2, 53, 144, 0, 0, 0, 0, 26, 242, 52, 160, 0, 0, 0, 0, 27, 226, 23, 144, 0, 0, 0, 0, 28,
        210, 22, 160, 0, 0, 0, 0, 29, 193, 249, 144, 0, 0, 0, 0, 30, 177, 248, 160, 0, 0, 0, 0, 31,
        161, 219, 144, 0, 0, 0, 0, 32, 118, 43, 32, 0, 0, 0, 0, 33, 129, 189, 144, 0, 0, 0, 0, 34,
        86, 13, 32, 0, 0, 0, 0, 35, 106, 218, 16, 0, 0, 0, 0, 36, 53, 239, 32, 0, 0, 0, 0, 37, 74,
        188, 16, 0, 0, 0, 0, 38, 21, 209, 32, 0, 0, 0, 0, 39, 42, 158, 16, 0, 0, 0, 0, 39, 254,
        237, 160, 0, 0, 0, 0, 41, 10, 128, 16, 0, 0, 0, 0, 41, 222, 207, 160, 0, 0, 0, 0, 42, 234,
        98, 16, 0, 0, 0, 0, 43, 190, 177, 160, 0, 0, 0, 0, 44, 211, 126, 144, 0, 0, 0, 0, 45, 158,
        147, 160, 0, 0, 0, 0, 46, 179, 96, 144, 0, 0, 0, 0, 47, 126, 117, 160, 0, 0, 0, 0, 48, 147,
        66, 144, 0, 0, 0, 0, 49, 103, 146, 32, 0, 0, 0, 0, 50, 115, 36, 144, 0, 0, 0, 0, 51, 71,
        116, 32, 0, 0, 0, 0, 52, 83, 6, 144, 0, 0, 0, 0, 53, 39, 86, 32, 0, 0, 0, 0, 54, 50, 232,
        144, 0, 0, 0, 0, 55, 7, 56, 32, 0, 0, 0, 0, 56, 28, 5, 16, 0, 0, 0, 0, 56, 231, 26, 32, 0,
        0, 0, 0, 57, 251, 231, 16, 0, 0, 0, 0, 58, 198, 252, 32, 0, 0, 0, 0, 59, 219, 201, 16, 0,
        0, 0, 0, 60, 176, 24, 160, 0, 0, 0, 0, 61, 187, 171, 16, 0, 0, 0, 0, 62, 143, 250, 160, 0,
        0, 0, 0, 63, 155, 141, 16, 0, 0, 0, 0, 64, 111, 220, 160, 0, 0, 0, 0, 65, 132, 169, 144, 0,
        0, 0, 0, 66, 79, 190, 160, 0, 0, 0, 0, 67, 100, 139, 144, 0, 0, 0, 0, 68, 47, 160, 160, 0,
        0, 0, 0, 69, 68, 109, 144, 0, 0, 0, 0, 70, 15, 130, 160, 0, 0, 0, 0, 71, 36, 79, 144, 0, 0,
        0, 0, 71, 248, 159, 32, 0, 0, 0, 0, 73, 4, 49, 144, 0, 0, 0, 0, 73, 216, 129, 32, 0, 0, 0,
        0, 74, 228, 19, 144, 0, 0, 0, 0, 75, 156, 179, 160, 1, 2, 1, 2, 3, 2, 4, 5, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 255, 255, 146, 76, 0, 0,
        255, 255, 157, 144, 0, 4, 255, 255, 143, 128, 0, 8, 255, 255, 157, 144, 1, 12, 255, 255,
        157, 144, 1, 16, 255, 255, 157, 144, 1, 20, 76, 77, 84, 0, 77, 83, 84, 0, 80, 83, 84, 0,
        80, 68, 84, 0, 80, 87, 84, 0, 80, 80, 84, 0, 10, 80, 83, 84, 56, 80, 68, 84, 44, 77, 51,
        46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_SANTIAGO: &[u8] = &[
        84, 90, 105, 102, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 51,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        122, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 105, 135, 29, 197, 255, 255, 255, 255,
        143, 48, 71, 69, 255, 255, 255, 255, 155, 92, 229, 80, 255, 255, 255, 255, 159, 124, 226,
        197, 255, 255, 255, 255, 161, 0, 113, 192, 255, 255, 255, 255, 176, 94, 119, 197, 255, 255,
        255, 255, 177, 119, 61, 64, 255, 255, 255, 255, 178, 65, 0, 208, 255, 255, 255, 255, 179,
        88, 112, 192, 255, 255, 255, 255, 180, 34, 52, 80, 255, 255, 255, 255, 181, 57, 164, 64,
        255, 255, 255, 255, 182, 3, 103, 208, 255, 255, 255, 255, 183, 26, 215, 192, 255, 255, 255,
        255, 183, 228, 155, 80, 255, 255, 255, 255, 184, 253, 92, 192, 255, 255, 255, 255, 185,
        199, 32, 80, 255, 255, 255, 255, 204, 28, 110, 64, 255, 255, 255, 255, 204, 108, 231, 208,
        255, 255, 255, 255, 211, 220, 143, 192, 255, 255, 255, 255, 212, 27, 201, 176, 255, 255,
        255, 255, 213, 51, 85, 192, 255, 255, 255, 255, 213, 118, 146, 64, 255, 255, 255, 255, 253,
        209, 60, 64, 255, 255, 255, 255, 254, 146, 250, 176, 255, 255, 255, 255, 255, 204, 205,
        192, 0, 0, 0, 0, 0, 114, 220, 176, 0, 0, 0, 0, 1, 117, 80, 192, 0, 0, 0, 0, 2, 64, 73, 176,
        0, 0, 0, 0, 3, 85, 50, 192, 0, 0, 0, 0, 4, 32, 43, 176, 0, 0, 0, 0, 5, 62, 79, 64, 0, 0, 0,
        0, 6, 0, 13, 176, 0, 0, 0, 0, 7, 11, 188, 64, 0, 0, 0, 0, 7, 223, 239, 176, 0, 0, 0, 0, 8,
        254, 19, 64, 0, 0, 0, 0, 9, 191, 209, 176, 0, 0, 0, 0, 10, 221, 245, 64, 0, 0, 0, 0, 11,
        168, 238, 48, 0, 0, 0, 0, 12, 189, 215, 64, 0, 0, 0, 0, 13, 136, 208, 48, 0, 0, 0, 0, 14,
        157, 185, 64, 0, 0, 0, 0, 15, 104, 178, 48, 0, 0, 0, 0, 16, 134, 213, 192, 0, 0, 0, 0, 17,
        72, 148, 48, 0, 0, 0, 0, 18, 102, 183, 192, 0, 0, 0, 0, 19, 40, 118, 48, 0, 0, 0, 0, 20,
        70, 153, 192, 0, 0, 0, 0, 21, 17, 146, 176, 0, 0, 0, 0, 22, 38, 123, 192, 0, 0, 0, 0, 22,
        241, 116, 176, 0, 0, 0, 0, 24, 6, 93, 192, 0, 0, 0, 0, 24, 209, 86, 176, 0, 0, 0, 0, 25,
        230, 63, 192, 0, 0, 0, 0, 26, 177, 56, 176, 0, 0, 0, 0, 27, 207, 92, 64, 0, 0, 0, 0, 28,
        145, 26, 176, 0, 0, 0, 0, 29, 175, 62, 64, 0, 0, 0, 0, 30, 112, 252, 176, 0, 0, 0, 0, 31,
        143, 32, 64, 0, 0, 0, 0, 32, 127, 3, 48, 0, 0, 0, 0, 33, 111, 2, 64, 0, 0, 0, 0, 34, 57,
        251, 48, 0, 0, 0, 0, 35, 78, 228, 64, 0, 0, 0, 0, 36, 25, 221, 48, 0, 0, 0, 0, 37, 56, 0,
        192, 0, 0, 0, 0, 37, 249, 191, 48, 0, 0, 0, 0, 38, 242, 248, 192, 0, 0, 0, 0, 39, 217, 161,
        48, 0, 0, 0, 0, 40, 247, 196, 192, 0, 0, 0, 0, 41, 194, 189, 176, 0, 0, 0, 0, 42, 215, 166,
        192, 0, 0, 0, 0, 43, 162, 159, 176, 0, 0, 0, 0, 44, 183, 136, 192, 0, 0, 0, 0, 45, 130,
        129, 176, 0, 0, 0, 0, 46, 151, 106, 192, 0, 0, 0, 0, 47, 98, 99, 176, 0, 0, 0, 0, 48, 128,
        135, 64, 0, 0, 0, 0, 49, 66, 69, 176, 0, 0, 0, 0, 50, 96, 105, 64, 0, 0, 0, 0, 51, 61, 215,
        48, 0, 0, 0, 0, 52, 64, 75, 64, 0, 0, 0, 0, 53, 11, 68, 48, 0, 0, 0, 0, 54, 13, 184, 64, 0,
        0, 0, 0, 55, 6, 213, 176, 0, 0, 0, 0, 56, 0, 15, 64, 0, 0, 0, 0, 56, 203, 8, 48, 0, 0, 0,
        0, 57, 233, 43, 192, 0, 0, 0, 0, 58, 170, 234, 48, 0, 0, 0, 0, 59, 201, 13, 192, 0, 0, 0,
        0, 60, 138, 204, 48, 0, 0, 0, 0, 61, 168, 239, 192, 0, 0, 0, 0, 62, 106, 174, 48, 0, 0, 0,
        0, 63, 136, 209, 192, 0, 0, 0, 0, 64, 83, 202, 176, 0, 0, 0, 0, 65, 104, 179, 192, 0, 0, 0,
        0, 66, 51, 172, 176, 0, 0, 0, 0, 67, 72, 149, 192, 0, 0, 0, 0, 68, 19, 142, 176, 0, 0, 0,
        0, 69, 49, 178, 64, 0, 0, 0, 0, 69, 243, 112, 176, 0, 0, 0, 0, 71, 17, 148, 64, 0, 0, 0, 0,
        71, 239, 2, 48, 0, 0, 0, 0, 72, 241, 118, 64, 0, 0, 0, 0, 73, 188, 111, 48, 0, 0, 0, 0, 74,
        209, 88, 64, 0, 0, 0, 0, 75, 184, 0, 176, 0, 0, 0, 0, 76, 177, 58, 64, 0, 0, 0, 0, 77, 198,
        7, 48, 0, 0, 0, 0, 78, 80, 130, 192, 0, 0, 0, 0, 79, 156, 174, 176, 0, 0, 0, 0, 80, 66,
        217, 192, 0, 0, 0, 0, 81, 124, 144, 176, 0, 0, 0, 0, 82, 43, 246, 64, 0, 0, 0, 0, 83, 92,
        114, 176, 0, 0, 0, 0, 84, 11, 216, 64, 0, 0, 0, 0, 87, 55, 230, 48, 0, 0, 0, 0, 87, 175,
        236, 192, 0, 0, 0, 0, 89, 23, 200, 48, 0, 0, 0, 0, 89, 143, 206, 192, 0, 0, 0, 0, 90, 247,
        170, 48, 0, 0, 0, 0, 91, 111, 176, 192, 0, 0, 0, 0, 92, 169, 103, 176, 1, 2, 1, 3, 1, 4, 2,
        4, 2, 4, 2, 4, 2, 4, 2, 3, 2, 3, 5, 3, 2, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
        3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
        3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
        3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 255, 255, 189,
        187, 0, 0, 255, 255, 189, 187, 0, 4, 255, 255, 185, 176, 0, 8, 255, 255, 199, 192, 0, 12,
        255, 255, 199, 192, 1, 12, 255, 255, 213, 208, 1, 16, 76, 77, 84, 0, 83, 77, 84, 0, 45, 48,
        53, 0, 45, 48, 52, 0, 45, 48, 51, 0, 10, 60, 45, 48, 52, 62, 52, 60, 45, 48, 51, 62, 44,
        77, 57, 46, 49, 46, 54, 47, 50, 52, 44, 77, 52, 46, 49, 46, 54, 47, 50, 52, 10,
    ];
    pub(crate) const AMERICA_SANTO_DOMINGO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        17, 0, 0, 0, 6, 0, 0, 0, 27, 255, 255, 255, 255, 105, 135, 29, 8, 255, 255, 255, 255, 186,
        223, 66, 96, 255, 255, 255, 255, 250, 8, 75, 208, 255, 255, 255, 255, 250, 167, 195, 64,
        255, 255, 255, 255, 255, 167, 241, 208, 0, 0, 0, 0, 0, 67, 123, 200, 0, 0, 0, 0, 1, 135,
        211, 208, 0, 0, 0, 0, 1, 250, 127, 72, 0, 0, 0, 0, 3, 112, 240, 80, 0, 0, 0, 0, 3, 221, 4,
        72, 0, 0, 0, 0, 5, 80, 210, 80, 0, 0, 0, 0, 5, 191, 137, 72, 0, 0, 0, 0, 7, 48, 180, 80, 0,
        0, 0, 0, 7, 160, 188, 200, 0, 0, 0, 0, 9, 16, 150, 80, 0, 0, 0, 0, 57, 251, 188, 224, 0, 0,
        0, 0, 58, 41, 225, 96, 1, 3, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 255, 255, 190,
        120, 0, 0, 255, 255, 190, 96, 0, 4, 255, 255, 199, 192, 1, 9, 255, 255, 185, 176, 0, 13,
        255, 255, 192, 184, 1, 17, 255, 255, 199, 192, 0, 23, 76, 77, 84, 0, 83, 68, 77, 84, 0, 69,
        68, 84, 0, 69, 83, 84, 0, 45, 48, 52, 51, 48, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_SAO_PAULO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        91, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 150, 170, 114, 180, 255, 255, 255, 255,
        184, 15, 73, 224, 255, 255, 255, 255, 184, 253, 64, 160, 255, 255, 255, 255, 185, 241, 52,
        48, 255, 255, 255, 255, 186, 222, 116, 32, 255, 255, 255, 255, 218, 56, 174, 48, 255, 255,
        255, 255, 218, 235, 250, 48, 255, 255, 255, 255, 220, 25, 225, 176, 255, 255, 255, 255,
        220, 185, 89, 32, 255, 255, 255, 255, 221, 251, 21, 48, 255, 255, 255, 255, 222, 155, 222,
        32, 255, 255, 255, 255, 223, 221, 154, 48, 255, 255, 255, 255, 224, 84, 51, 32, 255, 255,
        255, 255, 244, 90, 9, 48, 255, 255, 255, 255, 245, 5, 94, 32, 255, 255, 255, 255, 246, 192,
        100, 48, 255, 255, 255, 255, 247, 14, 30, 160, 255, 255, 255, 255, 248, 81, 44, 48, 255,
        255, 255, 255, 248, 199, 197, 32, 255, 255, 255, 255, 250, 10, 210, 176, 255, 255, 255,
        255, 250, 168, 248, 160, 255, 255, 255, 255, 251, 236, 6, 48, 255, 255, 255, 255, 252, 139,
        125, 160, 0, 0, 0, 0, 29, 201, 142, 48, 0, 0, 0, 0, 30, 120, 215, 160, 0, 0, 0, 0, 31, 160,
        53, 176, 0, 0, 0, 0, 32, 51, 207, 160, 0, 0, 0, 0, 33, 129, 105, 48, 0, 0, 0, 0, 34, 11,
        200, 160, 0, 0, 0, 0, 35, 88, 16, 176, 0, 0, 0, 0, 35, 226, 112, 32, 0, 0, 0, 0, 37, 55,
        242, 176, 0, 0, 0, 0, 37, 212, 199, 32, 0, 0, 0, 0, 39, 33, 15, 48, 0, 0, 0, 0, 39, 189,
        227, 160, 0, 0, 0, 0, 41, 0, 241, 48, 0, 0, 0, 0, 41, 148, 139, 32, 0, 0, 0, 0, 42, 234,
        13, 176, 0, 0, 0, 0, 43, 107, 50, 160, 0, 0, 0, 0, 44, 192, 181, 48, 0, 0, 0, 0, 45, 102,
        196, 32, 0, 0, 0, 0, 46, 160, 151, 48, 0, 0, 0, 0, 47, 70, 166, 32, 0, 0, 0, 0, 48, 128,
        121, 48, 0, 0, 0, 0, 49, 29, 77, 160, 0, 0, 0, 0, 50, 87, 32, 176, 0, 0, 0, 0, 51, 6, 106,
        32, 0, 0, 0, 0, 52, 56, 84, 48, 0, 0, 0, 0, 52, 248, 193, 32, 0, 0, 0, 0, 54, 32, 31, 48,
        0, 0, 0, 0, 54, 207, 104, 160, 0, 0, 0, 0, 55, 246, 198, 176, 0, 0, 0, 0, 56, 184, 133, 32,
        0, 0, 0, 0, 57, 223, 227, 48, 0, 0, 0, 0, 58, 143, 44, 160, 0, 0, 0, 0, 59, 200, 255, 176,
        0, 0, 0, 0, 60, 111, 14, 160, 0, 0, 0, 0, 61, 196, 145, 48, 0, 0, 0, 0, 62, 78, 240, 160,
        0, 0, 0, 0, 63, 145, 254, 48, 0, 0, 0, 0, 64, 46, 210, 160, 0, 0, 0, 0, 65, 134, 248, 48,
        0, 0, 0, 0, 66, 23, 239, 32, 0, 0, 0, 0, 67, 81, 194, 48, 0, 0, 0, 0, 67, 247, 209, 32, 0,
        0, 0, 0, 69, 77, 83, 176, 0, 0, 0, 0, 69, 224, 237, 160, 0, 0, 0, 0, 71, 17, 134, 48, 0, 0,
        0, 0, 71, 183, 149, 32, 0, 0, 0, 0, 72, 250, 162, 176, 0, 0, 0, 0, 73, 151, 119, 32, 0, 0,
        0, 0, 74, 218, 132, 176, 0, 0, 0, 0, 75, 128, 147, 160, 0, 0, 0, 0, 76, 186, 102, 176, 0,
        0, 0, 0, 77, 96, 117, 160, 0, 0, 0, 0, 78, 154, 72, 176, 0, 0, 0, 0, 79, 73, 146, 32, 0, 0,
        0, 0, 80, 131, 101, 48, 0, 0, 0, 0, 81, 32, 57, 160, 0, 0, 0, 0, 82, 99, 71, 48, 0, 0, 0,
        0, 83, 0, 27, 160, 0, 0, 0, 0, 84, 67, 41, 48, 0, 0, 0, 0, 84, 233, 56, 32, 0, 0, 0, 0, 86,
        35, 11, 48, 0, 0, 0, 0, 86, 201, 26, 32, 0, 0, 0, 0, 88, 2, 237, 48, 0, 0, 0, 0, 88, 168,
        252, 32, 0, 0, 0, 0, 89, 226, 207, 48, 0, 0, 0, 0, 90, 136, 222, 32, 0, 0, 0, 0, 91, 222,
        96, 176, 0, 0, 0, 0, 92, 104, 192, 32, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 255, 255, 212, 76, 0, 0, 255, 255, 227, 224, 1,
        4, 255, 255, 213, 208, 0, 8, 76, 77, 84, 0, 45, 48, 50, 0, 45, 48, 51, 0, 10, 60, 45, 48,
        51, 62, 51, 10,
    ];
    pub(crate) const AMERICA_SCORESBYSUND: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        34, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 155, 128, 76, 24, 0, 0, 0, 0, 19, 77, 110,
        64, 0, 0, 0, 0, 20, 52, 36, 192, 0, 0, 0, 0, 21, 35, 249, 160, 0, 0, 0, 0, 22, 19, 220,
        144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175,
        144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188,
        189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140,
        144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92,
        99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16,
        0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0,
        0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0,
        0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0,
        0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0,
        0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 2, 1, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 255, 255, 235, 104, 0,
        0, 255, 255, 227, 224, 0, 4, 255, 255, 241, 240, 1, 8, 255, 255, 241, 240, 0, 8, 0, 0, 0,
        0, 1, 12, 76, 77, 84, 0, 45, 48, 50, 0, 45, 48, 49, 0, 43, 48, 48, 0, 10, 60, 45, 48, 49,
        62, 49, 60, 43, 48, 48, 62, 44, 77, 51, 46, 53, 46, 48, 47, 48, 44, 77, 49, 48, 46, 53, 46,
        48, 47, 49, 10,
    ];
    pub(crate) const AMERICA_SITKA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        83, 0, 0, 0, 9, 0, 0, 0, 34, 255, 255, 255, 255, 63, 194, 253, 209, 255, 255, 255, 255,
        125, 135, 51, 153, 255, 255, 255, 255, 203, 137, 26, 160, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 97, 38, 16, 255, 255, 255, 255, 254, 184, 71, 32, 255, 255,
        255, 255, 255, 168, 42, 16, 0, 0, 0, 0, 0, 152, 41, 32, 0, 0, 0, 0, 1, 136, 12, 16, 0, 0,
        0, 0, 2, 120, 11, 32, 0, 0, 0, 0, 3, 113, 40, 144, 0, 0, 0, 0, 4, 97, 39, 160, 0, 0, 0, 0,
        5, 81, 10, 144, 0, 0, 0, 0, 6, 65, 9, 160, 0, 0, 0, 0, 7, 48, 236, 144, 0, 0, 0, 0, 7, 141,
        67, 160, 0, 0, 0, 0, 9, 16, 206, 144, 0, 0, 0, 0, 9, 173, 191, 32, 0, 0, 0, 0, 10, 240,
        176, 144, 0, 0, 0, 0, 11, 224, 175, 160, 0, 0, 0, 0, 12, 217, 205, 16, 0, 0, 0, 0, 13, 192,
        145, 160, 0, 0, 0, 0, 14, 185, 175, 16, 0, 0, 0, 0, 15, 169, 174, 32, 0, 0, 0, 0, 16, 153,
        145, 16, 0, 0, 0, 0, 17, 137, 144, 32, 0, 0, 0, 0, 18, 121, 115, 16, 0, 0, 0, 0, 19, 105,
        114, 32, 0, 0, 0, 0, 20, 89, 85, 16, 0, 0, 0, 0, 21, 73, 84, 32, 0, 0, 0, 0, 22, 57, 55,
        16, 0, 0, 0, 0, 23, 41, 54, 32, 0, 0, 0, 0, 24, 34, 83, 144, 0, 0, 0, 0, 25, 9, 24, 32, 0,
        0, 0, 0, 26, 2, 53, 144, 0, 0, 0, 0, 26, 43, 20, 16, 0, 0, 0, 0, 26, 242, 66, 176, 0, 0, 0,
        0, 27, 226, 37, 160, 0, 0, 0, 0, 28, 210, 36, 176, 0, 0, 0, 0, 29, 194, 7, 160, 0, 0, 0, 0,
        30, 178, 6, 176, 0, 0, 0, 0, 31, 161, 233, 160, 0, 0, 0, 0, 32, 118, 57, 48, 0, 0, 0, 0,
        33, 129, 203, 160, 0, 0, 0, 0, 34, 86, 27, 48, 0, 0, 0, 0, 35, 106, 232, 32, 0, 0, 0, 0,
        36, 53, 253, 48, 0, 0, 0, 0, 37, 74, 202, 32, 0, 0, 0, 0, 38, 21, 223, 48, 0, 0, 0, 0, 39,
        42, 172, 32, 0, 0, 0, 0, 39, 254, 251, 176, 0, 0, 0, 0, 41, 10, 142, 32, 0, 0, 0, 0, 41,
        222, 221, 176, 0, 0, 0, 0, 42, 234, 112, 32, 0, 0, 0, 0, 43, 190, 191, 176, 0, 0, 0, 0, 44,
        211, 140, 160, 0, 0, 0, 0, 45, 158, 161, 176, 0, 0, 0, 0, 46, 179, 110, 160, 0, 0, 0, 0,
        47, 126, 131, 176, 0, 0, 0, 0, 48, 147, 80, 160, 0, 0, 0, 0, 49, 103, 160, 48, 0, 0, 0, 0,
        50, 115, 50, 160, 0, 0, 0, 0, 51, 71, 130, 48, 0, 0, 0, 0, 52, 83, 20, 160, 0, 0, 0, 0, 53,
        39, 100, 48, 0, 0, 0, 0, 54, 50, 246, 160, 0, 0, 0, 0, 55, 7, 70, 48, 0, 0, 0, 0, 56, 28,
        19, 32, 0, 0, 0, 0, 56, 231, 40, 48, 0, 0, 0, 0, 57, 251, 245, 32, 0, 0, 0, 0, 58, 199, 10,
        48, 0, 0, 0, 0, 59, 219, 215, 32, 0, 0, 0, 0, 60, 176, 38, 176, 0, 0, 0, 0, 61, 187, 185,
        32, 0, 0, 0, 0, 62, 144, 8, 176, 0, 0, 0, 0, 63, 155, 155, 32, 0, 0, 0, 0, 64, 111, 234,
        176, 0, 0, 0, 0, 65, 132, 183, 160, 0, 0, 0, 0, 66, 79, 204, 176, 0, 0, 0, 0, 67, 100, 153,
        160, 0, 0, 0, 0, 68, 47, 174, 176, 0, 0, 0, 0, 69, 68, 123, 160, 0, 0, 0, 0, 69, 243, 225,
        48, 1, 2, 3, 4, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
        5, 2, 5, 2, 5, 6, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 0, 0, 210, 167, 0,
        0, 255, 255, 129, 39, 0, 0, 255, 255, 143, 128, 0, 4, 255, 255, 157, 144, 1, 8, 255, 255,
        157, 144, 1, 12, 255, 255, 157, 144, 1, 16, 255, 255, 129, 112, 0, 20, 255, 255, 143, 128,
        1, 24, 255, 255, 129, 112, 0, 29, 76, 77, 84, 0, 80, 83, 84, 0, 80, 87, 84, 0, 80, 80, 84,
        0, 80, 68, 84, 0, 89, 83, 84, 0, 65, 75, 68, 84, 0, 65, 75, 83, 84, 0, 10, 65, 75, 83, 84,
        57, 65, 75, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_ST_JOHNS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        187, 0, 0, 0, 8, 0, 0, 0, 25, 255, 255, 255, 255, 94, 61, 52, 236, 255, 255, 255, 255, 156,
        207, 98, 12, 255, 255, 255, 255, 157, 164, 230, 252, 255, 255, 255, 255, 158, 184, 126,
        140, 255, 255, 255, 255, 159, 186, 214, 124, 255, 255, 255, 255, 160, 182, 136, 220, 255,
        255, 255, 255, 161, 56, 255, 76, 255, 255, 255, 255, 162, 149, 25, 92, 255, 255, 255, 255,
        163, 132, 252, 76, 255, 255, 255, 255, 164, 116, 251, 92, 255, 255, 255, 255, 165, 100,
        222, 76, 255, 255, 255, 255, 166, 94, 23, 220, 255, 255, 255, 255, 167, 68, 192, 76, 255,
        255, 255, 255, 168, 61, 249, 220, 255, 255, 255, 255, 169, 36, 162, 76, 255, 255, 255, 255,
        170, 29, 219, 220, 255, 255, 255, 255, 171, 4, 132, 76, 255, 255, 255, 255, 171, 253, 189,
        220, 255, 255, 255, 255, 172, 228, 102, 76, 255, 255, 255, 255, 173, 221, 159, 220, 255,
        255, 255, 255, 174, 205, 130, 204, 255, 255, 255, 255, 175, 189, 129, 220, 255, 255, 255,
        255, 176, 173, 100, 204, 255, 255, 255, 255, 177, 166, 158, 92, 255, 255, 255, 255, 178,
        141, 70, 204, 255, 255, 255, 255, 179, 134, 128, 92, 255, 255, 255, 255, 180, 109, 40, 204,
        255, 255, 255, 255, 181, 102, 98, 92, 255, 255, 255, 255, 182, 77, 10, 204, 255, 255, 255,
        255, 183, 70, 68, 92, 255, 255, 255, 255, 184, 44, 236, 204, 255, 255, 255, 255, 185, 38,
        38, 92, 255, 255, 255, 255, 186, 22, 9, 76, 255, 255, 255, 255, 187, 15, 66, 220, 255, 255,
        255, 255, 187, 245, 235, 76, 255, 255, 255, 255, 188, 239, 36, 220, 255, 255, 255, 255,
        189, 213, 205, 76, 255, 255, 255, 255, 190, 158, 77, 108, 255, 255, 255, 255, 190, 207, 6,
        168, 255, 255, 255, 255, 191, 181, 175, 24, 255, 255, 255, 255, 192, 184, 49, 56, 255, 255,
        255, 255, 193, 121, 239, 168, 255, 255, 255, 255, 194, 152, 19, 56, 255, 255, 255, 255,
        195, 89, 209, 168, 255, 255, 255, 255, 196, 119, 245, 56, 255, 255, 255, 255, 197, 57, 179,
        168, 255, 255, 255, 255, 198, 97, 17, 184, 255, 255, 255, 255, 199, 25, 149, 168, 255, 255,
        255, 255, 200, 64, 243, 184, 255, 255, 255, 255, 201, 2, 178, 40, 255, 255, 255, 255, 202,
        32, 213, 184, 255, 255, 255, 255, 202, 226, 148, 40, 255, 255, 255, 255, 204, 0, 183, 184,
        255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 96, 230, 200, 255, 255,
        255, 255, 211, 136, 68, 216, 255, 255, 255, 255, 212, 74, 3, 72, 255, 255, 255, 255, 213,
        104, 38, 216, 255, 255, 255, 255, 214, 41, 229, 72, 255, 255, 255, 255, 215, 72, 8, 216,
        255, 255, 255, 255, 216, 9, 199, 72, 255, 255, 255, 255, 217, 39, 234, 216, 255, 255, 255,
        255, 217, 233, 169, 72, 255, 255, 255, 255, 219, 17, 7, 88, 255, 255, 255, 255, 219, 210,
        197, 200, 255, 255, 255, 255, 220, 222, 116, 88, 255, 255, 255, 255, 221, 169, 109, 72,
        255, 255, 255, 255, 222, 190, 86, 88, 255, 255, 255, 255, 223, 137, 79, 72, 255, 255, 255,
        255, 224, 158, 56, 88, 255, 255, 255, 255, 225, 105, 49, 72, 255, 255, 255, 255, 226, 126,
        26, 88, 255, 255, 255, 255, 227, 73, 19, 72, 255, 255, 255, 255, 228, 93, 252, 88, 255,
        255, 255, 255, 229, 40, 245, 72, 255, 255, 255, 255, 230, 71, 24, 216, 255, 255, 255, 255,
        231, 18, 17, 200, 255, 255, 255, 255, 232, 38, 250, 216, 255, 255, 255, 255, 232, 241, 243,
        200, 255, 255, 255, 255, 234, 6, 220, 216, 255, 255, 255, 255, 234, 209, 213, 200, 255,
        255, 255, 255, 235, 230, 190, 216, 255, 255, 255, 255, 236, 177, 183, 200, 255, 255, 255,
        255, 237, 198, 160, 216, 255, 255, 255, 255, 238, 191, 190, 72, 255, 255, 255, 255, 239,
        175, 189, 88, 255, 255, 255, 255, 240, 159, 160, 72, 255, 255, 255, 255, 241, 143, 159, 88,
        255, 255, 255, 255, 242, 127, 130, 72, 255, 255, 255, 255, 243, 111, 129, 88, 255, 255,
        255, 255, 244, 95, 100, 72, 255, 255, 255, 255, 245, 79, 99, 88, 255, 255, 255, 255, 246,
        63, 70, 72, 255, 255, 255, 255, 247, 47, 69, 88, 255, 255, 255, 255, 248, 40, 98, 200, 255,
        255, 255, 255, 249, 15, 39, 88, 255, 255, 255, 255, 250, 8, 68, 200, 255, 255, 255, 255,
        250, 248, 67, 216, 255, 255, 255, 255, 251, 232, 38, 200, 255, 255, 255, 255, 252, 216, 37,
        216, 255, 255, 255, 255, 253, 200, 8, 200, 255, 255, 255, 255, 254, 184, 7, 216, 255, 255,
        255, 255, 255, 167, 234, 200, 0, 0, 0, 0, 0, 151, 233, 216, 0, 0, 0, 0, 1, 135, 204, 200,
        0, 0, 0, 0, 2, 119, 203, 216, 0, 0, 0, 0, 3, 112, 233, 72, 0, 0, 0, 0, 4, 96, 232, 88, 0,
        0, 0, 0, 5, 80, 203, 72, 0, 0, 0, 0, 6, 64, 202, 88, 0, 0, 0, 0, 7, 48, 173, 72, 0, 0, 0,
        0, 8, 32, 172, 88, 0, 0, 0, 0, 9, 16, 143, 72, 0, 0, 0, 0, 10, 0, 142, 88, 0, 0, 0, 0, 10,
        240, 113, 72, 0, 0, 0, 0, 11, 224, 112, 88, 0, 0, 0, 0, 12, 217, 141, 200, 0, 0, 0, 0, 13,
        192, 82, 88, 0, 0, 0, 0, 14, 185, 111, 200, 0, 0, 0, 0, 15, 169, 110, 216, 0, 0, 0, 0, 16,
        153, 81, 200, 0, 0, 0, 0, 17, 137, 80, 216, 0, 0, 0, 0, 18, 121, 51, 200, 0, 0, 0, 0, 19,
        105, 50, 216, 0, 0, 0, 0, 20, 89, 21, 200, 0, 0, 0, 0, 21, 73, 20, 216, 0, 0, 0, 0, 22, 56,
        247, 200, 0, 0, 0, 0, 23, 40, 246, 216, 0, 0, 0, 0, 24, 34, 20, 72, 0, 0, 0, 0, 25, 8, 216,
        216, 0, 0, 0, 0, 26, 1, 246, 72, 0, 0, 0, 0, 26, 241, 245, 88, 0, 0, 0, 0, 27, 225, 216,
        72, 0, 0, 0, 0, 28, 209, 215, 88, 0, 0, 0, 0, 29, 193, 186, 72, 0, 0, 0, 0, 30, 177, 185,
        88, 0, 0, 0, 0, 31, 161, 156, 72, 0, 0, 0, 0, 32, 117, 207, 244, 0, 0, 0, 0, 33, 129, 98,
        100, 0, 0, 0, 0, 34, 85, 177, 244, 0, 0, 0, 0, 35, 106, 112, 212, 0, 0, 0, 0, 36, 53, 147,
        244, 0, 0, 0, 0, 37, 74, 96, 228, 0, 0, 0, 0, 38, 21, 117, 244, 0, 0, 0, 0, 39, 42, 66,
        228, 0, 0, 0, 0, 39, 254, 146, 116, 0, 0, 0, 0, 41, 10, 36, 228, 0, 0, 0, 0, 41, 222, 116,
        116, 0, 0, 0, 0, 42, 234, 6, 228, 0, 0, 0, 0, 43, 190, 86, 116, 0, 0, 0, 0, 44, 211, 35,
        100, 0, 0, 0, 0, 45, 158, 56, 116, 0, 0, 0, 0, 46, 179, 5, 100, 0, 0, 0, 0, 47, 126, 26,
        116, 0, 0, 0, 0, 48, 146, 231, 100, 0, 0, 0, 0, 49, 103, 54, 244, 0, 0, 0, 0, 50, 114, 201,
        100, 0, 0, 0, 0, 51, 71, 24, 244, 0, 0, 0, 0, 52, 82, 171, 100, 0, 0, 0, 0, 53, 38, 250,
        244, 0, 0, 0, 0, 54, 50, 141, 100, 0, 0, 0, 0, 55, 6, 220, 244, 0, 0, 0, 0, 56, 27, 169,
        228, 0, 0, 0, 0, 56, 230, 190, 244, 0, 0, 0, 0, 57, 251, 139, 228, 0, 0, 0, 0, 58, 198,
        160, 244, 0, 0, 0, 0, 59, 219, 109, 228, 0, 0, 0, 0, 60, 175, 189, 116, 0, 0, 0, 0, 61,
        187, 79, 228, 0, 0, 0, 0, 62, 143, 159, 116, 0, 0, 0, 0, 63, 155, 49, 228, 0, 0, 0, 0, 64,
        111, 129, 116, 0, 0, 0, 0, 65, 132, 78, 100, 0, 0, 0, 0, 66, 79, 99, 116, 0, 0, 0, 0, 67,
        100, 48, 100, 0, 0, 0, 0, 68, 47, 69, 116, 0, 0, 0, 0, 69, 68, 18, 100, 0, 0, 0, 0, 69,
        243, 119, 244, 0, 0, 0, 0, 71, 45, 46, 228, 0, 0, 0, 0, 71, 211, 89, 244, 0, 0, 0, 0, 73,
        13, 16, 228, 0, 0, 0, 0, 73, 179, 59, 244, 0, 0, 0, 0, 74, 236, 242, 228, 0, 0, 0, 0, 75,
        156, 88, 116, 0, 0, 0, 0, 76, 214, 15, 100, 0, 0, 0, 0, 77, 124, 58, 116, 0, 0, 0, 0, 78,
        182, 13, 72, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 6, 5, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 255, 255, 206, 148, 0, 0, 255, 255, 220, 164, 1, 4, 255,
        255, 206, 148, 0, 8, 255, 255, 220, 216, 1, 4, 255, 255, 206, 200, 0, 8, 255, 255, 220,
        216, 1, 12, 255, 255, 220, 216, 1, 16, 255, 255, 234, 232, 1, 20, 76, 77, 84, 0, 78, 68,
        84, 0, 78, 83, 84, 0, 78, 80, 84, 0, 78, 87, 84, 0, 78, 68, 68, 84, 0, 10, 78, 83, 84, 51,
        58, 51, 48, 78, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_ST_KITTS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 147, 55, 52, 204, 1, 255, 255, 197, 52, 0,
        0, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_ST_LUCIA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 105, 135, 20, 176, 255, 255, 255, 255, 146,
        230, 199, 176, 1, 2, 255, 255, 198, 208, 0, 0, 255, 255, 198, 208, 0, 4, 255, 255, 199,
        192, 0, 8, 76, 77, 84, 0, 67, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_ST_THOMAS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 244, 55, 96, 1, 255, 255, 195, 32, 0,
        0, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_ST_VINCENT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 105, 135, 20, 232, 255, 255, 255, 255, 146,
        230, 199, 232, 1, 2, 255, 255, 198, 152, 0, 0, 255, 255, 198, 152, 0, 4, 255, 255, 199,
        192, 0, 8, 76, 77, 84, 0, 75, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_SWIFT_CURRENT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        23, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 134, 253, 150, 24, 255, 255, 255, 255,
        158, 184, 175, 144, 255, 255, 255, 255, 159, 187, 7, 128, 255, 255, 255, 255, 203, 137, 12,
        144, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 24, 0, 255, 255,
        255, 255, 211, 118, 1, 16, 255, 255, 255, 255, 212, 83, 111, 0, 255, 255, 255, 255, 213,
        85, 227, 16, 255, 255, 255, 255, 214, 32, 220, 0, 255, 255, 255, 255, 215, 53, 197, 16,
        255, 255, 255, 255, 216, 0, 190, 0, 255, 255, 255, 255, 217, 21, 167, 16, 255, 255, 255,
        255, 217, 224, 160, 0, 255, 255, 255, 255, 232, 39, 44, 16, 255, 255, 255, 255, 233, 23,
        15, 0, 255, 255, 255, 255, 235, 230, 240, 16, 255, 255, 255, 255, 236, 214, 211, 0, 255,
        255, 255, 255, 237, 198, 210, 16, 255, 255, 255, 255, 238, 145, 203, 0, 255, 255, 255, 255,
        239, 175, 238, 144, 255, 255, 255, 255, 240, 113, 173, 0, 0, 0, 0, 0, 4, 97, 25, 144, 2, 1,
        2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 5, 255, 255, 154, 232, 0, 0,
        255, 255, 171, 160, 1, 4, 255, 255, 157, 144, 0, 8, 255, 255, 171, 160, 1, 12, 255, 255,
        171, 160, 1, 16, 255, 255, 171, 160, 0, 20, 76, 77, 84, 0, 77, 68, 84, 0, 77, 83, 84, 0,
        77, 87, 84, 0, 77, 80, 84, 0, 67, 83, 84, 0, 10, 67, 83, 84, 54, 10,
    ];
    pub(crate) const AMERICA_TEGUCIGALPA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 164, 76, 75, 68, 0, 0, 0, 0, 32, 154, 220,
        224, 0, 0, 0, 0, 33, 92, 155, 80, 0, 0, 0, 0, 34, 122, 190, 224, 0, 0, 0, 0, 35, 60, 125,
        80, 0, 0, 0, 0, 68, 93, 140, 224, 0, 0, 0, 0, 68, 214, 200, 208, 2, 1, 2, 1, 2, 1, 2, 255,
        255, 174, 60, 0, 0, 255, 255, 185, 176, 1, 4, 255, 255, 171, 160, 0, 8, 76, 77, 84, 0, 67,
        68, 84, 0, 67, 83, 84, 0, 10, 67, 83, 84, 54, 10,
    ];
    pub(crate) const AMERICA_THULE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        34, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 155, 128, 119, 252, 0, 0, 0, 0, 39, 245,
        122, 224, 0, 0, 0, 0, 40, 229, 93, 208, 0, 0, 0, 0, 41, 213, 92, 224, 0, 0, 0, 0, 42, 197,
        63, 208, 0, 0, 0, 0, 43, 190, 121, 96, 0, 0, 0, 0, 44, 211, 70, 80, 0, 0, 0, 0, 45, 158,
        91, 96, 0, 0, 0, 0, 46, 179, 40, 80, 0, 0, 0, 0, 47, 126, 61, 96, 0, 0, 0, 0, 48, 147, 10,
        80, 0, 0, 0, 0, 49, 103, 89, 224, 0, 0, 0, 0, 50, 114, 236, 80, 0, 0, 0, 0, 51, 71, 59,
        224, 0, 0, 0, 0, 52, 82, 206, 80, 0, 0, 0, 0, 53, 39, 29, 224, 0, 0, 0, 0, 54, 50, 176, 80,
        0, 0, 0, 0, 55, 6, 255, 224, 0, 0, 0, 0, 56, 27, 204, 208, 0, 0, 0, 0, 56, 230, 225, 224,
        0, 0, 0, 0, 57, 251, 174, 208, 0, 0, 0, 0, 58, 198, 195, 224, 0, 0, 0, 0, 59, 219, 144,
        208, 0, 0, 0, 0, 60, 175, 224, 96, 0, 0, 0, 0, 61, 187, 114, 208, 0, 0, 0, 0, 62, 143, 194,
        96, 0, 0, 0, 0, 63, 155, 84, 208, 0, 0, 0, 0, 64, 111, 164, 96, 0, 0, 0, 0, 65, 132, 113,
        80, 0, 0, 0, 0, 66, 79, 134, 96, 0, 0, 0, 0, 67, 100, 83, 80, 0, 0, 0, 0, 68, 47, 104, 96,
        0, 0, 0, 0, 69, 68, 53, 80, 0, 0, 0, 0, 69, 243, 154, 224, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255, 191, 132, 0,
        0, 255, 255, 213, 208, 1, 4, 255, 255, 199, 192, 0, 8, 76, 77, 84, 0, 65, 68, 84, 0, 65,
        83, 84, 0, 10, 65, 83, 84, 52, 65, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46,
        49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_THUNDER_BAY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        78, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 114, 238, 130, 44, 255, 255, 255, 255,
        143, 36, 123, 224, 255, 255, 255, 255, 203, 136, 240, 112, 255, 255, 255, 255, 210, 35,
        244, 112, 255, 255, 255, 255, 210, 96, 251, 224, 0, 0, 0, 0, 0, 151, 254, 240, 0, 0, 0, 0,
        1, 135, 225, 224, 0, 0, 0, 0, 2, 119, 224, 240, 0, 0, 0, 0, 3, 112, 254, 96, 0, 0, 0, 0, 4,
        96, 253, 112, 0, 0, 0, 0, 5, 80, 224, 96, 0, 0, 0, 0, 8, 32, 193, 112, 0, 0, 0, 0, 9, 16,
        164, 96, 0, 0, 0, 0, 10, 0, 163, 112, 0, 0, 0, 0, 10, 240, 134, 96, 0, 0, 0, 0, 11, 224,
        133, 112, 0, 0, 0, 0, 12, 217, 162, 224, 0, 0, 0, 0, 13, 192, 103, 112, 0, 0, 0, 0, 14,
        185, 132, 224, 0, 0, 0, 0, 15, 169, 131, 240, 0, 0, 0, 0, 16, 153, 102, 224, 0, 0, 0, 0,
        17, 137, 101, 240, 0, 0, 0, 0, 18, 121, 72, 224, 0, 0, 0, 0, 19, 105, 71, 240, 0, 0, 0, 0,
        20, 89, 42, 224, 0, 0, 0, 0, 21, 73, 41, 240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0, 0, 0, 23,
        41, 11, 240, 0, 0, 0, 0, 24, 34, 41, 96, 0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0, 26, 2,
        11, 96, 0, 0, 0, 0, 26, 242, 10, 112, 0, 0, 0, 0, 27, 225, 237, 96, 0, 0, 0, 0, 28, 209,
        236, 112, 0, 0, 0, 0, 29, 193, 207, 96, 0, 0, 0, 0, 30, 177, 206, 112, 0, 0, 0, 0, 31, 161,
        177, 96, 0, 0, 0, 0, 32, 118, 0, 240, 0, 0, 0, 0, 33, 129, 147, 96, 0, 0, 0, 0, 34, 85,
        226, 240, 0, 0, 0, 0, 35, 106, 175, 224, 0, 0, 0, 0, 36, 53, 196, 240, 0, 0, 0, 0, 37, 74,
        145, 224, 0, 0, 0, 0, 38, 21, 166, 240, 0, 0, 0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39, 254,
        195, 112, 0, 0, 0, 0, 41, 10, 85, 224, 0, 0, 0, 0, 41, 222, 165, 112, 0, 0, 0, 0, 42, 234,
        55, 224, 0, 0, 0, 0, 43, 190, 135, 112, 0, 0, 0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45, 158,
        105, 112, 0, 0, 0, 0, 46, 179, 54, 96, 0, 0, 0, 0, 47, 126, 75, 112, 0, 0, 0, 0, 48, 147,
        24, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0, 0, 0, 0, 51, 71,
        73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0, 0, 0, 54, 50, 190,
        96, 0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56, 27, 218, 224, 0, 0, 0, 0, 56, 230, 239,
        240, 0, 0, 0, 0, 57, 251, 188, 224, 0, 0, 0, 0, 58, 198, 209, 240, 0, 0, 0, 0, 59, 219,
        158, 224, 0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0, 61, 187, 128, 224, 0, 0, 0, 0, 62,
        143, 208, 112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112, 0, 0, 0, 0, 65,
        132, 127, 96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0, 0, 0, 0, 68,
        47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 1, 2, 3, 4, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 255, 255, 172, 84, 0, 0, 255, 255, 171, 160, 0, 4, 255,
        255, 185, 176, 0, 8, 255, 255, 199, 192, 1, 12, 255, 255, 199, 192, 1, 16, 255, 255, 199,
        192, 1, 20, 76, 77, 84, 0, 67, 83, 84, 0, 69, 83, 84, 0, 69, 87, 84, 0, 69, 80, 84, 0, 69,
        68, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46,
        49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_TORONTO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        172, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 114, 238, 120, 236, 255, 255, 255, 255,
        158, 184, 147, 112, 255, 255, 255, 255, 159, 186, 235, 96, 255, 255, 255, 255, 160, 135,
        46, 200, 255, 255, 255, 255, 161, 154, 177, 64, 255, 255, 255, 255, 162, 148, 6, 240, 255,
        255, 255, 255, 163, 85, 169, 64, 255, 255, 255, 255, 164, 134, 93, 240, 255, 255, 255, 255,
        165, 40, 120, 96, 255, 255, 255, 255, 166, 102, 63, 240, 255, 255, 255, 255, 167, 12, 78,
        224, 255, 255, 255, 255, 168, 70, 33, 240, 255, 255, 255, 255, 168, 236, 48, 224, 255, 255,
        255, 255, 170, 28, 201, 112, 255, 255, 255, 255, 170, 213, 77, 96, 255, 255, 255, 255, 171,
        252, 171, 112, 255, 255, 255, 255, 172, 181, 47, 96, 255, 255, 255, 255, 173, 220, 141,
        112, 255, 255, 255, 255, 174, 149, 17, 96, 255, 255, 255, 255, 175, 188, 111, 112, 255,
        255, 255, 255, 176, 126, 45, 224, 255, 255, 255, 255, 177, 156, 81, 112, 255, 255, 255,
        255, 178, 103, 74, 96, 255, 255, 255, 255, 179, 124, 51, 112, 255, 255, 255, 255, 180, 71,
        44, 96, 255, 255, 255, 255, 181, 92, 21, 112, 255, 255, 255, 255, 182, 39, 14, 96, 255,
        255, 255, 255, 183, 59, 247, 112, 255, 255, 255, 255, 184, 6, 240, 96, 255, 255, 255, 255,
        185, 37, 19, 240, 255, 255, 255, 255, 185, 230, 210, 96, 255, 255, 255, 255, 187, 4, 245,
        240, 255, 255, 255, 255, 187, 207, 238, 224, 255, 255, 255, 255, 188, 228, 215, 240, 255,
        255, 255, 255, 189, 175, 208, 224, 255, 255, 255, 255, 190, 196, 185, 240, 255, 255, 255,
        255, 191, 143, 178, 224, 255, 255, 255, 255, 192, 164, 155, 240, 255, 255, 255, 255, 193,
        111, 148, 224, 255, 255, 255, 255, 194, 132, 125, 240, 255, 255, 255, 255, 195, 79, 118,
        224, 255, 255, 255, 255, 196, 100, 95, 240, 255, 255, 255, 255, 197, 47, 88, 224, 255, 255,
        255, 255, 198, 77, 124, 112, 255, 255, 255, 255, 199, 15, 58, 224, 255, 255, 255, 255, 200,
        45, 94, 112, 255, 255, 255, 255, 203, 136, 240, 112, 255, 255, 255, 255, 210, 35, 244, 112,
        255, 255, 255, 255, 210, 96, 251, 224, 255, 255, 255, 255, 211, 117, 228, 240, 255, 255,
        255, 255, 212, 64, 221, 224, 255, 255, 255, 255, 213, 85, 170, 208, 255, 255, 255, 255,
        214, 32, 163, 192, 255, 255, 255, 255, 215, 53, 140, 208, 255, 255, 255, 255, 216, 0, 133,
        192, 255, 255, 255, 255, 217, 21, 110, 208, 255, 255, 255, 255, 218, 51, 118, 64, 255, 255,
        255, 255, 218, 254, 167, 112, 255, 255, 255, 255, 220, 19, 116, 96, 255, 255, 255, 255,
        220, 222, 137, 112, 255, 255, 255, 255, 221, 169, 130, 96, 255, 255, 255, 255, 222, 190,
        107, 112, 255, 255, 255, 255, 223, 137, 100, 96, 255, 255, 255, 255, 224, 158, 77, 112,
        255, 255, 255, 255, 225, 105, 70, 96, 255, 255, 255, 255, 226, 126, 47, 112, 255, 255, 255,
        255, 227, 73, 40, 96, 255, 255, 255, 255, 228, 94, 17, 112, 255, 255, 255, 255, 229, 41,
        10, 96, 255, 255, 255, 255, 230, 71, 45, 240, 255, 255, 255, 255, 231, 18, 38, 224, 255,
        255, 255, 255, 232, 39, 15, 240, 255, 255, 255, 255, 233, 22, 242, 224, 255, 255, 255, 255,
        234, 6, 241, 240, 255, 255, 255, 255, 234, 246, 212, 224, 255, 255, 255, 255, 235, 230,
        211, 240, 255, 255, 255, 255, 236, 214, 182, 224, 255, 255, 255, 255, 237, 198, 181, 240,
        255, 255, 255, 255, 238, 191, 211, 96, 255, 255, 255, 255, 239, 175, 210, 112, 255, 255,
        255, 255, 240, 159, 181, 96, 255, 255, 255, 255, 241, 143, 180, 112, 255, 255, 255, 255,
        242, 127, 151, 96, 255, 255, 255, 255, 243, 111, 150, 112, 255, 255, 255, 255, 244, 95,
        121, 96, 255, 255, 255, 255, 245, 79, 120, 112, 255, 255, 255, 255, 246, 63, 91, 96, 255,
        255, 255, 255, 247, 47, 90, 112, 255, 255, 255, 255, 248, 40, 119, 224, 255, 255, 255, 255,
        249, 15, 60, 112, 255, 255, 255, 255, 250, 8, 89, 224, 255, 255, 255, 255, 250, 248, 88,
        240, 255, 255, 255, 255, 251, 232, 59, 224, 255, 255, 255, 255, 252, 216, 58, 240, 255,
        255, 255, 255, 253, 200, 29, 224, 255, 255, 255, 255, 254, 184, 28, 240, 255, 255, 255,
        255, 255, 167, 255, 224, 0, 0, 0, 0, 0, 151, 254, 240, 0, 0, 0, 0, 1, 135, 225, 224, 0, 0,
        0, 0, 2, 119, 224, 240, 0, 0, 0, 0, 3, 112, 254, 96, 0, 0, 0, 0, 4, 96, 253, 112, 0, 0, 0,
        0, 5, 80, 224, 96, 0, 0, 0, 0, 6, 64, 223, 112, 0, 0, 0, 0, 7, 48, 194, 96, 0, 0, 0, 0, 8,
        32, 193, 112, 0, 0, 0, 0, 9, 16, 164, 96, 0, 0, 0, 0, 10, 0, 163, 112, 0, 0, 0, 0, 10, 240,
        134, 96, 0, 0, 0, 0, 11, 224, 133, 112, 0, 0, 0, 0, 12, 217, 162, 224, 0, 0, 0, 0, 13, 192,
        103, 112, 0, 0, 0, 0, 14, 185, 132, 224, 0, 0, 0, 0, 15, 169, 131, 240, 0, 0, 0, 0, 16,
        153, 102, 224, 0, 0, 0, 0, 17, 137, 101, 240, 0, 0, 0, 0, 18, 121, 72, 224, 0, 0, 0, 0, 19,
        105, 71, 240, 0, 0, 0, 0, 20, 89, 42, 224, 0, 0, 0, 0, 21, 73, 41, 240, 0, 0, 0, 0, 22, 57,
        12, 224, 0, 0, 0, 0, 23, 41, 11, 240, 0, 0, 0, 0, 24, 34, 41, 96, 0, 0, 0, 0, 25, 8, 237,
        240, 0, 0, 0, 0, 26, 2, 11, 96, 0, 0, 0, 0, 26, 242, 10, 112, 0, 0, 0, 0, 27, 225, 237, 96,
        0, 0, 0, 0, 28, 209, 236, 112, 0, 0, 0, 0, 29, 193, 207, 96, 0, 0, 0, 0, 30, 177, 206, 112,
        0, 0, 0, 0, 31, 161, 177, 96, 0, 0, 0, 0, 32, 118, 0, 240, 0, 0, 0, 0, 33, 129, 147, 96, 0,
        0, 0, 0, 34, 85, 226, 240, 0, 0, 0, 0, 35, 106, 175, 224, 0, 0, 0, 0, 36, 53, 196, 240, 0,
        0, 0, 0, 37, 74, 145, 224, 0, 0, 0, 0, 38, 21, 166, 240, 0, 0, 0, 0, 39, 42, 115, 224, 0,
        0, 0, 0, 39, 254, 195, 112, 0, 0, 0, 0, 41, 10, 85, 224, 0, 0, 0, 0, 41, 222, 165, 112, 0,
        0, 0, 0, 42, 234, 55, 224, 0, 0, 0, 0, 43, 190, 135, 112, 0, 0, 0, 0, 44, 211, 84, 96, 0,
        0, 0, 0, 45, 158, 105, 112, 0, 0, 0, 0, 46, 179, 54, 96, 0, 0, 0, 0, 47, 126, 75, 112, 0,
        0, 0, 0, 48, 147, 24, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0,
        0, 0, 0, 51, 71, 73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0,
        0, 0, 54, 50, 190, 96, 0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56, 27, 218, 224, 0, 0, 0,
        0, 56, 230, 239, 240, 0, 0, 0, 0, 57, 251, 188, 224, 0, 0, 0, 0, 58, 198, 209, 240, 0, 0,
        0, 0, 59, 219, 158, 224, 0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0, 61, 187, 128, 224, 0,
        0, 0, 0, 62, 143, 208, 112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112, 0,
        0, 0, 0, 65, 132, 127, 96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0, 0,
        0, 0, 68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255, 181, 148, 0, 0, 255,
        255, 199, 192, 1, 4, 255, 255, 185, 176, 0, 8, 255, 255, 199, 192, 1, 12, 255, 255, 199,
        192, 1, 16, 76, 77, 84, 0, 69, 68, 84, 0, 69, 83, 84, 0, 69, 87, 84, 0, 69, 80, 84, 0, 10,
        69, 83, 84, 53, 69, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_TORTOLA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 244, 55, 20, 1, 255, 255, 195, 108, 0,
        0, 255, 255, 199, 192, 0, 4, 76, 77, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52, 10,
    ];
    pub(crate) const AMERICA_VANCOUVER: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        129, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 94, 61, 118, 236, 255, 255, 255, 255,
        158, 184, 189, 160, 255, 255, 255, 255, 159, 187, 21, 144, 255, 255, 255, 255, 203, 137,
        26, 160, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 38, 16, 255,
        255, 255, 255, 211, 118, 15, 32, 255, 255, 255, 255, 212, 65, 8, 16, 255, 255, 255, 255,
        213, 85, 241, 32, 255, 255, 255, 255, 214, 32, 234, 16, 255, 255, 255, 255, 215, 53, 211,
        32, 255, 255, 255, 255, 216, 0, 204, 16, 255, 255, 255, 255, 217, 21, 181, 32, 255, 255,
        255, 255, 217, 224, 174, 16, 255, 255, 255, 255, 218, 254, 209, 160, 255, 255, 255, 255,
        219, 192, 144, 16, 255, 255, 255, 255, 220, 222, 179, 160, 255, 255, 255, 255, 221, 169,
        172, 144, 255, 255, 255, 255, 222, 190, 149, 160, 255, 255, 255, 255, 223, 137, 142, 144,
        255, 255, 255, 255, 224, 158, 119, 160, 255, 255, 255, 255, 225, 105, 112, 144, 255, 255,
        255, 255, 226, 126, 89, 160, 255, 255, 255, 255, 227, 73, 82, 144, 255, 255, 255, 255, 228,
        94, 59, 160, 255, 255, 255, 255, 229, 41, 52, 144, 255, 255, 255, 255, 230, 71, 88, 32,
        255, 255, 255, 255, 231, 18, 81, 16, 255, 255, 255, 255, 232, 39, 58, 32, 255, 255, 255,
        255, 232, 242, 51, 16, 255, 255, 255, 255, 234, 7, 28, 32, 255, 255, 255, 255, 234, 210,
        21, 16, 255, 255, 255, 255, 235, 230, 254, 32, 255, 255, 255, 255, 236, 177, 247, 16, 255,
        255, 255, 255, 237, 198, 224, 32, 255, 255, 255, 255, 238, 145, 217, 16, 255, 255, 255,
        255, 239, 175, 252, 160, 255, 255, 255, 255, 240, 113, 187, 16, 255, 255, 255, 255, 241,
        143, 222, 160, 255, 255, 255, 255, 242, 127, 193, 144, 255, 255, 255, 255, 243, 111, 192,
        160, 255, 255, 255, 255, 244, 95, 163, 144, 255, 255, 255, 255, 245, 79, 162, 160, 255,
        255, 255, 255, 246, 63, 133, 144, 255, 255, 255, 255, 247, 47, 132, 160, 255, 255, 255,
        255, 248, 40, 162, 16, 255, 255, 255, 255, 249, 15, 102, 160, 255, 255, 255, 255, 250, 8,
        132, 16, 255, 255, 255, 255, 250, 248, 131, 32, 255, 255, 255, 255, 251, 232, 102, 16, 255,
        255, 255, 255, 252, 216, 101, 32, 255, 255, 255, 255, 253, 200, 72, 16, 255, 255, 255, 255,
        254, 184, 71, 32, 255, 255, 255, 255, 255, 168, 42, 16, 0, 0, 0, 0, 0, 152, 41, 32, 0, 0,
        0, 0, 1, 136, 12, 16, 0, 0, 0, 0, 2, 120, 11, 32, 0, 0, 0, 0, 3, 113, 40, 144, 0, 0, 0, 0,
        4, 97, 39, 160, 0, 0, 0, 0, 5, 81, 10, 144, 0, 0, 0, 0, 6, 65, 9, 160, 0, 0, 0, 0, 7, 48,
        236, 144, 0, 0, 0, 0, 8, 32, 235, 160, 0, 0, 0, 0, 9, 16, 206, 144, 0, 0, 0, 0, 10, 0, 205,
        160, 0, 0, 0, 0, 10, 240, 176, 144, 0, 0, 0, 0, 11, 224, 175, 160, 0, 0, 0, 0, 12, 217,
        205, 16, 0, 0, 0, 0, 13, 192, 145, 160, 0, 0, 0, 0, 14, 185, 175, 16, 0, 0, 0, 0, 15, 169,
        174, 32, 0, 0, 0, 0, 16, 153, 145, 16, 0, 0, 0, 0, 17, 137, 144, 32, 0, 0, 0, 0, 18, 121,
        115, 16, 0, 0, 0, 0, 19, 105, 114, 32, 0, 0, 0, 0, 20, 89, 85, 16, 0, 0, 0, 0, 21, 73, 84,
        32, 0, 0, 0, 0, 22, 57, 55, 16, 0, 0, 0, 0, 23, 41, 54, 32, 0, 0, 0, 0, 24, 34, 83, 144, 0,
        0, 0, 0, 25, 9, 24, 32, 0, 0, 0, 0, 26, 2, 53, 144, 0, 0, 0, 0, 26, 242, 52, 160, 0, 0, 0,
        0, 27, 226, 23, 144, 0, 0, 0, 0, 28, 210, 22, 160, 0, 0, 0, 0, 29, 193, 249, 144, 0, 0, 0,
        0, 30, 177, 248, 160, 0, 0, 0, 0, 31, 161, 219, 144, 0, 0, 0, 0, 32, 118, 43, 32, 0, 0, 0,
        0, 33, 129, 189, 144, 0, 0, 0, 0, 34, 86, 13, 32, 0, 0, 0, 0, 35, 106, 218, 16, 0, 0, 0, 0,
        36, 53, 239, 32, 0, 0, 0, 0, 37, 74, 188, 16, 0, 0, 0, 0, 38, 21, 209, 32, 0, 0, 0, 0, 39,
        42, 158, 16, 0, 0, 0, 0, 39, 254, 237, 160, 0, 0, 0, 0, 41, 10, 128, 16, 0, 0, 0, 0, 41,
        222, 207, 160, 0, 0, 0, 0, 42, 234, 98, 16, 0, 0, 0, 0, 43, 190, 177, 160, 0, 0, 0, 0, 44,
        211, 126, 144, 0, 0, 0, 0, 45, 158, 147, 160, 0, 0, 0, 0, 46, 179, 96, 144, 0, 0, 0, 0, 47,
        126, 117, 160, 0, 0, 0, 0, 48, 147, 66, 144, 0, 0, 0, 0, 49, 103, 146, 32, 0, 0, 0, 0, 50,
        115, 36, 144, 0, 0, 0, 0, 51, 71, 116, 32, 0, 0, 0, 0, 52, 83, 6, 144, 0, 0, 0, 0, 53, 39,
        86, 32, 0, 0, 0, 0, 54, 50, 232, 144, 0, 0, 0, 0, 55, 7, 56, 32, 0, 0, 0, 0, 56, 28, 5, 16,
        0, 0, 0, 0, 56, 231, 26, 32, 0, 0, 0, 0, 57, 251, 231, 16, 0, 0, 0, 0, 58, 198, 252, 32, 0,
        0, 0, 0, 59, 219, 201, 16, 0, 0, 0, 0, 60, 176, 24, 160, 0, 0, 0, 0, 61, 187, 171, 16, 0,
        0, 0, 0, 62, 143, 250, 160, 0, 0, 0, 0, 63, 155, 141, 16, 0, 0, 0, 0, 64, 111, 220, 160, 0,
        0, 0, 0, 65, 132, 169, 144, 0, 0, 0, 0, 66, 79, 190, 160, 0, 0, 0, 0, 67, 100, 139, 144, 0,
        0, 0, 0, 68, 47, 160, 160, 0, 0, 0, 0, 69, 68, 109, 144, 0, 0, 0, 0, 69, 243, 211, 32, 2,
        1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 255, 255, 140, 148, 0, 0, 255, 255, 157, 144, 1, 4, 255, 255, 143,
        128, 0, 8, 255, 255, 157, 144, 1, 12, 255, 255, 157, 144, 1, 16, 76, 77, 84, 0, 80, 68, 84,
        0, 80, 83, 84, 0, 80, 87, 84, 0, 80, 80, 84, 0, 10, 80, 83, 84, 56, 80, 68, 84, 44, 77, 51,
        46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_WHITEHORSE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        93, 0, 0, 0, 9, 0, 0, 0, 37, 255, 255, 255, 255, 125, 134, 138, 156, 255, 255, 255, 255,
        158, 184, 203, 176, 255, 255, 255, 255, 159, 187, 35, 160, 255, 255, 255, 255, 160, 208,
        12, 176, 255, 255, 255, 255, 161, 162, 210, 128, 255, 255, 255, 255, 203, 137, 40, 176,
        255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 52, 32, 255, 255, 255,
        255, 247, 47, 118, 144, 255, 255, 255, 255, 248, 40, 162, 16, 255, 255, 255, 255, 251, 29,
        95, 16, 0, 0, 0, 0, 19, 105, 114, 32, 0, 0, 0, 0, 20, 89, 85, 16, 0, 0, 0, 0, 21, 73, 84,
        32, 0, 0, 0, 0, 22, 57, 55, 16, 0, 0, 0, 0, 23, 41, 54, 32, 0, 0, 0, 0, 24, 34, 83, 144, 0,
        0, 0, 0, 25, 9, 24, 32, 0, 0, 0, 0, 26, 2, 53, 144, 0, 0, 0, 0, 26, 242, 52, 160, 0, 0, 0,
        0, 27, 226, 23, 144, 0, 0, 0, 0, 28, 210, 22, 160, 0, 0, 0, 0, 29, 193, 249, 144, 0, 0, 0,
        0, 30, 177, 248, 160, 0, 0, 0, 0, 31, 161, 219, 144, 0, 0, 0, 0, 32, 118, 43, 32, 0, 0, 0,
        0, 33, 129, 189, 144, 0, 0, 0, 0, 34, 86, 13, 32, 0, 0, 0, 0, 35, 106, 218, 16, 0, 0, 0, 0,
        36, 53, 239, 32, 0, 0, 0, 0, 37, 74, 188, 16, 0, 0, 0, 0, 38, 21, 209, 32, 0, 0, 0, 0, 39,
        42, 158, 16, 0, 0, 0, 0, 39, 254, 237, 160, 0, 0, 0, 0, 41, 10, 128, 16, 0, 0, 0, 0, 41,
        222, 207, 160, 0, 0, 0, 0, 42, 234, 98, 16, 0, 0, 0, 0, 43, 190, 177, 160, 0, 0, 0, 0, 44,
        211, 126, 144, 0, 0, 0, 0, 45, 158, 147, 160, 0, 0, 0, 0, 46, 179, 96, 144, 0, 0, 0, 0, 47,
        126, 117, 160, 0, 0, 0, 0, 48, 147, 66, 144, 0, 0, 0, 0, 49, 103, 146, 32, 0, 0, 0, 0, 50,
        115, 36, 144, 0, 0, 0, 0, 51, 71, 116, 32, 0, 0, 0, 0, 52, 83, 6, 144, 0, 0, 0, 0, 53, 39,
        86, 32, 0, 0, 0, 0, 54, 50, 232, 144, 0, 0, 0, 0, 55, 7, 56, 32, 0, 0, 0, 0, 56, 28, 5, 16,
        0, 0, 0, 0, 56, 231, 26, 32, 0, 0, 0, 0, 57, 251, 231, 16, 0, 0, 0, 0, 58, 198, 252, 32, 0,
        0, 0, 0, 59, 219, 201, 16, 0, 0, 0, 0, 60, 176, 24, 160, 0, 0, 0, 0, 61, 187, 171, 16, 0,
        0, 0, 0, 62, 143, 250, 160, 0, 0, 0, 0, 63, 155, 141, 16, 0, 0, 0, 0, 64, 111, 220, 160, 0,
        0, 0, 0, 65, 132, 169, 144, 0, 0, 0, 0, 66, 79, 190, 160, 0, 0, 0, 0, 67, 100, 139, 144, 0,
        0, 0, 0, 68, 47, 160, 160, 0, 0, 0, 0, 69, 68, 109, 144, 0, 0, 0, 0, 69, 243, 211, 32, 0,
        0, 0, 0, 71, 45, 138, 16, 0, 0, 0, 0, 71, 211, 181, 32, 0, 0, 0, 0, 73, 13, 108, 16, 0, 0,
        0, 0, 73, 179, 151, 32, 0, 0, 0, 0, 74, 237, 78, 16, 0, 0, 0, 0, 75, 156, 179, 160, 0, 0,
        0, 0, 76, 214, 106, 144, 0, 0, 0, 0, 77, 124, 149, 160, 0, 0, 0, 0, 78, 182, 76, 144, 0, 0,
        0, 0, 79, 92, 119, 160, 0, 0, 0, 0, 80, 150, 46, 144, 0, 0, 0, 0, 81, 60, 89, 160, 0, 0, 0,
        0, 82, 118, 16, 144, 0, 0, 0, 0, 83, 28, 59, 160, 0, 0, 0, 0, 84, 85, 242, 144, 0, 0, 0, 0,
        84, 252, 29, 160, 0, 0, 0, 0, 86, 53, 212, 144, 0, 0, 0, 0, 86, 229, 58, 32, 0, 0, 0, 0,
        88, 30, 241, 16, 0, 0, 0, 0, 88, 197, 28, 32, 0, 0, 0, 0, 89, 254, 211, 16, 0, 0, 0, 0, 90,
        164, 254, 32, 0, 0, 0, 0, 91, 222, 181, 16, 0, 0, 0, 0, 92, 132, 224, 32, 0, 0, 0, 0, 93,
        190, 151, 16, 0, 0, 0, 0, 94, 100, 194, 32, 0, 0, 0, 0, 95, 158, 92, 240, 2, 1, 2, 1, 2, 3,
        4, 2, 5, 2, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 8, 255, 255,
        129, 100, 0, 0, 255, 255, 143, 128, 1, 4, 255, 255, 129, 112, 0, 8, 255, 255, 143, 128, 1,
        12, 255, 255, 143, 128, 1, 16, 255, 255, 157, 144, 1, 20, 255, 255, 143, 128, 0, 25, 255,
        255, 157, 144, 1, 29, 255, 255, 157, 144, 0, 33, 76, 77, 84, 0, 89, 68, 84, 0, 89, 83, 84,
        0, 89, 87, 84, 0, 89, 80, 84, 0, 89, 68, 68, 84, 0, 80, 83, 84, 0, 80, 68, 84, 0, 77, 83,
        84, 0, 10, 77, 83, 84, 55, 10,
    ];
    pub(crate) const AMERICA_WINNIPEG: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        125, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 100, 228, 176, 148, 255, 255, 255, 255,
        155, 1, 251, 224, 255, 255, 255, 255, 155, 195, 186, 80, 255, 255, 255, 255, 158, 184, 161,
        128, 255, 255, 255, 255, 159, 186, 249, 112, 255, 255, 255, 255, 194, 160, 59, 128, 255,
        255, 255, 255, 195, 79, 132, 240, 255, 255, 255, 255, 203, 136, 254, 128, 255, 255, 255,
        255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 9, 240, 255, 255, 255, 255, 211, 136,
        104, 0, 255, 255, 255, 255, 212, 83, 96, 240, 255, 255, 255, 255, 213, 85, 213, 0, 255,
        255, 255, 255, 214, 32, 205, 240, 255, 255, 255, 255, 215, 53, 183, 0, 255, 255, 255, 255,
        216, 0, 175, 240, 255, 255, 255, 255, 217, 21, 153, 0, 255, 255, 255, 255, 217, 224, 145,
        240, 255, 255, 255, 255, 219, 0, 7, 0, 255, 255, 255, 255, 219, 200, 92, 240, 255, 255,
        255, 255, 220, 222, 151, 128, 255, 255, 255, 255, 221, 169, 144, 112, 255, 255, 255, 255,
        222, 190, 121, 128, 255, 255, 255, 255, 223, 137, 114, 112, 255, 255, 255, 255, 224, 158,
        91, 128, 255, 255, 255, 255, 225, 105, 84, 112, 255, 255, 255, 255, 226, 126, 61, 128, 255,
        255, 255, 255, 227, 73, 54, 112, 255, 255, 255, 255, 228, 94, 31, 128, 255, 255, 255, 255,
        229, 41, 24, 112, 255, 255, 255, 255, 230, 71, 60, 0, 255, 255, 255, 255, 231, 18, 52, 240,
        255, 255, 255, 255, 232, 39, 30, 0, 255, 255, 255, 255, 232, 242, 22, 240, 255, 255, 255,
        255, 234, 7, 0, 0, 255, 255, 255, 255, 234, 209, 248, 240, 255, 255, 255, 255, 235, 230,
        226, 0, 255, 255, 255, 255, 236, 214, 196, 240, 255, 255, 255, 255, 237, 198, 196, 0, 255,
        255, 255, 255, 238, 145, 188, 240, 255, 255, 255, 255, 243, 111, 164, 128, 255, 255, 255,
        255, 244, 49, 98, 240, 255, 255, 255, 255, 249, 15, 74, 128, 255, 255, 255, 255, 250, 8,
        118, 0, 255, 255, 255, 255, 250, 248, 103, 0, 255, 255, 255, 255, 251, 232, 88, 0, 255,
        255, 255, 255, 252, 216, 73, 0, 255, 255, 255, 255, 253, 200, 58, 0, 255, 255, 255, 255,
        254, 184, 43, 0, 255, 255, 255, 255, 255, 168, 28, 0, 0, 0, 0, 0, 0, 152, 13, 0, 0, 0, 0,
        0, 1, 135, 254, 0, 0, 0, 0, 0, 2, 119, 239, 0, 0, 0, 0, 0, 3, 113, 26, 128, 0, 0, 0, 0, 4,
        97, 11, 128, 0, 0, 0, 0, 5, 80, 252, 128, 0, 0, 0, 0, 6, 64, 237, 128, 0, 0, 0, 0, 7, 48,
        222, 128, 0, 0, 0, 0, 8, 32, 207, 128, 0, 0, 0, 0, 9, 16, 192, 128, 0, 0, 0, 0, 10, 0, 177,
        128, 0, 0, 0, 0, 10, 240, 162, 128, 0, 0, 0, 0, 11, 224, 147, 128, 0, 0, 0, 0, 12, 217,
        191, 0, 0, 0, 0, 0, 13, 192, 117, 128, 0, 0, 0, 0, 14, 185, 161, 0, 0, 0, 0, 0, 15, 169,
        146, 0, 0, 0, 0, 0, 16, 153, 131, 0, 0, 0, 0, 0, 17, 137, 116, 0, 0, 0, 0, 0, 18, 121, 101,
        0, 0, 0, 0, 0, 19, 105, 86, 0, 0, 0, 0, 0, 20, 89, 71, 0, 0, 0, 0, 0, 21, 73, 56, 0, 0, 0,
        0, 0, 22, 57, 41, 0, 0, 0, 0, 0, 23, 41, 26, 0, 0, 0, 0, 0, 24, 34, 69, 128, 0, 0, 0, 0,
        25, 8, 252, 0, 0, 0, 0, 0, 26, 2, 39, 128, 0, 0, 0, 0, 26, 242, 24, 128, 0, 0, 0, 0, 27,
        226, 9, 128, 0, 0, 0, 0, 28, 209, 250, 128, 0, 0, 0, 0, 29, 193, 235, 128, 0, 0, 0, 0, 30,
        177, 220, 128, 0, 0, 0, 0, 31, 161, 205, 128, 0, 0, 0, 0, 32, 118, 15, 0, 0, 0, 0, 0, 33,
        129, 175, 128, 0, 0, 0, 0, 34, 85, 241, 0, 0, 0, 0, 0, 35, 106, 204, 0, 0, 0, 0, 0, 36, 53,
        211, 0, 0, 0, 0, 0, 37, 74, 174, 0, 0, 0, 0, 0, 38, 21, 181, 0, 0, 0, 0, 0, 39, 42, 144, 0,
        0, 0, 0, 0, 39, 254, 209, 128, 0, 0, 0, 0, 41, 10, 114, 0, 0, 0, 0, 0, 41, 222, 179, 128,
        0, 0, 0, 0, 42, 234, 84, 0, 0, 0, 0, 0, 43, 190, 149, 128, 0, 0, 0, 0, 44, 211, 112, 128,
        0, 0, 0, 0, 45, 158, 119, 128, 0, 0, 0, 0, 46, 179, 82, 128, 0, 0, 0, 0, 47, 126, 89, 128,
        0, 0, 0, 0, 48, 147, 52, 128, 0, 0, 0, 0, 49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 22, 128, 0,
        0, 0, 0, 51, 71, 88, 0, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0, 0, 53, 39, 58, 0, 0, 0, 0,
        0, 54, 50, 218, 128, 0, 0, 0, 0, 55, 7, 28, 0, 0, 0, 0, 0, 56, 27, 247, 0, 0, 0, 0, 0, 56,
        230, 254, 0, 0, 0, 0, 0, 57, 251, 217, 0, 0, 0, 0, 0, 58, 198, 224, 0, 0, 0, 0, 0, 59, 219,
        187, 0, 0, 0, 0, 0, 60, 175, 252, 128, 0, 0, 0, 0, 61, 187, 157, 0, 0, 0, 0, 0, 62, 143,
        222, 128, 0, 0, 0, 0, 63, 155, 127, 0, 0, 0, 0, 0, 64, 111, 192, 128, 0, 0, 0, 0, 65, 132,
        155, 128, 0, 0, 0, 0, 66, 79, 162, 128, 0, 0, 0, 0, 67, 100, 125, 128, 0, 0, 0, 0, 68, 47,
        132, 128, 0, 0, 0, 0, 69, 68, 81, 112, 0, 0, 0, 0, 69, 243, 183, 0, 2, 1, 2, 1, 2, 1, 2, 3,
        4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255,
        164, 236, 0, 0, 255, 255, 185, 176, 1, 4, 255, 255, 171, 160, 0, 8, 255, 255, 185, 176, 1,
        12, 255, 255, 185, 176, 1, 16, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 67, 87, 84, 0,
        67, 80, 84, 0, 10, 67, 83, 84, 54, 67, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49,
        46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_YAKUTAT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        83, 0, 0, 0, 8, 0, 0, 0, 30, 255, 255, 255, 255, 63, 194, 253, 209, 255, 255, 255, 255,
        125, 135, 55, 191, 255, 255, 255, 255, 203, 137, 40, 176, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 97, 52, 32, 255, 255, 255, 255, 254, 184, 85, 48, 255, 255,
        255, 255, 255, 168, 56, 32, 0, 0, 0, 0, 0, 152, 55, 48, 0, 0, 0, 0, 1, 136, 26, 32, 0, 0,
        0, 0, 2, 120, 25, 48, 0, 0, 0, 0, 3, 113, 54, 160, 0, 0, 0, 0, 4, 97, 53, 176, 0, 0, 0, 0,
        5, 81, 24, 160, 0, 0, 0, 0, 6, 65, 23, 176, 0, 0, 0, 0, 7, 48, 250, 160, 0, 0, 0, 0, 7,
        141, 81, 176, 0, 0, 0, 0, 9, 16, 220, 160, 0, 0, 0, 0, 9, 173, 205, 48, 0, 0, 0, 0, 10,
        240, 190, 160, 0, 0, 0, 0, 11, 224, 189, 176, 0, 0, 0, 0, 12, 217, 219, 32, 0, 0, 0, 0, 13,
        192, 159, 176, 0, 0, 0, 0, 14, 185, 189, 32, 0, 0, 0, 0, 15, 169, 188, 48, 0, 0, 0, 0, 16,
        153, 159, 32, 0, 0, 0, 0, 17, 137, 158, 48, 0, 0, 0, 0, 18, 121, 129, 32, 0, 0, 0, 0, 19,
        105, 128, 48, 0, 0, 0, 0, 20, 89, 99, 32, 0, 0, 0, 0, 21, 73, 98, 48, 0, 0, 0, 0, 22, 57,
        69, 32, 0, 0, 0, 0, 23, 41, 68, 48, 0, 0, 0, 0, 24, 34, 97, 160, 0, 0, 0, 0, 25, 9, 38, 48,
        0, 0, 0, 0, 26, 2, 67, 160, 0, 0, 0, 0, 26, 43, 20, 16, 0, 0, 0, 0, 26, 242, 66, 176, 0, 0,
        0, 0, 27, 226, 37, 160, 0, 0, 0, 0, 28, 210, 36, 176, 0, 0, 0, 0, 29, 194, 7, 160, 0, 0, 0,
        0, 30, 178, 6, 176, 0, 0, 0, 0, 31, 161, 233, 160, 0, 0, 0, 0, 32, 118, 57, 48, 0, 0, 0, 0,
        33, 129, 203, 160, 0, 0, 0, 0, 34, 86, 27, 48, 0, 0, 0, 0, 35, 106, 232, 32, 0, 0, 0, 0,
        36, 53, 253, 48, 0, 0, 0, 0, 37, 74, 202, 32, 0, 0, 0, 0, 38, 21, 223, 48, 0, 0, 0, 0, 39,
        42, 172, 32, 0, 0, 0, 0, 39, 254, 251, 176, 0, 0, 0, 0, 41, 10, 142, 32, 0, 0, 0, 0, 41,
        222, 221, 176, 0, 0, 0, 0, 42, 234, 112, 32, 0, 0, 0, 0, 43, 190, 191, 176, 0, 0, 0, 0, 44,
        211, 140, 160, 0, 0, 0, 0, 45, 158, 161, 176, 0, 0, 0, 0, 46, 179, 110, 160, 0, 0, 0, 0,
        47, 126, 131, 176, 0, 0, 0, 0, 48, 147, 80, 160, 0, 0, 0, 0, 49, 103, 160, 48, 0, 0, 0, 0,
        50, 115, 50, 160, 0, 0, 0, 0, 51, 71, 130, 48, 0, 0, 0, 0, 52, 83, 20, 160, 0, 0, 0, 0, 53,
        39, 100, 48, 0, 0, 0, 0, 54, 50, 246, 160, 0, 0, 0, 0, 55, 7, 70, 48, 0, 0, 0, 0, 56, 28,
        19, 32, 0, 0, 0, 0, 56, 231, 40, 48, 0, 0, 0, 0, 57, 251, 245, 32, 0, 0, 0, 0, 58, 199, 10,
        48, 0, 0, 0, 0, 59, 219, 215, 32, 0, 0, 0, 0, 60, 176, 38, 176, 0, 0, 0, 0, 61, 187, 185,
        32, 0, 0, 0, 0, 62, 144, 8, 176, 0, 0, 0, 0, 63, 155, 155, 32, 0, 0, 0, 0, 64, 111, 234,
        176, 0, 0, 0, 0, 65, 132, 183, 160, 0, 0, 0, 0, 66, 79, 204, 176, 0, 0, 0, 0, 67, 100, 153,
        160, 0, 0, 0, 0, 68, 47, 174, 176, 0, 0, 0, 0, 69, 68, 123, 160, 0, 0, 0, 0, 69, 243, 225,
        48, 1, 2, 3, 4, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
        5, 2, 5, 2, 5, 2, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6,
        7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 0, 0, 206, 129, 0,
        0, 255, 255, 125, 1, 0, 0, 255, 255, 129, 112, 0, 4, 255, 255, 143, 128, 1, 8, 255, 255,
        143, 128, 1, 12, 255, 255, 143, 128, 1, 16, 255, 255, 143, 128, 1, 20, 255, 255, 129, 112,
        0, 25, 76, 77, 84, 0, 89, 83, 84, 0, 89, 87, 84, 0, 89, 80, 84, 0, 89, 68, 84, 0, 65, 75,
        68, 84, 0, 65, 75, 83, 84, 0, 10, 65, 75, 83, 84, 57, 65, 75, 68, 84, 44, 77, 51, 46, 50,
        46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const AMERICA_YELLOWKNIFE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        61, 0, 0, 0, 6, 0, 0, 0, 25, 255, 255, 255, 255, 190, 42, 24, 0, 255, 255, 255, 255, 203,
        137, 12, 144, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 24, 0,
        255, 255, 255, 255, 247, 47, 90, 112, 255, 255, 255, 255, 248, 40, 133, 240, 0, 0, 0, 0,
        19, 105, 100, 16, 0, 0, 0, 0, 20, 89, 71, 0, 0, 0, 0, 0, 21, 73, 70, 16, 0, 0, 0, 0, 22,
        57, 41, 0, 0, 0, 0, 0, 23, 41, 40, 16, 0, 0, 0, 0, 24, 34, 69, 128, 0, 0, 0, 0, 25, 9, 10,
        16, 0, 0, 0, 0, 26, 2, 39, 128, 0, 0, 0, 0, 26, 242, 38, 144, 0, 0, 0, 0, 27, 226, 9, 128,
        0, 0, 0, 0, 28, 210, 8, 144, 0, 0, 0, 0, 29, 193, 235, 128, 0, 0, 0, 0, 30, 177, 234, 144,
        0, 0, 0, 0, 31, 161, 205, 128, 0, 0, 0, 0, 32, 118, 29, 16, 0, 0, 0, 0, 33, 129, 175, 128,
        0, 0, 0, 0, 34, 85, 255, 16, 0, 0, 0, 0, 35, 106, 204, 0, 0, 0, 0, 0, 36, 53, 225, 16, 0,
        0, 0, 0, 37, 74, 174, 0, 0, 0, 0, 0, 38, 21, 195, 16, 0, 0, 0, 0, 39, 42, 144, 0, 0, 0, 0,
        0, 39, 254, 223, 144, 0, 0, 0, 0, 41, 10, 114, 0, 0, 0, 0, 0, 41, 222, 193, 144, 0, 0, 0,
        0, 42, 234, 84, 0, 0, 0, 0, 0, 43, 190, 163, 144, 0, 0, 0, 0, 44, 211, 112, 128, 0, 0, 0,
        0, 45, 158, 133, 144, 0, 0, 0, 0, 46, 179, 82, 128, 0, 0, 0, 0, 47, 126, 103, 144, 0, 0, 0,
        0, 48, 147, 52, 128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0, 0, 0, 50, 115, 22, 128, 0, 0, 0,
        0, 51, 71, 102, 16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0, 0, 53, 39, 72, 16, 0, 0, 0, 0,
        54, 50, 218, 128, 0, 0, 0, 0, 55, 7, 42, 16, 0, 0, 0, 0, 56, 27, 247, 0, 0, 0, 0, 0, 56,
        231, 12, 16, 0, 0, 0, 0, 57, 251, 217, 0, 0, 0, 0, 0, 58, 198, 238, 16, 0, 0, 0, 0, 59,
        219, 187, 0, 0, 0, 0, 0, 60, 176, 10, 144, 0, 0, 0, 0, 61, 187, 157, 0, 0, 0, 0, 0, 62,
        143, 236, 144, 0, 0, 0, 0, 63, 155, 127, 0, 0, 0, 0, 0, 64, 111, 206, 144, 0, 0, 0, 0, 65,
        132, 155, 128, 0, 0, 0, 0, 66, 79, 176, 144, 0, 0, 0, 0, 67, 100, 125, 128, 0, 0, 0, 0, 68,
        47, 146, 144, 0, 0, 0, 0, 69, 68, 95, 128, 0, 0, 0, 0, 69, 243, 197, 16, 3, 1, 2, 3, 4, 3,
        5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3,
        5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 0, 0, 0, 0, 0,
        0, 255, 255, 171, 160, 1, 4, 255, 255, 171, 160, 1, 8, 255, 255, 157, 144, 0, 12, 255, 255,
        185, 176, 1, 16, 255, 255, 171, 160, 1, 21, 45, 48, 48, 0, 77, 87, 84, 0, 77, 80, 84, 0,
        77, 83, 84, 0, 77, 68, 68, 84, 0, 77, 68, 84, 0, 10, 77, 83, 84, 55, 77, 68, 84, 44, 77,
        51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const ANTARCTICA_CASEY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        12, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 254, 30, 204, 128, 0, 0, 0, 0, 74, 218, 6,
        32, 0, 0, 0, 0, 75, 143, 202, 240, 0, 0, 0, 0, 78, 169, 156, 32, 0, 0, 0, 0, 79, 67, 205,
        144, 0, 0, 0, 0, 88, 10, 59, 128, 0, 0, 0, 0, 90, 164, 15, 16, 0, 0, 0, 0, 91, 185, 20, 64,
        0, 0, 0, 0, 92, 141, 29, 128, 0, 0, 0, 0, 93, 150, 69, 48, 0, 0, 0, 0, 94, 99, 197, 0, 0,
        0, 0, 0, 95, 120, 160, 60, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 112,
        128, 0, 4, 0, 0, 154, 176, 0, 8, 45, 48, 48, 0, 43, 48, 56, 0, 43, 49, 49, 0, 10, 60, 43,
        49, 49, 62, 45, 49, 49, 10,
    ];
    pub(crate) const ANTARCTICA_DAVIS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 231, 156, 64, 0, 255, 255, 255, 255, 246,
        71, 223, 16, 255, 255, 255, 255, 254, 71, 171, 0, 0, 0, 0, 0, 74, 218, 20, 48, 0, 0, 0, 0,
        75, 151, 250, 64, 0, 0, 0, 0, 78, 169, 170, 48, 0, 0, 0, 0, 79, 67, 247, 192, 1, 0, 1, 2,
        1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 98, 112, 0, 4, 0, 0, 70, 80, 0, 8, 45, 48, 48, 0, 43, 48,
        55, 0, 43, 48, 53, 0, 10, 60, 43, 48, 55, 62, 45, 55, 10,
    ];
    pub(crate) const ANTARCTICA_DUMONT_D_URVILLE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 212, 188, 118, 128, 255, 255, 255, 255, 222,
        52, 96, 96, 255, 255, 255, 255, 231, 60, 2, 128, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 140, 160,
        0, 4, 45, 48, 48, 0, 43, 49, 48, 0, 10, 60, 43, 49, 48, 62, 45, 49, 48, 10,
    ];
    pub(crate) const ANTARCTICA_MACQUARIE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        91, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 124, 5, 22, 0, 255, 255, 255, 255, 155,
        213, 120, 128, 255, 255, 255, 255, 156, 188, 47, 0, 255, 255, 255, 255, 160, 135, 180, 96,
        255, 255, 255, 255, 215, 12, 104, 0, 255, 255, 255, 255, 251, 194, 141, 0, 255, 255, 255,
        255, 252, 178, 126, 0, 255, 255, 255, 255, 253, 199, 89, 0, 255, 255, 255, 255, 254, 118,
        176, 128, 255, 255, 255, 255, 255, 167, 59, 0, 0, 0, 0, 0, 0, 86, 146, 128, 0, 0, 0, 0, 1,
        135, 29, 0, 0, 0, 0, 0, 2, 63, 175, 0, 0, 0, 0, 0, 3, 112, 57, 128, 0, 0, 0, 0, 4, 13, 28,
        0, 0, 0, 0, 0, 5, 80, 27, 128, 0, 0, 0, 0, 5, 246, 56, 128, 0, 0, 0, 0, 7, 47, 253, 128, 0,
        0, 0, 0, 7, 214, 26, 128, 0, 0, 0, 0, 9, 15, 223, 128, 0, 0, 0, 0, 9, 181, 252, 128, 0, 0,
        0, 0, 10, 239, 193, 128, 0, 0, 0, 0, 11, 159, 25, 0, 0, 0, 0, 0, 12, 216, 222, 0, 0, 0, 0,
        0, 13, 126, 251, 0, 0, 0, 0, 0, 14, 184, 192, 0, 0, 0, 0, 0, 15, 94, 221, 0, 0, 0, 0, 0,
        16, 152, 162, 0, 0, 0, 0, 0, 17, 62, 191, 0, 0, 0, 0, 0, 18, 120, 132, 0, 0, 0, 0, 0, 19,
        30, 161, 0, 0, 0, 0, 0, 20, 88, 102, 0, 0, 0, 0, 0, 20, 254, 131, 0, 0, 0, 0, 0, 22, 56,
        72, 0, 0, 0, 0, 0, 23, 3, 79, 0, 0, 0, 0, 0, 24, 33, 100, 128, 0, 0, 0, 0, 24, 227, 49, 0,
        0, 0, 0, 0, 26, 1, 70, 128, 0, 0, 0, 0, 26, 167, 99, 128, 0, 0, 0, 0, 27, 225, 40, 128, 0,
        0, 0, 0, 28, 135, 69, 128, 0, 0, 0, 0, 29, 193, 10, 128, 0, 0, 0, 0, 30, 103, 39, 128, 0,
        0, 0, 0, 31, 151, 178, 0, 0, 0, 0, 0, 32, 89, 126, 128, 0, 0, 0, 0, 33, 128, 206, 128, 0,
        0, 0, 0, 34, 66, 155, 0, 0, 0, 0, 0, 35, 105, 235, 0, 0, 0, 0, 0, 36, 34, 125, 0, 0, 0, 0,
        0, 37, 73, 205, 0, 0, 0, 0, 0, 38, 2, 95, 0, 0, 0, 0, 0, 39, 41, 175, 0, 0, 0, 0, 0, 39,
        244, 182, 0, 0, 0, 0, 0, 40, 237, 225, 128, 0, 0, 0, 0, 41, 212, 152, 0, 0, 0, 0, 0, 42,
        205, 195, 128, 0, 0, 0, 0, 43, 180, 122, 0, 0, 0, 0, 0, 44, 173, 165, 128, 0, 0, 0, 0, 45,
        148, 92, 0, 0, 0, 0, 0, 46, 141, 135, 128, 0, 0, 0, 0, 47, 116, 62, 0, 0, 0, 0, 0, 48, 109,
        105, 128, 0, 0, 0, 0, 49, 93, 90, 128, 0, 0, 0, 0, 50, 86, 134, 0, 0, 0, 0, 0, 51, 61, 60,
        128, 0, 0, 0, 0, 52, 54, 104, 0, 0, 0, 0, 0, 53, 29, 30, 128, 0, 0, 0, 0, 54, 22, 74, 0, 0,
        0, 0, 0, 54, 253, 0, 128, 0, 0, 0, 0, 55, 246, 44, 0, 0, 0, 0, 0, 56, 220, 226, 128, 0, 0,
        0, 0, 57, 167, 233, 128, 0, 0, 0, 0, 58, 188, 196, 128, 0, 0, 0, 0, 59, 191, 42, 128, 0, 0,
        0, 0, 60, 165, 225, 0, 0, 0, 0, 0, 61, 159, 12, 128, 0, 0, 0, 0, 62, 133, 195, 0, 0, 0, 0,
        0, 63, 126, 238, 128, 0, 0, 0, 0, 64, 101, 165, 0, 0, 0, 0, 0, 65, 94, 208, 128, 0, 0, 0,
        0, 66, 69, 135, 0, 0, 0, 0, 0, 67, 62, 178, 128, 0, 0, 0, 0, 68, 46, 163, 128, 0, 0, 0, 0,
        69, 30, 148, 128, 0, 0, 0, 0, 70, 5, 75, 0, 0, 0, 0, 0, 71, 7, 177, 0, 0, 0, 0, 0, 71, 247,
        162, 0, 0, 0, 0, 0, 72, 231, 147, 0, 0, 0, 0, 0, 73, 215, 132, 0, 0, 0, 0, 0, 74, 199, 117,
        0, 0, 0, 0, 0, 77, 151, 72, 0, 1, 2, 1, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 140, 160, 0, 4, 0, 0, 154, 176, 1,
        9, 45, 48, 48, 0, 65, 69, 83, 84, 0, 65, 69, 68, 84, 0, 10, 65, 69, 83, 84, 45, 49, 48, 65,
        69, 68, 84, 44, 77, 49, 48, 46, 49, 46, 48, 44, 77, 52, 46, 49, 46, 48, 47, 51, 10,
    ];
    pub(crate) const ANTARCTICA_MAWSON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 226, 32, 50, 128, 0, 0, 0, 0, 74, 218, 34,
        64, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 84, 96, 0, 4, 0, 0, 70, 80, 0, 8, 45, 48, 48, 0, 43, 48,
        54, 0, 43, 48, 53, 0, 10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ANTARCTICA_MC_MURDO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        68, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 229, 169, 233, 0, 0, 0, 0, 0, 9, 24, 253,
        224, 0, 0, 0, 0, 9, 172, 165, 224, 0, 0, 0, 0, 10, 239, 165, 96, 0, 0, 0, 0, 11, 158, 252,
        224, 0, 0, 0, 0, 12, 216, 193, 224, 0, 0, 0, 0, 13, 126, 222, 224, 0, 0, 0, 0, 14, 184,
        163, 224, 0, 0, 0, 0, 15, 94, 192, 224, 0, 0, 0, 0, 16, 152, 133, 224, 0, 0, 0, 0, 17, 62,
        162, 224, 0, 0, 0, 0, 18, 120, 103, 224, 0, 0, 0, 0, 19, 30, 132, 224, 0, 0, 0, 0, 20, 88,
        73, 224, 0, 0, 0, 0, 20, 254, 102, 224, 0, 0, 0, 0, 22, 56, 43, 224, 0, 0, 0, 0, 22, 231,
        131, 96, 0, 0, 0, 0, 24, 33, 72, 96, 0, 0, 0, 0, 24, 199, 101, 96, 0, 0, 0, 0, 26, 1, 42,
        96, 0, 0, 0, 0, 26, 167, 71, 96, 0, 0, 0, 0, 27, 225, 12, 96, 0, 0, 0, 0, 28, 135, 41, 96,
        0, 0, 0, 0, 29, 192, 238, 96, 0, 0, 0, 0, 30, 103, 11, 96, 0, 0, 0, 0, 31, 160, 208, 96, 0,
        0, 0, 0, 32, 70, 237, 96, 0, 0, 0, 0, 33, 128, 178, 96, 0, 0, 0, 0, 34, 48, 9, 224, 0, 0,
        0, 0, 35, 105, 206, 224, 0, 0, 0, 0, 36, 15, 235, 224, 0, 0, 0, 0, 37, 46, 1, 96, 0, 0, 0,
        0, 38, 2, 66, 224, 0, 0, 0, 0, 39, 13, 227, 96, 0, 0, 0, 0, 39, 226, 36, 224, 0, 0, 0, 0,
        40, 237, 197, 96, 0, 0, 0, 0, 41, 194, 6, 224, 0, 0, 0, 0, 42, 205, 167, 96, 0, 0, 0, 0,
        43, 171, 35, 96, 0, 0, 0, 0, 44, 173, 137, 96, 0, 0, 0, 0, 45, 139, 5, 96, 0, 0, 0, 0, 46,
        141, 107, 96, 0, 0, 0, 0, 47, 106, 231, 96, 0, 0, 0, 0, 48, 109, 77, 96, 0, 0, 0, 0, 49,
        74, 201, 96, 0, 0, 0, 0, 50, 86, 105, 224, 0, 0, 0, 0, 51, 42, 171, 96, 0, 0, 0, 0, 52, 54,
        75, 224, 0, 0, 0, 0, 53, 10, 141, 96, 0, 0, 0, 0, 54, 22, 45, 224, 0, 0, 0, 0, 54, 243,
        169, 224, 0, 0, 0, 0, 55, 246, 15, 224, 0, 0, 0, 0, 56, 211, 139, 224, 0, 0, 0, 0, 57, 213,
        241, 224, 0, 0, 0, 0, 58, 179, 109, 224, 0, 0, 0, 0, 59, 191, 14, 96, 0, 0, 0, 0, 60, 147,
        79, 224, 0, 0, 0, 0, 61, 158, 240, 96, 0, 0, 0, 0, 62, 115, 49, 224, 0, 0, 0, 0, 63, 126,
        210, 96, 0, 0, 0, 0, 64, 92, 78, 96, 0, 0, 0, 0, 65, 94, 180, 96, 0, 0, 0, 0, 66, 60, 48,
        96, 0, 0, 0, 0, 67, 62, 150, 96, 0, 0, 0, 0, 68, 28, 18, 96, 0, 0, 0, 0, 69, 30, 120, 96,
        0, 0, 0, 0, 69, 251, 244, 96, 0, 0, 0, 0, 70, 254, 90, 96, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 182, 208, 1, 4, 0, 0, 168, 192, 0, 9, 45, 48, 48, 0, 78, 90, 68, 84, 0, 78,
        90, 83, 84, 0, 10, 78, 90, 83, 84, 45, 49, 50, 78, 90, 68, 84, 44, 77, 57, 46, 53, 46, 48,
        44, 77, 52, 46, 49, 46, 48, 47, 51, 10,
    ];
    pub(crate) const ANTARCTICA_PALMER: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        82, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 246, 152, 173, 0, 255, 255, 255, 255, 246,
        230, 159, 176, 255, 255, 255, 255, 248, 19, 67, 192, 255, 255, 255, 255, 248, 199, 211, 48,
        255, 255, 255, 255, 249, 244, 119, 64, 255, 255, 255, 255, 250, 211, 54, 176, 255, 255,
        255, 255, 251, 195, 53, 192, 255, 255, 255, 255, 252, 188, 83, 48, 255, 255, 255, 255, 253,
        172, 82, 64, 255, 255, 255, 255, 254, 156, 53, 48, 255, 255, 255, 255, 255, 140, 52, 64, 0,
        0, 0, 0, 7, 163, 74, 176, 0, 0, 0, 0, 8, 36, 111, 160, 0, 0, 0, 0, 23, 48, 188, 176, 0, 0,
        0, 0, 24, 6, 93, 192, 0, 0, 0, 0, 24, 209, 86, 176, 0, 0, 0, 0, 25, 230, 63, 192, 0, 0, 0,
        0, 26, 177, 56, 176, 0, 0, 0, 0, 27, 207, 92, 64, 0, 0, 0, 0, 28, 145, 26, 176, 0, 0, 0, 0,
        29, 175, 62, 64, 0, 0, 0, 0, 30, 112, 252, 176, 0, 0, 0, 0, 31, 143, 32, 64, 0, 0, 0, 0,
        32, 127, 3, 48, 0, 0, 0, 0, 33, 111, 2, 64, 0, 0, 0, 0, 34, 57, 251, 48, 0, 0, 0, 0, 35,
        78, 228, 64, 0, 0, 0, 0, 36, 25, 221, 48, 0, 0, 0, 0, 37, 56, 0, 192, 0, 0, 0, 0, 37, 249,
        191, 48, 0, 0, 0, 0, 38, 242, 248, 192, 0, 0, 0, 0, 39, 217, 161, 48, 0, 0, 0, 0, 40, 247,
        196, 192, 0, 0, 0, 0, 41, 194, 189, 176, 0, 0, 0, 0, 42, 215, 166, 192, 0, 0, 0, 0, 43,
        162, 159, 176, 0, 0, 0, 0, 44, 183, 136, 192, 0, 0, 0, 0, 45, 130, 129, 176, 0, 0, 0, 0,
        46, 151, 106, 192, 0, 0, 0, 0, 47, 98, 99, 176, 0, 0, 0, 0, 48, 128, 135, 64, 0, 0, 0, 0,
        49, 66, 69, 176, 0, 0, 0, 0, 50, 96, 105, 64, 0, 0, 0, 0, 51, 61, 215, 48, 0, 0, 0, 0, 52,
        64, 75, 64, 0, 0, 0, 0, 53, 11, 68, 48, 0, 0, 0, 0, 54, 13, 184, 64, 0, 0, 0, 0, 55, 6,
        213, 176, 0, 0, 0, 0, 56, 0, 15, 64, 0, 0, 0, 0, 56, 203, 8, 48, 0, 0, 0, 0, 57, 233, 43,
        192, 0, 0, 0, 0, 58, 170, 234, 48, 0, 0, 0, 0, 59, 201, 13, 192, 0, 0, 0, 0, 60, 138, 204,
        48, 0, 0, 0, 0, 61, 168, 239, 192, 0, 0, 0, 0, 62, 106, 174, 48, 0, 0, 0, 0, 63, 136, 209,
        192, 0, 0, 0, 0, 64, 83, 202, 176, 0, 0, 0, 0, 65, 104, 179, 192, 0, 0, 0, 0, 66, 51, 172,
        176, 0, 0, 0, 0, 67, 72, 149, 192, 0, 0, 0, 0, 68, 19, 142, 176, 0, 0, 0, 0, 69, 49, 178,
        64, 0, 0, 0, 0, 69, 243, 112, 176, 0, 0, 0, 0, 71, 17, 148, 64, 0, 0, 0, 0, 71, 239, 2, 48,
        0, 0, 0, 0, 72, 241, 118, 64, 0, 0, 0, 0, 73, 188, 111, 48, 0, 0, 0, 0, 74, 209, 88, 64, 0,
        0, 0, 0, 75, 184, 0, 176, 0, 0, 0, 0, 76, 177, 58, 64, 0, 0, 0, 0, 77, 198, 7, 48, 0, 0, 0,
        0, 78, 80, 130, 192, 0, 0, 0, 0, 79, 156, 174, 176, 0, 0, 0, 0, 80, 66, 217, 192, 0, 0, 0,
        0, 81, 124, 144, 176, 0, 0, 0, 0, 82, 43, 246, 64, 0, 0, 0, 0, 83, 92, 114, 176, 0, 0, 0,
        0, 84, 11, 216, 64, 0, 0, 0, 0, 87, 55, 230, 48, 0, 0, 0, 0, 87, 175, 236, 192, 0, 0, 0, 0,
        88, 67, 134, 176, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 4, 3, 4, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 4, 0, 0,
        0, 0, 0, 0, 255, 255, 199, 192, 0, 4, 255, 255, 213, 208, 1, 8, 255, 255, 227, 224, 1, 12,
        255, 255, 213, 208, 0, 8, 45, 48, 48, 0, 45, 48, 52, 0, 45, 48, 51, 0, 45, 48, 50, 0, 10,
        60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const ANTARCTICA_ROTHERA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 13, 2, 45, 0, 1, 0, 0, 0, 0, 0, 0, 255, 255, 213,
        208, 0, 4, 45, 48, 48, 0, 45, 48, 51, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const ANTARCTICA_SYOWA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 231, 177, 88, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        42, 48, 0, 4, 45, 48, 48, 0, 43, 48, 51, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const ANTARCTICA_TROLL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 0, 66, 13, 71, 0, 0, 0, 0, 0, 66, 70, 5, 144, 2, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 28, 32, 1, 4, 0, 0, 0, 0, 0, 8, 45, 48, 48, 0, 43, 48, 50, 0, 43, 48,
        48, 0, 10, 60, 43, 48, 48, 62, 48, 60, 43, 48, 50, 62, 45, 50, 44, 77, 51, 46, 53, 46, 48,
        47, 49, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const ANTARCTICA_VOSTOK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 233, 88, 137, 128, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 84, 96, 0, 4, 45, 48, 48, 0, 43, 48, 54, 0, 10, 60, 43, 48, 54, 62, 45, 54, 10,
    ];
    pub(crate) const ARCTIC_LONGYEARBYEN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        58, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 114, 238, 36, 108, 255, 255, 255, 255,
        155, 39, 227, 0, 255, 255, 255, 255, 155, 212, 123, 96, 255, 255, 255, 255, 200, 183, 77,
        96, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255,
        255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208,
        130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 210, 98, 7, 16, 255,
        255, 255, 255, 235, 175, 32, 144, 255, 255, 255, 255, 236, 168, 76, 16, 255, 255, 255, 255,
        237, 152, 61, 16, 255, 255, 255, 255, 238, 136, 46, 16, 255, 255, 255, 255, 239, 120, 31,
        16, 255, 255, 255, 255, 240, 104, 16, 16, 255, 255, 255, 255, 241, 88, 1, 16, 255, 255,
        255, 255, 242, 71, 242, 16, 255, 255, 255, 255, 243, 55, 227, 16, 255, 255, 255, 255, 244,
        39, 212, 16, 255, 255, 255, 255, 245, 23, 197, 16, 255, 255, 255, 255, 246, 16, 240, 144,
        255, 255, 255, 255, 247, 47, 6, 16, 255, 255, 255, 255, 247, 240, 210, 144, 0, 0, 0, 0, 19,
        77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19,
        220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227,
        175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27,
        188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30,
        140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33,
        92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54,
        16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0,
        0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0,
        0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0,
        0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144,
        0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 10, 20, 0, 0, 0, 0, 28, 32, 1,
        4, 0, 0, 14, 16, 0, 9, 76, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 10, 67, 69, 84, 45,
        49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const ASIA_ADEN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 218, 97, 56, 86, 1, 0, 0, 42, 42, 0, 0, 0,
        0, 42, 48, 0, 4, 76, 77, 84, 0, 43, 48, 51, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const ASIA_ALMATY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        51, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 123, 220, 255, 255, 255, 255,
        181, 163, 239, 48, 0, 0, 0, 0, 21, 39, 125, 160, 0, 0, 0, 0, 22, 24, 178, 16, 0, 0, 0, 0,
        23, 8, 177, 32, 0, 0, 0, 0, 23, 249, 229, 144, 0, 0, 0, 0, 24, 233, 228, 160, 0, 0, 0, 0,
        25, 219, 25, 16, 0, 0, 0, 0, 26, 204, 105, 160, 0, 0, 0, 0, 27, 188, 118, 192, 0, 0, 0, 0,
        28, 172, 103, 192, 0, 0, 0, 0, 29, 156, 88, 192, 0, 0, 0, 0, 30, 140, 73, 192, 0, 0, 0, 0,
        31, 124, 58, 192, 0, 0, 0, 0, 32, 108, 43, 192, 0, 0, 0, 0, 33, 92, 28, 192, 0, 0, 0, 0,
        34, 76, 13, 192, 0, 0, 0, 0, 35, 59, 254, 192, 0, 0, 0, 0, 36, 43, 239, 192, 0, 0, 0, 0,
        37, 27, 224, 192, 0, 0, 0, 0, 38, 11, 209, 192, 0, 0, 0, 0, 39, 4, 253, 64, 0, 0, 0, 0, 39,
        244, 238, 64, 0, 0, 0, 0, 40, 228, 237, 80, 0, 0, 0, 0, 41, 120, 149, 80, 0, 0, 0, 0, 41,
        212, 208, 64, 0, 0, 0, 0, 42, 196, 193, 64, 0, 0, 0, 0, 43, 180, 178, 64, 0, 0, 0, 0, 44,
        164, 163, 64, 0, 0, 0, 0, 45, 148, 148, 64, 0, 0, 0, 0, 46, 132, 133, 64, 0, 0, 0, 0, 47,
        116, 118, 64, 0, 0, 0, 0, 48, 100, 103, 64, 0, 0, 0, 0, 49, 93, 146, 192, 0, 0, 0, 0, 50,
        114, 109, 192, 0, 0, 0, 0, 51, 61, 116, 192, 0, 0, 0, 0, 52, 82, 79, 192, 0, 0, 0, 0, 53,
        29, 86, 192, 0, 0, 0, 0, 54, 50, 49, 192, 0, 0, 0, 0, 54, 253, 56, 192, 0, 0, 0, 0, 56, 27,
        78, 64, 0, 0, 0, 0, 56, 221, 26, 192, 0, 0, 0, 0, 57, 251, 48, 64, 0, 0, 0, 0, 58, 188,
        252, 192, 0, 0, 0, 0, 59, 219, 18, 64, 0, 0, 0, 0, 60, 166, 25, 64, 0, 0, 0, 0, 61, 186,
        244, 64, 0, 0, 0, 0, 62, 133, 251, 64, 0, 0, 0, 0, 63, 154, 214, 64, 0, 0, 0, 0, 64, 101,
        221, 64, 0, 0, 0, 0, 65, 131, 242, 192, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 0, 0, 72, 36, 0, 0, 0, 0, 70, 80, 0, 4, 0, 0, 98, 112, 1, 8, 0, 0, 84, 96, 0,
        12, 0, 0, 84, 96, 1, 12, 76, 77, 84, 0, 43, 48, 53, 0, 43, 48, 55, 0, 43, 48, 54, 0, 10,
        60, 43, 48, 54, 62, 45, 54, 10,
    ];
    pub(crate) const ASIA_AMMAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        85, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 182, 163, 214, 208, 0, 0, 0, 0, 6, 114,
        121, 224, 0, 0, 0, 0, 7, 12, 171, 80, 0, 0, 0, 0, 8, 36, 55, 96, 0, 0, 0, 0, 8, 237, 222,
        208, 0, 0, 0, 0, 10, 5, 106, 224, 0, 0, 0, 0, 10, 207, 18, 80, 0, 0, 0, 0, 11, 231, 239,
        224, 0, 0, 0, 0, 12, 218, 117, 208, 0, 0, 0, 0, 13, 201, 35, 96, 0, 0, 0, 0, 14, 146, 202,
        208, 0, 0, 0, 0, 15, 169, 5, 96, 0, 0, 0, 0, 16, 114, 172, 208, 0, 0, 0, 0, 28, 173, 213,
        96, 0, 0, 0, 0, 29, 159, 9, 208, 0, 0, 0, 0, 30, 146, 253, 96, 0, 0, 0, 0, 31, 130, 224,
        80, 0, 0, 0, 0, 32, 114, 223, 96, 0, 0, 0, 0, 33, 98, 194, 80, 0, 0, 0, 0, 34, 82, 193, 96,
        0, 0, 0, 0, 35, 75, 222, 208, 0, 0, 0, 0, 36, 100, 188, 96, 0, 0, 0, 0, 37, 43, 192, 208,
        0, 0, 0, 0, 38, 55, 111, 96, 0, 0, 0, 0, 39, 11, 162, 208, 0, 0, 0, 0, 40, 11, 115, 224, 0,
        0, 0, 0, 40, 226, 74, 80, 0, 0, 0, 0, 41, 228, 190, 96, 0, 0, 0, 0, 42, 203, 102, 208, 0,
        0, 0, 0, 43, 187, 101, 224, 0, 0, 0, 0, 44, 171, 72, 208, 0, 0, 0, 0, 45, 155, 71, 224, 0,
        0, 0, 0, 46, 120, 181, 208, 0, 0, 0, 0, 47, 132, 100, 96, 0, 0, 0, 0, 48, 88, 165, 224, 0,
        0, 0, 0, 49, 100, 70, 96, 0, 0, 0, 0, 50, 65, 194, 96, 0, 0, 0, 0, 51, 68, 40, 96, 0, 0, 0,
        0, 52, 33, 164, 96, 0, 0, 0, 0, 53, 36, 10, 96, 0, 0, 0, 0, 54, 1, 134, 96, 0, 0, 0, 0, 55,
        122, 147, 96, 0, 0, 0, 0, 55, 234, 162, 224, 0, 0, 0, 0, 56, 226, 124, 224, 0, 0, 0, 0, 57,
        211, 191, 96, 0, 0, 0, 0, 58, 194, 94, 224, 0, 0, 0, 0, 59, 179, 161, 96, 0, 0, 0, 0, 60,
        163, 146, 96, 0, 0, 0, 0, 61, 147, 131, 96, 0, 0, 0, 0, 62, 131, 116, 96, 0, 0, 0, 0, 63,
        152, 79, 96, 0, 0, 0, 0, 64, 99, 86, 96, 0, 0, 0, 0, 65, 110, 246, 224, 0, 0, 0, 0, 66, 76,
        114, 224, 0, 0, 0, 0, 67, 60, 99, 224, 0, 0, 0, 0, 68, 44, 84, 224, 0, 0, 0, 0, 69, 65, 47,
        224, 0, 0, 0, 0, 70, 12, 54, 224, 0, 0, 0, 0, 71, 33, 17, 224, 0, 0, 0, 0, 71, 236, 24,
        224, 0, 0, 0, 0, 73, 10, 46, 96, 0, 0, 0, 0, 73, 203, 250, 224, 0, 0, 0, 0, 74, 234, 16,
        96, 0, 0, 0, 0, 75, 171, 220, 224, 0, 0, 0, 0, 76, 201, 242, 96, 0, 0, 0, 0, 77, 148, 249,
        96, 0, 0, 0, 0, 78, 169, 212, 96, 0, 0, 0, 0, 79, 116, 219, 96, 0, 0, 0, 0, 82, 179, 94,
        80, 0, 0, 0, 0, 83, 52, 159, 96, 0, 0, 0, 0, 84, 82, 180, 224, 0, 0, 0, 0, 85, 20, 129, 96,
        0, 0, 0, 0, 86, 50, 150, 224, 0, 0, 0, 0, 86, 253, 157, 224, 0, 0, 0, 0, 88, 18, 120, 224,
        0, 0, 0, 0, 88, 221, 127, 224, 0, 0, 0, 0, 89, 242, 90, 224, 0, 0, 0, 0, 90, 189, 97, 224,
        0, 0, 0, 0, 91, 210, 60, 224, 0, 0, 0, 0, 92, 157, 67, 224, 0, 0, 0, 0, 93, 178, 30, 224,
        0, 0, 0, 0, 94, 125, 37, 224, 0, 0, 0, 0, 95, 155, 59, 96, 0, 0, 0, 0, 96, 93, 7, 224, 0,
        0, 0, 0, 97, 123, 29, 96, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 0, 0, 33, 176, 0, 0, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0, 9, 76, 77, 84, 0, 69,
        69, 83, 84, 0, 69, 69, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 50, 46, 53,
        46, 52, 47, 50, 52, 44, 77, 49, 48, 46, 53, 46, 53, 47, 49, 10,
    ];
    pub(crate) const ASIA_ANADYR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 7, 0, 0, 0, 20, 255, 255, 255, 255, 170, 25, 29, 156, 255, 255, 255, 255, 181,
        163, 140, 192, 0, 0, 0, 0, 21, 39, 27, 48, 0, 0, 0, 0, 22, 24, 79, 160, 0, 0, 0, 0, 23, 8,
        78, 176, 0, 0, 0, 0, 23, 249, 145, 48, 0, 0, 0, 0, 24, 233, 144, 64, 0, 0, 0, 0, 25, 218,
        196, 176, 0, 0, 0, 0, 26, 204, 21, 64, 0, 0, 0, 0, 27, 188, 34, 96, 0, 0, 0, 0, 28, 172,
        19, 96, 0, 0, 0, 0, 29, 156, 4, 96, 0, 0, 0, 0, 30, 139, 245, 96, 0, 0, 0, 0, 31, 123, 230,
        96, 0, 0, 0, 0, 32, 107, 215, 96, 0, 0, 0, 0, 33, 91, 200, 96, 0, 0, 0, 0, 34, 75, 185, 96,
        0, 0, 0, 0, 35, 59, 170, 96, 0, 0, 0, 0, 36, 43, 155, 96, 0, 0, 0, 0, 37, 27, 140, 96, 0,
        0, 0, 0, 38, 11, 125, 96, 0, 0, 0, 0, 39, 4, 168, 224, 0, 0, 0, 0, 39, 244, 153, 224, 0, 0,
        0, 0, 40, 228, 152, 240, 0, 0, 0, 0, 41, 120, 64, 240, 0, 0, 0, 0, 41, 212, 123, 224, 0, 0,
        0, 0, 42, 196, 108, 224, 0, 0, 0, 0, 43, 180, 93, 224, 0, 0, 0, 0, 44, 164, 78, 224, 0, 0,
        0, 0, 45, 148, 63, 224, 0, 0, 0, 0, 46, 132, 48, 224, 0, 0, 0, 0, 47, 116, 33, 224, 0, 0,
        0, 0, 48, 100, 18, 224, 0, 0, 0, 0, 49, 93, 62, 96, 0, 0, 0, 0, 50, 114, 25, 96, 0, 0, 0,
        0, 51, 61, 32, 96, 0, 0, 0, 0, 52, 81, 251, 96, 0, 0, 0, 0, 53, 29, 2, 96, 0, 0, 0, 0, 54,
        49, 221, 96, 0, 0, 0, 0, 54, 252, 228, 96, 0, 0, 0, 0, 56, 26, 249, 224, 0, 0, 0, 0, 56,
        220, 198, 96, 0, 0, 0, 0, 57, 250, 219, 224, 0, 0, 0, 0, 58, 188, 168, 96, 0, 0, 0, 0, 59,
        218, 189, 224, 0, 0, 0, 0, 60, 165, 196, 224, 0, 0, 0, 0, 61, 186, 159, 224, 0, 0, 0, 0,
        62, 133, 166, 224, 0, 0, 0, 0, 63, 154, 129, 224, 0, 0, 0, 0, 64, 101, 136, 224, 0, 0, 0,
        0, 65, 131, 158, 96, 0, 0, 0, 0, 66, 69, 106, 224, 0, 0, 0, 0, 67, 99, 128, 96, 0, 0, 0, 0,
        68, 37, 76, 224, 0, 0, 0, 0, 69, 67, 98, 96, 0, 0, 0, 0, 70, 5, 46, 224, 0, 0, 0, 0, 71,
        35, 68, 96, 0, 0, 0, 0, 71, 238, 75, 96, 0, 0, 0, 0, 73, 3, 38, 96, 0, 0, 0, 0, 73, 206,
        45, 96, 0, 0, 0, 0, 74, 227, 8, 96, 0, 0, 0, 0, 75, 174, 15, 96, 0, 0, 0, 0, 76, 204, 50,
        240, 0, 0, 0, 0, 77, 141, 255, 112, 1, 3, 2, 3, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
        4, 1, 4, 1, 5, 6, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
        1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 6, 1, 0, 0, 166, 100, 0, 0, 0, 0, 168, 192, 0, 4,
        0, 0, 196, 224, 1, 8, 0, 0, 182, 208, 0, 12, 0, 0, 182, 208, 1, 12, 0, 0, 168, 192, 1, 4,
        0, 0, 154, 176, 0, 16, 76, 77, 84, 0, 43, 49, 50, 0, 43, 49, 52, 0, 43, 49, 51, 0, 43, 49,
        49, 0, 10, 60, 43, 49, 50, 62, 45, 49, 50, 10,
    ];
    pub(crate) const ASIA_AQTAU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        50, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 148, 224, 255, 255, 255, 255,
        181, 163, 253, 64, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0, 23, 8, 177, 32, 0, 0, 0, 0, 23,
        249, 243, 160, 0, 0, 0, 0, 24, 233, 242, 176, 0, 0, 0, 0, 25, 219, 39, 32, 0, 0, 0, 0, 26,
        204, 119, 176, 0, 0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0, 28, 172, 117, 208, 0, 0, 0, 0,
        29, 156, 102, 208, 0, 0, 0, 0, 30, 140, 87, 208, 0, 0, 0, 0, 31, 124, 72, 208, 0, 0, 0, 0,
        32, 108, 57, 208, 0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0, 34, 76, 27, 208, 0, 0, 0, 0, 35,
        60, 12, 208, 0, 0, 0, 0, 36, 43, 253, 208, 0, 0, 0, 0, 37, 27, 238, 208, 0, 0, 0, 0, 38,
        11, 223, 208, 0, 0, 0, 0, 39, 5, 11, 80, 0, 0, 0, 0, 39, 244, 252, 80, 0, 0, 0, 0, 40, 228,
        251, 96, 0, 0, 0, 0, 41, 120, 163, 96, 0, 0, 0, 0, 41, 212, 222, 80, 0, 0, 0, 0, 42, 196,
        207, 80, 0, 0, 0, 0, 43, 180, 192, 80, 0, 0, 0, 0, 44, 164, 177, 80, 0, 0, 0, 0, 45, 148,
        162, 80, 0, 0, 0, 0, 46, 132, 147, 80, 0, 0, 0, 0, 47, 116, 146, 96, 0, 0, 0, 0, 48, 100,
        131, 96, 0, 0, 0, 0, 49, 93, 174, 224, 0, 0, 0, 0, 50, 114, 137, 224, 0, 0, 0, 0, 51, 61,
        144, 224, 0, 0, 0, 0, 52, 82, 107, 224, 0, 0, 0, 0, 53, 29, 114, 224, 0, 0, 0, 0, 54, 50,
        77, 224, 0, 0, 0, 0, 54, 253, 84, 224, 0, 0, 0, 0, 56, 27, 106, 96, 0, 0, 0, 0, 56, 221,
        54, 224, 0, 0, 0, 0, 57, 251, 76, 96, 0, 0, 0, 0, 58, 189, 24, 224, 0, 0, 0, 0, 59, 219,
        46, 96, 0, 0, 0, 0, 60, 166, 53, 96, 0, 0, 0, 0, 61, 187, 16, 96, 0, 0, 0, 0, 62, 134, 23,
        96, 0, 0, 0, 0, 63, 154, 242, 96, 0, 0, 0, 0, 64, 101, 249, 96, 0, 0, 0, 0, 65, 132, 14,
        224, 1, 2, 3, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 5, 1, 2, 4, 2, 4, 2, 4,
        1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 2, 0, 0, 47, 32, 0, 0, 0, 0,
        56, 64, 0, 4, 0, 0, 70, 80, 0, 8, 0, 0, 84, 96, 0, 12, 0, 0, 84, 96, 1, 12, 0, 0, 70, 80,
        1, 8, 76, 77, 84, 0, 43, 48, 52, 0, 43, 48, 53, 0, 43, 48, 54, 0, 10, 60, 43, 48, 53, 62,
        45, 53, 10,
    ];
    pub(crate) const ASIA_AQTOBE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        51, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 142, 104, 255, 255, 255, 255,
        181, 163, 253, 64, 0, 0, 0, 0, 21, 39, 139, 176, 0, 0, 0, 0, 22, 24, 192, 32, 0, 0, 0, 0,
        23, 8, 177, 32, 0, 0, 0, 0, 23, 249, 243, 160, 0, 0, 0, 0, 24, 233, 242, 176, 0, 0, 0, 0,
        25, 219, 39, 32, 0, 0, 0, 0, 26, 204, 119, 176, 0, 0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0,
        28, 172, 117, 208, 0, 0, 0, 0, 29, 156, 102, 208, 0, 0, 0, 0, 30, 140, 87, 208, 0, 0, 0, 0,
        31, 124, 72, 208, 0, 0, 0, 0, 32, 108, 57, 208, 0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0,
        34, 76, 27, 208, 0, 0, 0, 0, 35, 60, 12, 208, 0, 0, 0, 0, 36, 43, 253, 208, 0, 0, 0, 0, 37,
        27, 238, 208, 0, 0, 0, 0, 38, 11, 223, 208, 0, 0, 0, 0, 39, 5, 11, 80, 0, 0, 0, 0, 39, 244,
        252, 80, 0, 0, 0, 0, 40, 228, 251, 96, 0, 0, 0, 0, 41, 120, 163, 96, 0, 0, 0, 0, 41, 212,
        222, 80, 0, 0, 0, 0, 42, 196, 207, 80, 0, 0, 0, 0, 43, 180, 192, 80, 0, 0, 0, 0, 44, 164,
        177, 80, 0, 0, 0, 0, 45, 148, 162, 80, 0, 0, 0, 0, 46, 132, 147, 80, 0, 0, 0, 0, 47, 116,
        132, 80, 0, 0, 0, 0, 48, 100, 117, 80, 0, 0, 0, 0, 49, 93, 160, 208, 0, 0, 0, 0, 50, 114,
        123, 208, 0, 0, 0, 0, 51, 61, 130, 208, 0, 0, 0, 0, 52, 82, 93, 208, 0, 0, 0, 0, 53, 29,
        100, 208, 0, 0, 0, 0, 54, 50, 63, 208, 0, 0, 0, 0, 54, 253, 70, 208, 0, 0, 0, 0, 56, 27,
        92, 80, 0, 0, 0, 0, 56, 221, 40, 208, 0, 0, 0, 0, 57, 251, 62, 80, 0, 0, 0, 0, 58, 189, 10,
        208, 0, 0, 0, 0, 59, 219, 32, 80, 0, 0, 0, 0, 60, 166, 39, 80, 0, 0, 0, 0, 61, 187, 2, 80,
        0, 0, 0, 0, 62, 134, 9, 80, 0, 0, 0, 0, 63, 154, 228, 80, 0, 0, 0, 0, 64, 101, 235, 80, 0,
        0, 0, 0, 65, 132, 0, 208, 1, 2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        5, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0,
        0, 53, 152, 0, 0, 0, 0, 56, 64, 0, 4, 0, 0, 70, 80, 0, 8, 0, 0, 84, 96, 1, 12, 0, 0, 84,
        96, 0, 12, 0, 0, 70, 80, 1, 8, 76, 77, 84, 0, 43, 48, 52, 0, 43, 48, 53, 0, 43, 48, 54, 0,
        10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ASIA_ASHGABAT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        25, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 141, 68, 255, 255, 255, 255, 181,
        163, 253, 64, 0, 0, 0, 0, 21, 39, 139, 176, 0, 0, 0, 0, 22, 24, 192, 32, 0, 0, 0, 0, 23, 8,
        191, 48, 0, 0, 0, 0, 23, 249, 243, 160, 0, 0, 0, 0, 24, 233, 242, 176, 0, 0, 0, 0, 25, 219,
        39, 32, 0, 0, 0, 0, 26, 204, 119, 176, 0, 0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0, 28, 172,
        117, 208, 0, 0, 0, 0, 29, 156, 102, 208, 0, 0, 0, 0, 30, 140, 87, 208, 0, 0, 0, 0, 31, 124,
        72, 208, 0, 0, 0, 0, 32, 108, 57, 208, 0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0, 34, 76, 27,
        208, 0, 0, 0, 0, 35, 60, 12, 208, 0, 0, 0, 0, 36, 43, 253, 208, 0, 0, 0, 0, 37, 27, 238,
        208, 0, 0, 0, 0, 38, 11, 223, 208, 0, 0, 0, 0, 39, 5, 11, 80, 0, 0, 0, 0, 39, 244, 252, 80,
        0, 0, 0, 0, 40, 228, 251, 96, 0, 0, 0, 0, 41, 120, 163, 96, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 0, 0, 54, 188, 0, 0, 0, 0, 56, 64, 0, 4, 0, 0,
        84, 96, 1, 8, 0, 0, 70, 80, 0, 12, 0, 0, 70, 80, 1, 12, 76, 77, 84, 0, 43, 48, 52, 0, 43,
        48, 54, 0, 43, 48, 53, 0, 10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ASIA_ATYRAU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        50, 0, 0, 0, 7, 0, 0, 0, 20, 255, 255, 255, 255, 170, 25, 147, 80, 255, 255, 255, 255, 181,
        164, 11, 80, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0, 23, 8, 177, 32, 0, 0, 0, 0, 23, 249,
        243, 160, 0, 0, 0, 0, 24, 233, 242, 176, 0, 0, 0, 0, 25, 219, 39, 32, 0, 0, 0, 0, 26, 204,
        119, 176, 0, 0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0, 28, 172, 117, 208, 0, 0, 0, 0, 29,
        156, 102, 208, 0, 0, 0, 0, 30, 140, 87, 208, 0, 0, 0, 0, 31, 124, 72, 208, 0, 0, 0, 0, 32,
        108, 57, 208, 0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0, 34, 76, 27, 208, 0, 0, 0, 0, 35, 60,
        12, 208, 0, 0, 0, 0, 36, 43, 253, 208, 0, 0, 0, 0, 37, 27, 238, 208, 0, 0, 0, 0, 38, 11,
        223, 208, 0, 0, 0, 0, 39, 5, 11, 80, 0, 0, 0, 0, 39, 244, 252, 80, 0, 0, 0, 0, 40, 228,
        251, 96, 0, 0, 0, 0, 41, 120, 163, 96, 0, 0, 0, 0, 41, 212, 222, 80, 0, 0, 0, 0, 42, 196,
        207, 80, 0, 0, 0, 0, 43, 180, 192, 80, 0, 0, 0, 0, 44, 164, 177, 80, 0, 0, 0, 0, 45, 148,
        162, 80, 0, 0, 0, 0, 46, 132, 147, 80, 0, 0, 0, 0, 47, 116, 132, 80, 0, 0, 0, 0, 48, 100,
        117, 80, 0, 0, 0, 0, 49, 93, 160, 208, 0, 0, 0, 0, 50, 114, 123, 208, 0, 0, 0, 0, 51, 61,
        130, 208, 0, 0, 0, 0, 52, 82, 93, 208, 0, 0, 0, 0, 53, 29, 100, 208, 0, 0, 0, 0, 54, 50,
        63, 208, 0, 0, 0, 0, 54, 253, 70, 208, 0, 0, 0, 0, 56, 27, 106, 96, 0, 0, 0, 0, 56, 221,
        54, 224, 0, 0, 0, 0, 57, 251, 76, 96, 0, 0, 0, 0, 58, 189, 24, 224, 0, 0, 0, 0, 59, 219,
        46, 96, 0, 0, 0, 0, 60, 166, 53, 96, 0, 0, 0, 0, 61, 187, 16, 96, 0, 0, 0, 0, 62, 134, 23,
        96, 0, 0, 0, 0, 63, 154, 242, 96, 0, 0, 0, 0, 64, 101, 249, 96, 0, 0, 0, 0, 65, 132, 14,
        224, 1, 2, 3, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 5, 6, 2, 4, 2, 4, 2, 4,
        2, 4, 2, 4, 2, 4, 2, 4, 2, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 2, 0, 0, 48, 176, 0, 0, 0, 0,
        42, 48, 0, 4, 0, 0, 70, 80, 0, 8, 0, 0, 84, 96, 0, 12, 0, 0, 84, 96, 1, 12, 0, 0, 70, 80,
        1, 8, 0, 0, 56, 64, 0, 16, 76, 77, 84, 0, 43, 48, 51, 0, 43, 48, 53, 0, 43, 48, 54, 0, 43,
        48, 52, 0, 10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ASIA_BAGHDAD: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        54, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 105, 134, 177, 220, 255, 255, 255, 255,
        158, 48, 60, 224, 0, 0, 0, 0, 23, 48, 104, 80, 0, 0, 0, 0, 23, 250, 15, 192, 0, 0, 0, 0,
        24, 232, 189, 80, 0, 0, 0, 0, 25, 219, 67, 64, 0, 0, 0, 0, 26, 204, 147, 208, 0, 0, 0, 0,
        27, 189, 200, 64, 0, 0, 0, 0, 28, 173, 199, 80, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0,
        30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 86, 224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0,
        33, 92, 56, 224, 0, 0, 0, 0, 34, 76, 41, 224, 0, 0, 0, 0, 35, 60, 26, 224, 0, 0, 0, 0, 36,
        44, 11, 224, 0, 0, 0, 0, 37, 27, 252, 224, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0, 0, 0, 39, 5,
        25, 96, 0, 0, 0, 0, 39, 246, 120, 0, 0, 0, 0, 0, 40, 231, 186, 128, 0, 0, 0, 0, 41, 216,
        253, 0, 0, 0, 0, 0, 42, 202, 63, 128, 0, 0, 0, 0, 43, 186, 48, 128, 0, 0, 0, 0, 44, 171,
        115, 0, 0, 0, 0, 0, 45, 155, 100, 0, 0, 0, 0, 0, 46, 140, 166, 128, 0, 0, 0, 0, 47, 124,
        151, 128, 0, 0, 0, 0, 48, 109, 218, 0, 0, 0, 0, 0, 49, 95, 28, 128, 0, 0, 0, 0, 50, 80, 95,
        0, 0, 0, 0, 0, 51, 64, 80, 0, 0, 0, 0, 0, 52, 49, 146, 128, 0, 0, 0, 0, 53, 33, 131, 128,
        0, 0, 0, 0, 54, 18, 198, 0, 0, 0, 0, 0, 55, 2, 183, 0, 0, 0, 0, 0, 55, 243, 249, 128, 0, 0,
        0, 0, 56, 229, 60, 0, 0, 0, 0, 0, 57, 214, 126, 128, 0, 0, 0, 0, 58, 198, 111, 128, 0, 0,
        0, 0, 59, 183, 178, 0, 0, 0, 0, 0, 60, 167, 163, 0, 0, 0, 0, 0, 61, 152, 229, 128, 0, 0, 0,
        0, 62, 136, 214, 128, 0, 0, 0, 0, 63, 122, 25, 0, 0, 0, 0, 0, 64, 107, 91, 128, 0, 0, 0, 0,
        65, 92, 158, 0, 0, 0, 0, 0, 66, 76, 143, 0, 0, 0, 0, 0, 67, 61, 209, 128, 0, 0, 0, 0, 68,
        45, 194, 128, 0, 0, 0, 0, 69, 31, 5, 0, 0, 0, 0, 0, 70, 14, 246, 0, 0, 0, 0, 0, 71, 0, 56,
        128, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0, 41, 164,
        0, 0, 0, 0, 41, 160, 0, 4, 0, 0, 42, 48, 0, 8, 0, 0, 56, 64, 1, 12, 76, 77, 84, 0, 66, 77,
        84, 0, 43, 48, 51, 0, 43, 48, 52, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const ASIA_BAHRAIN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 202, 123, 108, 148, 255, 255, 255, 255,
        207, 23, 89, 72, 0, 0, 0, 0, 4, 138, 146, 192, 1, 2, 3, 0, 0, 47, 108, 0, 0, 0, 0, 49, 56,
        0, 4, 0, 0, 56, 64, 0, 10, 0, 0, 42, 48, 0, 14, 76, 77, 84, 0, 43, 48, 51, 51, 48, 0, 43,
        48, 52, 0, 43, 48, 51, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const ASIA_BAKU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        66, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 149, 68, 255, 255, 255, 255, 231,
        218, 12, 80, 0, 0, 0, 0, 21, 39, 153, 192, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0, 23, 8,
        205, 64, 0, 0, 0, 0, 23, 250, 1, 176, 0, 0, 0, 0, 24, 234, 0, 192, 0, 0, 0, 0, 25, 219, 53,
        48, 0, 0, 0, 0, 26, 204, 133, 192, 0, 0, 0, 0, 27, 188, 146, 224, 0, 0, 0, 0, 28, 172, 131,
        224, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 86,
        224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0, 33, 92, 56, 224, 0, 0, 0, 0, 34, 76, 41,
        224, 0, 0, 0, 0, 35, 60, 26, 224, 0, 0, 0, 0, 36, 44, 11, 224, 0, 0, 0, 0, 37, 27, 252,
        224, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0, 0, 0, 39, 5, 25, 96, 0, 0, 0, 0, 39, 245, 10, 96,
        0, 0, 0, 0, 40, 229, 9, 112, 0, 0, 0, 0, 41, 212, 250, 112, 0, 0, 0, 0, 42, 196, 235, 112,
        0, 0, 0, 0, 49, 93, 217, 16, 0, 0, 0, 0, 50, 114, 180, 16, 0, 0, 0, 0, 51, 61, 173, 0, 0,
        0, 0, 0, 52, 82, 136, 0, 0, 0, 0, 0, 53, 29, 143, 0, 0, 0, 0, 0, 54, 50, 106, 0, 0, 0, 0,
        0, 54, 253, 113, 0, 0, 0, 0, 0, 56, 27, 134, 128, 0, 0, 0, 0, 56, 221, 83, 0, 0, 0, 0, 0,
        57, 251, 104, 128, 0, 0, 0, 0, 58, 189, 53, 0, 0, 0, 0, 0, 59, 219, 74, 128, 0, 0, 0, 0,
        60, 166, 81, 128, 0, 0, 0, 0, 61, 187, 44, 128, 0, 0, 0, 0, 62, 134, 51, 128, 0, 0, 0, 0,
        63, 155, 14, 128, 0, 0, 0, 0, 64, 102, 21, 128, 0, 0, 0, 0, 65, 132, 43, 0, 0, 0, 0, 0, 66,
        69, 247, 128, 0, 0, 0, 0, 67, 100, 13, 0, 0, 0, 0, 0, 68, 37, 217, 128, 0, 0, 0, 0, 69, 67,
        239, 0, 0, 0, 0, 0, 70, 5, 187, 128, 0, 0, 0, 0, 71, 35, 209, 0, 0, 0, 0, 0, 71, 238, 216,
        0, 0, 0, 0, 0, 73, 3, 179, 0, 0, 0, 0, 0, 73, 206, 186, 0, 0, 0, 0, 0, 74, 227, 149, 0, 0,
        0, 0, 0, 75, 174, 156, 0, 0, 0, 0, 0, 76, 204, 177, 128, 0, 0, 0, 0, 77, 142, 126, 0, 0, 0,
        0, 0, 78, 172, 147, 128, 0, 0, 0, 0, 79, 110, 96, 0, 0, 0, 0, 0, 80, 140, 117, 128, 0, 0,
        0, 0, 81, 87, 124, 128, 0, 0, 0, 0, 82, 108, 87, 128, 0, 0, 0, 0, 83, 55, 94, 128, 0, 0, 0,
        0, 84, 76, 57, 128, 0, 0, 0, 0, 85, 23, 64, 128, 0, 0, 0, 0, 86, 44, 27, 128, 1, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 0, 0, 46, 188, 0, 0, 0, 0, 42, 48, 0, 4, 0, 0, 70, 80, 1, 8, 0, 0, 56, 64, 0, 12, 0,
        0, 56, 64, 1, 12, 76, 77, 84, 0, 43, 48, 51, 0, 43, 48, 53, 0, 43, 48, 52, 0, 10, 60, 43,
        48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const ASIA_BANGKOK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 86, 182, 133, 196, 255, 255, 255, 255, 162,
        106, 103, 196, 1, 2, 0, 0, 94, 60, 0, 0, 0, 0, 94, 60, 0, 4, 0, 0, 98, 112, 0, 8, 76, 77,
        84, 0, 66, 77, 84, 0, 43, 48, 55, 0, 10, 60, 43, 48, 55, 62, 45, 55, 10,
    ];
    pub(crate) const ASIA_BARNAUL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        67, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 161, 213, 125, 252, 255, 255, 255, 255,
        181, 163, 225, 32, 0, 0, 0, 0, 21, 39, 111, 144, 0, 0, 0, 0, 22, 24, 164, 0, 0, 0, 0, 0,
        23, 8, 163, 16, 0, 0, 0, 0, 23, 249, 215, 128, 0, 0, 0, 0, 24, 233, 214, 144, 0, 0, 0, 0,
        25, 219, 11, 0, 0, 0, 0, 0, 26, 204, 91, 144, 0, 0, 0, 0, 27, 188, 104, 176, 0, 0, 0, 0,
        28, 172, 89, 176, 0, 0, 0, 0, 29, 156, 74, 176, 0, 0, 0, 0, 30, 140, 59, 176, 0, 0, 0, 0,
        31, 124, 44, 176, 0, 0, 0, 0, 32, 108, 29, 176, 0, 0, 0, 0, 33, 92, 14, 176, 0, 0, 0, 0,
        34, 75, 255, 176, 0, 0, 0, 0, 35, 59, 240, 176, 0, 0, 0, 0, 36, 43, 225, 176, 0, 0, 0, 0,
        37, 27, 210, 176, 0, 0, 0, 0, 38, 11, 195, 176, 0, 0, 0, 0, 39, 4, 239, 48, 0, 0, 0, 0, 39,
        244, 224, 48, 0, 0, 0, 0, 40, 228, 223, 64, 0, 0, 0, 0, 41, 120, 135, 64, 0, 0, 0, 0, 41,
        212, 194, 48, 0, 0, 0, 0, 42, 196, 179, 48, 0, 0, 0, 0, 43, 180, 164, 48, 0, 0, 0, 0, 44,
        164, 149, 48, 0, 0, 0, 0, 45, 148, 134, 48, 0, 0, 0, 0, 46, 132, 119, 48, 0, 0, 0, 0, 47,
        116, 104, 48, 0, 0, 0, 0, 47, 199, 76, 128, 0, 0, 0, 0, 48, 100, 103, 64, 0, 0, 0, 0, 49,
        93, 146, 192, 0, 0, 0, 0, 50, 114, 109, 192, 0, 0, 0, 0, 51, 61, 116, 192, 0, 0, 0, 0, 52,
        82, 79, 192, 0, 0, 0, 0, 53, 29, 86, 192, 0, 0, 0, 0, 54, 50, 49, 192, 0, 0, 0, 0, 54, 253,
        56, 192, 0, 0, 0, 0, 56, 27, 78, 64, 0, 0, 0, 0, 56, 221, 26, 192, 0, 0, 0, 0, 57, 251, 48,
        64, 0, 0, 0, 0, 58, 188, 252, 192, 0, 0, 0, 0, 59, 219, 18, 64, 0, 0, 0, 0, 60, 166, 25,
        64, 0, 0, 0, 0, 61, 186, 244, 64, 0, 0, 0, 0, 62, 133, 251, 64, 0, 0, 0, 0, 63, 154, 214,
        64, 0, 0, 0, 0, 64, 101, 221, 64, 0, 0, 0, 0, 65, 131, 242, 192, 0, 0, 0, 0, 66, 69, 191,
        64, 0, 0, 0, 0, 67, 99, 212, 192, 0, 0, 0, 0, 68, 37, 161, 64, 0, 0, 0, 0, 69, 67, 182,
        192, 0, 0, 0, 0, 70, 5, 131, 64, 0, 0, 0, 0, 71, 35, 152, 192, 0, 0, 0, 0, 71, 238, 159,
        192, 0, 0, 0, 0, 73, 3, 122, 192, 0, 0, 0, 0, 73, 206, 129, 192, 0, 0, 0, 0, 74, 227, 92,
        192, 0, 0, 0, 0, 75, 174, 99, 192, 0, 0, 0, 0, 76, 204, 121, 64, 0, 0, 0, 0, 77, 142, 69,
        192, 0, 0, 0, 0, 84, 75, 243, 48, 0, 0, 0, 0, 86, 246, 234, 64, 1, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 3, 2, 3, 2, 4, 1, 4, 1, 4, 1, 4,
        1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 3, 1, 3, 0, 0,
        78, 132, 0, 0, 0, 0, 84, 96, 0, 4, 0, 0, 112, 128, 1, 8, 0, 0, 98, 112, 0, 12, 0, 0, 98,
        112, 1, 12, 76, 77, 84, 0, 43, 48, 54, 0, 43, 48, 56, 0, 43, 48, 55, 0, 10, 60, 43, 48, 55,
        62, 45, 55, 10,
    ];
    pub(crate) const ASIA_BEIRUT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 86, 182, 194, 184, 255, 255, 255, 255,
        162, 101, 99, 224, 255, 255, 255, 255, 163, 123, 130, 80, 255, 255, 255, 255, 164, 78, 128,
        96, 255, 255, 255, 255, 165, 63, 180, 208, 255, 255, 255, 255, 166, 37, 39, 224, 255, 255,
        255, 255, 167, 39, 127, 208, 255, 255, 255, 255, 168, 41, 243, 224, 255, 255, 255, 255,
        168, 235, 178, 80, 255, 255, 255, 255, 232, 42, 133, 224, 255, 255, 255, 255, 232, 244, 45,
        80, 255, 255, 255, 255, 234, 11, 185, 96, 255, 255, 255, 255, 234, 213, 96, 208, 255, 255,
        255, 255, 235, 236, 236, 224, 255, 255, 255, 255, 236, 182, 148, 80, 255, 255, 255, 255,
        237, 207, 113, 224, 255, 255, 255, 255, 238, 153, 25, 80, 255, 255, 255, 255, 239, 176,
        165, 96, 255, 255, 255, 255, 240, 122, 76, 208, 0, 0, 0, 0, 4, 166, 94, 96, 0, 0, 0, 0, 5,
        43, 119, 208, 0, 0, 0, 0, 6, 67, 3, 224, 0, 0, 0, 0, 7, 12, 171, 80, 0, 0, 0, 0, 8, 36, 55,
        96, 0, 0, 0, 0, 8, 237, 222, 208, 0, 0, 0, 0, 10, 5, 106, 224, 0, 0, 0, 0, 10, 207, 18, 80,
        0, 0, 0, 0, 11, 231, 239, 224, 0, 0, 0, 0, 12, 177, 151, 80, 0, 0, 0, 0, 13, 201, 35, 96,
        0, 0, 0, 0, 14, 146, 202, 208, 0, 0, 0, 0, 15, 169, 5, 96, 0, 0, 0, 0, 16, 114, 172, 208,
        0, 0, 0, 0, 26, 244, 46, 224, 0, 0, 0, 0, 27, 209, 156, 208, 0, 0, 0, 0, 28, 213, 98, 96,
        0, 0, 0, 0, 29, 178, 208, 80, 0, 0, 0, 0, 30, 182, 149, 224, 0, 0, 0, 0, 31, 148, 3, 208,
        0, 0, 0, 0, 32, 151, 201, 96, 0, 0, 0, 0, 33, 117, 55, 80, 0, 0, 0, 0, 34, 163, 44, 224, 0,
        0, 0, 0, 35, 87, 188, 80, 0, 0, 0, 0, 36, 103, 95, 96, 0, 0, 0, 0, 37, 56, 239, 208, 0, 0,
        0, 0, 38, 60, 181, 96, 0, 0, 0, 0, 39, 26, 35, 80, 0, 0, 0, 0, 40, 29, 232, 224, 0, 0, 0,
        0, 40, 251, 86, 208, 0, 0, 0, 0, 42, 0, 109, 224, 0, 0, 0, 0, 42, 206, 9, 208, 0, 0, 0, 0,
        43, 180, 206, 96, 0, 0, 0, 0, 44, 164, 177, 80, 0, 0, 0, 0, 45, 148, 176, 96, 0, 0, 0, 0,
        46, 132, 147, 80, 0, 0, 0, 0, 47, 116, 146, 96, 0, 0, 0, 0, 48, 100, 117, 80, 0, 0, 0, 0,
        49, 93, 174, 224, 0, 0, 0, 0, 50, 77, 145, 208, 0, 0, 0, 0, 51, 61, 144, 224, 0, 0, 0, 0,
        52, 45, 115, 208, 0, 0, 0, 0, 53, 29, 114, 224, 0, 0, 0, 0, 54, 13, 85, 208, 0, 0, 0, 0,
        54, 253, 84, 224, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 33, 72, 0, 0, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0, 9,
        76, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84,
        44, 77, 51, 46, 53, 46, 48, 47, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 48, 10,
    ];
    pub(crate) const ASIA_BISHKEK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        52, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 126, 16, 255, 255, 255, 255, 181,
        163, 239, 48, 0, 0, 0, 0, 21, 39, 125, 160, 0, 0, 0, 0, 22, 24, 178, 16, 0, 0, 0, 0, 23, 8,
        177, 32, 0, 0, 0, 0, 23, 249, 229, 144, 0, 0, 0, 0, 24, 233, 228, 160, 0, 0, 0, 0, 25, 219,
        25, 16, 0, 0, 0, 0, 26, 204, 105, 160, 0, 0, 0, 0, 27, 188, 118, 192, 0, 0, 0, 0, 28, 172,
        103, 192, 0, 0, 0, 0, 29, 156, 88, 192, 0, 0, 0, 0, 30, 140, 73, 192, 0, 0, 0, 0, 31, 124,
        58, 192, 0, 0, 0, 0, 32, 108, 43, 192, 0, 0, 0, 0, 33, 92, 28, 192, 0, 0, 0, 0, 34, 76, 13,
        192, 0, 0, 0, 0, 35, 59, 254, 192, 0, 0, 0, 0, 36, 43, 239, 192, 0, 0, 0, 0, 37, 27, 224,
        192, 0, 0, 0, 0, 38, 11, 209, 192, 0, 0, 0, 0, 39, 4, 253, 64, 0, 0, 0, 0, 39, 244, 238,
        64, 0, 0, 0, 0, 40, 190, 163, 192, 0, 0, 0, 0, 41, 231, 55, 48, 0, 0, 0, 0, 42, 196, 165,
        32, 0, 0, 0, 0, 43, 199, 25, 48, 0, 0, 0, 0, 44, 164, 135, 32, 0, 0, 0, 0, 45, 166, 251,
        48, 0, 0, 0, 0, 46, 132, 105, 32, 0, 0, 0, 0, 47, 134, 221, 48, 0, 0, 0, 0, 48, 100, 75,
        32, 0, 0, 0, 0, 49, 102, 191, 48, 0, 0, 0, 0, 50, 77, 103, 160, 0, 0, 0, 0, 51, 61, 137,
        216, 0, 0, 0, 0, 52, 82, 86, 200, 0, 0, 0, 0, 53, 29, 107, 216, 0, 0, 0, 0, 54, 50, 56,
        200, 0, 0, 0, 0, 54, 253, 77, 216, 0, 0, 0, 0, 56, 27, 85, 72, 0, 0, 0, 0, 56, 221, 47,
        216, 0, 0, 0, 0, 57, 251, 55, 72, 0, 0, 0, 0, 58, 189, 17, 216, 0, 0, 0, 0, 59, 219, 25,
        72, 0, 0, 0, 0, 60, 166, 46, 88, 0, 0, 0, 0, 61, 186, 251, 72, 0, 0, 0, 0, 62, 134, 16, 88,
        0, 0, 0, 0, 63, 154, 221, 72, 0, 0, 0, 0, 64, 101, 242, 88, 0, 0, 0, 0, 65, 131, 249, 200,
        0, 0, 0, 0, 66, 69, 212, 88, 0, 0, 0, 0, 66, 251, 146, 32, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
        1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 0, 0, 69, 240, 0, 0, 0, 0, 70, 80, 0, 4, 0, 0, 98, 112, 1,
        8, 0, 0, 84, 96, 0, 12, 0, 0, 84, 96, 1, 12, 76, 77, 84, 0, 43, 48, 53, 0, 43, 48, 55, 0,
        43, 48, 54, 0, 10, 60, 43, 48, 54, 62, 45, 54, 10,
    ];
    pub(crate) const ASIA_BRUNEI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 173, 138, 2, 68, 255, 255, 255, 255, 186,
        103, 71, 136, 1, 2, 0, 0, 107, 188, 0, 0, 0, 0, 105, 120, 0, 4, 0, 0, 112, 128, 0, 10, 76,
        77, 84, 0, 43, 48, 55, 51, 48, 0, 43, 48, 56, 0, 10, 60, 43, 48, 56, 62, 45, 56, 10,
    ];
    pub(crate) const ASIA_CALCUTTA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 5, 0, 0, 0, 22, 255, 255, 255, 255, 38, 186, 24, 40, 255, 255, 255, 255, 67,
        231, 235, 48, 255, 255, 255, 255, 135, 157, 188, 186, 255, 255, 255, 255, 202, 219, 140,
        40, 255, 255, 255, 255, 204, 5, 113, 24, 255, 255, 255, 255, 204, 149, 50, 168, 255, 255,
        255, 255, 210, 116, 18, 152, 1, 2, 3, 4, 3, 4, 3, 0, 0, 82, 216, 0, 0, 0, 0, 82, 208, 0, 4,
        0, 0, 75, 70, 0, 8, 0, 0, 77, 88, 0, 12, 0, 0, 91, 104, 1, 16, 76, 77, 84, 0, 72, 77, 84,
        0, 77, 77, 84, 0, 73, 83, 84, 0, 43, 48, 54, 51, 48, 0, 10, 73, 83, 84, 45, 53, 58, 51, 48,
        10,
    ];
    pub(crate) const ASIA_CHITA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        66, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 161, 219, 249, 160, 255, 255, 255, 255,
        181, 163, 197, 0, 0, 0, 0, 0, 21, 39, 83, 112, 0, 0, 0, 0, 22, 24, 135, 224, 0, 0, 0, 0,
        23, 8, 134, 240, 0, 0, 0, 0, 23, 249, 187, 96, 0, 0, 0, 0, 24, 233, 186, 112, 0, 0, 0, 0,
        25, 218, 238, 224, 0, 0, 0, 0, 26, 204, 63, 112, 0, 0, 0, 0, 27, 188, 76, 144, 0, 0, 0, 0,
        28, 172, 61, 144, 0, 0, 0, 0, 29, 156, 46, 144, 0, 0, 0, 0, 30, 140, 31, 144, 0, 0, 0, 0,
        31, 124, 16, 144, 0, 0, 0, 0, 32, 108, 1, 144, 0, 0, 0, 0, 33, 91, 242, 144, 0, 0, 0, 0,
        34, 75, 227, 144, 0, 0, 0, 0, 35, 59, 212, 144, 0, 0, 0, 0, 36, 43, 197, 144, 0, 0, 0, 0,
        37, 27, 182, 144, 0, 0, 0, 0, 38, 11, 167, 144, 0, 0, 0, 0, 39, 4, 211, 16, 0, 0, 0, 0, 39,
        244, 196, 16, 0, 0, 0, 0, 40, 228, 195, 32, 0, 0, 0, 0, 41, 120, 107, 32, 0, 0, 0, 0, 41,
        212, 166, 16, 0, 0, 0, 0, 42, 196, 151, 16, 0, 0, 0, 0, 43, 180, 136, 16, 0, 0, 0, 0, 44,
        164, 121, 16, 0, 0, 0, 0, 45, 148, 106, 16, 0, 0, 0, 0, 46, 132, 91, 16, 0, 0, 0, 0, 47,
        116, 76, 16, 0, 0, 0, 0, 48, 100, 61, 16, 0, 0, 0, 0, 49, 93, 104, 144, 0, 0, 0, 0, 50,
        114, 67, 144, 0, 0, 0, 0, 51, 61, 74, 144, 0, 0, 0, 0, 52, 82, 37, 144, 0, 0, 0, 0, 53, 29,
        44, 144, 0, 0, 0, 0, 54, 50, 7, 144, 0, 0, 0, 0, 54, 253, 14, 144, 0, 0, 0, 0, 56, 27, 36,
        16, 0, 0, 0, 0, 56, 220, 240, 144, 0, 0, 0, 0, 57, 251, 6, 16, 0, 0, 0, 0, 58, 188, 210,
        144, 0, 0, 0, 0, 59, 218, 232, 16, 0, 0, 0, 0, 60, 165, 239, 16, 0, 0, 0, 0, 61, 186, 202,
        16, 0, 0, 0, 0, 62, 133, 209, 16, 0, 0, 0, 0, 63, 154, 172, 16, 0, 0, 0, 0, 64, 101, 179,
        16, 0, 0, 0, 0, 65, 131, 200, 144, 0, 0, 0, 0, 66, 69, 149, 16, 0, 0, 0, 0, 67, 99, 170,
        144, 0, 0, 0, 0, 68, 37, 119, 16, 0, 0, 0, 0, 69, 67, 140, 144, 0, 0, 0, 0, 70, 5, 89, 16,
        0, 0, 0, 0, 71, 35, 110, 144, 0, 0, 0, 0, 71, 238, 117, 144, 0, 0, 0, 0, 73, 3, 80, 144, 0,
        0, 0, 0, 73, 206, 87, 144, 0, 0, 0, 0, 74, 227, 50, 144, 0, 0, 0, 0, 75, 174, 57, 144, 0,
        0, 0, 0, 76, 204, 79, 16, 0, 0, 0, 0, 77, 142, 27, 144, 0, 0, 0, 0, 84, 75, 201, 0, 0, 0,
        0, 0, 86, 246, 206, 32, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        4, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 5, 1, 3, 0, 0, 106, 96, 0, 0, 0, 0, 112, 128, 0, 4, 0, 0,
        140, 160, 1, 8, 0, 0, 126, 144, 0, 12, 0, 0, 126, 144, 1, 12, 0, 0, 140, 160, 0, 8, 76, 77,
        84, 0, 43, 48, 56, 0, 43, 49, 48, 0, 43, 48, 57, 0, 10, 60, 43, 48, 57, 62, 45, 57, 10,
    ];
    pub(crate) const ASIA_CHOIBALSAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        51, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 134, 211, 231, 40, 0, 0, 0, 0, 15, 11,
        220, 144, 0, 0, 0, 0, 24, 233, 200, 128, 0, 0, 0, 0, 25, 218, 238, 224, 0, 0, 0, 0, 26,
        204, 63, 112, 0, 0, 0, 0, 27, 188, 34, 96, 0, 0, 0, 0, 28, 172, 33, 112, 0, 0, 0, 0, 29,
        156, 4, 96, 0, 0, 0, 0, 30, 140, 3, 112, 0, 0, 0, 0, 31, 123, 230, 96, 0, 0, 0, 0, 32, 107,
        229, 112, 0, 0, 0, 0, 33, 91, 200, 96, 0, 0, 0, 0, 34, 75, 199, 112, 0, 0, 0, 0, 35, 59,
        170, 96, 0, 0, 0, 0, 36, 43, 169, 112, 0, 0, 0, 0, 37, 27, 140, 96, 0, 0, 0, 0, 38, 11,
        139, 112, 0, 0, 0, 0, 39, 4, 168, 224, 0, 0, 0, 0, 39, 244, 167, 240, 0, 0, 0, 0, 40, 228,
        138, 224, 0, 0, 0, 0, 41, 212, 137, 240, 0, 0, 0, 0, 42, 196, 108, 224, 0, 0, 0, 0, 43,
        180, 107, 240, 0, 0, 0, 0, 44, 164, 78, 224, 0, 0, 0, 0, 45, 148, 77, 240, 0, 0, 0, 0, 46,
        132, 48, 224, 0, 0, 0, 0, 47, 116, 47, 240, 0, 0, 0, 0, 48, 100, 18, 224, 0, 0, 0, 0, 49,
        93, 76, 112, 0, 0, 0, 0, 50, 77, 47, 96, 0, 0, 0, 0, 51, 61, 46, 112, 0, 0, 0, 0, 52, 45,
        17, 96, 0, 0, 0, 0, 53, 29, 16, 112, 0, 0, 0, 0, 54, 12, 243, 96, 0, 0, 0, 0, 58, 233, 165,
        144, 0, 0, 0, 0, 59, 180, 158, 128, 0, 0, 0, 0, 60, 164, 157, 144, 0, 0, 0, 0, 61, 148,
        128, 128, 0, 0, 0, 0, 62, 132, 127, 144, 0, 0, 0, 0, 63, 116, 98, 128, 0, 0, 0, 0, 64, 100,
        97, 144, 0, 0, 0, 0, 65, 84, 68, 128, 0, 0, 0, 0, 66, 68, 67, 144, 0, 0, 0, 0, 67, 52, 38,
        128, 0, 0, 0, 0, 68, 36, 37, 144, 0, 0, 0, 0, 69, 29, 67, 0, 0, 0, 0, 0, 71, 239, 170, 240,
        0, 0, 0, 0, 85, 21, 154, 160, 0, 0, 0, 0, 86, 5, 97, 112, 0, 0, 0, 0, 86, 245, 124, 160, 0,
        0, 0, 0, 87, 229, 67, 112, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 2, 5, 2, 5, 2,
        0, 0, 107, 88, 0, 0, 0, 0, 98, 112, 0, 4, 0, 0, 112, 128, 0, 8, 0, 0, 126, 144, 0, 12, 0,
        0, 140, 160, 1, 16, 0, 0, 126, 144, 1, 12, 76, 77, 84, 0, 43, 48, 55, 0, 43, 48, 56, 0, 43,
        48, 57, 0, 43, 49, 48, 0, 10, 60, 43, 48, 56, 62, 45, 56, 10,
    ];
    pub(crate) const ASIA_CHONGQING: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        14, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 176, 254, 168, 148, 0, 0, 0, 0, 19, 109,
        201, 16, 0, 0, 0, 0, 30, 186, 82, 32, 0, 0, 0, 0, 31, 105, 155, 144, 0, 0, 0, 0, 32, 126,
        132, 160, 0, 0, 0, 0, 33, 73, 125, 144, 0, 0, 0, 0, 34, 103, 161, 32, 0, 0, 0, 0, 35, 41,
        95, 144, 0, 0, 0, 0, 36, 71, 131, 32, 0, 0, 0, 0, 37, 18, 124, 16, 0, 0, 0, 0, 38, 39, 101,
        32, 0, 0, 0, 0, 38, 242, 94, 16, 0, 0, 0, 0, 40, 7, 71, 32, 0, 0, 0, 0, 40, 210, 64, 16, 1,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0, 99, 236, 0, 0, 0, 0, 98, 112, 0, 4, 0, 0, 126,
        144, 1, 8, 0, 0, 112, 128, 0, 12, 76, 77, 84, 0, 43, 48, 55, 0, 67, 68, 84, 0, 67, 83, 84,
        0, 10, 67, 83, 84, 45, 56, 10,
    ];
    pub(crate) const ASIA_COLOMBO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 7, 0, 0, 0, 24, 255, 255, 255, 255, 86, 182, 153, 36, 255, 255, 255, 255, 135,
        157, 189, 28, 255, 255, 255, 255, 203, 90, 28, 40, 255, 255, 255, 255, 204, 149, 43, 160,
        255, 255, 255, 255, 210, 117, 128, 56, 0, 0, 0, 0, 49, 166, 0, 40, 0, 0, 0, 0, 50, 113, 0,
        32, 0, 0, 0, 0, 68, 63, 234, 40, 1, 2, 3, 4, 2, 5, 6, 2, 0, 0, 74, 220, 0, 0, 0, 0, 74,
        228, 0, 4, 0, 0, 77, 88, 0, 8, 0, 0, 84, 96, 1, 14, 0, 0, 91, 104, 1, 18, 0, 0, 91, 104, 0,
        18, 0, 0, 84, 96, 0, 14, 76, 77, 84, 0, 77, 77, 84, 0, 43, 48, 53, 51, 48, 0, 43, 48, 54,
        0, 43, 48, 54, 51, 48, 0, 10, 60, 43, 48, 53, 51, 48, 62, 45, 53, 58, 51, 48, 10,
    ];
    pub(crate) const ASIA_DACCA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 6, 0, 0, 0, 28, 255, 255, 255, 255, 105, 134, 134, 188, 255, 255, 255, 255,
        202, 219, 134, 176, 255, 255, 255, 255, 204, 5, 113, 24, 255, 255, 255, 255, 204, 149, 50,
        168, 255, 255, 255, 255, 221, 168, 210, 152, 0, 0, 0, 0, 74, 59, 196, 16, 0, 0, 0, 0, 75,
        60, 216, 144, 1, 2, 3, 2, 4, 5, 4, 0, 0, 84, 196, 0, 0, 0, 0, 82, 208, 0, 4, 0, 0, 91, 104,
        0, 8, 0, 0, 77, 88, 0, 14, 0, 0, 84, 96, 0, 20, 0, 0, 98, 112, 1, 24, 76, 77, 84, 0, 72,
        77, 84, 0, 43, 48, 54, 51, 48, 0, 43, 48, 53, 51, 48, 0, 43, 48, 54, 0, 43, 48, 55, 0, 10,
        60, 43, 48, 54, 62, 45, 54, 10,
    ];
    pub(crate) const ASIA_DAMASCUS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        99, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 161, 242, 171, 120, 255, 255, 255, 255,
        162, 129, 47, 128, 255, 255, 255, 255, 163, 94, 157, 112, 255, 255, 255, 255, 164, 97, 17,
        128, 255, 255, 255, 255, 165, 62, 127, 112, 255, 255, 255, 255, 166, 64, 243, 128, 255,
        255, 255, 255, 167, 30, 97, 112, 255, 255, 255, 255, 168, 32, 213, 128, 255, 255, 255, 255,
        169, 7, 125, 240, 255, 255, 255, 255, 241, 143, 82, 0, 255, 255, 255, 255, 242, 91, 156,
        112, 255, 255, 255, 255, 243, 115, 40, 128, 255, 255, 255, 255, 244, 59, 126, 112, 255,
        255, 255, 255, 245, 85, 173, 128, 255, 255, 255, 255, 246, 31, 84, 240, 255, 255, 255, 255,
        247, 54, 225, 0, 255, 255, 255, 255, 247, 255, 54, 240, 255, 255, 255, 255, 249, 14, 218,
        0, 255, 255, 255, 255, 249, 225, 187, 240, 255, 255, 255, 255, 250, 249, 72, 0, 255, 255,
        255, 255, 251, 194, 239, 112, 255, 255, 255, 255, 252, 219, 205, 0, 255, 255, 255, 255,
        253, 165, 116, 112, 255, 255, 255, 255, 254, 189, 0, 128, 255, 255, 255, 255, 255, 134,
        167, 240, 0, 0, 0, 0, 0, 158, 52, 0, 0, 0, 0, 0, 1, 103, 219, 112, 0, 0, 0, 0, 2, 127, 103,
        128, 0, 0, 0, 0, 3, 73, 14, 240, 0, 0, 0, 0, 4, 97, 236, 128, 0, 0, 0, 0, 5, 43, 147, 240,
        0, 0, 0, 0, 6, 67, 32, 0, 0, 0, 0, 0, 7, 12, 199, 112, 0, 0, 0, 0, 8, 36, 83, 128, 0, 0, 0,
        0, 8, 237, 250, 240, 0, 0, 0, 0, 10, 5, 135, 0, 0, 0, 0, 0, 10, 207, 46, 112, 0, 0, 0, 0,
        11, 232, 12, 0, 0, 0, 0, 0, 12, 177, 179, 112, 0, 0, 0, 0, 13, 201, 63, 128, 0, 0, 0, 0,
        14, 107, 89, 240, 0, 0, 0, 0, 15, 170, 115, 0, 0, 0, 0, 0, 16, 76, 141, 112, 0, 0, 0, 0,
        24, 244, 197, 0, 0, 0, 0, 0, 25, 219, 109, 112, 0, 0, 0, 0, 26, 215, 74, 0, 0, 0, 0, 0, 27,
        189, 242, 112, 0, 0, 0, 0, 30, 85, 35, 0, 0, 0, 0, 0, 31, 138, 229, 112, 0, 0, 0, 0, 32,
        71, 122, 0, 0, 0, 0, 0, 33, 137, 25, 240, 0, 0, 0, 0, 34, 60, 116, 0, 0, 0, 0, 0, 35, 107,
        158, 240, 0, 0, 0, 0, 36, 50, 191, 128, 0, 0, 0, 0, 37, 37, 69, 112, 0, 0, 0, 0, 38, 21,
        68, 128, 0, 0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 246, 91, 224, 0, 0, 0, 0, 40, 231,
        144, 80, 0, 0, 0, 0, 41, 226, 27, 96, 0, 0, 0, 0, 42, 202, 21, 80, 0, 0, 0, 0, 43, 178, 43,
        96, 0, 0, 0, 0, 44, 163, 95, 208, 0, 0, 0, 0, 45, 155, 71, 224, 0, 0, 0, 0, 46, 140, 124,
        80, 0, 0, 0, 0, 47, 124, 123, 96, 0, 0, 0, 0, 48, 109, 175, 208, 0, 0, 0, 0, 49, 95, 0, 96,
        0, 0, 0, 0, 50, 80, 52, 208, 0, 0, 0, 0, 51, 62, 226, 96, 0, 0, 0, 0, 52, 49, 104, 80, 0,
        0, 0, 0, 53, 30, 196, 96, 0, 0, 0, 0, 54, 18, 155, 208, 0, 0, 0, 0, 55, 2, 154, 224, 0, 0,
        0, 0, 55, 243, 207, 80, 0, 0, 0, 0, 56, 229, 31, 224, 0, 0, 0, 0, 57, 214, 84, 80, 0, 0, 0,
        0, 58, 198, 83, 96, 0, 0, 0, 0, 59, 183, 135, 208, 0, 0, 0, 0, 60, 167, 134, 224, 0, 0, 0,
        0, 61, 152, 187, 80, 0, 0, 0, 0, 62, 136, 186, 96, 0, 0, 0, 0, 63, 121, 238, 208, 0, 0, 0,
        0, 64, 107, 63, 96, 0, 0, 0, 0, 65, 92, 115, 208, 0, 0, 0, 0, 66, 76, 114, 224, 0, 0, 0, 0,
        67, 61, 167, 80, 0, 0, 0, 0, 68, 45, 166, 96, 0, 0, 0, 0, 69, 18, 253, 80, 0, 0, 0, 0, 70,
        12, 54, 224, 0, 0, 0, 0, 71, 42, 62, 80, 0, 0, 0, 0, 71, 245, 83, 96, 0, 0, 0, 0, 73, 11,
        113, 208, 0, 0, 0, 0, 73, 203, 250, 224, 0, 0, 0, 0, 74, 234, 2, 80, 0, 0, 0, 0, 75, 181,
        23, 96, 0, 0, 0, 0, 76, 201, 228, 80, 0, 0, 0, 0, 77, 148, 249, 96, 0, 0, 0, 0, 78, 169,
        198, 80, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 34, 8, 0, 0, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0,
        9, 76, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84,
        44, 77, 51, 46, 53, 46, 53, 47, 48, 44, 77, 49, 48, 46, 53, 46, 53, 47, 48, 10,
    ];
    pub(crate) const ASIA_DILI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 230, 24, 196, 255, 255, 255, 255, 203,
        153, 50, 240, 0, 0, 0, 0, 11, 234, 48, 112, 0, 0, 0, 0, 57, 195, 153, 0, 1, 2, 1, 2, 0, 0,
        117, 188, 0, 0, 0, 0, 112, 128, 0, 4, 0, 0, 126, 144, 0, 8, 76, 77, 84, 0, 43, 48, 56, 0,
        43, 48, 57, 0, 10, 60, 43, 48, 57, 62, 45, 57, 10,
    ];
    pub(crate) const ASIA_DUBAI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 161, 242, 153, 168, 1, 0, 0, 51, 216, 0, 0,
        0, 0, 56, 64, 0, 4, 76, 77, 84, 0, 43, 48, 52, 0, 10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const ASIA_DUSHANBE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        24, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 131, 128, 255, 255, 255, 255,
        181, 163, 239, 48, 0, 0, 0, 0, 21, 39, 125, 160, 0, 0, 0, 0, 22, 24, 178, 16, 0, 0, 0, 0,
        23, 8, 177, 32, 0, 0, 0, 0, 23, 249, 229, 144, 0, 0, 0, 0, 24, 233, 228, 160, 0, 0, 0, 0,
        25, 219, 25, 16, 0, 0, 0, 0, 26, 204, 105, 160, 0, 0, 0, 0, 27, 188, 118, 192, 0, 0, 0, 0,
        28, 172, 103, 192, 0, 0, 0, 0, 29, 156, 88, 192, 0, 0, 0, 0, 30, 140, 73, 192, 0, 0, 0, 0,
        31, 124, 58, 192, 0, 0, 0, 0, 32, 108, 43, 192, 0, 0, 0, 0, 33, 92, 28, 192, 0, 0, 0, 0,
        34, 76, 13, 192, 0, 0, 0, 0, 35, 59, 254, 192, 0, 0, 0, 0, 36, 43, 239, 192, 0, 0, 0, 0,
        37, 27, 224, 192, 0, 0, 0, 0, 38, 11, 209, 192, 0, 0, 0, 0, 39, 4, 253, 64, 0, 0, 0, 0, 39,
        244, 238, 64, 0, 0, 0, 0, 40, 202, 143, 80, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 4, 1, 0, 0, 64, 128, 0, 0, 0, 0, 70, 80, 0, 4, 0, 0, 98, 112, 1, 8, 0, 0,
        84, 96, 0, 12, 0, 0, 84, 96, 1, 12, 76, 77, 84, 0, 43, 48, 53, 0, 43, 48, 55, 0, 43, 48,
        54, 0, 10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ASIA_FAMAGUSTA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        86, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 165, 119, 30, 44, 0, 0, 0, 0, 9, 237, 175,
        224, 0, 0, 0, 0, 10, 221, 146, 208, 0, 0, 0, 0, 11, 250, 100, 224, 0, 0, 0, 0, 12, 190,
        198, 80, 0, 0, 0, 0, 13, 164, 57, 96, 0, 0, 0, 0, 14, 138, 225, 208, 0, 0, 0, 0, 15, 132,
        27, 96, 0, 0, 0, 0, 16, 117, 79, 208, 0, 0, 0, 0, 17, 99, 253, 96, 0, 0, 0, 0, 18, 83, 224,
        80, 0, 0, 0, 0, 19, 77, 25, 224, 0, 0, 0, 0, 20, 51, 194, 80, 0, 0, 0, 0, 21, 35, 193, 96,
        0, 0, 0, 0, 22, 19, 164, 80, 0, 0, 0, 0, 23, 3, 163, 96, 0, 0, 0, 0, 23, 243, 134, 80, 0,
        0, 0, 0, 24, 227, 133, 96, 0, 0, 0, 0, 25, 211, 104, 80, 0, 0, 0, 0, 26, 195, 103, 96, 0,
        0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0, 28, 172, 131, 224, 0, 0, 0, 0, 29, 156, 102, 208,
        0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 72, 208, 0, 0, 0, 0, 32, 108, 71, 224,
        0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0, 34, 76, 41, 224, 0, 0, 0, 0, 35, 60, 12, 208, 0,
        0, 0, 0, 36, 44, 11, 224, 0, 0, 0, 0, 37, 27, 238, 208, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0,
        0, 0, 39, 5, 11, 80, 0, 0, 0, 0, 39, 245, 10, 96, 0, 0, 0, 0, 40, 228, 237, 80, 0, 0, 0, 0,
        41, 212, 236, 96, 0, 0, 0, 0, 42, 196, 207, 80, 0, 0, 0, 0, 43, 180, 206, 96, 0, 0, 0, 0,
        44, 164, 177, 80, 0, 0, 0, 0, 45, 148, 176, 96, 0, 0, 0, 0, 46, 132, 147, 80, 0, 0, 0, 0,
        47, 116, 146, 96, 0, 0, 0, 0, 48, 100, 117, 80, 0, 0, 0, 0, 49, 93, 174, 224, 0, 0, 0, 0,
        50, 77, 145, 208, 0, 0, 0, 0, 51, 61, 144, 224, 0, 0, 0, 0, 52, 45, 115, 208, 0, 0, 0, 0,
        53, 29, 114, 224, 0, 0, 0, 0, 54, 50, 120, 16, 0, 0, 0, 0, 54, 253, 127, 16, 0, 0, 0, 0,
        56, 27, 148, 144, 0, 0, 0, 0, 56, 221, 97, 16, 0, 0, 0, 0, 57, 251, 118, 144, 0, 0, 0, 0,
        58, 189, 67, 16, 0, 0, 0, 0, 59, 219, 88, 144, 0, 0, 0, 0, 60, 166, 95, 144, 0, 0, 0, 0,
        61, 187, 58, 144, 0, 0, 0, 0, 62, 134, 65, 144, 0, 0, 0, 0, 63, 155, 28, 144, 0, 0, 0, 0,
        64, 102, 35, 144, 0, 0, 0, 0, 65, 132, 57, 16, 0, 0, 0, 0, 66, 70, 5, 144, 0, 0, 0, 0, 67,
        100, 27, 16, 0, 0, 0, 0, 68, 37, 231, 144, 0, 0, 0, 0, 69, 67, 253, 16, 0, 0, 0, 0, 70, 5,
        201, 144, 0, 0, 0, 0, 71, 35, 223, 16, 0, 0, 0, 0, 71, 238, 230, 16, 0, 0, 0, 0, 73, 3,
        193, 16, 0, 0, 0, 0, 73, 206, 200, 16, 0, 0, 0, 0, 74, 227, 163, 16, 0, 0, 0, 0, 75, 174,
        170, 16, 0, 0, 0, 0, 76, 204, 191, 144, 0, 0, 0, 0, 77, 142, 140, 16, 0, 0, 0, 0, 78, 172,
        161, 144, 0, 0, 0, 0, 79, 110, 110, 16, 0, 0, 0, 0, 80, 140, 131, 144, 0, 0, 0, 0, 81, 87,
        138, 144, 0, 0, 0, 0, 82, 108, 101, 144, 0, 0, 0, 0, 83, 55, 108, 144, 0, 0, 0, 0, 84, 76,
        71, 144, 0, 0, 0, 0, 85, 23, 78, 144, 0, 0, 0, 0, 86, 44, 41, 144, 0, 0, 0, 0, 86, 247, 48,
        144, 0, 0, 0, 0, 87, 208, 127, 208, 0, 0, 0, 0, 89, 245, 40, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 2, 0, 0, 31, 212, 0, 0, 0, 0, 42, 48, 1, 4,
        0, 0, 28, 32, 0, 9, 0, 0, 42, 48, 0, 13, 76, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0,
        43, 48, 51, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 51,
        44, 77, 49, 48, 46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const ASIA_GAZA: &[u8] = &[
        84, 90, 105, 102, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 51,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        118, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 125, 189, 74, 176, 255, 255, 255, 255,
        200, 89, 207, 0, 255, 255, 255, 255, 200, 250, 166, 0, 255, 255, 255, 255, 201, 56, 156,
        128, 255, 255, 255, 255, 204, 229, 235, 128, 255, 255, 255, 255, 205, 172, 254, 0, 255,
        255, 255, 255, 206, 199, 31, 0, 255, 255, 255, 255, 207, 143, 131, 0, 255, 255, 255, 255,
        208, 169, 164, 0, 255, 255, 255, 255, 209, 132, 125, 0, 255, 255, 255, 255, 210, 138, 215,
        128, 255, 255, 255, 255, 211, 101, 176, 128, 255, 255, 255, 255, 212, 108, 11, 0, 255, 255,
        255, 255, 232, 54, 99, 96, 255, 255, 255, 255, 232, 244, 45, 80, 255, 255, 255, 255, 234,
        11, 185, 96, 255, 255, 255, 255, 234, 213, 96, 208, 255, 255, 255, 255, 235, 236, 250, 240,
        255, 255, 255, 255, 236, 181, 109, 0, 255, 255, 255, 255, 237, 207, 127, 240, 255, 255,
        255, 255, 238, 151, 242, 0, 255, 255, 255, 255, 239, 176, 179, 112, 255, 255, 255, 255,
        240, 121, 37, 128, 255, 255, 255, 255, 241, 145, 230, 240, 255, 255, 255, 255, 242, 90, 89,
        0, 255, 255, 255, 255, 243, 115, 26, 112, 255, 255, 255, 255, 244, 59, 140, 128, 255, 255,
        255, 255, 245, 85, 159, 112, 255, 255, 255, 255, 246, 30, 17, 128, 255, 255, 255, 255, 247,
        54, 210, 240, 255, 255, 255, 255, 247, 255, 69, 0, 255, 255, 255, 255, 249, 24, 6, 112,
        255, 255, 255, 255, 249, 225, 202, 0, 255, 255, 255, 255, 250, 249, 57, 240, 255, 255, 255,
        255, 251, 39, 66, 80, 0, 0, 0, 0, 8, 124, 139, 224, 0, 0, 0, 0, 8, 253, 176, 208, 0, 0, 0,
        0, 9, 246, 234, 96, 0, 0, 0, 0, 10, 166, 51, 208, 0, 0, 0, 0, 19, 233, 252, 96, 0, 0, 0, 0,
        20, 33, 91, 96, 0, 0, 0, 0, 26, 250, 198, 96, 0, 0, 0, 0, 27, 142, 110, 96, 0, 0, 0, 0, 28,
        190, 248, 224, 0, 0, 0, 0, 29, 119, 124, 208, 0, 0, 0, 0, 30, 204, 255, 96, 0, 0, 0, 0, 31,
        96, 153, 80, 0, 0, 0, 0, 32, 130, 177, 96, 0, 0, 0, 0, 33, 73, 181, 208, 0, 0, 0, 0, 34,
        94, 158, 224, 0, 0, 0, 0, 35, 32, 93, 80, 0, 0, 0, 0, 36, 90, 48, 96, 0, 0, 0, 0, 37, 0,
        63, 80, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0, 0, 0, 38, 214, 230, 208, 0, 0, 0, 0, 39, 235,
        207, 224, 0, 0, 0, 0, 40, 192, 3, 80, 0, 0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 169,
        31, 208, 0, 0, 0, 0, 43, 187, 101, 224, 0, 0, 0, 0, 44, 137, 1, 208, 0, 0, 0, 0, 45, 155,
        71, 224, 0, 0, 0, 0, 46, 95, 169, 80, 0, 0, 0, 0, 47, 123, 41, 224, 0, 0, 0, 0, 48, 72,
        197, 208, 0, 0, 0, 0, 48, 231, 7, 224, 0, 0, 0, 0, 49, 100, 70, 96, 0, 0, 0, 0, 50, 65,
        194, 96, 0, 0, 0, 0, 51, 68, 40, 96, 0, 0, 0, 0, 52, 33, 164, 96, 0, 0, 0, 0, 53, 36, 10,
        96, 0, 0, 0, 0, 54, 1, 134, 96, 0, 0, 0, 0, 55, 22, 97, 96, 0, 0, 0, 0, 56, 6, 68, 80, 0,
        0, 0, 0, 56, 255, 125, 224, 0, 0, 0, 0, 57, 239, 96, 208, 0, 0, 0, 0, 58, 223, 95, 224, 0,
        0, 0, 0, 59, 207, 66, 208, 0, 0, 0, 0, 60, 191, 65, 224, 0, 0, 0, 0, 61, 175, 36, 208, 0,
        0, 0, 0, 62, 159, 35, 224, 0, 0, 0, 0, 63, 143, 6, 208, 0, 0, 0, 0, 64, 127, 5, 224, 0, 0,
        0, 0, 65, 92, 129, 224, 0, 0, 0, 0, 66, 94, 231, 224, 0, 0, 0, 0, 67, 65, 183, 240, 0, 0,
        0, 0, 68, 45, 166, 96, 0, 0, 0, 0, 69, 18, 253, 80, 0, 0, 0, 0, 70, 14, 217, 224, 0, 0, 0,
        0, 70, 232, 111, 112, 0, 0, 0, 0, 71, 236, 24, 224, 0, 0, 0, 0, 72, 183, 17, 208, 0, 0, 0,
        0, 73, 203, 250, 224, 0, 0, 0, 0, 74, 160, 60, 96, 0, 0, 0, 0, 75, 173, 46, 156, 0, 0, 0,
        0, 76, 97, 189, 208, 0, 0, 0, 0, 77, 148, 249, 156, 0, 0, 0, 0, 78, 53, 194, 80, 0, 0, 0,
        0, 79, 116, 219, 96, 0, 0, 0, 0, 80, 91, 145, 224, 0, 0, 0, 0, 81, 84, 189, 96, 0, 0, 0, 0,
        82, 68, 160, 80, 0, 0, 0, 0, 83, 52, 159, 96, 0, 0, 0, 0, 84, 73, 108, 80, 0, 0, 0, 0, 85,
        21, 210, 224, 0, 0, 0, 0, 86, 41, 92, 96, 0, 0, 0, 0, 86, 245, 194, 240, 0, 0, 0, 0, 88,
        19, 202, 96, 0, 0, 0, 0, 88, 213, 164, 240, 0, 0, 0, 0, 89, 243, 172, 96, 0, 0, 0, 0, 90,
        181, 134, 240, 0, 0, 0, 0, 91, 211, 142, 96, 0, 0, 0, 0, 92, 157, 67, 224, 0, 0, 0, 0, 93,
        179, 98, 80, 0, 0, 0, 0, 94, 126, 119, 96, 0, 0, 0, 0, 95, 147, 82, 96, 0, 0, 0, 0, 96, 94,
        89, 96, 0, 0, 0, 0, 97, 123, 29, 96, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 32, 80, 0, 0, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0, 9,
        0, 0, 42, 48, 1, 13, 0, 0, 28, 32, 0, 17, 76, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0,
        73, 68, 84, 0, 73, 83, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 51, 46, 52,
        46, 52, 47, 55, 50, 44, 77, 49, 48, 46, 52, 46, 52, 47, 50, 53, 10,
    ];
    pub(crate) const ASIA_HANOI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 136, 140, 68, 68, 255, 255, 255, 255, 145,
        163, 43, 10, 255, 255, 255, 255, 205, 53, 230, 128, 255, 255, 255, 255, 209, 89, 206, 112,
        255, 255, 255, 255, 210, 59, 62, 240, 255, 255, 255, 255, 213, 50, 187, 16, 255, 255, 255,
        255, 227, 78, 251, 0, 1, 2, 3, 4, 2, 3, 2, 0, 0, 99, 60, 0, 0, 0, 0, 99, 246, 0, 4, 0, 0,
        98, 112, 0, 9, 0, 0, 112, 128, 0, 13, 0, 0, 126, 144, 0, 17, 76, 77, 84, 0, 80, 76, 77, 84,
        0, 43, 48, 55, 0, 43, 48, 56, 0, 43, 48, 57, 0, 10, 60, 43, 48, 55, 62, 45, 55, 10,
    ];
    pub(crate) const ASIA_HARBIN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        17, 0, 0, 0, 5, 0, 0, 0, 22, 255, 255, 255, 255, 176, 254, 149, 188, 255, 255, 255, 255,
        184, 211, 206, 120, 255, 255, 255, 255, 199, 144, 250, 128, 255, 255, 255, 255, 249, 23,
        149, 240, 0, 0, 0, 0, 19, 109, 179, 248, 0, 0, 0, 0, 30, 186, 82, 32, 0, 0, 0, 0, 31, 105,
        155, 144, 0, 0, 0, 0, 32, 126, 132, 160, 0, 0, 0, 0, 33, 73, 125, 144, 0, 0, 0, 0, 34, 103,
        161, 32, 0, 0, 0, 0, 35, 41, 95, 144, 0, 0, 0, 0, 36, 71, 131, 32, 0, 0, 0, 0, 37, 18, 124,
        16, 0, 0, 0, 0, 38, 39, 101, 32, 0, 0, 0, 0, 38, 242, 94, 16, 0, 0, 0, 0, 40, 7, 71, 32, 0,
        0, 0, 0, 40, 210, 64, 16, 1, 2, 3, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 0, 0, 118,
        196, 0, 0, 0, 0, 119, 136, 0, 4, 0, 0, 112, 128, 0, 10, 0, 0, 126, 144, 0, 14, 0, 0, 126,
        144, 1, 18, 76, 77, 84, 0, 43, 48, 56, 51, 48, 0, 67, 83, 84, 0, 43, 48, 57, 0, 67, 68, 84,
        0, 10, 67, 83, 84, 45, 56, 10,
    ];
    pub(crate) const ASIA_HEBRON: &[u8] = &[
        84, 90, 105, 102, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 51,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        120, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 125, 189, 74, 25, 255, 255, 255, 255,
        200, 89, 207, 0, 255, 255, 255, 255, 200, 250, 166, 0, 255, 255, 255, 255, 201, 56, 156,
        128, 255, 255, 255, 255, 204, 229, 235, 128, 255, 255, 255, 255, 205, 172, 254, 0, 255,
        255, 255, 255, 206, 199, 31, 0, 255, 255, 255, 255, 207, 143, 131, 0, 255, 255, 255, 255,
        208, 169, 164, 0, 255, 255, 255, 255, 209, 132, 125, 0, 255, 255, 255, 255, 210, 138, 215,
        128, 255, 255, 255, 255, 211, 101, 176, 128, 255, 255, 255, 255, 212, 108, 11, 0, 255, 255,
        255, 255, 232, 54, 99, 96, 255, 255, 255, 255, 232, 244, 45, 80, 255, 255, 255, 255, 234,
        11, 185, 96, 255, 255, 255, 255, 234, 213, 96, 208, 255, 255, 255, 255, 235, 236, 250, 240,
        255, 255, 255, 255, 236, 181, 109, 0, 255, 255, 255, 255, 237, 207, 127, 240, 255, 255,
        255, 255, 238, 151, 242, 0, 255, 255, 255, 255, 239, 176, 179, 112, 255, 255, 255, 255,
        240, 121, 37, 128, 255, 255, 255, 255, 241, 145, 230, 240, 255, 255, 255, 255, 242, 90, 89,
        0, 255, 255, 255, 255, 243, 115, 26, 112, 255, 255, 255, 255, 244, 59, 140, 128, 255, 255,
        255, 255, 245, 85, 159, 112, 255, 255, 255, 255, 246, 30, 17, 128, 255, 255, 255, 255, 247,
        54, 210, 240, 255, 255, 255, 255, 247, 255, 69, 0, 255, 255, 255, 255, 249, 24, 6, 112,
        255, 255, 255, 255, 249, 225, 202, 0, 255, 255, 255, 255, 250, 249, 57, 240, 255, 255, 255,
        255, 251, 39, 66, 80, 0, 0, 0, 0, 8, 124, 139, 224, 0, 0, 0, 0, 8, 253, 176, 208, 0, 0, 0,
        0, 9, 246, 234, 96, 0, 0, 0, 0, 10, 166, 51, 208, 0, 0, 0, 0, 19, 233, 252, 96, 0, 0, 0, 0,
        20, 33, 91, 96, 0, 0, 0, 0, 26, 250, 198, 96, 0, 0, 0, 0, 27, 142, 110, 96, 0, 0, 0, 0, 28,
        190, 248, 224, 0, 0, 0, 0, 29, 119, 124, 208, 0, 0, 0, 0, 30, 204, 255, 96, 0, 0, 0, 0, 31,
        96, 153, 80, 0, 0, 0, 0, 32, 130, 177, 96, 0, 0, 0, 0, 33, 73, 181, 208, 0, 0, 0, 0, 34,
        94, 158, 224, 0, 0, 0, 0, 35, 32, 93, 80, 0, 0, 0, 0, 36, 90, 48, 96, 0, 0, 0, 0, 37, 0,
        63, 80, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0, 0, 0, 38, 214, 230, 208, 0, 0, 0, 0, 39, 235,
        207, 224, 0, 0, 0, 0, 40, 192, 3, 80, 0, 0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 169,
        31, 208, 0, 0, 0, 0, 43, 187, 101, 224, 0, 0, 0, 0, 44, 137, 1, 208, 0, 0, 0, 0, 45, 155,
        71, 224, 0, 0, 0, 0, 46, 95, 169, 80, 0, 0, 0, 0, 47, 123, 41, 224, 0, 0, 0, 0, 48, 72,
        197, 208, 0, 0, 0, 0, 48, 231, 7, 224, 0, 0, 0, 0, 49, 100, 70, 96, 0, 0, 0, 0, 50, 65,
        194, 96, 0, 0, 0, 0, 51, 68, 40, 96, 0, 0, 0, 0, 52, 33, 164, 96, 0, 0, 0, 0, 53, 36, 10,
        96, 0, 0, 0, 0, 54, 1, 134, 96, 0, 0, 0, 0, 55, 22, 97, 96, 0, 0, 0, 0, 56, 6, 68, 80, 0,
        0, 0, 0, 56, 255, 125, 224, 0, 0, 0, 0, 57, 239, 96, 208, 0, 0, 0, 0, 58, 223, 95, 224, 0,
        0, 0, 0, 59, 207, 66, 208, 0, 0, 0, 0, 60, 191, 65, 224, 0, 0, 0, 0, 61, 175, 36, 208, 0,
        0, 0, 0, 62, 159, 35, 224, 0, 0, 0, 0, 63, 143, 6, 208, 0, 0, 0, 0, 64, 127, 5, 224, 0, 0,
        0, 0, 65, 92, 129, 224, 0, 0, 0, 0, 66, 94, 231, 224, 0, 0, 0, 0, 67, 65, 183, 240, 0, 0,
        0, 0, 68, 45, 166, 96, 0, 0, 0, 0, 69, 18, 253, 80, 0, 0, 0, 0, 70, 14, 217, 224, 0, 0, 0,
        0, 70, 232, 111, 112, 0, 0, 0, 0, 71, 236, 24, 224, 0, 0, 0, 0, 72, 187, 6, 80, 0, 0, 0, 0,
        73, 203, 250, 224, 0, 0, 0, 0, 74, 160, 60, 96, 0, 0, 0, 0, 75, 171, 220, 224, 0, 0, 0, 0,
        76, 97, 189, 208, 0, 0, 0, 0, 77, 148, 249, 156, 0, 0, 0, 0, 78, 53, 194, 80, 0, 0, 0, 0,
        78, 92, 11, 224, 0, 0, 0, 0, 78, 132, 220, 80, 0, 0, 0, 0, 79, 116, 219, 96, 0, 0, 0, 0,
        80, 91, 145, 224, 0, 0, 0, 0, 81, 84, 189, 96, 0, 0, 0, 0, 82, 68, 160, 80, 0, 0, 0, 0, 83,
        52, 159, 96, 0, 0, 0, 0, 84, 73, 108, 80, 0, 0, 0, 0, 85, 21, 210, 224, 0, 0, 0, 0, 86, 41,
        92, 96, 0, 0, 0, 0, 86, 245, 194, 240, 0, 0, 0, 0, 88, 19, 202, 96, 0, 0, 0, 0, 88, 213,
        164, 240, 0, 0, 0, 0, 89, 243, 172, 96, 0, 0, 0, 0, 90, 181, 134, 240, 0, 0, 0, 0, 91, 211,
        142, 96, 0, 0, 0, 0, 92, 157, 67, 224, 0, 0, 0, 0, 93, 179, 98, 80, 0, 0, 0, 0, 94, 126,
        119, 96, 0, 0, 0, 0, 95, 147, 82, 96, 0, 0, 0, 0, 96, 94, 89, 96, 0, 0, 0, 0, 97, 123, 29,
        96, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 0, 0, 32, 231, 0, 0, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0, 9, 0, 0, 42, 48, 1, 13, 0, 0,
        28, 32, 0, 17, 76, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 73, 68, 84, 0, 73, 83, 84,
        0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 51, 46, 52, 46, 52, 47, 55, 50, 44, 77,
        49, 48, 46, 52, 46, 52, 47, 50, 53, 10,
    ];
    pub(crate) const ASIA_HOVD: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        50, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 134, 211, 252, 148, 0, 0, 0, 0, 15, 11,
        234, 160, 0, 0, 0, 0, 24, 233, 214, 144, 0, 0, 0, 0, 25, 219, 11, 0, 0, 0, 0, 0, 26, 204,
        91, 144, 0, 0, 0, 0, 27, 188, 62, 128, 0, 0, 0, 0, 28, 172, 61, 144, 0, 0, 0, 0, 29, 156,
        32, 128, 0, 0, 0, 0, 30, 140, 31, 144, 0, 0, 0, 0, 31, 124, 2, 128, 0, 0, 0, 0, 32, 108, 1,
        144, 0, 0, 0, 0, 33, 91, 228, 128, 0, 0, 0, 0, 34, 75, 227, 144, 0, 0, 0, 0, 35, 59, 198,
        128, 0, 0, 0, 0, 36, 43, 197, 144, 0, 0, 0, 0, 37, 27, 168, 128, 0, 0, 0, 0, 38, 11, 167,
        144, 0, 0, 0, 0, 39, 4, 197, 0, 0, 0, 0, 0, 39, 244, 196, 16, 0, 0, 0, 0, 40, 228, 167, 0,
        0, 0, 0, 0, 41, 212, 166, 16, 0, 0, 0, 0, 42, 196, 137, 0, 0, 0, 0, 0, 43, 180, 136, 16, 0,
        0, 0, 0, 44, 164, 107, 0, 0, 0, 0, 0, 45, 148, 106, 16, 0, 0, 0, 0, 46, 132, 77, 0, 0, 0,
        0, 0, 47, 116, 76, 16, 0, 0, 0, 0, 48, 100, 47, 0, 0, 0, 0, 0, 49, 93, 104, 144, 0, 0, 0,
        0, 50, 77, 75, 128, 0, 0, 0, 0, 51, 61, 74, 144, 0, 0, 0, 0, 52, 45, 45, 128, 0, 0, 0, 0,
        53, 29, 44, 144, 0, 0, 0, 0, 54, 13, 15, 128, 0, 0, 0, 0, 58, 233, 193, 176, 0, 0, 0, 0,
        59, 180, 186, 160, 0, 0, 0, 0, 60, 164, 185, 176, 0, 0, 0, 0, 61, 148, 156, 160, 0, 0, 0,
        0, 62, 132, 155, 176, 0, 0, 0, 0, 63, 116, 126, 160, 0, 0, 0, 0, 64, 100, 125, 176, 0, 0,
        0, 0, 65, 84, 96, 160, 0, 0, 0, 0, 66, 68, 95, 176, 0, 0, 0, 0, 67, 52, 66, 160, 0, 0, 0,
        0, 68, 36, 65, 176, 0, 0, 0, 0, 69, 29, 95, 32, 0, 0, 0, 0, 85, 21, 168, 176, 0, 0, 0, 0,
        86, 5, 111, 128, 0, 0, 0, 0, 86, 245, 138, 176, 0, 0, 0, 0, 87, 229, 81, 128, 1, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0, 85, 236, 0, 0, 0, 0, 84, 96, 0, 4, 0,
        0, 112, 128, 1, 8, 0, 0, 98, 112, 0, 12, 76, 77, 84, 0, 43, 48, 54, 0, 43, 48, 56, 0, 43,
        48, 55, 0, 10, 60, 43, 48, 55, 62, 45, 55, 10,
    ];
    pub(crate) const ASIA_HO_CHI_MINH: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        9, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 136, 140, 67, 128, 255, 255, 255, 255, 145,
        163, 43, 10, 255, 255, 255, 255, 205, 53, 230, 128, 255, 255, 255, 255, 209, 89, 206, 112,
        255, 255, 255, 255, 210, 59, 62, 240, 255, 255, 255, 255, 213, 50, 187, 16, 255, 255, 255,
        255, 228, 182, 228, 128, 255, 255, 255, 255, 237, 47, 152, 0, 0, 0, 0, 0, 10, 61, 199, 0,
        1, 2, 3, 4, 2, 3, 2, 3, 2, 0, 0, 100, 0, 0, 0, 0, 0, 99, 246, 0, 4, 0, 0, 98, 112, 0, 9, 0,
        0, 112, 128, 0, 13, 0, 0, 126, 144, 0, 17, 76, 77, 84, 0, 80, 76, 77, 84, 0, 43, 48, 55, 0,
        43, 48, 56, 0, 43, 48, 57, 0, 10, 60, 43, 48, 55, 62, 45, 55, 10,
    ];
    pub(crate) const ASIA_IRKUTSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        66, 0, 0, 0, 7, 0, 0, 0, 20, 255, 255, 255, 255, 86, 182, 130, 63, 255, 255, 255, 255, 162,
        18, 15, 191, 255, 255, 255, 255, 181, 163, 211, 16, 0, 0, 0, 0, 21, 39, 97, 128, 0, 0, 0,
        0, 22, 24, 149, 240, 0, 0, 0, 0, 23, 8, 149, 0, 0, 0, 0, 0, 23, 249, 201, 112, 0, 0, 0, 0,
        24, 233, 200, 128, 0, 0, 0, 0, 25, 218, 252, 240, 0, 0, 0, 0, 26, 204, 77, 128, 0, 0, 0, 0,
        27, 188, 90, 160, 0, 0, 0, 0, 28, 172, 75, 160, 0, 0, 0, 0, 29, 156, 60, 160, 0, 0, 0, 0,
        30, 140, 45, 160, 0, 0, 0, 0, 31, 124, 30, 160, 0, 0, 0, 0, 32, 108, 15, 160, 0, 0, 0, 0,
        33, 92, 0, 160, 0, 0, 0, 0, 34, 75, 241, 160, 0, 0, 0, 0, 35, 59, 226, 160, 0, 0, 0, 0, 36,
        43, 211, 160, 0, 0, 0, 0, 37, 27, 196, 160, 0, 0, 0, 0, 38, 11, 181, 160, 0, 0, 0, 0, 39,
        4, 225, 32, 0, 0, 0, 0, 39, 244, 210, 32, 0, 0, 0, 0, 40, 228, 209, 48, 0, 0, 0, 0, 41,
        120, 121, 48, 0, 0, 0, 0, 41, 212, 180, 32, 0, 0, 0, 0, 42, 196, 165, 32, 0, 0, 0, 0, 43,
        180, 150, 32, 0, 0, 0, 0, 44, 164, 135, 32, 0, 0, 0, 0, 45, 148, 120, 32, 0, 0, 0, 0, 46,
        132, 105, 32, 0, 0, 0, 0, 47, 116, 90, 32, 0, 0, 0, 0, 48, 100, 75, 32, 0, 0, 0, 0, 49, 93,
        118, 160, 0, 0, 0, 0, 50, 114, 81, 160, 0, 0, 0, 0, 51, 61, 88, 160, 0, 0, 0, 0, 52, 82,
        51, 160, 0, 0, 0, 0, 53, 29, 58, 160, 0, 0, 0, 0, 54, 50, 21, 160, 0, 0, 0, 0, 54, 253, 28,
        160, 0, 0, 0, 0, 56, 27, 50, 32, 0, 0, 0, 0, 56, 220, 254, 160, 0, 0, 0, 0, 57, 251, 20,
        32, 0, 0, 0, 0, 58, 188, 224, 160, 0, 0, 0, 0, 59, 218, 246, 32, 0, 0, 0, 0, 60, 165, 253,
        32, 0, 0, 0, 0, 61, 186, 216, 32, 0, 0, 0, 0, 62, 133, 223, 32, 0, 0, 0, 0, 63, 154, 186,
        32, 0, 0, 0, 0, 64, 101, 193, 32, 0, 0, 0, 0, 65, 131, 214, 160, 0, 0, 0, 0, 66, 69, 163,
        32, 0, 0, 0, 0, 67, 99, 184, 160, 0, 0, 0, 0, 68, 37, 133, 32, 0, 0, 0, 0, 69, 67, 154,
        160, 0, 0, 0, 0, 70, 5, 103, 32, 0, 0, 0, 0, 71, 35, 124, 160, 0, 0, 0, 0, 71, 238, 131,
        160, 0, 0, 0, 0, 73, 3, 94, 160, 0, 0, 0, 0, 73, 206, 101, 160, 0, 0, 0, 0, 74, 227, 64,
        160, 0, 0, 0, 0, 75, 174, 71, 160, 0, 0, 0, 0, 76, 204, 93, 32, 0, 0, 0, 0, 77, 142, 41,
        160, 0, 0, 0, 0, 84, 75, 215, 16, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 5, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 6, 4, 0, 0, 97, 193, 0, 0, 0, 0, 97, 193, 0,
        4, 0, 0, 98, 112, 0, 8, 0, 0, 126, 144, 1, 12, 0, 0, 112, 128, 0, 16, 0, 0, 112, 128, 1,
        16, 0, 0, 126, 144, 0, 12, 76, 77, 84, 0, 73, 77, 84, 0, 43, 48, 55, 0, 43, 48, 57, 0, 43,
        48, 56, 0, 10, 60, 43, 48, 56, 62, 45, 56, 10,
    ];
    pub(crate) const ASIA_JAKARTA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 7, 0, 0, 0, 32, 255, 255, 255, 255, 63, 102, 73, 96, 255, 255, 255, 255, 169,
        120, 133, 224, 255, 255, 255, 255, 186, 22, 222, 96, 255, 255, 255, 255, 203, 191, 131,
        136, 255, 255, 255, 255, 210, 86, 238, 112, 255, 255, 255, 255, 215, 60, 198, 8, 255, 255,
        255, 255, 218, 255, 38, 0, 255, 255, 255, 255, 244, 181, 190, 136, 1, 2, 3, 4, 3, 5, 3, 6,
        0, 0, 100, 32, 0, 0, 0, 0, 100, 32, 0, 4, 0, 0, 103, 32, 0, 8, 0, 0, 105, 120, 0, 14, 0, 0,
        126, 144, 0, 20, 0, 0, 112, 128, 0, 24, 0, 0, 98, 112, 0, 28, 76, 77, 84, 0, 66, 77, 84, 0,
        43, 48, 55, 50, 48, 0, 43, 48, 55, 51, 48, 0, 43, 48, 57, 0, 43, 48, 56, 0, 87, 73, 66, 0,
        10, 87, 73, 66, 45, 55, 10,
    ];
    pub(crate) const ASIA_JAYAPURA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 186, 22, 193, 152, 255, 255, 255, 255, 208,
        88, 185, 240, 255, 255, 255, 255, 244, 181, 162, 104, 1, 2, 3, 0, 0, 131, 232, 0, 0, 0, 0,
        126, 144, 0, 4, 0, 0, 133, 152, 0, 8, 0, 0, 126, 144, 0, 14, 76, 77, 84, 0, 43, 48, 57, 0,
        43, 48, 57, 51, 48, 0, 87, 73, 84, 0, 10, 87, 73, 84, 45, 57, 10,
    ];
    pub(crate) const ASIA_KABUL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 105, 134, 154, 160, 255, 255, 255, 255,
        208, 249, 215, 64, 1, 2, 0, 0, 64, 224, 0, 0, 0, 0, 56, 64, 0, 4, 0, 0, 63, 72, 0, 8, 76,
        77, 84, 0, 43, 48, 52, 0, 43, 48, 52, 51, 48, 0, 10, 60, 43, 48, 52, 51, 48, 62, 45, 52,
        58, 51, 48, 10,
    ];
    pub(crate) const ASIA_KAMCHATKA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 167, 82, 150, 196, 255, 255, 255, 255,
        181, 163, 154, 208, 0, 0, 0, 0, 21, 39, 41, 64, 0, 0, 0, 0, 22, 24, 93, 176, 0, 0, 0, 0,
        23, 8, 92, 192, 0, 0, 0, 0, 23, 249, 145, 48, 0, 0, 0, 0, 24, 233, 144, 64, 0, 0, 0, 0, 25,
        218, 196, 176, 0, 0, 0, 0, 26, 204, 21, 64, 0, 0, 0, 0, 27, 188, 34, 96, 0, 0, 0, 0, 28,
        172, 19, 96, 0, 0, 0, 0, 29, 156, 4, 96, 0, 0, 0, 0, 30, 139, 245, 96, 0, 0, 0, 0, 31, 123,
        230, 96, 0, 0, 0, 0, 32, 107, 215, 96, 0, 0, 0, 0, 33, 91, 200, 96, 0, 0, 0, 0, 34, 75,
        185, 96, 0, 0, 0, 0, 35, 59, 170, 96, 0, 0, 0, 0, 36, 43, 155, 96, 0, 0, 0, 0, 37, 27, 140,
        96, 0, 0, 0, 0, 38, 11, 125, 96, 0, 0, 0, 0, 39, 4, 168, 224, 0, 0, 0, 0, 39, 244, 153,
        224, 0, 0, 0, 0, 40, 228, 152, 240, 0, 0, 0, 0, 41, 120, 64, 240, 0, 0, 0, 0, 41, 212, 123,
        224, 0, 0, 0, 0, 42, 196, 108, 224, 0, 0, 0, 0, 43, 180, 93, 224, 0, 0, 0, 0, 44, 164, 78,
        224, 0, 0, 0, 0, 45, 148, 63, 224, 0, 0, 0, 0, 46, 132, 48, 224, 0, 0, 0, 0, 47, 116, 33,
        224, 0, 0, 0, 0, 48, 100, 18, 224, 0, 0, 0, 0, 49, 93, 62, 96, 0, 0, 0, 0, 50, 114, 25, 96,
        0, 0, 0, 0, 51, 61, 32, 96, 0, 0, 0, 0, 52, 81, 251, 96, 0, 0, 0, 0, 53, 29, 2, 96, 0, 0,
        0, 0, 54, 49, 221, 96, 0, 0, 0, 0, 54, 252, 228, 96, 0, 0, 0, 0, 56, 26, 249, 224, 0, 0, 0,
        0, 56, 220, 198, 96, 0, 0, 0, 0, 57, 250, 219, 224, 0, 0, 0, 0, 58, 188, 168, 96, 0, 0, 0,
        0, 59, 218, 189, 224, 0, 0, 0, 0, 60, 165, 196, 224, 0, 0, 0, 0, 61, 186, 159, 224, 0, 0,
        0, 0, 62, 133, 166, 224, 0, 0, 0, 0, 63, 154, 129, 224, 0, 0, 0, 0, 64, 101, 136, 224, 0,
        0, 0, 0, 65, 131, 158, 96, 0, 0, 0, 0, 66, 69, 106, 224, 0, 0, 0, 0, 67, 99, 128, 96, 0, 0,
        0, 0, 68, 37, 76, 224, 0, 0, 0, 0, 69, 67, 98, 96, 0, 0, 0, 0, 70, 5, 46, 224, 0, 0, 0, 0,
        71, 35, 68, 96, 0, 0, 0, 0, 71, 238, 75, 96, 0, 0, 0, 0, 73, 3, 38, 96, 0, 0, 0, 0, 73,
        206, 45, 96, 0, 0, 0, 0, 74, 227, 8, 96, 0, 0, 0, 0, 75, 174, 15, 96, 0, 0, 0, 0, 76, 204,
        50, 240, 0, 0, 0, 0, 77, 141, 255, 112, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 0, 0, 148, 188, 0, 0, 0, 0, 154, 176, 0,
        4, 0, 0, 182, 208, 1, 8, 0, 0, 168, 192, 0, 12, 0, 0, 168, 192, 1, 12, 76, 77, 84, 0, 43,
        49, 49, 0, 43, 49, 51, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50, 62, 45, 49, 50, 10,
    ];
    pub(crate) const ASIA_KARACHI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        11, 0, 0, 0, 6, 0, 0, 0, 29, 255, 255, 255, 255, 137, 126, 252, 164, 255, 255, 255, 255,
        204, 149, 50, 168, 255, 255, 255, 255, 210, 116, 18, 152, 255, 255, 255, 255, 221, 168,
        224, 168, 0, 0, 0, 0, 2, 79, 171, 48, 0, 0, 0, 0, 60, 175, 69, 176, 0, 0, 0, 0, 61, 159,
        40, 160, 0, 0, 0, 0, 72, 65, 160, 48, 0, 0, 0, 0, 73, 11, 71, 160, 0, 0, 0, 0, 73, 228,
        221, 48, 0, 0, 0, 0, 74, 236, 123, 32, 1, 2, 1, 3, 5, 4, 5, 4, 5, 4, 5, 0, 0, 62, 220, 0,
        0, 0, 0, 77, 88, 0, 4, 0, 0, 91, 104, 1, 10, 0, 0, 70, 80, 0, 16, 0, 0, 84, 96, 1, 20, 0,
        0, 70, 80, 0, 25, 76, 77, 84, 0, 43, 48, 53, 51, 48, 0, 43, 48, 54, 51, 48, 0, 43, 48, 53,
        0, 80, 75, 83, 84, 0, 80, 75, 84, 0, 10, 80, 75, 84, 45, 53, 10,
    ];
    pub(crate) const ASIA_KASHGAR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        15, 0, 0, 0, 5, 0, 0, 0, 22, 255, 255, 255, 255, 176, 254, 197, 68, 255, 255, 255, 255,
        199, 145, 29, 168, 0, 0, 0, 0, 19, 109, 229, 48, 0, 0, 0, 0, 30, 186, 82, 32, 0, 0, 0, 0,
        31, 105, 155, 144, 0, 0, 0, 0, 32, 126, 132, 160, 0, 0, 0, 0, 33, 73, 125, 144, 0, 0, 0, 0,
        34, 103, 161, 32, 0, 0, 0, 0, 35, 41, 95, 144, 0, 0, 0, 0, 36, 71, 131, 32, 0, 0, 0, 0, 37,
        18, 124, 16, 0, 0, 0, 0, 38, 39, 101, 32, 0, 0, 0, 0, 38, 242, 94, 16, 0, 0, 0, 0, 40, 7,
        71, 32, 0, 0, 0, 0, 40, 210, 64, 16, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 0, 0, 71,
        60, 0, 0, 0, 0, 77, 88, 0, 4, 0, 0, 70, 80, 0, 10, 0, 0, 126, 144, 1, 14, 0, 0, 112, 128,
        0, 18, 76, 77, 84, 0, 43, 48, 53, 51, 48, 0, 43, 48, 53, 0, 67, 68, 84, 0, 67, 83, 84, 0,
        10, 67, 83, 84, 45, 56, 10,
    ];
    pub(crate) const ASIA_KATHMANDU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 16, 255, 255, 255, 255, 161, 242, 125, 132, 0, 0, 0, 0, 30, 24, 48,
        168, 1, 2, 0, 0, 79, 252, 0, 0, 0, 0, 77, 88, 0, 4, 0, 0, 80, 220, 0, 10, 76, 77, 84, 0,
        43, 48, 53, 51, 48, 0, 43, 48, 53, 52, 53, 0, 10, 60, 43, 48, 53, 52, 53, 62, 45, 53, 58,
        52, 53, 10,
    ];
    pub(crate) const ASIA_KHANDYGA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        67, 0, 0, 0, 8, 0, 0, 0, 20, 255, 255, 255, 255, 161, 219, 228, 235, 255, 255, 255, 255,
        181, 163, 197, 0, 0, 0, 0, 0, 21, 39, 83, 112, 0, 0, 0, 0, 22, 24, 135, 224, 0, 0, 0, 0,
        23, 8, 134, 240, 0, 0, 0, 0, 23, 249, 187, 96, 0, 0, 0, 0, 24, 233, 186, 112, 0, 0, 0, 0,
        25, 218, 238, 224, 0, 0, 0, 0, 26, 204, 63, 112, 0, 0, 0, 0, 27, 188, 76, 144, 0, 0, 0, 0,
        28, 172, 61, 144, 0, 0, 0, 0, 29, 156, 46, 144, 0, 0, 0, 0, 30, 140, 31, 144, 0, 0, 0, 0,
        31, 124, 16, 144, 0, 0, 0, 0, 32, 108, 1, 144, 0, 0, 0, 0, 33, 91, 242, 144, 0, 0, 0, 0,
        34, 75, 227, 144, 0, 0, 0, 0, 35, 59, 212, 144, 0, 0, 0, 0, 36, 43, 197, 144, 0, 0, 0, 0,
        37, 27, 182, 144, 0, 0, 0, 0, 38, 11, 167, 144, 0, 0, 0, 0, 39, 4, 211, 16, 0, 0, 0, 0, 39,
        244, 196, 16, 0, 0, 0, 0, 40, 228, 195, 32, 0, 0, 0, 0, 41, 120, 107, 32, 0, 0, 0, 0, 41,
        212, 166, 16, 0, 0, 0, 0, 42, 196, 151, 16, 0, 0, 0, 0, 43, 180, 136, 16, 0, 0, 0, 0, 44,
        164, 121, 16, 0, 0, 0, 0, 45, 148, 106, 16, 0, 0, 0, 0, 46, 132, 91, 16, 0, 0, 0, 0, 47,
        116, 76, 16, 0, 0, 0, 0, 48, 100, 61, 16, 0, 0, 0, 0, 49, 93, 104, 144, 0, 0, 0, 0, 50,
        114, 67, 144, 0, 0, 0, 0, 51, 61, 74, 144, 0, 0, 0, 0, 52, 82, 37, 144, 0, 0, 0, 0, 53, 29,
        44, 144, 0, 0, 0, 0, 54, 50, 7, 144, 0, 0, 0, 0, 54, 253, 14, 144, 0, 0, 0, 0, 56, 27, 36,
        16, 0, 0, 0, 0, 56, 220, 240, 144, 0, 0, 0, 0, 57, 251, 6, 16, 0, 0, 0, 0, 58, 188, 210,
        144, 0, 0, 0, 0, 59, 218, 232, 16, 0, 0, 0, 0, 60, 165, 239, 16, 0, 0, 0, 0, 61, 186, 202,
        16, 0, 0, 0, 0, 62, 133, 209, 16, 0, 0, 0, 0, 63, 154, 172, 16, 0, 0, 0, 0, 63, 242, 228,
        112, 0, 0, 0, 0, 64, 101, 165, 0, 0, 0, 0, 0, 65, 131, 186, 128, 0, 0, 0, 0, 66, 69, 135,
        0, 0, 0, 0, 0, 67, 99, 156, 128, 0, 0, 0, 0, 68, 37, 105, 0, 0, 0, 0, 0, 69, 67, 126, 128,
        0, 0, 0, 0, 70, 5, 75, 0, 0, 0, 0, 0, 71, 35, 96, 128, 0, 0, 0, 0, 71, 238, 103, 128, 0, 0,
        0, 0, 73, 3, 66, 128, 0, 0, 0, 0, 73, 206, 73, 128, 0, 0, 0, 0, 74, 227, 36, 128, 0, 0, 0,
        0, 75, 174, 43, 128, 0, 0, 0, 0, 76, 204, 65, 0, 0, 0, 0, 0, 77, 142, 13, 128, 0, 0, 0, 0,
        78, 110, 2, 80, 0, 0, 0, 0, 84, 75, 201, 0, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 6, 3, 0, 0, 127, 21, 0, 0, 0, 0,
        112, 128, 0, 4, 0, 0, 140, 160, 1, 8, 0, 0, 126, 144, 0, 12, 0, 0, 126, 144, 1, 12, 0, 0,
        154, 176, 1, 16, 0, 0, 140, 160, 0, 8, 0, 0, 154, 176, 0, 16, 76, 77, 84, 0, 43, 48, 56, 0,
        43, 49, 48, 0, 43, 48, 57, 0, 43, 49, 49, 0, 10, 60, 43, 48, 57, 62, 45, 57, 10,
    ];
    pub(crate) const ASIA_KRASNOYARSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        65, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 161, 249, 13, 242, 255, 255, 255, 255,
        181, 163, 225, 32, 0, 0, 0, 0, 21, 39, 111, 144, 0, 0, 0, 0, 22, 24, 164, 0, 0, 0, 0, 0,
        23, 8, 163, 16, 0, 0, 0, 0, 23, 249, 215, 128, 0, 0, 0, 0, 24, 233, 214, 144, 0, 0, 0, 0,
        25, 219, 11, 0, 0, 0, 0, 0, 26, 204, 91, 144, 0, 0, 0, 0, 27, 188, 104, 176, 0, 0, 0, 0,
        28, 172, 89, 176, 0, 0, 0, 0, 29, 156, 74, 176, 0, 0, 0, 0, 30, 140, 59, 176, 0, 0, 0, 0,
        31, 124, 44, 176, 0, 0, 0, 0, 32, 108, 29, 176, 0, 0, 0, 0, 33, 92, 14, 176, 0, 0, 0, 0,
        34, 75, 255, 176, 0, 0, 0, 0, 35, 59, 240, 176, 0, 0, 0, 0, 36, 43, 225, 176, 0, 0, 0, 0,
        37, 27, 210, 176, 0, 0, 0, 0, 38, 11, 195, 176, 0, 0, 0, 0, 39, 4, 239, 48, 0, 0, 0, 0, 39,
        244, 224, 48, 0, 0, 0, 0, 40, 228, 223, 64, 0, 0, 0, 0, 41, 120, 135, 64, 0, 0, 0, 0, 41,
        212, 194, 48, 0, 0, 0, 0, 42, 196, 179, 48, 0, 0, 0, 0, 43, 180, 164, 48, 0, 0, 0, 0, 44,
        164, 149, 48, 0, 0, 0, 0, 45, 148, 134, 48, 0, 0, 0, 0, 46, 132, 119, 48, 0, 0, 0, 0, 47,
        116, 104, 48, 0, 0, 0, 0, 48, 100, 89, 48, 0, 0, 0, 0, 49, 93, 132, 176, 0, 0, 0, 0, 50,
        114, 95, 176, 0, 0, 0, 0, 51, 61, 102, 176, 0, 0, 0, 0, 52, 82, 65, 176, 0, 0, 0, 0, 53,
        29, 72, 176, 0, 0, 0, 0, 54, 50, 35, 176, 0, 0, 0, 0, 54, 253, 42, 176, 0, 0, 0, 0, 56, 27,
        64, 48, 0, 0, 0, 0, 56, 221, 12, 176, 0, 0, 0, 0, 57, 251, 34, 48, 0, 0, 0, 0, 58, 188,
        238, 176, 0, 0, 0, 0, 59, 219, 4, 48, 0, 0, 0, 0, 60, 166, 11, 48, 0, 0, 0, 0, 61, 186,
        230, 48, 0, 0, 0, 0, 62, 133, 237, 48, 0, 0, 0, 0, 63, 154, 200, 48, 0, 0, 0, 0, 64, 101,
        207, 48, 0, 0, 0, 0, 65, 131, 228, 176, 0, 0, 0, 0, 66, 69, 177, 48, 0, 0, 0, 0, 67, 99,
        198, 176, 0, 0, 0, 0, 68, 37, 147, 48, 0, 0, 0, 0, 69, 67, 168, 176, 0, 0, 0, 0, 70, 5,
        117, 48, 0, 0, 0, 0, 71, 35, 138, 176, 0, 0, 0, 0, 71, 238, 145, 176, 0, 0, 0, 0, 73, 3,
        108, 176, 0, 0, 0, 0, 73, 206, 115, 176, 0, 0, 0, 0, 74, 227, 78, 176, 0, 0, 0, 0, 75, 174,
        85, 176, 0, 0, 0, 0, 76, 204, 107, 48, 0, 0, 0, 0, 77, 142, 55, 176, 0, 0, 0, 0, 84, 75,
        229, 32, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 5, 3, 0, 0, 87, 14, 0, 0, 0, 0, 84, 96, 0, 4, 0, 0, 112, 128, 1, 8, 0, 0,
        98, 112, 0, 12, 0, 0, 98, 112, 1, 12, 0, 0, 112, 128, 0, 8, 76, 77, 84, 0, 43, 48, 54, 0,
        43, 48, 56, 0, 43, 48, 55, 0, 10, 60, 43, 48, 55, 62, 45, 55, 10,
    ];
    pub(crate) const ASIA_KUALA_LUMPUR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 8, 0, 0, 0, 32, 255, 255, 255, 255, 126, 54, 85, 170, 255, 255, 255, 255, 134,
        131, 133, 163, 255, 255, 255, 255, 186, 103, 78, 144, 255, 255, 255, 255, 192, 10, 228, 96,
        255, 255, 255, 255, 202, 179, 229, 96, 255, 255, 255, 255, 203, 145, 95, 8, 255, 255, 255,
        255, 210, 72, 109, 240, 0, 0, 0, 0, 22, 145, 245, 8, 1, 2, 3, 4, 5, 6, 5, 7, 0, 0, 95, 86,
        0, 0, 0, 0, 97, 93, 0, 4, 0, 0, 98, 112, 0, 8, 0, 0, 103, 32, 1, 12, 0, 0, 103, 32, 0, 12,
        0, 0, 105, 120, 0, 18, 0, 0, 126, 144, 0, 24, 0, 0, 112, 128, 0, 28, 76, 77, 84, 0, 83, 77,
        84, 0, 43, 48, 55, 0, 43, 48, 55, 50, 48, 0, 43, 48, 55, 51, 48, 0, 43, 48, 57, 0, 43, 48,
        56, 0, 10, 60, 43, 48, 56, 62, 45, 56, 10,
    ];
    pub(crate) const ASIA_KUCHING: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        18, 0, 0, 0, 5, 0, 0, 0, 24, 255, 255, 255, 255, 173, 138, 6, 144, 255, 255, 255, 255, 186,
        103, 71, 136, 255, 255, 255, 255, 191, 123, 39, 128, 255, 255, 255, 255, 191, 243, 27, 80,
        255, 255, 255, 255, 193, 93, 172, 128, 255, 255, 255, 255, 193, 213, 160, 80, 255, 255,
        255, 255, 195, 62, 224, 0, 255, 255, 255, 255, 195, 182, 211, 208, 255, 255, 255, 255, 197,
        32, 19, 128, 255, 255, 255, 255, 197, 152, 7, 80, 255, 255, 255, 255, 199, 1, 71, 0, 255,
        255, 255, 255, 199, 121, 58, 208, 255, 255, 255, 255, 200, 227, 204, 0, 255, 255, 255, 255,
        201, 91, 191, 208, 255, 255, 255, 255, 202, 196, 255, 128, 255, 255, 255, 255, 203, 60,
        243, 80, 255, 255, 255, 255, 203, 145, 88, 0, 255, 255, 255, 255, 210, 72, 109, 240, 1, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 3, 0, 0, 103, 112, 0, 0, 0, 0, 105, 120, 0, 4,
        0, 0, 117, 48, 1, 10, 0, 0, 112, 128, 0, 16, 0, 0, 126, 144, 0, 20, 76, 77, 84, 0, 43, 48,
        55, 51, 48, 0, 43, 48, 56, 50, 48, 0, 43, 48, 56, 0, 43, 48, 57, 0, 10, 60, 43, 48, 56, 62,
        45, 56, 10,
    ];
    pub(crate) const ASIA_KUWAIT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 218, 97, 53, 132, 1, 0, 0, 44, 252, 0, 0, 0,
        0, 42, 48, 0, 4, 76, 77, 84, 0, 43, 48, 51, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const ASIA_MACAO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        71, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 133, 105, 91, 142, 255, 255, 255, 255,
        203, 71, 117, 240, 255, 255, 255, 255, 203, 242, 202, 224, 255, 255, 255, 255, 204, 251,
        186, 80, 255, 255, 255, 255, 205, 211, 254, 96, 255, 255, 255, 255, 206, 157, 165, 208,
        255, 255, 255, 255, 210, 97, 122, 112, 255, 255, 255, 255, 211, 120, 248, 112, 255, 255,
        255, 255, 212, 66, 173, 240, 255, 255, 255, 255, 213, 75, 171, 112, 255, 255, 255, 255,
        214, 116, 76, 240, 255, 255, 255, 255, 215, 63, 83, 240, 255, 255, 255, 255, 216, 47, 68,
        240, 255, 255, 255, 255, 216, 248, 250, 112, 255, 255, 255, 255, 218, 13, 213, 112, 255,
        255, 255, 255, 218, 216, 220, 112, 255, 255, 255, 255, 219, 237, 183, 112, 255, 255, 255,
        255, 220, 184, 190, 112, 255, 255, 255, 255, 221, 206, 234, 240, 255, 255, 255, 255, 222,
        161, 218, 240, 255, 255, 255, 255, 223, 182, 181, 240, 255, 255, 255, 255, 224, 129, 188,
        240, 255, 255, 255, 255, 225, 150, 151, 240, 255, 255, 255, 255, 226, 79, 41, 240, 255,
        255, 255, 255, 227, 118, 121, 240, 255, 255, 255, 255, 228, 47, 11, 240, 255, 255, 255,
        255, 229, 95, 150, 112, 255, 255, 255, 255, 230, 14, 237, 240, 255, 255, 255, 255, 231, 63,
        169, 168, 255, 255, 255, 255, 231, 248, 73, 184, 255, 255, 255, 255, 233, 31, 139, 168,
        255, 255, 255, 255, 233, 216, 43, 184, 255, 255, 255, 255, 234, 255, 109, 168, 255, 255,
        255, 255, 235, 184, 13, 184, 255, 255, 255, 255, 236, 223, 79, 168, 255, 255, 255, 255,
        237, 151, 239, 184, 255, 255, 255, 255, 238, 200, 108, 40, 255, 255, 255, 255, 239, 119,
        209, 184, 255, 255, 255, 255, 240, 168, 78, 40, 255, 255, 255, 255, 241, 87, 179, 184, 255,
        255, 255, 255, 242, 136, 48, 40, 255, 255, 255, 255, 243, 64, 208, 56, 255, 255, 255, 255,
        244, 104, 18, 40, 255, 255, 255, 255, 245, 32, 178, 56, 255, 255, 255, 255, 246, 71, 244,
        40, 255, 255, 255, 255, 247, 37, 126, 56, 255, 255, 255, 255, 248, 21, 83, 24, 255, 255,
        255, 255, 249, 5, 96, 56, 255, 255, 255, 255, 249, 245, 53, 24, 255, 255, 255, 255, 250,
        229, 66, 56, 255, 255, 255, 255, 251, 222, 95, 168, 255, 255, 255, 255, 252, 206, 94, 184,
        255, 255, 255, 255, 253, 190, 65, 168, 255, 255, 255, 255, 254, 174, 64, 184, 255, 255,
        255, 255, 255, 158, 35, 168, 0, 0, 0, 0, 0, 142, 34, 184, 0, 0, 0, 0, 1, 126, 5, 168, 0, 0,
        0, 0, 2, 110, 4, 184, 0, 0, 0, 0, 3, 93, 231, 168, 0, 0, 0, 0, 4, 77, 230, 184, 0, 0, 0, 0,
        5, 71, 4, 40, 0, 0, 0, 0, 6, 55, 3, 56, 0, 0, 0, 0, 7, 38, 230, 40, 0, 0, 0, 0, 7, 131, 61,
        56, 0, 0, 0, 0, 9, 6, 200, 40, 0, 0, 0, 0, 9, 246, 199, 56, 0, 0, 0, 0, 10, 230, 170, 40,
        0, 0, 0, 0, 11, 214, 169, 56, 0, 0, 0, 0, 12, 198, 140, 40, 0, 0, 0, 0, 17, 155, 57, 56, 0,
        0, 0, 0, 18, 111, 108, 168, 1, 3, 2, 3, 2, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
        4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
        4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 0, 0, 106, 114, 0, 0, 0, 0,
        112, 128, 0, 4, 0, 0, 140, 160, 1, 8, 0, 0, 126, 144, 0, 12, 0, 0, 126, 144, 1, 16, 76, 77,
        84, 0, 67, 83, 84, 0, 43, 49, 48, 0, 43, 48, 57, 0, 67, 68, 84, 0, 10, 67, 83, 84, 45, 56,
        10,
    ];
    pub(crate) const ASIA_MAGADAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        66, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 54, 160, 255, 255, 255, 255, 181,
        163, 168, 224, 0, 0, 0, 0, 21, 39, 55, 80, 0, 0, 0, 0, 22, 24, 107, 192, 0, 0, 0, 0, 23, 8,
        106, 208, 0, 0, 0, 0, 23, 249, 159, 64, 0, 0, 0, 0, 24, 233, 158, 80, 0, 0, 0, 0, 25, 218,
        210, 192, 0, 0, 0, 0, 26, 204, 35, 80, 0, 0, 0, 0, 27, 188, 48, 112, 0, 0, 0, 0, 28, 172,
        33, 112, 0, 0, 0, 0, 29, 156, 18, 112, 0, 0, 0, 0, 30, 140, 3, 112, 0, 0, 0, 0, 31, 123,
        244, 112, 0, 0, 0, 0, 32, 107, 229, 112, 0, 0, 0, 0, 33, 91, 214, 112, 0, 0, 0, 0, 34, 75,
        199, 112, 0, 0, 0, 0, 35, 59, 184, 112, 0, 0, 0, 0, 36, 43, 169, 112, 0, 0, 0, 0, 37, 27,
        154, 112, 0, 0, 0, 0, 38, 11, 139, 112, 0, 0, 0, 0, 39, 4, 182, 240, 0, 0, 0, 0, 39, 244,
        167, 240, 0, 0, 0, 0, 40, 228, 167, 0, 0, 0, 0, 0, 41, 120, 79, 0, 0, 0, 0, 0, 41, 212,
        137, 240, 0, 0, 0, 0, 42, 196, 122, 240, 0, 0, 0, 0, 43, 180, 107, 240, 0, 0, 0, 0, 44,
        164, 92, 240, 0, 0, 0, 0, 45, 148, 77, 240, 0, 0, 0, 0, 46, 132, 62, 240, 0, 0, 0, 0, 47,
        116, 47, 240, 0, 0, 0, 0, 48, 100, 32, 240, 0, 0, 0, 0, 49, 93, 76, 112, 0, 0, 0, 0, 50,
        114, 39, 112, 0, 0, 0, 0, 51, 61, 46, 112, 0, 0, 0, 0, 52, 82, 9, 112, 0, 0, 0, 0, 53, 29,
        16, 112, 0, 0, 0, 0, 54, 49, 235, 112, 0, 0, 0, 0, 54, 252, 242, 112, 0, 0, 0, 0, 56, 27,
        7, 240, 0, 0, 0, 0, 56, 220, 212, 112, 0, 0, 0, 0, 57, 250, 233, 240, 0, 0, 0, 0, 58, 188,
        182, 112, 0, 0, 0, 0, 59, 218, 203, 240, 0, 0, 0, 0, 60, 165, 210, 240, 0, 0, 0, 0, 61,
        186, 173, 240, 0, 0, 0, 0, 62, 133, 180, 240, 0, 0, 0, 0, 63, 154, 143, 240, 0, 0, 0, 0,
        64, 101, 150, 240, 0, 0, 0, 0, 65, 131, 172, 112, 0, 0, 0, 0, 66, 69, 120, 240, 0, 0, 0, 0,
        67, 99, 142, 112, 0, 0, 0, 0, 68, 37, 90, 240, 0, 0, 0, 0, 69, 67, 112, 112, 0, 0, 0, 0,
        70, 5, 60, 240, 0, 0, 0, 0, 71, 35, 82, 112, 0, 0, 0, 0, 71, 238, 89, 112, 0, 0, 0, 0, 73,
        3, 52, 112, 0, 0, 0, 0, 73, 206, 59, 112, 0, 0, 0, 0, 74, 227, 22, 112, 0, 0, 0, 0, 75,
        174, 29, 112, 0, 0, 0, 0, 76, 204, 50, 240, 0, 0, 0, 0, 77, 141, 255, 112, 0, 0, 0, 0, 84,
        75, 172, 224, 0, 0, 0, 0, 87, 27, 156, 0, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 5, 1, 3, 0, 0, 141, 96, 0, 0, 0, 0, 140,
        160, 0, 4, 0, 0, 168, 192, 1, 8, 0, 0, 154, 176, 0, 12, 0, 0, 154, 176, 1, 12, 0, 0, 168,
        192, 0, 8, 76, 77, 84, 0, 43, 49, 48, 0, 43, 49, 50, 0, 43, 49, 49, 0, 10, 60, 43, 49, 49,
        62, 45, 49, 49, 10,
    ];
    pub(crate) const ASIA_MAKASSAR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 161, 242, 93, 144, 255, 255, 255, 255, 186,
        22, 213, 144, 255, 255, 255, 255, 203, 136, 29, 128, 255, 255, 255, 255, 210, 86, 238, 112,
        1, 2, 3, 4, 0, 0, 111, 240, 0, 0, 0, 0, 111, 240, 0, 4, 0, 0, 112, 128, 0, 8, 0, 0, 126,
        144, 0, 12, 0, 0, 112, 128, 0, 16, 76, 77, 84, 0, 77, 77, 84, 0, 43, 48, 56, 0, 43, 48, 57,
        0, 87, 73, 84, 65, 0, 10, 87, 73, 84, 65, 45, 56, 10,
    ];
    pub(crate) const ASIA_MANILA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 20, 225, 220, 16, 255, 255, 255, 255, 123,
        31, 63, 144, 255, 255, 255, 255, 193, 156, 244, 128, 255, 255, 255, 255, 194, 22, 48, 112,
        255, 255, 255, 255, 203, 242, 231, 0, 255, 255, 255, 255, 208, 169, 37, 112, 255, 255, 255,
        255, 226, 108, 57, 0, 255, 255, 255, 255, 226, 213, 162, 240, 0, 0, 0, 0, 15, 117, 70, 128,
        0, 0, 0, 0, 16, 102, 122, 240, 1, 3, 2, 3, 4, 3, 2, 3, 2, 3, 255, 255, 31, 240, 0, 0, 0, 0,
        113, 112, 0, 0, 0, 0, 126, 144, 1, 4, 0, 0, 112, 128, 0, 8, 0, 0, 126, 144, 0, 12, 76, 77,
        84, 0, 80, 68, 84, 0, 80, 83, 84, 0, 74, 83, 84, 0, 10, 80, 83, 84, 45, 56, 10,
    ];
    pub(crate) const ASIA_MUSCAT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 161, 242, 150, 144, 1, 0, 0, 54, 240, 0, 0,
        0, 0, 56, 64, 0, 4, 76, 77, 84, 0, 43, 48, 52, 0, 10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const ASIA_NICOSIA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        49, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 165, 119, 30, 184, 0, 0, 0, 0, 9, 237,
        175, 224, 0, 0, 0, 0, 10, 221, 146, 208, 0, 0, 0, 0, 11, 250, 100, 224, 0, 0, 0, 0, 12,
        190, 198, 80, 0, 0, 0, 0, 13, 164, 57, 96, 0, 0, 0, 0, 14, 138, 225, 208, 0, 0, 0, 0, 15,
        132, 27, 96, 0, 0, 0, 0, 16, 117, 79, 208, 0, 0, 0, 0, 17, 99, 253, 96, 0, 0, 0, 0, 18, 83,
        224, 80, 0, 0, 0, 0, 19, 77, 25, 224, 0, 0, 0, 0, 20, 51, 194, 80, 0, 0, 0, 0, 21, 35, 193,
        96, 0, 0, 0, 0, 22, 19, 164, 80, 0, 0, 0, 0, 23, 3, 163, 96, 0, 0, 0, 0, 23, 243, 134, 80,
        0, 0, 0, 0, 24, 227, 133, 96, 0, 0, 0, 0, 25, 211, 104, 80, 0, 0, 0, 0, 26, 195, 103, 96,
        0, 0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0, 28, 172, 131, 224, 0, 0, 0, 0, 29, 156, 102,
        208, 0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 72, 208, 0, 0, 0, 0, 32, 108, 71,
        224, 0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0, 34, 76, 41, 224, 0, 0, 0, 0, 35, 60, 12, 208,
        0, 0, 0, 0, 36, 44, 11, 224, 0, 0, 0, 0, 37, 27, 238, 208, 0, 0, 0, 0, 38, 11, 237, 224, 0,
        0, 0, 0, 39, 5, 11, 80, 0, 0, 0, 0, 39, 245, 10, 96, 0, 0, 0, 0, 40, 228, 237, 80, 0, 0, 0,
        0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 196, 207, 80, 0, 0, 0, 0, 43, 180, 206, 96, 0, 0, 0,
        0, 44, 164, 177, 80, 0, 0, 0, 0, 45, 148, 176, 96, 0, 0, 0, 0, 46, 132, 147, 80, 0, 0, 0,
        0, 47, 116, 146, 96, 0, 0, 0, 0, 48, 100, 117, 80, 0, 0, 0, 0, 49, 93, 174, 224, 0, 0, 0,
        0, 50, 77, 145, 208, 0, 0, 0, 0, 51, 61, 144, 224, 0, 0, 0, 0, 52, 45, 115, 208, 0, 0, 0,
        0, 53, 29, 114, 224, 0, 0, 0, 0, 54, 50, 120, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 0, 0, 31, 72, 0, 0, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0, 9, 76, 77, 84, 0,
        69, 69, 83, 84, 0, 69, 69, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 51, 46,
        53, 46, 48, 47, 51, 44, 77, 49, 48, 46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const ASIA_NOVOKUZNETSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 24, 32, 192, 255, 255, 255, 255, 181,
        163, 225, 32, 0, 0, 0, 0, 21, 39, 111, 144, 0, 0, 0, 0, 22, 24, 164, 0, 0, 0, 0, 0, 23, 8,
        163, 16, 0, 0, 0, 0, 23, 249, 215, 128, 0, 0, 0, 0, 24, 233, 214, 144, 0, 0, 0, 0, 25, 219,
        11, 0, 0, 0, 0, 0, 26, 204, 91, 144, 0, 0, 0, 0, 27, 188, 104, 176, 0, 0, 0, 0, 28, 172,
        89, 176, 0, 0, 0, 0, 29, 156, 74, 176, 0, 0, 0, 0, 30, 140, 59, 176, 0, 0, 0, 0, 31, 124,
        44, 176, 0, 0, 0, 0, 32, 108, 29, 176, 0, 0, 0, 0, 33, 92, 14, 176, 0, 0, 0, 0, 34, 75,
        255, 176, 0, 0, 0, 0, 35, 59, 240, 176, 0, 0, 0, 0, 36, 43, 225, 176, 0, 0, 0, 0, 37, 27,
        210, 176, 0, 0, 0, 0, 38, 11, 195, 176, 0, 0, 0, 0, 39, 4, 239, 48, 0, 0, 0, 0, 39, 244,
        224, 48, 0, 0, 0, 0, 40, 228, 223, 64, 0, 0, 0, 0, 41, 120, 135, 64, 0, 0, 0, 0, 41, 212,
        194, 48, 0, 0, 0, 0, 42, 196, 179, 48, 0, 0, 0, 0, 43, 180, 164, 48, 0, 0, 0, 0, 44, 164,
        149, 48, 0, 0, 0, 0, 45, 148, 134, 48, 0, 0, 0, 0, 46, 132, 119, 48, 0, 0, 0, 0, 47, 116,
        104, 48, 0, 0, 0, 0, 48, 100, 89, 48, 0, 0, 0, 0, 49, 93, 132, 176, 0, 0, 0, 0, 50, 114,
        95, 176, 0, 0, 0, 0, 51, 61, 102, 176, 0, 0, 0, 0, 52, 82, 65, 176, 0, 0, 0, 0, 53, 29, 72,
        176, 0, 0, 0, 0, 54, 50, 35, 176, 0, 0, 0, 0, 54, 253, 42, 176, 0, 0, 0, 0, 56, 27, 64, 48,
        0, 0, 0, 0, 56, 221, 12, 176, 0, 0, 0, 0, 57, 251, 34, 48, 0, 0, 0, 0, 58, 188, 238, 176,
        0, 0, 0, 0, 59, 219, 4, 48, 0, 0, 0, 0, 60, 166, 11, 48, 0, 0, 0, 0, 61, 186, 230, 48, 0,
        0, 0, 0, 62, 133, 237, 48, 0, 0, 0, 0, 63, 154, 200, 48, 0, 0, 0, 0, 64, 101, 207, 48, 0,
        0, 0, 0, 65, 131, 228, 176, 0, 0, 0, 0, 66, 69, 177, 48, 0, 0, 0, 0, 67, 99, 198, 176, 0,
        0, 0, 0, 68, 37, 147, 48, 0, 0, 0, 0, 69, 67, 168, 176, 0, 0, 0, 0, 70, 5, 117, 48, 0, 0,
        0, 0, 71, 35, 138, 176, 0, 0, 0, 0, 71, 238, 145, 176, 0, 0, 0, 0, 73, 3, 108, 176, 0, 0,
        0, 0, 73, 206, 115, 176, 0, 0, 0, 0, 74, 227, 78, 176, 0, 0, 0, 0, 75, 174, 85, 176, 0, 0,
        0, 0, 76, 204, 121, 64, 0, 0, 0, 0, 77, 142, 69, 192, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 0, 0, 81, 192, 0, 0, 0,
        0, 84, 96, 0, 4, 0, 0, 112, 128, 1, 8, 0, 0, 98, 112, 0, 12, 0, 0, 98, 112, 1, 12, 76, 77,
        84, 0, 43, 48, 54, 0, 43, 48, 56, 0, 43, 48, 55, 0, 10, 60, 43, 48, 55, 62, 45, 55, 10,
    ];
    pub(crate) const ASIA_NOVOSIBIRSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        67, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 161, 219, 25, 36, 255, 255, 255, 255, 181,
        163, 225, 32, 0, 0, 0, 0, 21, 39, 111, 144, 0, 0, 0, 0, 22, 24, 164, 0, 0, 0, 0, 0, 23, 8,
        163, 16, 0, 0, 0, 0, 23, 249, 215, 128, 0, 0, 0, 0, 24, 233, 214, 144, 0, 0, 0, 0, 25, 219,
        11, 0, 0, 0, 0, 0, 26, 204, 91, 144, 0, 0, 0, 0, 27, 188, 104, 176, 0, 0, 0, 0, 28, 172,
        89, 176, 0, 0, 0, 0, 29, 156, 74, 176, 0, 0, 0, 0, 30, 140, 59, 176, 0, 0, 0, 0, 31, 124,
        44, 176, 0, 0, 0, 0, 32, 108, 29, 176, 0, 0, 0, 0, 33, 92, 14, 176, 0, 0, 0, 0, 34, 75,
        255, 176, 0, 0, 0, 0, 35, 59, 240, 176, 0, 0, 0, 0, 36, 43, 225, 176, 0, 0, 0, 0, 37, 27,
        210, 176, 0, 0, 0, 0, 38, 11, 195, 176, 0, 0, 0, 0, 39, 4, 239, 48, 0, 0, 0, 0, 39, 244,
        224, 48, 0, 0, 0, 0, 40, 228, 223, 64, 0, 0, 0, 0, 41, 120, 135, 64, 0, 0, 0, 0, 41, 212,
        194, 48, 0, 0, 0, 0, 42, 196, 179, 48, 0, 0, 0, 0, 43, 180, 164, 48, 0, 0, 0, 0, 43, 254,
        78, 0, 0, 0, 0, 0, 44, 164, 163, 64, 0, 0, 0, 0, 45, 148, 148, 64, 0, 0, 0, 0, 46, 132,
        133, 64, 0, 0, 0, 0, 47, 116, 118, 64, 0, 0, 0, 0, 48, 100, 103, 64, 0, 0, 0, 0, 49, 93,
        146, 192, 0, 0, 0, 0, 50, 114, 109, 192, 0, 0, 0, 0, 51, 61, 116, 192, 0, 0, 0, 0, 52, 82,
        79, 192, 0, 0, 0, 0, 53, 29, 86, 192, 0, 0, 0, 0, 54, 50, 49, 192, 0, 0, 0, 0, 54, 253, 56,
        192, 0, 0, 0, 0, 56, 27, 78, 64, 0, 0, 0, 0, 56, 221, 26, 192, 0, 0, 0, 0, 57, 251, 48, 64,
        0, 0, 0, 0, 58, 188, 252, 192, 0, 0, 0, 0, 59, 219, 18, 64, 0, 0, 0, 0, 60, 166, 25, 64, 0,
        0, 0, 0, 61, 186, 244, 64, 0, 0, 0, 0, 62, 133, 251, 64, 0, 0, 0, 0, 63, 154, 214, 64, 0,
        0, 0, 0, 64, 101, 221, 64, 0, 0, 0, 0, 65, 131, 242, 192, 0, 0, 0, 0, 66, 69, 191, 64, 0,
        0, 0, 0, 67, 99, 212, 192, 0, 0, 0, 0, 68, 37, 161, 64, 0, 0, 0, 0, 69, 67, 182, 192, 0, 0,
        0, 0, 70, 5, 131, 64, 0, 0, 0, 0, 71, 35, 152, 192, 0, 0, 0, 0, 71, 238, 159, 192, 0, 0, 0,
        0, 73, 3, 122, 192, 0, 0, 0, 0, 73, 206, 129, 192, 0, 0, 0, 0, 74, 227, 92, 192, 0, 0, 0,
        0, 75, 174, 99, 192, 0, 0, 0, 0, 76, 204, 121, 64, 0, 0, 0, 0, 77, 142, 69, 192, 0, 0, 0,
        0, 84, 75, 243, 48, 0, 0, 0, 0, 87, 147, 204, 192, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
        1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 3, 1, 3, 0, 0, 77, 188, 0,
        0, 0, 0, 84, 96, 0, 4, 0, 0, 112, 128, 1, 8, 0, 0, 98, 112, 0, 12, 0, 0, 98, 112, 1, 12,
        76, 77, 84, 0, 43, 48, 54, 0, 43, 48, 56, 0, 43, 48, 55, 0, 10, 60, 43, 48, 55, 62, 45, 55,
        10,
    ];
    pub(crate) const ASIA_OMSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        65, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 161, 179, 64, 182, 255, 255, 255, 255,
        181, 163, 239, 48, 0, 0, 0, 0, 21, 39, 125, 160, 0, 0, 0, 0, 22, 24, 178, 16, 0, 0, 0, 0,
        23, 8, 177, 32, 0, 0, 0, 0, 23, 249, 229, 144, 0, 0, 0, 0, 24, 233, 228, 160, 0, 0, 0, 0,
        25, 219, 25, 16, 0, 0, 0, 0, 26, 204, 105, 160, 0, 0, 0, 0, 27, 188, 118, 192, 0, 0, 0, 0,
        28, 172, 103, 192, 0, 0, 0, 0, 29, 156, 88, 192, 0, 0, 0, 0, 30, 140, 73, 192, 0, 0, 0, 0,
        31, 124, 58, 192, 0, 0, 0, 0, 32, 108, 43, 192, 0, 0, 0, 0, 33, 92, 28, 192, 0, 0, 0, 0,
        34, 76, 13, 192, 0, 0, 0, 0, 35, 59, 254, 192, 0, 0, 0, 0, 36, 43, 239, 192, 0, 0, 0, 0,
        37, 27, 224, 192, 0, 0, 0, 0, 38, 11, 209, 192, 0, 0, 0, 0, 39, 4, 253, 64, 0, 0, 0, 0, 39,
        244, 238, 64, 0, 0, 0, 0, 40, 228, 237, 80, 0, 0, 0, 0, 41, 120, 149, 80, 0, 0, 0, 0, 41,
        212, 208, 64, 0, 0, 0, 0, 42, 196, 193, 64, 0, 0, 0, 0, 43, 180, 178, 64, 0, 0, 0, 0, 44,
        164, 163, 64, 0, 0, 0, 0, 45, 148, 148, 64, 0, 0, 0, 0, 46, 132, 133, 64, 0, 0, 0, 0, 47,
        116, 118, 64, 0, 0, 0, 0, 48, 100, 103, 64, 0, 0, 0, 0, 49, 93, 146, 192, 0, 0, 0, 0, 50,
        114, 109, 192, 0, 0, 0, 0, 51, 61, 116, 192, 0, 0, 0, 0, 52, 82, 79, 192, 0, 0, 0, 0, 53,
        29, 86, 192, 0, 0, 0, 0, 54, 50, 49, 192, 0, 0, 0, 0, 54, 253, 56, 192, 0, 0, 0, 0, 56, 27,
        78, 64, 0, 0, 0, 0, 56, 221, 26, 192, 0, 0, 0, 0, 57, 251, 48, 64, 0, 0, 0, 0, 58, 188,
        252, 192, 0, 0, 0, 0, 59, 219, 18, 64, 0, 0, 0, 0, 60, 166, 25, 64, 0, 0, 0, 0, 61, 186,
        244, 64, 0, 0, 0, 0, 62, 133, 251, 64, 0, 0, 0, 0, 63, 154, 214, 64, 0, 0, 0, 0, 64, 101,
        221, 64, 0, 0, 0, 0, 65, 131, 242, 192, 0, 0, 0, 0, 66, 69, 191, 64, 0, 0, 0, 0, 67, 99,
        212, 192, 0, 0, 0, 0, 68, 37, 161, 64, 0, 0, 0, 0, 69, 67, 182, 192, 0, 0, 0, 0, 70, 5,
        131, 64, 0, 0, 0, 0, 71, 35, 152, 192, 0, 0, 0, 0, 71, 238, 159, 192, 0, 0, 0, 0, 73, 3,
        122, 192, 0, 0, 0, 0, 73, 206, 129, 192, 0, 0, 0, 0, 74, 227, 92, 192, 0, 0, 0, 0, 75, 174,
        99, 192, 0, 0, 0, 0, 76, 204, 121, 64, 0, 0, 0, 0, 77, 142, 69, 192, 0, 0, 0, 0, 84, 75,
        243, 48, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 5, 3, 0, 0, 68, 202, 0, 0, 0, 0, 70, 80, 0, 4, 0, 0, 98, 112, 1, 8, 0, 0,
        84, 96, 0, 12, 0, 0, 84, 96, 1, 12, 0, 0, 98, 112, 0, 8, 76, 77, 84, 0, 43, 48, 53, 0, 43,
        48, 55, 0, 43, 48, 54, 0, 10, 60, 43, 48, 54, 62, 45, 54, 10,
    ];
    pub(crate) const ASIA_ORAL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        51, 0, 0, 0, 7, 0, 0, 0, 20, 255, 255, 255, 255, 170, 25, 147, 220, 255, 255, 255, 255,
        181, 164, 11, 80, 0, 0, 0, 0, 21, 39, 139, 176, 0, 0, 0, 0, 22, 24, 192, 32, 0, 0, 0, 0,
        23, 8, 177, 32, 0, 0, 0, 0, 23, 249, 243, 160, 0, 0, 0, 0, 24, 233, 242, 176, 0, 0, 0, 0,
        25, 219, 39, 32, 0, 0, 0, 0, 26, 204, 119, 176, 0, 0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0,
        28, 172, 117, 208, 0, 0, 0, 0, 29, 156, 102, 208, 0, 0, 0, 0, 30, 140, 87, 208, 0, 0, 0, 0,
        31, 124, 72, 208, 0, 0, 0, 0, 32, 108, 57, 208, 0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0,
        34, 76, 27, 208, 0, 0, 0, 0, 35, 60, 12, 208, 0, 0, 0, 0, 36, 43, 253, 208, 0, 0, 0, 0, 37,
        27, 252, 224, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0, 0, 0, 39, 5, 25, 96, 0, 0, 0, 0, 39, 245,
        10, 96, 0, 0, 0, 0, 40, 228, 251, 96, 0, 0, 0, 0, 41, 120, 163, 96, 0, 0, 0, 0, 41, 212,
        222, 80, 0, 0, 0, 0, 42, 196, 221, 96, 0, 0, 0, 0, 43, 180, 206, 96, 0, 0, 0, 0, 44, 164,
        191, 96, 0, 0, 0, 0, 45, 148, 176, 96, 0, 0, 0, 0, 46, 132, 161, 96, 0, 0, 0, 0, 47, 116,
        146, 96, 0, 0, 0, 0, 48, 100, 131, 96, 0, 0, 0, 0, 49, 93, 174, 224, 0, 0, 0, 0, 50, 114,
        137, 224, 0, 0, 0, 0, 51, 61, 144, 224, 0, 0, 0, 0, 52, 82, 107, 224, 0, 0, 0, 0, 53, 29,
        114, 224, 0, 0, 0, 0, 54, 50, 77, 224, 0, 0, 0, 0, 54, 253, 84, 224, 0, 0, 0, 0, 56, 27,
        106, 96, 0, 0, 0, 0, 56, 221, 54, 224, 0, 0, 0, 0, 57, 251, 76, 96, 0, 0, 0, 0, 58, 189,
        24, 224, 0, 0, 0, 0, 59, 219, 46, 96, 0, 0, 0, 0, 60, 166, 53, 96, 0, 0, 0, 0, 61, 187, 16,
        96, 0, 0, 0, 0, 62, 134, 23, 96, 0, 0, 0, 0, 63, 154, 242, 96, 0, 0, 0, 0, 64, 101, 249,
        96, 0, 0, 0, 0, 65, 132, 14, 224, 1, 2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5,
        6, 5, 6, 5, 6, 2, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 2, 0, 0, 48, 36, 0, 0, 0, 0, 42, 48, 0, 4, 0, 0, 70, 80, 0, 8, 0, 0, 84, 96, 1, 12, 0,
        0, 84, 96, 0, 12, 0, 0, 70, 80, 1, 8, 0, 0, 56, 64, 0, 16, 76, 77, 84, 0, 43, 48, 51, 0,
        43, 48, 53, 0, 43, 48, 54, 0, 43, 48, 52, 0, 10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ASIA_PHNOM_PENH: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        5, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 136, 140, 69, 36, 255, 255, 255, 255, 145,
        163, 43, 10, 255, 255, 255, 255, 205, 53, 230, 128, 255, 255, 255, 255, 209, 89, 206, 112,
        255, 255, 255, 255, 210, 59, 62, 240, 1, 2, 3, 4, 2, 0, 0, 98, 92, 0, 0, 0, 0, 99, 246, 0,
        4, 0, 0, 98, 112, 0, 9, 0, 0, 112, 128, 0, 13, 0, 0, 126, 144, 0, 17, 76, 77, 84, 0, 80,
        76, 77, 84, 0, 43, 48, 55, 0, 43, 48, 56, 0, 43, 48, 57, 0, 10, 60, 43, 48, 55, 62, 45, 55,
        10,
    ];
    pub(crate) const ASIA_PONTIANAK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 7, 0, 0, 0, 31, 255, 255, 255, 255, 139, 255, 142, 0, 255, 255, 255, 255, 186,
        22, 223, 0, 255, 255, 255, 255, 203, 121, 164, 8, 255, 255, 255, 255, 210, 86, 238, 112,
        255, 255, 255, 255, 215, 60, 198, 8, 255, 255, 255, 255, 218, 255, 38, 0, 255, 255, 255,
        255, 244, 181, 190, 136, 0, 0, 0, 0, 33, 218, 116, 128, 1, 2, 3, 2, 4, 2, 5, 6, 0, 0, 102,
        128, 0, 0, 0, 0, 102, 128, 0, 4, 0, 0, 105, 120, 0, 8, 0, 0, 126, 144, 0, 14, 0, 0, 112,
        128, 0, 18, 0, 0, 112, 128, 0, 22, 0, 0, 98, 112, 0, 27, 76, 77, 84, 0, 80, 77, 84, 0, 43,
        48, 55, 51, 48, 0, 43, 48, 57, 0, 43, 48, 56, 0, 87, 73, 84, 65, 0, 87, 73, 66, 0, 10, 87,
        73, 66, 45, 55, 10,
    ];
    pub(crate) const ASIA_PYONGYANG: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        5, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 139, 215, 241, 156, 255, 255, 255, 255,
        146, 230, 22, 248, 255, 255, 255, 255, 210, 47, 97, 112, 0, 0, 0, 0, 85, 206, 2, 112, 0, 0,
        0, 0, 90, 236, 117, 112, 1, 2, 3, 1, 3, 0, 0, 117, 228, 0, 0, 0, 0, 119, 136, 0, 4, 0, 0,
        126, 144, 0, 8, 0, 0, 126, 144, 0, 4, 76, 77, 84, 0, 75, 83, 84, 0, 74, 83, 84, 0, 10, 75,
        83, 84, 45, 57, 10,
    ];
    pub(crate) const ASIA_QATAR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 161, 242, 157, 48, 0, 0, 0, 0, 4, 138, 146,
        192, 1, 2, 0, 0, 48, 80, 0, 0, 0, 0, 56, 64, 0, 4, 0, 0, 42, 48, 0, 8, 76, 77, 84, 0, 43,
        48, 52, 0, 43, 48, 51, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const ASIA_QOSTANAY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        51, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 136, 92, 255, 255, 255, 255, 181,
        163, 253, 64, 0, 0, 0, 0, 21, 39, 139, 176, 0, 0, 0, 0, 22, 24, 192, 32, 0, 0, 0, 0, 23, 8,
        177, 32, 0, 0, 0, 0, 23, 249, 243, 160, 0, 0, 0, 0, 24, 233, 242, 176, 0, 0, 0, 0, 25, 219,
        39, 32, 0, 0, 0, 0, 26, 204, 119, 176, 0, 0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0, 28, 172,
        117, 208, 0, 0, 0, 0, 29, 156, 102, 208, 0, 0, 0, 0, 30, 140, 87, 208, 0, 0, 0, 0, 31, 124,
        72, 208, 0, 0, 0, 0, 32, 108, 57, 208, 0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0, 34, 76, 27,
        208, 0, 0, 0, 0, 35, 60, 12, 208, 0, 0, 0, 0, 36, 43, 253, 208, 0, 0, 0, 0, 37, 27, 238,
        208, 0, 0, 0, 0, 38, 11, 223, 208, 0, 0, 0, 0, 39, 5, 11, 80, 0, 0, 0, 0, 39, 244, 252, 80,
        0, 0, 0, 0, 40, 228, 251, 96, 0, 0, 0, 0, 41, 120, 163, 96, 0, 0, 0, 0, 41, 212, 222, 80,
        0, 0, 0, 0, 42, 196, 207, 80, 0, 0, 0, 0, 43, 180, 192, 80, 0, 0, 0, 0, 44, 164, 177, 80,
        0, 0, 0, 0, 45, 148, 162, 80, 0, 0, 0, 0, 46, 132, 147, 80, 0, 0, 0, 0, 47, 116, 132, 80,
        0, 0, 0, 0, 48, 100, 117, 80, 0, 0, 0, 0, 49, 93, 160, 208, 0, 0, 0, 0, 50, 114, 123, 208,
        0, 0, 0, 0, 51, 61, 130, 208, 0, 0, 0, 0, 52, 82, 93, 208, 0, 0, 0, 0, 53, 29, 100, 208, 0,
        0, 0, 0, 54, 50, 63, 208, 0, 0, 0, 0, 54, 253, 70, 208, 0, 0, 0, 0, 56, 27, 92, 80, 0, 0,
        0, 0, 56, 221, 40, 208, 0, 0, 0, 0, 57, 251, 62, 80, 0, 0, 0, 0, 58, 189, 10, 208, 0, 0, 0,
        0, 59, 219, 32, 80, 0, 0, 0, 0, 60, 166, 39, 80, 0, 0, 0, 0, 61, 187, 2, 80, 0, 0, 0, 0,
        62, 134, 9, 80, 0, 0, 0, 0, 63, 154, 228, 80, 0, 0, 0, 0, 64, 101, 235, 80, 0, 0, 0, 0, 65,
        132, 0, 208, 1, 2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 1, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 0, 0, 59, 164,
        0, 0, 0, 0, 56, 64, 0, 4, 0, 0, 70, 80, 0, 8, 0, 0, 84, 96, 1, 12, 0, 0, 84, 96, 0, 12, 0,
        0, 70, 80, 1, 8, 76, 77, 84, 0, 43, 48, 52, 0, 43, 48, 53, 0, 43, 48, 54, 0, 10, 60, 43,
        48, 54, 62, 45, 54, 10,
    ];
    pub(crate) const ASIA_QYZYLORDA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        52, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 134, 160, 255, 255, 255, 255,
        181, 163, 253, 64, 0, 0, 0, 0, 21, 39, 139, 176, 0, 0, 0, 0, 22, 24, 192, 32, 0, 0, 0, 0,
        23, 8, 177, 32, 0, 0, 0, 0, 23, 249, 243, 160, 0, 0, 0, 0, 24, 233, 242, 176, 0, 0, 0, 0,
        25, 219, 39, 32, 0, 0, 0, 0, 26, 204, 119, 176, 0, 0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0,
        28, 172, 117, 208, 0, 0, 0, 0, 29, 156, 102, 208, 0, 0, 0, 0, 30, 140, 87, 208, 0, 0, 0, 0,
        31, 124, 72, 208, 0, 0, 0, 0, 32, 108, 57, 208, 0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0,
        34, 76, 27, 208, 0, 0, 0, 0, 35, 60, 12, 208, 0, 0, 0, 0, 36, 43, 253, 208, 0, 0, 0, 0, 37,
        27, 238, 208, 0, 0, 0, 0, 38, 11, 223, 208, 0, 0, 0, 0, 39, 5, 11, 80, 0, 0, 0, 0, 39, 244,
        252, 80, 0, 0, 0, 0, 40, 228, 251, 96, 0, 0, 0, 0, 41, 120, 149, 80, 0, 0, 0, 0, 41, 212,
        208, 64, 0, 0, 0, 0, 42, 196, 207, 80, 0, 0, 0, 0, 43, 180, 192, 80, 0, 0, 0, 0, 44, 164,
        177, 80, 0, 0, 0, 0, 45, 148, 162, 80, 0, 0, 0, 0, 46, 132, 147, 80, 0, 0, 0, 0, 47, 116,
        132, 80, 0, 0, 0, 0, 48, 100, 117, 80, 0, 0, 0, 0, 49, 93, 160, 208, 0, 0, 0, 0, 50, 114,
        123, 208, 0, 0, 0, 0, 51, 61, 130, 208, 0, 0, 0, 0, 52, 82, 93, 208, 0, 0, 0, 0, 53, 29,
        100, 208, 0, 0, 0, 0, 54, 50, 63, 208, 0, 0, 0, 0, 54, 253, 70, 208, 0, 0, 0, 0, 56, 27,
        92, 80, 0, 0, 0, 0, 56, 221, 40, 208, 0, 0, 0, 0, 57, 251, 62, 80, 0, 0, 0, 0, 58, 189, 10,
        208, 0, 0, 0, 0, 59, 219, 32, 80, 0, 0, 0, 0, 60, 166, 39, 80, 0, 0, 0, 0, 61, 187, 2, 80,
        0, 0, 0, 0, 62, 134, 9, 80, 0, 0, 0, 0, 63, 154, 228, 80, 0, 0, 0, 0, 64, 101, 235, 80, 0,
        0, 0, 0, 65, 132, 0, 208, 0, 0, 0, 0, 92, 27, 216, 160, 1, 2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 2, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 4, 2, 0, 0, 61, 96, 0, 0, 0, 0, 56, 64, 0, 4, 0, 0, 70, 80, 0, 8,
        0, 0, 84, 96, 1, 12, 0, 0, 84, 96, 0, 12, 0, 0, 70, 80, 1, 8, 76, 77, 84, 0, 43, 48, 52, 0,
        43, 48, 53, 0, 43, 48, 54, 0, 10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ASIA_RANGOON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 86, 182, 137, 209, 255, 255, 255, 255, 161,
        242, 115, 81, 255, 255, 255, 255, 203, 242, 252, 24, 255, 255, 255, 255, 209, 154, 103,
        240, 1, 2, 3, 2, 0, 0, 90, 47, 0, 0, 0, 0, 90, 47, 0, 4, 0, 0, 91, 104, 0, 8, 0, 0, 126,
        144, 0, 14, 76, 77, 84, 0, 82, 77, 84, 0, 43, 48, 54, 51, 48, 0, 43, 48, 57, 0, 10, 60, 43,
        48, 54, 51, 48, 62, 45, 54, 58, 51, 48, 10,
    ];
    pub(crate) const ASIA_RIYADH: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 213, 27, 54, 180, 1, 0, 0, 43, 204, 0, 0, 0,
        0, 42, 48, 0, 4, 76, 77, 84, 0, 43, 48, 51, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const ASIA_SAKHALIN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        66, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 134, 240, 205, 184, 255, 255, 255, 255,
        210, 48, 178, 240, 0, 0, 0, 0, 21, 39, 55, 80, 0, 0, 0, 0, 22, 24, 107, 192, 0, 0, 0, 0,
        23, 8, 106, 208, 0, 0, 0, 0, 23, 249, 159, 64, 0, 0, 0, 0, 24, 233, 158, 80, 0, 0, 0, 0,
        25, 218, 210, 192, 0, 0, 0, 0, 26, 204, 35, 80, 0, 0, 0, 0, 27, 188, 48, 112, 0, 0, 0, 0,
        28, 172, 33, 112, 0, 0, 0, 0, 29, 156, 18, 112, 0, 0, 0, 0, 30, 140, 3, 112, 0, 0, 0, 0,
        31, 123, 244, 112, 0, 0, 0, 0, 32, 107, 229, 112, 0, 0, 0, 0, 33, 91, 214, 112, 0, 0, 0, 0,
        34, 75, 199, 112, 0, 0, 0, 0, 35, 59, 184, 112, 0, 0, 0, 0, 36, 43, 169, 112, 0, 0, 0, 0,
        37, 27, 154, 112, 0, 0, 0, 0, 38, 11, 139, 112, 0, 0, 0, 0, 39, 4, 182, 240, 0, 0, 0, 0,
        39, 244, 167, 240, 0, 0, 0, 0, 40, 228, 167, 0, 0, 0, 0, 0, 41, 120, 79, 0, 0, 0, 0, 0, 41,
        212, 137, 240, 0, 0, 0, 0, 42, 196, 122, 240, 0, 0, 0, 0, 43, 180, 107, 240, 0, 0, 0, 0,
        44, 164, 92, 240, 0, 0, 0, 0, 45, 148, 77, 240, 0, 0, 0, 0, 46, 132, 62, 240, 0, 0, 0, 0,
        47, 116, 47, 240, 0, 0, 0, 0, 48, 100, 32, 240, 0, 0, 0, 0, 49, 93, 76, 112, 0, 0, 0, 0,
        50, 114, 39, 112, 0, 0, 0, 0, 51, 61, 46, 112, 0, 0, 0, 0, 52, 82, 23, 128, 0, 0, 0, 0, 53,
        29, 30, 128, 0, 0, 0, 0, 54, 49, 249, 128, 0, 0, 0, 0, 54, 253, 0, 128, 0, 0, 0, 0, 56, 27,
        22, 0, 0, 0, 0, 0, 56, 220, 226, 128, 0, 0, 0, 0, 57, 250, 248, 0, 0, 0, 0, 0, 58, 188,
        196, 128, 0, 0, 0, 0, 59, 218, 218, 0, 0, 0, 0, 0, 60, 165, 225, 0, 0, 0, 0, 0, 61, 186,
        188, 0, 0, 0, 0, 0, 62, 133, 195, 0, 0, 0, 0, 0, 63, 154, 158, 0, 0, 0, 0, 0, 64, 101, 165,
        0, 0, 0, 0, 0, 65, 131, 186, 128, 0, 0, 0, 0, 66, 69, 135, 0, 0, 0, 0, 0, 67, 99, 156, 128,
        0, 0, 0, 0, 68, 37, 105, 0, 0, 0, 0, 0, 69, 67, 126, 128, 0, 0, 0, 0, 70, 5, 75, 0, 0, 0,
        0, 0, 71, 35, 96, 128, 0, 0, 0, 0, 71, 238, 103, 128, 0, 0, 0, 0, 73, 3, 66, 128, 0, 0, 0,
        0, 73, 206, 73, 128, 0, 0, 0, 0, 74, 227, 36, 128, 0, 0, 0, 0, 75, 174, 43, 128, 0, 0, 0,
        0, 76, 204, 65, 0, 0, 0, 0, 0, 77, 142, 13, 128, 0, 0, 0, 0, 84, 75, 186, 240, 0, 0, 0, 0,
        86, 246, 178, 0, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 5, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 4, 5, 4, 5, 4, 5, 3, 5, 3, 0, 0, 133, 200, 0, 0, 0, 0, 126, 144, 0, 4, 0, 0, 168,
        192, 1, 8, 0, 0, 154, 176, 0, 12, 0, 0, 154, 176, 1, 12, 0, 0, 140, 160, 0, 16, 76, 77, 84,
        0, 43, 48, 57, 0, 43, 49, 50, 0, 43, 49, 49, 0, 43, 49, 48, 0, 10, 60, 43, 49, 49, 62, 45,
        49, 49, 10,
    ];
    pub(crate) const ASIA_SAMARKAND: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        24, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 133, 55, 255, 255, 255, 255, 181,
        163, 253, 64, 0, 0, 0, 0, 21, 39, 139, 176, 0, 0, 0, 0, 22, 24, 192, 32, 0, 0, 0, 0, 23, 8,
        177, 32, 0, 0, 0, 0, 23, 249, 243, 160, 0, 0, 0, 0, 24, 233, 242, 176, 0, 0, 0, 0, 25, 219,
        39, 32, 0, 0, 0, 0, 26, 204, 119, 176, 0, 0, 0, 0, 27, 188, 132, 208, 0, 0, 0, 0, 28, 172,
        117, 208, 0, 0, 0, 0, 29, 156, 102, 208, 0, 0, 0, 0, 30, 140, 87, 208, 0, 0, 0, 0, 31, 124,
        72, 208, 0, 0, 0, 0, 32, 108, 57, 208, 0, 0, 0, 0, 33, 92, 42, 208, 0, 0, 0, 0, 34, 76, 27,
        208, 0, 0, 0, 0, 35, 60, 12, 208, 0, 0, 0, 0, 36, 43, 253, 208, 0, 0, 0, 0, 37, 27, 238,
        208, 0, 0, 0, 0, 38, 11, 223, 208, 0, 0, 0, 0, 39, 5, 11, 80, 0, 0, 0, 0, 39, 244, 252, 80,
        0, 0, 0, 0, 40, 228, 237, 80, 1, 2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 0, 0, 62, 201, 0, 0, 0, 0, 56, 64, 0, 4, 0, 0, 70, 80, 0, 8, 0, 0, 84, 96, 1,
        12, 0, 0, 84, 96, 0, 12, 76, 77, 84, 0, 43, 48, 52, 0, 43, 48, 53, 0, 43, 48, 54, 0, 10,
        60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ASIA_SREDNEKOLYMSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        65, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 51, 228, 255, 255, 255, 255, 181,
        163, 168, 224, 0, 0, 0, 0, 21, 39, 55, 80, 0, 0, 0, 0, 22, 24, 107, 192, 0, 0, 0, 0, 23, 8,
        106, 208, 0, 0, 0, 0, 23, 249, 159, 64, 0, 0, 0, 0, 24, 233, 158, 80, 0, 0, 0, 0, 25, 218,
        210, 192, 0, 0, 0, 0, 26, 204, 35, 80, 0, 0, 0, 0, 27, 188, 48, 112, 0, 0, 0, 0, 28, 172,
        33, 112, 0, 0, 0, 0, 29, 156, 18, 112, 0, 0, 0, 0, 30, 140, 3, 112, 0, 0, 0, 0, 31, 123,
        244, 112, 0, 0, 0, 0, 32, 107, 229, 112, 0, 0, 0, 0, 33, 91, 214, 112, 0, 0, 0, 0, 34, 75,
        199, 112, 0, 0, 0, 0, 35, 59, 184, 112, 0, 0, 0, 0, 36, 43, 169, 112, 0, 0, 0, 0, 37, 27,
        154, 112, 0, 0, 0, 0, 38, 11, 139, 112, 0, 0, 0, 0, 39, 4, 182, 240, 0, 0, 0, 0, 39, 244,
        167, 240, 0, 0, 0, 0, 40, 228, 167, 0, 0, 0, 0, 0, 41, 120, 79, 0, 0, 0, 0, 0, 41, 212,
        137, 240, 0, 0, 0, 0, 42, 196, 122, 240, 0, 0, 0, 0, 43, 180, 107, 240, 0, 0, 0, 0, 44,
        164, 92, 240, 0, 0, 0, 0, 45, 148, 77, 240, 0, 0, 0, 0, 46, 132, 62, 240, 0, 0, 0, 0, 47,
        116, 47, 240, 0, 0, 0, 0, 48, 100, 32, 240, 0, 0, 0, 0, 49, 93, 76, 112, 0, 0, 0, 0, 50,
        114, 39, 112, 0, 0, 0, 0, 51, 61, 46, 112, 0, 0, 0, 0, 52, 82, 9, 112, 0, 0, 0, 0, 53, 29,
        16, 112, 0, 0, 0, 0, 54, 49, 235, 112, 0, 0, 0, 0, 54, 252, 242, 112, 0, 0, 0, 0, 56, 27,
        7, 240, 0, 0, 0, 0, 56, 220, 212, 112, 0, 0, 0, 0, 57, 250, 233, 240, 0, 0, 0, 0, 58, 188,
        182, 112, 0, 0, 0, 0, 59, 218, 203, 240, 0, 0, 0, 0, 60, 165, 210, 240, 0, 0, 0, 0, 61,
        186, 173, 240, 0, 0, 0, 0, 62, 133, 180, 240, 0, 0, 0, 0, 63, 154, 143, 240, 0, 0, 0, 0,
        64, 101, 150, 240, 0, 0, 0, 0, 65, 131, 172, 112, 0, 0, 0, 0, 66, 69, 120, 240, 0, 0, 0, 0,
        67, 99, 142, 112, 0, 0, 0, 0, 68, 37, 90, 240, 0, 0, 0, 0, 69, 67, 112, 112, 0, 0, 0, 0,
        70, 5, 60, 240, 0, 0, 0, 0, 71, 35, 82, 112, 0, 0, 0, 0, 71, 238, 89, 112, 0, 0, 0, 0, 73,
        3, 52, 112, 0, 0, 0, 0, 73, 206, 59, 112, 0, 0, 0, 0, 74, 227, 22, 112, 0, 0, 0, 0, 75,
        174, 29, 112, 0, 0, 0, 0, 76, 204, 50, 240, 0, 0, 0, 0, 77, 141, 255, 112, 0, 0, 0, 0, 84,
        75, 172, 224, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 5, 3, 0, 0, 144, 28, 0, 0, 0, 0, 140, 160, 0, 4, 0, 0, 168, 192, 1, 8,
        0, 0, 154, 176, 0, 12, 0, 0, 154, 176, 1, 12, 0, 0, 168, 192, 0, 8, 76, 77, 84, 0, 43, 49,
        48, 0, 43, 49, 50, 0, 43, 49, 49, 0, 10, 60, 43, 49, 49, 62, 45, 49, 49, 10,
    ];
    pub(crate) const ASIA_TASHKENT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        24, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 131, 9, 255, 255, 255, 255, 181,
        163, 239, 48, 0, 0, 0, 0, 21, 39, 125, 160, 0, 0, 0, 0, 22, 24, 178, 16, 0, 0, 0, 0, 23, 8,
        177, 32, 0, 0, 0, 0, 23, 249, 229, 144, 0, 0, 0, 0, 24, 233, 228, 160, 0, 0, 0, 0, 25, 219,
        25, 16, 0, 0, 0, 0, 26, 204, 105, 160, 0, 0, 0, 0, 27, 188, 118, 192, 0, 0, 0, 0, 28, 172,
        103, 192, 0, 0, 0, 0, 29, 156, 88, 192, 0, 0, 0, 0, 30, 140, 73, 192, 0, 0, 0, 0, 31, 124,
        58, 192, 0, 0, 0, 0, 32, 108, 43, 192, 0, 0, 0, 0, 33, 92, 28, 192, 0, 0, 0, 0, 34, 76, 13,
        192, 0, 0, 0, 0, 35, 59, 254, 192, 0, 0, 0, 0, 36, 43, 239, 192, 0, 0, 0, 0, 37, 27, 224,
        192, 0, 0, 0, 0, 38, 11, 209, 192, 0, 0, 0, 0, 39, 4, 253, 64, 0, 0, 0, 0, 39, 244, 238,
        64, 0, 0, 0, 0, 40, 228, 237, 80, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 4, 1, 0, 0, 64, 247, 0, 0, 0, 0, 70, 80, 0, 4, 0, 0, 98, 112, 1, 8, 0, 0, 84, 96,
        0, 12, 0, 0, 84, 96, 1, 12, 76, 77, 84, 0, 43, 48, 53, 0, 43, 48, 55, 0, 43, 48, 54, 0, 10,
        60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ASIA_TBILISI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        52, 0, 0, 0, 6, 0, 0, 0, 21, 255, 255, 255, 255, 86, 182, 186, 1, 255, 255, 255, 255, 170,
        25, 154, 1, 255, 255, 255, 255, 231, 218, 12, 80, 0, 0, 0, 0, 21, 39, 153, 192, 0, 0, 0, 0,
        22, 24, 206, 48, 0, 0, 0, 0, 23, 8, 205, 64, 0, 0, 0, 0, 23, 250, 1, 176, 0, 0, 0, 0, 24,
        234, 0, 192, 0, 0, 0, 0, 25, 219, 53, 48, 0, 0, 0, 0, 26, 204, 133, 192, 0, 0, 0, 0, 27,
        188, 146, 224, 0, 0, 0, 0, 28, 172, 131, 224, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0,
        30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 86, 224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0,
        33, 92, 56, 224, 0, 0, 0, 0, 34, 76, 41, 224, 0, 0, 0, 0, 35, 60, 26, 224, 0, 0, 0, 0, 36,
        44, 11, 224, 0, 0, 0, 0, 37, 27, 252, 224, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0, 0, 0, 39, 5,
        25, 96, 0, 0, 0, 0, 39, 245, 10, 96, 0, 0, 0, 0, 40, 229, 9, 112, 0, 0, 0, 0, 41, 212, 222,
        80, 0, 0, 0, 0, 42, 196, 193, 64, 0, 0, 0, 0, 43, 180, 192, 80, 0, 0, 0, 0, 44, 164, 163,
        64, 0, 0, 0, 0, 45, 148, 162, 80, 0, 0, 0, 0, 46, 132, 133, 64, 0, 0, 0, 0, 47, 116, 118,
        64, 0, 0, 0, 0, 48, 100, 89, 48, 0, 0, 0, 0, 49, 93, 146, 192, 0, 0, 0, 0, 51, 61, 102,
        176, 0, 0, 0, 0, 52, 82, 65, 176, 0, 0, 0, 0, 53, 29, 86, 192, 0, 0, 0, 0, 54, 50, 35, 176,
        0, 0, 0, 0, 54, 253, 56, 192, 0, 0, 0, 0, 56, 27, 64, 48, 0, 0, 0, 0, 56, 221, 26, 192, 0,
        0, 0, 0, 57, 251, 34, 48, 0, 0, 0, 0, 58, 188, 252, 192, 0, 0, 0, 0, 59, 219, 4, 48, 0, 0,
        0, 0, 60, 166, 25, 64, 0, 0, 0, 0, 61, 186, 230, 48, 0, 0, 0, 0, 62, 133, 251, 64, 0, 0, 0,
        0, 63, 154, 200, 48, 0, 0, 0, 0, 64, 101, 221, 64, 0, 0, 0, 0, 64, 221, 199, 176, 0, 0, 0,
        0, 65, 132, 28, 240, 0, 0, 0, 0, 66, 69, 233, 112, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 2, 5, 2, 5, 2, 5, 4, 3, 4, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 5, 2, 4, 0, 0, 41, 255, 0, 0, 0, 0, 41, 255, 0, 4, 0, 0, 42, 48, 0, 9, 0,
        0, 70, 80, 1, 13, 0, 0, 56, 64, 0, 17, 0, 0, 56, 64, 1, 17, 76, 77, 84, 0, 84, 66, 77, 84,
        0, 43, 48, 51, 0, 43, 48, 53, 0, 43, 48, 52, 0, 10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const ASIA_TEL_AVIV: &[u8] = &[
        84, 90, 105, 102, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 51,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        100, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 86, 182, 195, 104, 255, 255, 255, 255,
        158, 48, 69, 116, 255, 255, 255, 255, 200, 89, 207, 0, 255, 255, 255, 255, 200, 250, 166,
        0, 255, 255, 255, 255, 201, 56, 156, 128, 255, 255, 255, 255, 204, 229, 235, 128, 255, 255,
        255, 255, 205, 172, 254, 0, 255, 255, 255, 255, 206, 199, 31, 0, 255, 255, 255, 255, 207,
        143, 131, 0, 255, 255, 255, 255, 208, 169, 164, 0, 255, 255, 255, 255, 209, 132, 125, 0,
        255, 255, 255, 255, 210, 138, 215, 128, 255, 255, 255, 255, 211, 101, 176, 128, 255, 255,
        255, 255, 212, 108, 11, 0, 255, 255, 255, 255, 215, 90, 48, 128, 255, 255, 255, 255, 215,
        223, 88, 0, 255, 255, 255, 255, 216, 47, 195, 128, 255, 255, 255, 255, 217, 30, 99, 0, 255,
        255, 255, 255, 218, 16, 247, 0, 255, 255, 255, 255, 218, 235, 208, 0, 255, 255, 255, 255,
        219, 180, 52, 0, 255, 255, 255, 255, 220, 185, 61, 0, 255, 255, 255, 255, 221, 224, 141, 0,
        255, 255, 255, 255, 222, 180, 206, 128, 255, 255, 255, 255, 223, 164, 191, 128, 255, 255,
        255, 255, 224, 139, 118, 0, 255, 255, 255, 255, 225, 86, 125, 0, 255, 255, 255, 255, 226,
        190, 102, 128, 255, 255, 255, 255, 227, 54, 95, 0, 255, 255, 255, 255, 228, 158, 72, 128,
        255, 255, 255, 255, 229, 22, 65, 0, 255, 255, 255, 255, 230, 116, 240, 0, 255, 255, 255,
        255, 231, 17, 210, 128, 255, 255, 255, 255, 232, 38, 173, 128, 255, 255, 255, 255, 232,
        232, 122, 0, 0, 0, 0, 0, 8, 124, 139, 224, 0, 0, 0, 0, 8, 253, 176, 208, 0, 0, 0, 0, 9,
        246, 234, 96, 0, 0, 0, 0, 10, 166, 51, 208, 0, 0, 0, 0, 19, 233, 252, 96, 0, 0, 0, 0, 20,
        33, 91, 96, 0, 0, 0, 0, 26, 250, 198, 96, 0, 0, 0, 0, 27, 142, 110, 96, 0, 0, 0, 0, 28,
        190, 248, 224, 0, 0, 0, 0, 29, 119, 124, 208, 0, 0, 0, 0, 30, 204, 255, 96, 0, 0, 0, 0, 31,
        96, 153, 80, 0, 0, 0, 0, 32, 130, 177, 96, 0, 0, 0, 0, 33, 73, 181, 208, 0, 0, 0, 0, 34,
        94, 158, 224, 0, 0, 0, 0, 35, 32, 93, 80, 0, 0, 0, 0, 36, 90, 48, 96, 0, 0, 0, 0, 37, 0,
        63, 80, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0, 0, 0, 38, 214, 230, 208, 0, 0, 0, 0, 39, 235,
        207, 224, 0, 0, 0, 0, 40, 192, 3, 80, 0, 0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 169,
        31, 208, 0, 0, 0, 0, 43, 187, 101, 224, 0, 0, 0, 0, 44, 137, 1, 208, 0, 0, 0, 0, 45, 155,
        71, 224, 0, 0, 0, 0, 46, 95, 169, 80, 0, 0, 0, 0, 47, 123, 41, 224, 0, 0, 0, 0, 48, 72,
        197, 208, 0, 0, 0, 0, 49, 72, 150, 224, 0, 0, 0, 0, 50, 60, 110, 80, 0, 0, 0, 0, 51, 49,
        179, 96, 0, 0, 0, 0, 52, 26, 254, 208, 0, 0, 0, 0, 53, 17, 149, 96, 0, 0, 0, 0, 53, 241,
        166, 80, 0, 0, 0, 0, 55, 4, 8, 128, 0, 0, 0, 0, 55, 207, 1, 112, 0, 0, 0, 0, 56, 246, 95,
        128, 0, 0, 0, 0, 57, 220, 249, 224, 0, 0, 0, 0, 58, 208, 237, 112, 0, 0, 0, 0, 59, 174, 91,
        96, 0, 0, 0, 0, 60, 163, 160, 112, 0, 0, 0, 0, 61, 160, 178, 96, 0, 0, 0, 0, 62, 131, 130,
        112, 0, 0, 0, 0, 63, 124, 159, 224, 0, 0, 0, 0, 64, 115, 54, 112, 0, 0, 0, 0, 65, 80, 164,
        96, 0, 0, 0, 0, 66, 76, 143, 0, 0, 0, 0, 0, 67, 72, 79, 112, 0, 0, 0, 0, 68, 44, 113, 0, 0,
        0, 0, 0, 69, 30, 246, 240, 0, 0, 0, 0, 70, 12, 83, 0, 0, 0, 0, 0, 70, 236, 99, 240, 0, 0,
        0, 0, 71, 236, 53, 0, 0, 0, 0, 0, 72, 231, 245, 112, 0, 0, 0, 0, 73, 204, 23, 0, 0, 0, 0,
        0, 74, 190, 156, 240, 0, 0, 0, 0, 75, 171, 249, 0, 0, 0, 0, 0, 76, 140, 9, 240, 0, 0, 0, 0,
        77, 149, 21, 128, 0, 0, 0, 0, 78, 135, 155, 112, 0, 0, 0, 0, 79, 116, 247, 128, 0, 0, 0, 0,
        80, 94, 66, 240, 0, 0, 0, 0, 81, 84, 217, 128, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0, 32, 152,
        0, 0, 0, 0, 33, 12, 0, 4, 0, 0, 42, 48, 1, 8, 0, 0, 28, 32, 0, 12, 0, 0, 56, 64, 1, 16, 76,
        77, 84, 0, 74, 77, 84, 0, 73, 68, 84, 0, 73, 83, 84, 0, 73, 68, 68, 84, 0, 10, 73, 83, 84,
        45, 50, 73, 68, 84, 44, 77, 51, 46, 52, 46, 52, 47, 50, 54, 44, 77, 49, 48, 46, 53, 46, 48,
        10,
    ];
    pub(crate) const ASIA_THIMBU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 213, 230, 21, 116, 0, 0, 0, 0, 33, 97, 77,
        168, 1, 2, 0, 0, 84, 12, 0, 0, 0, 0, 77, 88, 0, 4, 0, 0, 84, 96, 0, 10, 76, 77, 84, 0, 43,
        48, 53, 51, 48, 0, 43, 48, 54, 0, 10, 60, 43, 48, 54, 62, 45, 54, 10,
    ];
    pub(crate) const ASIA_TOMSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        67, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 161, 229, 78, 217, 255, 255, 255, 255,
        181, 163, 225, 32, 0, 0, 0, 0, 21, 39, 111, 144, 0, 0, 0, 0, 22, 24, 164, 0, 0, 0, 0, 0,
        23, 8, 163, 16, 0, 0, 0, 0, 23, 249, 215, 128, 0, 0, 0, 0, 24, 233, 214, 144, 0, 0, 0, 0,
        25, 219, 11, 0, 0, 0, 0, 0, 26, 204, 91, 144, 0, 0, 0, 0, 27, 188, 104, 176, 0, 0, 0, 0,
        28, 172, 89, 176, 0, 0, 0, 0, 29, 156, 74, 176, 0, 0, 0, 0, 30, 140, 59, 176, 0, 0, 0, 0,
        31, 124, 44, 176, 0, 0, 0, 0, 32, 108, 29, 176, 0, 0, 0, 0, 33, 92, 14, 176, 0, 0, 0, 0,
        34, 75, 255, 176, 0, 0, 0, 0, 35, 59, 240, 176, 0, 0, 0, 0, 36, 43, 225, 176, 0, 0, 0, 0,
        37, 27, 210, 176, 0, 0, 0, 0, 38, 11, 195, 176, 0, 0, 0, 0, 39, 4, 239, 48, 0, 0, 0, 0, 39,
        244, 224, 48, 0, 0, 0, 0, 40, 228, 223, 64, 0, 0, 0, 0, 41, 120, 135, 64, 0, 0, 0, 0, 41,
        212, 194, 48, 0, 0, 0, 0, 42, 196, 179, 48, 0, 0, 0, 0, 43, 180, 164, 48, 0, 0, 0, 0, 44,
        164, 149, 48, 0, 0, 0, 0, 45, 148, 134, 48, 0, 0, 0, 0, 46, 132, 119, 48, 0, 0, 0, 0, 47,
        116, 104, 48, 0, 0, 0, 0, 48, 100, 89, 48, 0, 0, 0, 0, 49, 93, 132, 176, 0, 0, 0, 0, 50,
        114, 95, 176, 0, 0, 0, 0, 51, 61, 102, 176, 0, 0, 0, 0, 52, 82, 65, 176, 0, 0, 0, 0, 53,
        29, 72, 176, 0, 0, 0, 0, 54, 50, 35, 176, 0, 0, 0, 0, 54, 253, 42, 176, 0, 0, 0, 0, 56, 27,
        64, 48, 0, 0, 0, 0, 56, 221, 12, 176, 0, 0, 0, 0, 57, 251, 34, 48, 0, 0, 0, 0, 58, 188,
        238, 176, 0, 0, 0, 0, 59, 219, 4, 48, 0, 0, 0, 0, 60, 166, 11, 48, 0, 0, 0, 0, 60, 206,
        233, 176, 0, 0, 0, 0, 61, 186, 244, 64, 0, 0, 0, 0, 62, 133, 251, 64, 0, 0, 0, 0, 63, 154,
        214, 64, 0, 0, 0, 0, 64, 101, 221, 64, 0, 0, 0, 0, 65, 131, 242, 192, 0, 0, 0, 0, 66, 69,
        191, 64, 0, 0, 0, 0, 67, 99, 212, 192, 0, 0, 0, 0, 68, 37, 161, 64, 0, 0, 0, 0, 69, 67,
        182, 192, 0, 0, 0, 0, 70, 5, 131, 64, 0, 0, 0, 0, 71, 35, 152, 192, 0, 0, 0, 0, 71, 238,
        159, 192, 0, 0, 0, 0, 73, 3, 122, 192, 0, 0, 0, 0, 73, 206, 129, 192, 0, 0, 0, 0, 74, 227,
        92, 192, 0, 0, 0, 0, 75, 174, 99, 192, 0, 0, 0, 0, 76, 204, 121, 64, 0, 0, 0, 0, 77, 142,
        69, 192, 0, 0, 0, 0, 84, 75, 243, 48, 0, 0, 0, 0, 87, 73, 248, 192, 1, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 3, 1, 3, 0,
        0, 79, 167, 0, 0, 0, 0, 84, 96, 0, 4, 0, 0, 112, 128, 1, 8, 0, 0, 98, 112, 0, 12, 0, 0, 98,
        112, 1, 12, 76, 77, 84, 0, 43, 48, 54, 0, 43, 48, 56, 0, 43, 48, 55, 0, 10, 60, 43, 48, 55,
        62, 45, 55, 10,
    ];
    pub(crate) const ASIA_ULAANBAATAR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        50, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 134, 211, 238, 76, 0, 0, 0, 0, 15, 11,
        220, 144, 0, 0, 0, 0, 24, 233, 200, 128, 0, 0, 0, 0, 25, 218, 252, 240, 0, 0, 0, 0, 26,
        204, 77, 128, 0, 0, 0, 0, 27, 188, 48, 112, 0, 0, 0, 0, 28, 172, 47, 128, 0, 0, 0, 0, 29,
        156, 18, 112, 0, 0, 0, 0, 30, 140, 17, 128, 0, 0, 0, 0, 31, 123, 244, 112, 0, 0, 0, 0, 32,
        107, 243, 128, 0, 0, 0, 0, 33, 91, 214, 112, 0, 0, 0, 0, 34, 75, 213, 128, 0, 0, 0, 0, 35,
        59, 184, 112, 0, 0, 0, 0, 36, 43, 183, 128, 0, 0, 0, 0, 37, 27, 154, 112, 0, 0, 0, 0, 38,
        11, 153, 128, 0, 0, 0, 0, 39, 4, 182, 240, 0, 0, 0, 0, 39, 244, 182, 0, 0, 0, 0, 0, 40,
        228, 152, 240, 0, 0, 0, 0, 41, 212, 152, 0, 0, 0, 0, 0, 42, 196, 122, 240, 0, 0, 0, 0, 43,
        180, 122, 0, 0, 0, 0, 0, 44, 164, 92, 240, 0, 0, 0, 0, 45, 148, 92, 0, 0, 0, 0, 0, 46, 132,
        62, 240, 0, 0, 0, 0, 47, 116, 62, 0, 0, 0, 0, 0, 48, 100, 32, 240, 0, 0, 0, 0, 49, 93, 90,
        128, 0, 0, 0, 0, 50, 77, 61, 112, 0, 0, 0, 0, 51, 61, 60, 128, 0, 0, 0, 0, 52, 45, 31, 112,
        0, 0, 0, 0, 53, 29, 30, 128, 0, 0, 0, 0, 54, 13, 1, 112, 0, 0, 0, 0, 58, 233, 179, 160, 0,
        0, 0, 0, 59, 180, 172, 144, 0, 0, 0, 0, 60, 164, 171, 160, 0, 0, 0, 0, 61, 148, 142, 144,
        0, 0, 0, 0, 62, 132, 141, 160, 0, 0, 0, 0, 63, 116, 112, 144, 0, 0, 0, 0, 64, 100, 111,
        160, 0, 0, 0, 0, 65, 84, 82, 144, 0, 0, 0, 0, 66, 68, 81, 160, 0, 0, 0, 0, 67, 52, 52, 144,
        0, 0, 0, 0, 68, 36, 51, 160, 0, 0, 0, 0, 69, 29, 81, 16, 0, 0, 0, 0, 85, 21, 154, 160, 0,
        0, 0, 0, 86, 5, 97, 112, 0, 0, 0, 0, 86, 245, 124, 160, 0, 0, 0, 0, 87, 229, 67, 112, 1, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0, 100, 52, 0, 0, 0, 0, 98, 112,
        0, 4, 0, 0, 126, 144, 1, 8, 0, 0, 112, 128, 0, 12, 76, 77, 84, 0, 43, 48, 55, 0, 43, 48,
        57, 0, 43, 48, 56, 0, 10, 60, 43, 48, 56, 62, 45, 56, 10,
    ];
    pub(crate) const ASIA_URUMQI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 176, 254, 186, 100, 1, 0, 0, 82, 28, 0, 0,
        0, 0, 84, 96, 0, 4, 76, 77, 84, 0, 43, 48, 54, 0, 10, 60, 43, 48, 54, 62, 45, 54, 10,
    ];
    pub(crate) const ASIA_UST_NERA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        66, 0, 0, 0, 8, 0, 0, 0, 24, 255, 255, 255, 255, 161, 219, 221, 186, 255, 255, 255, 255,
        181, 163, 197, 0, 0, 0, 0, 0, 21, 39, 83, 112, 0, 0, 0, 0, 22, 24, 107, 192, 0, 0, 0, 0,
        23, 8, 106, 208, 0, 0, 0, 0, 23, 249, 159, 64, 0, 0, 0, 0, 24, 233, 158, 80, 0, 0, 0, 0,
        25, 218, 210, 192, 0, 0, 0, 0, 26, 204, 35, 80, 0, 0, 0, 0, 27, 188, 48, 112, 0, 0, 0, 0,
        28, 172, 33, 112, 0, 0, 0, 0, 29, 156, 18, 112, 0, 0, 0, 0, 30, 140, 3, 112, 0, 0, 0, 0,
        31, 123, 244, 112, 0, 0, 0, 0, 32, 107, 229, 112, 0, 0, 0, 0, 33, 91, 214, 112, 0, 0, 0, 0,
        34, 75, 199, 112, 0, 0, 0, 0, 35, 59, 184, 112, 0, 0, 0, 0, 36, 43, 169, 112, 0, 0, 0, 0,
        37, 27, 154, 112, 0, 0, 0, 0, 38, 11, 139, 112, 0, 0, 0, 0, 39, 4, 182, 240, 0, 0, 0, 0,
        39, 244, 167, 240, 0, 0, 0, 0, 40, 228, 167, 0, 0, 0, 0, 0, 41, 120, 79, 0, 0, 0, 0, 0, 41,
        212, 137, 240, 0, 0, 0, 0, 42, 196, 122, 240, 0, 0, 0, 0, 43, 180, 107, 240, 0, 0, 0, 0,
        44, 164, 92, 240, 0, 0, 0, 0, 45, 148, 77, 240, 0, 0, 0, 0, 46, 132, 62, 240, 0, 0, 0, 0,
        47, 116, 47, 240, 0, 0, 0, 0, 48, 100, 32, 240, 0, 0, 0, 0, 49, 93, 76, 112, 0, 0, 0, 0,
        50, 114, 39, 112, 0, 0, 0, 0, 51, 61, 46, 112, 0, 0, 0, 0, 52, 82, 9, 112, 0, 0, 0, 0, 53,
        29, 16, 112, 0, 0, 0, 0, 54, 49, 235, 112, 0, 0, 0, 0, 54, 252, 242, 112, 0, 0, 0, 0, 56,
        27, 7, 240, 0, 0, 0, 0, 56, 220, 212, 112, 0, 0, 0, 0, 57, 250, 233, 240, 0, 0, 0, 0, 58,
        188, 182, 112, 0, 0, 0, 0, 59, 218, 203, 240, 0, 0, 0, 0, 60, 165, 210, 240, 0, 0, 0, 0,
        61, 186, 173, 240, 0, 0, 0, 0, 62, 133, 180, 240, 0, 0, 0, 0, 63, 154, 143, 240, 0, 0, 0,
        0, 64, 101, 150, 240, 0, 0, 0, 0, 65, 131, 172, 112, 0, 0, 0, 0, 66, 69, 120, 240, 0, 0, 0,
        0, 67, 99, 142, 112, 0, 0, 0, 0, 68, 37, 90, 240, 0, 0, 0, 0, 69, 67, 112, 112, 0, 0, 0, 0,
        70, 5, 60, 240, 0, 0, 0, 0, 71, 35, 82, 112, 0, 0, 0, 0, 71, 238, 89, 112, 0, 0, 0, 0, 73,
        3, 52, 112, 0, 0, 0, 0, 73, 206, 59, 112, 0, 0, 0, 0, 74, 227, 22, 112, 0, 0, 0, 0, 75,
        174, 29, 112, 0, 0, 0, 0, 76, 204, 50, 240, 0, 0, 0, 0, 77, 141, 255, 112, 0, 0, 0, 0, 78,
        109, 244, 64, 0, 0, 0, 0, 84, 75, 186, 240, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 5, 6, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 7, 3, 6, 0, 0, 134, 70, 0, 0, 0, 0, 112,
        128, 0, 4, 0, 0, 126, 144, 0, 8, 0, 0, 154, 176, 0, 12, 0, 0, 168, 192, 1, 16, 0, 0, 154,
        176, 1, 12, 0, 0, 140, 160, 0, 20, 0, 0, 168, 192, 0, 16, 76, 77, 84, 0, 43, 48, 56, 0, 43,
        48, 57, 0, 43, 49, 49, 0, 43, 49, 50, 0, 43, 49, 48, 0, 10, 60, 43, 49, 48, 62, 45, 49, 48,
        10,
    ];
    pub(crate) const ASIA_VIENTIANE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 136, 140, 71, 80, 255, 255, 255, 255, 145,
        163, 43, 10, 255, 255, 255, 255, 205, 53, 230, 128, 255, 255, 255, 255, 209, 89, 206, 112,
        255, 255, 255, 255, 210, 59, 62, 240, 255, 255, 255, 255, 213, 50, 187, 16, 255, 255, 255,
        255, 228, 81, 97, 0, 1, 2, 3, 4, 2, 3, 2, 0, 0, 96, 48, 0, 0, 0, 0, 99, 246, 0, 4, 0, 0,
        98, 112, 0, 9, 0, 0, 112, 128, 0, 13, 0, 0, 126, 144, 0, 17, 76, 77, 84, 0, 80, 76, 77, 84,
        0, 43, 48, 55, 0, 43, 48, 56, 0, 43, 48, 57, 0, 10, 60, 43, 48, 55, 62, 45, 55, 10,
    ];
    pub(crate) const ASIA_VLADIVOSTOK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        65, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 167, 89, 71, 93, 255, 255, 255, 255, 181,
        163, 182, 240, 0, 0, 0, 0, 21, 39, 69, 96, 0, 0, 0, 0, 22, 24, 121, 208, 0, 0, 0, 0, 23, 8,
        120, 224, 0, 0, 0, 0, 23, 249, 173, 80, 0, 0, 0, 0, 24, 233, 172, 96, 0, 0, 0, 0, 25, 218,
        224, 208, 0, 0, 0, 0, 26, 204, 49, 96, 0, 0, 0, 0, 27, 188, 62, 128, 0, 0, 0, 0, 28, 172,
        47, 128, 0, 0, 0, 0, 29, 156, 32, 128, 0, 0, 0, 0, 30, 140, 17, 128, 0, 0, 0, 0, 31, 124,
        2, 128, 0, 0, 0, 0, 32, 107, 243, 128, 0, 0, 0, 0, 33, 91, 228, 128, 0, 0, 0, 0, 34, 75,
        213, 128, 0, 0, 0, 0, 35, 59, 198, 128, 0, 0, 0, 0, 36, 43, 183, 128, 0, 0, 0, 0, 37, 27,
        168, 128, 0, 0, 0, 0, 38, 11, 153, 128, 0, 0, 0, 0, 39, 4, 197, 0, 0, 0, 0, 0, 39, 244,
        182, 0, 0, 0, 0, 0, 40, 228, 181, 16, 0, 0, 0, 0, 41, 120, 93, 16, 0, 0, 0, 0, 41, 212,
        152, 0, 0, 0, 0, 0, 42, 196, 137, 0, 0, 0, 0, 0, 43, 180, 122, 0, 0, 0, 0, 0, 44, 164, 107,
        0, 0, 0, 0, 0, 45, 148, 92, 0, 0, 0, 0, 0, 46, 132, 77, 0, 0, 0, 0, 0, 47, 116, 62, 0, 0,
        0, 0, 0, 48, 100, 47, 0, 0, 0, 0, 0, 49, 93, 90, 128, 0, 0, 0, 0, 50, 114, 53, 128, 0, 0,
        0, 0, 51, 61, 60, 128, 0, 0, 0, 0, 52, 82, 23, 128, 0, 0, 0, 0, 53, 29, 30, 128, 0, 0, 0,
        0, 54, 49, 249, 128, 0, 0, 0, 0, 54, 253, 0, 128, 0, 0, 0, 0, 56, 27, 22, 0, 0, 0, 0, 0,
        56, 220, 226, 128, 0, 0, 0, 0, 57, 250, 248, 0, 0, 0, 0, 0, 58, 188, 196, 128, 0, 0, 0, 0,
        59, 218, 218, 0, 0, 0, 0, 0, 60, 165, 225, 0, 0, 0, 0, 0, 61, 186, 188, 0, 0, 0, 0, 0, 62,
        133, 195, 0, 0, 0, 0, 0, 63, 154, 158, 0, 0, 0, 0, 0, 64, 101, 165, 0, 0, 0, 0, 0, 65, 131,
        186, 128, 0, 0, 0, 0, 66, 69, 135, 0, 0, 0, 0, 0, 67, 99, 156, 128, 0, 0, 0, 0, 68, 37,
        105, 0, 0, 0, 0, 0, 69, 67, 126, 128, 0, 0, 0, 0, 70, 5, 75, 0, 0, 0, 0, 0, 71, 35, 96,
        128, 0, 0, 0, 0, 71, 238, 103, 128, 0, 0, 0, 0, 73, 3, 66, 128, 0, 0, 0, 0, 73, 206, 73,
        128, 0, 0, 0, 0, 74, 227, 36, 128, 0, 0, 0, 0, 75, 174, 43, 128, 0, 0, 0, 0, 76, 204, 65,
        0, 0, 0, 0, 0, 77, 142, 13, 128, 0, 0, 0, 0, 84, 75, 186, 240, 1, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 5, 3, 0, 0, 123,
        163, 0, 0, 0, 0, 126, 144, 0, 4, 0, 0, 154, 176, 1, 8, 0, 0, 140, 160, 0, 12, 0, 0, 140,
        160, 1, 12, 0, 0, 154, 176, 0, 8, 76, 77, 84, 0, 43, 48, 57, 0, 43, 49, 49, 0, 43, 49, 48,
        0, 10, 60, 43, 49, 48, 62, 45, 49, 48, 10,
    ];
    pub(crate) const ASIA_YAKUTSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        65, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 161, 219, 234, 94, 255, 255, 255, 255,
        181, 163, 197, 0, 0, 0, 0, 0, 21, 39, 83, 112, 0, 0, 0, 0, 22, 24, 135, 224, 0, 0, 0, 0,
        23, 8, 134, 240, 0, 0, 0, 0, 23, 249, 187, 96, 0, 0, 0, 0, 24, 233, 186, 112, 0, 0, 0, 0,
        25, 218, 238, 224, 0, 0, 0, 0, 26, 204, 63, 112, 0, 0, 0, 0, 27, 188, 76, 144, 0, 0, 0, 0,
        28, 172, 61, 144, 0, 0, 0, 0, 29, 156, 46, 144, 0, 0, 0, 0, 30, 140, 31, 144, 0, 0, 0, 0,
        31, 124, 16, 144, 0, 0, 0, 0, 32, 108, 1, 144, 0, 0, 0, 0, 33, 91, 242, 144, 0, 0, 0, 0,
        34, 75, 227, 144, 0, 0, 0, 0, 35, 59, 212, 144, 0, 0, 0, 0, 36, 43, 197, 144, 0, 0, 0, 0,
        37, 27, 182, 144, 0, 0, 0, 0, 38, 11, 167, 144, 0, 0, 0, 0, 39, 4, 211, 16, 0, 0, 0, 0, 39,
        244, 196, 16, 0, 0, 0, 0, 40, 228, 195, 32, 0, 0, 0, 0, 41, 120, 107, 32, 0, 0, 0, 0, 41,
        212, 166, 16, 0, 0, 0, 0, 42, 196, 151, 16, 0, 0, 0, 0, 43, 180, 136, 16, 0, 0, 0, 0, 44,
        164, 121, 16, 0, 0, 0, 0, 45, 148, 106, 16, 0, 0, 0, 0, 46, 132, 91, 16, 0, 0, 0, 0, 47,
        116, 76, 16, 0, 0, 0, 0, 48, 100, 61, 16, 0, 0, 0, 0, 49, 93, 104, 144, 0, 0, 0, 0, 50,
        114, 67, 144, 0, 0, 0, 0, 51, 61, 74, 144, 0, 0, 0, 0, 52, 82, 37, 144, 0, 0, 0, 0, 53, 29,
        44, 144, 0, 0, 0, 0, 54, 50, 7, 144, 0, 0, 0, 0, 54, 253, 14, 144, 0, 0, 0, 0, 56, 27, 36,
        16, 0, 0, 0, 0, 56, 220, 240, 144, 0, 0, 0, 0, 57, 251, 6, 16, 0, 0, 0, 0, 58, 188, 210,
        144, 0, 0, 0, 0, 59, 218, 232, 16, 0, 0, 0, 0, 60, 165, 239, 16, 0, 0, 0, 0, 61, 186, 202,
        16, 0, 0, 0, 0, 62, 133, 209, 16, 0, 0, 0, 0, 63, 154, 172, 16, 0, 0, 0, 0, 64, 101, 179,
        16, 0, 0, 0, 0, 65, 131, 200, 144, 0, 0, 0, 0, 66, 69, 149, 16, 0, 0, 0, 0, 67, 99, 170,
        144, 0, 0, 0, 0, 68, 37, 119, 16, 0, 0, 0, 0, 69, 67, 140, 144, 0, 0, 0, 0, 70, 5, 89, 16,
        0, 0, 0, 0, 71, 35, 110, 144, 0, 0, 0, 0, 71, 238, 117, 144, 0, 0, 0, 0, 73, 3, 80, 144, 0,
        0, 0, 0, 73, 206, 87, 144, 0, 0, 0, 0, 74, 227, 50, 144, 0, 0, 0, 0, 75, 174, 57, 144, 0,
        0, 0, 0, 76, 204, 79, 16, 0, 0, 0, 0, 77, 142, 27, 144, 0, 0, 0, 0, 84, 75, 201, 0, 1, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 5, 3, 0, 0, 121, 162, 0, 0, 0, 0, 112, 128, 0, 4, 0, 0, 140, 160, 1, 8, 0, 0, 126, 144,
        0, 12, 0, 0, 126, 144, 1, 12, 0, 0, 140, 160, 0, 8, 76, 77, 84, 0, 43, 48, 56, 0, 43, 49,
        48, 0, 43, 48, 57, 0, 10, 60, 43, 48, 57, 62, 45, 57, 10,
    ];
    pub(crate) const ASIA_YEKATERINBURG: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        66, 0, 0, 0, 7, 0, 0, 0, 20, 255, 255, 255, 255, 155, 95, 9, 39, 255, 255, 255, 255, 161,
        18, 177, 255, 255, 255, 255, 255, 181, 163, 253, 64, 0, 0, 0, 0, 21, 39, 139, 176, 0, 0, 0,
        0, 22, 24, 192, 32, 0, 0, 0, 0, 23, 8, 191, 48, 0, 0, 0, 0, 23, 249, 243, 160, 0, 0, 0, 0,
        24, 233, 242, 176, 0, 0, 0, 0, 25, 219, 39, 32, 0, 0, 0, 0, 26, 204, 119, 176, 0, 0, 0, 0,
        27, 188, 132, 208, 0, 0, 0, 0, 28, 172, 117, 208, 0, 0, 0, 0, 29, 156, 102, 208, 0, 0, 0,
        0, 30, 140, 87, 208, 0, 0, 0, 0, 31, 124, 72, 208, 0, 0, 0, 0, 32, 108, 57, 208, 0, 0, 0,
        0, 33, 92, 42, 208, 0, 0, 0, 0, 34, 76, 27, 208, 0, 0, 0, 0, 35, 60, 12, 208, 0, 0, 0, 0,
        36, 43, 253, 208, 0, 0, 0, 0, 37, 27, 238, 208, 0, 0, 0, 0, 38, 11, 223, 208, 0, 0, 0, 0,
        39, 5, 11, 80, 0, 0, 0, 0, 39, 244, 252, 80, 0, 0, 0, 0, 40, 228, 251, 96, 0, 0, 0, 0, 41,
        120, 163, 96, 0, 0, 0, 0, 41, 212, 222, 80, 0, 0, 0, 0, 42, 196, 207, 80, 0, 0, 0, 0, 43,
        180, 192, 80, 0, 0, 0, 0, 44, 164, 177, 80, 0, 0, 0, 0, 45, 148, 162, 80, 0, 0, 0, 0, 46,
        132, 147, 80, 0, 0, 0, 0, 47, 116, 132, 80, 0, 0, 0, 0, 48, 100, 117, 80, 0, 0, 0, 0, 49,
        93, 160, 208, 0, 0, 0, 0, 50, 114, 123, 208, 0, 0, 0, 0, 51, 61, 130, 208, 0, 0, 0, 0, 52,
        82, 93, 208, 0, 0, 0, 0, 53, 29, 100, 208, 0, 0, 0, 0, 54, 50, 63, 208, 0, 0, 0, 0, 54,
        253, 70, 208, 0, 0, 0, 0, 56, 27, 92, 80, 0, 0, 0, 0, 56, 221, 40, 208, 0, 0, 0, 0, 57,
        251, 62, 80, 0, 0, 0, 0, 58, 189, 10, 208, 0, 0, 0, 0, 59, 219, 32, 80, 0, 0, 0, 0, 60,
        166, 39, 80, 0, 0, 0, 0, 61, 187, 2, 80, 0, 0, 0, 0, 62, 134, 9, 80, 0, 0, 0, 0, 63, 154,
        228, 80, 0, 0, 0, 0, 64, 101, 235, 80, 0, 0, 0, 0, 65, 132, 0, 208, 0, 0, 0, 0, 66, 69,
        205, 80, 0, 0, 0, 0, 67, 99, 226, 208, 0, 0, 0, 0, 68, 37, 175, 80, 0, 0, 0, 0, 69, 67,
        196, 208, 0, 0, 0, 0, 70, 5, 145, 80, 0, 0, 0, 0, 71, 35, 166, 208, 0, 0, 0, 0, 71, 238,
        173, 208, 0, 0, 0, 0, 73, 3, 136, 208, 0, 0, 0, 0, 73, 206, 143, 208, 0, 0, 0, 0, 74, 227,
        106, 208, 0, 0, 0, 0, 75, 174, 113, 208, 0, 0, 0, 0, 76, 204, 135, 80, 0, 0, 0, 0, 77, 142,
        83, 208, 0, 0, 0, 0, 84, 76, 1, 64, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 5, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 6, 4, 0, 0, 56, 217, 0, 0, 0, 0, 52, 193,
        0, 4, 0, 0, 56, 64, 0, 8, 0, 0, 84, 96, 1, 12, 0, 0, 70, 80, 0, 16, 0, 0, 70, 80, 1, 16, 0,
        0, 84, 96, 0, 12, 76, 77, 84, 0, 80, 77, 84, 0, 43, 48, 52, 0, 43, 48, 54, 0, 43, 48, 53,
        0, 10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const ASIA_YEREVAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        62, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 25, 154, 72, 255, 255, 255, 255, 231,
        218, 12, 80, 0, 0, 0, 0, 21, 39, 153, 192, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0, 23, 8,
        205, 64, 0, 0, 0, 0, 23, 250, 1, 176, 0, 0, 0, 0, 24, 234, 0, 192, 0, 0, 0, 0, 25, 219, 53,
        48, 0, 0, 0, 0, 26, 204, 133, 192, 0, 0, 0, 0, 27, 188, 146, 224, 0, 0, 0, 0, 28, 172, 131,
        224, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 86,
        224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0, 33, 92, 56, 224, 0, 0, 0, 0, 34, 76, 41,
        224, 0, 0, 0, 0, 35, 60, 26, 224, 0, 0, 0, 0, 36, 44, 11, 224, 0, 0, 0, 0, 37, 27, 252,
        224, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0, 0, 0, 39, 5, 25, 96, 0, 0, 0, 0, 39, 245, 10, 96,
        0, 0, 0, 0, 40, 229, 9, 112, 0, 0, 0, 0, 41, 212, 250, 112, 0, 0, 0, 0, 42, 196, 235, 112,
        0, 0, 0, 0, 43, 180, 220, 112, 0, 0, 0, 0, 44, 164, 205, 112, 0, 0, 0, 0, 45, 148, 190,
        112, 0, 0, 0, 0, 46, 132, 175, 112, 0, 0, 0, 0, 47, 116, 160, 112, 0, 0, 0, 0, 48, 100,
        145, 112, 0, 0, 0, 0, 51, 61, 144, 224, 0, 0, 0, 0, 52, 82, 107, 224, 0, 0, 0, 0, 53, 29,
        114, 224, 0, 0, 0, 0, 54, 50, 77, 224, 0, 0, 0, 0, 54, 253, 84, 224, 0, 0, 0, 0, 56, 27,
        106, 96, 0, 0, 0, 0, 56, 221, 54, 224, 0, 0, 0, 0, 57, 251, 76, 96, 0, 0, 0, 0, 58, 189,
        24, 224, 0, 0, 0, 0, 59, 219, 46, 96, 0, 0, 0, 0, 60, 166, 53, 96, 0, 0, 0, 0, 61, 187, 16,
        96, 0, 0, 0, 0, 62, 134, 23, 96, 0, 0, 0, 0, 63, 154, 242, 96, 0, 0, 0, 0, 64, 101, 249,
        96, 0, 0, 0, 0, 65, 132, 14, 224, 0, 0, 0, 0, 66, 69, 219, 96, 0, 0, 0, 0, 67, 99, 240,
        224, 0, 0, 0, 0, 68, 37, 189, 96, 0, 0, 0, 0, 69, 67, 210, 224, 0, 0, 0, 0, 70, 5, 159, 96,
        0, 0, 0, 0, 71, 35, 180, 224, 0, 0, 0, 0, 71, 238, 187, 224, 0, 0, 0, 0, 73, 3, 150, 224,
        0, 0, 0, 0, 73, 206, 157, 224, 0, 0, 0, 0, 74, 227, 120, 224, 0, 0, 0, 0, 75, 174, 127,
        224, 0, 0, 0, 0, 76, 204, 149, 96, 0, 0, 0, 0, 77, 142, 97, 224, 0, 0, 0, 0, 78, 172, 119,
        96, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 4, 1, 4, 1, 4,
        1, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 0, 0, 41, 184, 0, 0, 0, 0, 42, 48, 0, 4, 0, 0, 70, 80, 1, 8, 0, 0, 56, 64, 0, 12,
        0, 0, 56, 64, 1, 12, 76, 77, 84, 0, 43, 48, 51, 0, 43, 48, 53, 0, 43, 48, 52, 0, 10, 60,
        43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const ATLANTIC_AZORES: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        140, 0, 0, 0, 7, 0, 0, 0, 24, 255, 255, 255, 255, 94, 61, 27, 144, 255, 255, 255, 255, 146,
        230, 170, 160, 255, 255, 255, 255, 155, 75, 137, 144, 255, 255, 255, 255, 155, 254, 227,
        160, 255, 255, 255, 255, 156, 157, 9, 144, 255, 255, 255, 255, 157, 201, 159, 144, 255,
        255, 255, 255, 158, 127, 142, 144, 255, 255, 255, 255, 159, 170, 211, 16, 255, 255, 255,
        255, 160, 95, 112, 144, 255, 255, 255, 255, 161, 140, 6, 144, 255, 255, 255, 255, 162, 65,
        245, 144, 255, 255, 255, 255, 163, 110, 139, 144, 255, 255, 255, 255, 164, 35, 41, 16, 255,
        255, 255, 255, 165, 79, 191, 16, 255, 255, 255, 255, 170, 6, 11, 144, 255, 255, 255, 255,
        170, 244, 171, 16, 255, 255, 255, 255, 173, 201, 196, 16, 255, 255, 255, 255, 174, 167, 64,
        16, 255, 255, 255, 255, 175, 160, 107, 144, 255, 255, 255, 255, 176, 135, 34, 16, 255, 255,
        255, 255, 177, 137, 136, 16, 255, 255, 255, 255, 178, 112, 62, 144, 255, 255, 255, 255,
        179, 114, 164, 144, 255, 255, 255, 255, 180, 80, 32, 144, 255, 255, 255, 255, 183, 50, 104,
        144, 255, 255, 255, 255, 184, 15, 228, 144, 255, 255, 255, 255, 184, 255, 213, 144, 255,
        255, 255, 255, 185, 239, 198, 144, 255, 255, 255, 255, 188, 200, 212, 16, 255, 255, 255,
        255, 189, 184, 197, 16, 255, 255, 255, 255, 190, 159, 123, 144, 255, 255, 255, 255, 191,
        152, 167, 16, 255, 255, 255, 255, 192, 155, 13, 16, 255, 255, 255, 255, 193, 120, 137, 16,
        255, 255, 255, 255, 194, 104, 122, 16, 255, 255, 255, 255, 195, 88, 107, 16, 255, 255, 255,
        255, 196, 63, 33, 144, 255, 255, 255, 255, 197, 56, 77, 16, 255, 255, 255, 255, 198, 58,
        179, 16, 255, 255, 255, 255, 199, 88, 200, 144, 255, 255, 255, 255, 199, 217, 251, 144,
        255, 255, 255, 255, 201, 1, 75, 144, 255, 255, 255, 255, 201, 241, 60, 144, 255, 255, 255,
        255, 202, 226, 127, 16, 255, 255, 255, 255, 203, 181, 111, 16, 255, 255, 255, 255, 203,
        236, 192, 0, 255, 255, 255, 255, 204, 128, 104, 0, 255, 255, 255, 255, 204, 220, 191, 16,
        255, 255, 255, 255, 205, 149, 81, 16, 255, 255, 255, 255, 205, 195, 103, 128, 255, 255,
        255, 255, 206, 114, 191, 0, 255, 255, 255, 255, 206, 197, 219, 144, 255, 255, 255, 255,
        207, 117, 51, 16, 255, 255, 255, 255, 207, 172, 132, 0, 255, 255, 255, 255, 208, 82, 161,
        0, 255, 255, 255, 255, 208, 165, 189, 144, 255, 255, 255, 255, 209, 85, 21, 16, 255, 255,
        255, 255, 209, 140, 102, 0, 255, 255, 255, 255, 210, 50, 131, 0, 255, 255, 255, 255, 210,
        133, 159, 144, 255, 255, 255, 255, 211, 89, 225, 16, 255, 255, 255, 255, 212, 73, 210, 16,
        255, 255, 255, 255, 213, 57, 237, 64, 255, 255, 255, 255, 214, 41, 222, 64, 255, 255, 255,
        255, 215, 25, 207, 64, 255, 255, 255, 255, 216, 9, 192, 64, 255, 255, 255, 255, 216, 249,
        177, 64, 255, 255, 255, 255, 217, 233, 162, 64, 255, 255, 255, 255, 218, 217, 147, 64, 255,
        255, 255, 255, 219, 201, 132, 64, 255, 255, 255, 255, 220, 185, 117, 64, 255, 255, 255,
        255, 221, 178, 160, 192, 255, 255, 255, 255, 222, 162, 145, 192, 255, 255, 255, 255, 223,
        146, 130, 192, 255, 255, 255, 255, 224, 130, 115, 192, 255, 255, 255, 255, 225, 114, 100,
        192, 255, 255, 255, 255, 226, 98, 85, 192, 255, 255, 255, 255, 227, 82, 70, 192, 255, 255,
        255, 255, 228, 66, 55, 192, 255, 255, 255, 255, 229, 50, 40, 192, 255, 255, 255, 255, 230,
        34, 25, 192, 255, 255, 255, 255, 231, 27, 69, 64, 255, 255, 255, 255, 232, 11, 54, 64, 255,
        255, 255, 255, 232, 251, 39, 64, 255, 255, 255, 255, 233, 235, 24, 64, 255, 255, 255, 255,
        234, 219, 9, 64, 255, 255, 255, 255, 235, 202, 250, 64, 255, 255, 255, 255, 236, 186, 235,
        64, 255, 255, 255, 255, 237, 170, 220, 64, 255, 255, 255, 255, 238, 154, 205, 64, 255, 255,
        255, 255, 239, 138, 190, 64, 255, 255, 255, 255, 240, 122, 175, 64, 255, 255, 255, 255,
        241, 106, 160, 64, 255, 255, 255, 255, 242, 99, 203, 192, 255, 255, 255, 255, 243, 83, 188,
        192, 255, 255, 255, 255, 244, 67, 173, 192, 255, 255, 255, 255, 245, 51, 158, 192, 255,
        255, 255, 255, 246, 35, 143, 192, 255, 255, 255, 255, 247, 19, 128, 192, 255, 255, 255,
        255, 248, 3, 113, 192, 255, 255, 255, 255, 248, 243, 98, 192, 0, 0, 0, 0, 13, 155, 41, 16,
        0, 0, 0, 0, 14, 139, 26, 16, 0, 0, 0, 0, 15, 132, 69, 144, 0, 0, 0, 0, 16, 116, 54, 144, 0,
        0, 0, 0, 17, 100, 39, 144, 0, 0, 0, 0, 18, 84, 38, 160, 0, 0, 0, 0, 19, 68, 9, 144, 0, 0,
        0, 0, 20, 52, 8, 160, 0, 0, 0, 0, 21, 35, 249, 160, 0, 0, 0, 0, 22, 19, 234, 160, 0, 0, 0,
        0, 23, 3, 219, 160, 0, 0, 0, 0, 23, 243, 204, 160, 0, 0, 0, 0, 24, 227, 203, 176, 0, 0, 0,
        0, 25, 211, 174, 160, 0, 0, 0, 0, 26, 195, 159, 160, 0, 0, 0, 0, 27, 188, 203, 32, 0, 0, 0,
        0, 28, 172, 188, 32, 0, 0, 0, 0, 29, 156, 173, 32, 0, 0, 0, 0, 30, 140, 158, 32, 0, 0, 0,
        0, 31, 124, 143, 32, 0, 0, 0, 0, 32, 108, 128, 32, 0, 0, 0, 0, 33, 92, 113, 32, 0, 0, 0, 0,
        34, 76, 98, 32, 0, 0, 0, 0, 35, 60, 83, 32, 0, 0, 0, 0, 36, 44, 68, 32, 0, 0, 0, 0, 37, 28,
        53, 32, 0, 0, 0, 0, 38, 12, 38, 32, 0, 0, 0, 0, 39, 5, 81, 160, 0, 0, 0, 0, 39, 245, 66,
        160, 0, 0, 0, 0, 40, 229, 51, 160, 0, 0, 0, 0, 41, 213, 36, 160, 0, 0, 0, 0, 42, 197, 21,
        160, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148,
        218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48,
        100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4,
        2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 5, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 4, 5, 4,
        5, 4, 5, 4, 255, 255, 231, 240, 0, 0, 255, 255, 229, 40, 0, 4, 255, 255, 241, 240, 1, 8,
        255, 255, 227, 224, 0, 12, 0, 0, 0, 0, 1, 16, 255, 255, 241, 240, 0, 8, 0, 0, 0, 0, 0, 20,
        76, 77, 84, 0, 72, 77, 84, 0, 45, 48, 49, 0, 45, 48, 50, 0, 43, 48, 48, 0, 87, 69, 84, 0,
        10, 60, 45, 48, 49, 62, 49, 60, 43, 48, 48, 62, 44, 77, 51, 46, 53, 46, 48, 47, 48, 44, 77,
        49, 48, 46, 53, 46, 48, 47, 49, 10,
    ];
    pub(crate) const ATLANTIC_BERMUDA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        95, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 105, 135, 24, 70, 255, 255, 255, 255, 156,
        204, 174, 70, 255, 255, 255, 255, 157, 183, 75, 54, 255, 255, 255, 255, 158, 184, 109, 198,
        255, 255, 255, 255, 159, 132, 184, 54, 255, 255, 255, 255, 180, 195, 29, 230, 255, 255,
        255, 255, 203, 98, 166, 224, 255, 255, 255, 255, 204, 211, 188, 208, 255, 255, 255, 255,
        205, 158, 209, 224, 255, 255, 255, 255, 206, 198, 19, 208, 255, 255, 255, 255, 207, 117,
        121, 96, 255, 255, 255, 255, 208, 175, 48, 80, 255, 255, 255, 255, 209, 85, 91, 96, 255,
        255, 255, 255, 210, 143, 18, 80, 255, 255, 255, 255, 213, 113, 104, 96, 255, 255, 255, 255,
        214, 14, 60, 208, 255, 255, 255, 255, 215, 90, 132, 224, 255, 255, 255, 255, 215, 228, 228,
        80, 255, 255, 255, 255, 217, 58, 102, 224, 255, 255, 255, 255, 217, 196, 198, 80, 255, 255,
        255, 255, 219, 35, 131, 96, 255, 255, 255, 255, 219, 164, 168, 80, 255, 255, 255, 255, 221,
        3, 101, 96, 255, 255, 255, 255, 221, 132, 138, 80, 255, 255, 255, 255, 222, 227, 71, 96,
        255, 255, 255, 255, 223, 109, 166, 208, 255, 255, 255, 255, 230, 108, 9, 224, 255, 255,
        255, 255, 231, 55, 2, 208, 0, 0, 0, 0, 8, 32, 179, 96, 0, 0, 0, 0, 9, 16, 150, 80, 0, 0, 0,
        0, 10, 0, 149, 96, 0, 0, 0, 0, 10, 240, 120, 80, 0, 0, 0, 0, 11, 224, 119, 96, 0, 0, 0, 0,
        12, 217, 148, 208, 0, 0, 0, 0, 13, 192, 89, 96, 0, 0, 0, 0, 14, 185, 118, 208, 0, 0, 0, 0,
        15, 169, 117, 224, 0, 0, 0, 0, 16, 153, 88, 208, 0, 0, 0, 0, 17, 137, 87, 224, 0, 0, 0, 0,
        18, 121, 58, 208, 0, 0, 0, 0, 19, 105, 57, 224, 0, 0, 0, 0, 20, 89, 28, 208, 0, 0, 0, 0,
        21, 73, 27, 224, 0, 0, 0, 0, 22, 56, 254, 208, 0, 0, 0, 0, 23, 40, 253, 224, 0, 0, 0, 0,
        24, 34, 27, 80, 0, 0, 0, 0, 25, 8, 223, 224, 0, 0, 0, 0, 26, 1, 253, 80, 0, 0, 0, 0, 26,
        241, 252, 96, 0, 0, 0, 0, 27, 225, 223, 80, 0, 0, 0, 0, 28, 209, 222, 96, 0, 0, 0, 0, 29,
        193, 193, 80, 0, 0, 0, 0, 30, 177, 192, 96, 0, 0, 0, 0, 31, 161, 163, 80, 0, 0, 0, 0, 32,
        117, 242, 224, 0, 0, 0, 0, 33, 129, 133, 80, 0, 0, 0, 0, 34, 85, 212, 224, 0, 0, 0, 0, 35,
        106, 161, 208, 0, 0, 0, 0, 36, 53, 182, 224, 0, 0, 0, 0, 37, 74, 131, 208, 0, 0, 0, 0, 38,
        21, 152, 224, 0, 0, 0, 0, 39, 42, 101, 208, 0, 0, 0, 0, 39, 254, 181, 96, 0, 0, 0, 0, 41,
        10, 71, 208, 0, 0, 0, 0, 41, 222, 151, 96, 0, 0, 0, 0, 42, 234, 41, 208, 0, 0, 0, 0, 43,
        190, 121, 96, 0, 0, 0, 0, 44, 211, 70, 80, 0, 0, 0, 0, 45, 158, 91, 96, 0, 0, 0, 0, 46,
        179, 40, 80, 0, 0, 0, 0, 47, 126, 61, 96, 0, 0, 0, 0, 48, 147, 10, 80, 0, 0, 0, 0, 49, 103,
        89, 224, 0, 0, 0, 0, 50, 114, 236, 80, 0, 0, 0, 0, 51, 71, 59, 224, 0, 0, 0, 0, 52, 82,
        206, 80, 0, 0, 0, 0, 53, 39, 29, 224, 0, 0, 0, 0, 54, 50, 176, 80, 0, 0, 0, 0, 55, 6, 255,
        224, 0, 0, 0, 0, 56, 27, 204, 208, 0, 0, 0, 0, 56, 230, 225, 224, 0, 0, 0, 0, 57, 251, 174,
        208, 0, 0, 0, 0, 58, 198, 195, 224, 0, 0, 0, 0, 59, 219, 144, 208, 0, 0, 0, 0, 60, 175,
        224, 96, 0, 0, 0, 0, 61, 187, 114, 208, 0, 0, 0, 0, 62, 143, 194, 96, 0, 0, 0, 0, 63, 155,
        84, 208, 0, 0, 0, 0, 64, 111, 164, 96, 0, 0, 0, 0, 65, 132, 113, 80, 0, 0, 0, 0, 66, 79,
        134, 96, 0, 0, 0, 0, 67, 100, 83, 80, 0, 0, 0, 0, 68, 47, 104, 96, 0, 0, 0, 0, 69, 68, 53,
        80, 0, 0, 0, 0, 69, 243, 154, 224, 2, 1, 2, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 255, 255, 195, 58, 0, 0, 255, 255, 209, 74,
        1, 4, 255, 255, 195, 58, 0, 8, 255, 255, 213, 208, 1, 12, 255, 255, 199, 192, 0, 16, 76,
        77, 84, 0, 66, 83, 84, 0, 66, 77, 84, 0, 65, 68, 84, 0, 65, 83, 84, 0, 10, 65, 83, 84, 52,
        65, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const ATLANTIC_CANARY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        35, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 166, 4, 92, 240, 255, 255, 255, 255, 212,
        65, 247, 32, 0, 0, 0, 0, 19, 77, 54, 0, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35,
        235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243,
        190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26,
        195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29,
        156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32,
        108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60,
        69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16,
        0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0,
        0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0,
        0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144,
        0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16,
        1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 255, 255, 241, 144, 0, 0, 255, 255, 241, 240, 0, 4, 0, 0, 0, 0, 0, 8, 0, 0,
        14, 16, 1, 12, 76, 77, 84, 0, 45, 48, 49, 0, 87, 69, 84, 0, 87, 69, 83, 84, 0, 10, 87, 69,
        84, 48, 87, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 49, 44, 77, 49, 48, 46, 53, 46, 48,
        10,
    ];
    pub(crate) const ATLANTIC_CAPE_VERDE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 146, 230, 170, 160, 255, 255, 255, 255,
        204, 149, 156, 32, 255, 255, 255, 255, 210, 116, 124, 16, 0, 0, 0, 0, 11, 23, 247, 64, 1,
        2, 1, 3, 255, 255, 233, 244, 0, 0, 255, 255, 227, 224, 0, 4, 255, 255, 241, 240, 1, 8, 255,
        255, 241, 240, 0, 8, 76, 77, 84, 0, 45, 48, 50, 0, 45, 48, 49, 0, 10, 60, 45, 48, 49, 62,
        49, 10,
    ];
    pub(crate) const ATLANTIC_FAEROE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        32, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 139, 109, 164, 88, 0, 0, 0, 0, 21, 35,
        235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243,
        190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26,
        195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29,
        156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32,
        108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60,
        69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16,
        0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0,
        0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0,
        0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144,
        0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 255, 255, 249, 168, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 14, 16, 1, 8, 76, 77, 84, 0, 87,
        69, 84, 0, 87, 69, 83, 84, 0, 10, 87, 69, 84, 48, 87, 69, 83, 84, 44, 77, 51, 46, 53, 46,
        48, 47, 49, 44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const ATLANTIC_JAN_MAYEN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 241, 240, 0, 0, 45, 48, 49, 0, 10, 60, 45, 48, 49, 62,
        49, 10,
    ];
    pub(crate) const ATLANTIC_MADEIRA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        140, 0, 0, 0, 7, 0, 0, 0, 29, 255, 255, 255, 255, 94, 61, 19, 88, 255, 255, 255, 255, 146,
        230, 156, 144, 255, 255, 255, 255, 155, 75, 123, 128, 255, 255, 255, 255, 155, 254, 213,
        144, 255, 255, 255, 255, 156, 156, 251, 128, 255, 255, 255, 255, 157, 201, 145, 128, 255,
        255, 255, 255, 158, 127, 128, 128, 255, 255, 255, 255, 159, 170, 197, 0, 255, 255, 255,
        255, 160, 95, 98, 128, 255, 255, 255, 255, 161, 139, 248, 128, 255, 255, 255, 255, 162, 65,
        231, 128, 255, 255, 255, 255, 163, 110, 125, 128, 255, 255, 255, 255, 164, 35, 27, 0, 255,
        255, 255, 255, 165, 79, 177, 0, 255, 255, 255, 255, 170, 5, 253, 128, 255, 255, 255, 255,
        170, 244, 157, 0, 255, 255, 255, 255, 173, 201, 182, 0, 255, 255, 255, 255, 174, 167, 50,
        0, 255, 255, 255, 255, 175, 160, 93, 128, 255, 255, 255, 255, 176, 135, 20, 0, 255, 255,
        255, 255, 177, 137, 122, 0, 255, 255, 255, 255, 178, 112, 48, 128, 255, 255, 255, 255, 179,
        114, 150, 128, 255, 255, 255, 255, 180, 80, 18, 128, 255, 255, 255, 255, 183, 50, 90, 128,
        255, 255, 255, 255, 184, 15, 214, 128, 255, 255, 255, 255, 184, 255, 199, 128, 255, 255,
        255, 255, 185, 239, 184, 128, 255, 255, 255, 255, 188, 200, 198, 0, 255, 255, 255, 255,
        189, 184, 183, 0, 255, 255, 255, 255, 190, 159, 109, 128, 255, 255, 255, 255, 191, 152,
        153, 0, 255, 255, 255, 255, 192, 154, 255, 0, 255, 255, 255, 255, 193, 120, 123, 0, 255,
        255, 255, 255, 194, 104, 108, 0, 255, 255, 255, 255, 195, 88, 93, 0, 255, 255, 255, 255,
        196, 63, 19, 128, 255, 255, 255, 255, 197, 56, 63, 0, 255, 255, 255, 255, 198, 58, 165, 0,
        255, 255, 255, 255, 199, 88, 186, 128, 255, 255, 255, 255, 199, 217, 237, 128, 255, 255,
        255, 255, 201, 1, 61, 128, 255, 255, 255, 255, 201, 241, 46, 128, 255, 255, 255, 255, 202,
        226, 113, 0, 255, 255, 255, 255, 203, 181, 97, 0, 255, 255, 255, 255, 203, 236, 177, 240,
        255, 255, 255, 255, 204, 128, 89, 240, 255, 255, 255, 255, 204, 220, 177, 0, 255, 255, 255,
        255, 205, 149, 67, 0, 255, 255, 255, 255, 205, 195, 89, 112, 255, 255, 255, 255, 206, 114,
        176, 240, 255, 255, 255, 255, 206, 197, 205, 128, 255, 255, 255, 255, 207, 117, 37, 0, 255,
        255, 255, 255, 207, 172, 117, 240, 255, 255, 255, 255, 208, 82, 146, 240, 255, 255, 255,
        255, 208, 165, 175, 128, 255, 255, 255, 255, 209, 85, 7, 0, 255, 255, 255, 255, 209, 140,
        87, 240, 255, 255, 255, 255, 210, 50, 116, 240, 255, 255, 255, 255, 210, 133, 145, 128,
        255, 255, 255, 255, 211, 89, 211, 0, 255, 255, 255, 255, 212, 73, 196, 0, 255, 255, 255,
        255, 213, 57, 223, 48, 255, 255, 255, 255, 214, 41, 208, 48, 255, 255, 255, 255, 215, 25,
        193, 48, 255, 255, 255, 255, 216, 9, 178, 48, 255, 255, 255, 255, 216, 249, 163, 48, 255,
        255, 255, 255, 217, 233, 148, 48, 255, 255, 255, 255, 218, 217, 133, 48, 255, 255, 255,
        255, 219, 201, 118, 48, 255, 255, 255, 255, 220, 185, 103, 48, 255, 255, 255, 255, 221,
        178, 146, 176, 255, 255, 255, 255, 222, 162, 131, 176, 255, 255, 255, 255, 223, 146, 116,
        176, 255, 255, 255, 255, 224, 130, 101, 176, 255, 255, 255, 255, 225, 114, 86, 176, 255,
        255, 255, 255, 226, 98, 71, 176, 255, 255, 255, 255, 227, 82, 56, 176, 255, 255, 255, 255,
        228, 66, 41, 176, 255, 255, 255, 255, 229, 50, 26, 176, 255, 255, 255, 255, 230, 34, 11,
        176, 255, 255, 255, 255, 231, 27, 55, 48, 255, 255, 255, 255, 232, 11, 40, 48, 255, 255,
        255, 255, 232, 251, 25, 48, 255, 255, 255, 255, 233, 235, 10, 48, 255, 255, 255, 255, 234,
        218, 251, 48, 255, 255, 255, 255, 235, 202, 236, 48, 255, 255, 255, 255, 236, 186, 221, 48,
        255, 255, 255, 255, 237, 170, 206, 48, 255, 255, 255, 255, 238, 154, 191, 48, 255, 255,
        255, 255, 239, 138, 176, 48, 255, 255, 255, 255, 240, 122, 161, 48, 255, 255, 255, 255,
        241, 106, 146, 48, 255, 255, 255, 255, 242, 99, 189, 176, 255, 255, 255, 255, 243, 83, 174,
        176, 255, 255, 255, 255, 244, 67, 159, 176, 255, 255, 255, 255, 245, 51, 144, 176, 255,
        255, 255, 255, 246, 35, 129, 176, 255, 255, 255, 255, 247, 19, 114, 176, 255, 255, 255,
        255, 248, 3, 99, 176, 255, 255, 255, 255, 248, 243, 84, 176, 0, 0, 0, 0, 13, 155, 27, 0, 0,
        0, 0, 0, 14, 139, 12, 0, 0, 0, 0, 0, 15, 132, 55, 128, 0, 0, 0, 0, 16, 116, 40, 128, 0, 0,
        0, 0, 17, 100, 25, 128, 0, 0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0, 19, 67, 251, 128, 0, 0, 0,
        0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0,
        0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 189, 160, 0, 0, 0,
        0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0,
        0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0,
        0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0,
        34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28,
        39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52,
        144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7,
        144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148,
        218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48,
        100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4,
        2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 6, 5, 6, 5, 6, 5,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5,
        6, 5, 6, 5, 255, 255, 240, 40, 0, 0, 255, 255, 240, 40, 0, 4, 0, 0, 0, 0, 1, 8, 255, 255,
        241, 240, 0, 12, 0, 0, 14, 16, 1, 16, 0, 0, 14, 16, 1, 20, 0, 0, 0, 0, 0, 25, 76, 77, 84,
        0, 70, 77, 84, 0, 43, 48, 48, 0, 45, 48, 49, 0, 43, 48, 49, 0, 87, 69, 83, 84, 0, 87, 69,
        84, 0, 10, 87, 69, 84, 48, 87, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 49, 44, 77, 49,
        48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const ATLANTIC_SOUTH_GEORGIA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 105, 134, 253, 192, 1, 255, 255, 221, 192,
        0, 0, 255, 255, 227, 224, 0, 4, 76, 77, 84, 0, 45, 48, 50, 0, 10, 60, 45, 48, 50, 62, 50,
        10,
    ];
    pub(crate) const ATLANTIC_STANLEY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        70, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 105, 135, 17, 188, 255, 255, 255, 255,
        147, 68, 95, 60, 255, 255, 255, 255, 195, 79, 90, 192, 255, 255, 255, 255, 196, 54, 3, 48,
        255, 255, 255, 255, 197, 47, 60, 192, 255, 255, 255, 255, 198, 21, 229, 48, 255, 255, 255,
        255, 199, 24, 89, 64, 255, 255, 255, 255, 199, 255, 1, 176, 255, 255, 255, 255, 200, 248,
        59, 64, 255, 255, 255, 255, 201, 222, 227, 176, 255, 255, 255, 255, 202, 216, 29, 64, 255,
        255, 255, 255, 203, 190, 197, 176, 255, 255, 255, 255, 204, 183, 255, 64, 255, 255, 255,
        255, 205, 54, 129, 48, 0, 0, 0, 0, 25, 17, 254, 64, 0, 0, 0, 0, 25, 211, 188, 176, 0, 0, 0,
        0, 26, 241, 196, 32, 0, 0, 0, 0, 27, 170, 100, 48, 0, 0, 0, 0, 28, 209, 166, 32, 0, 0, 0,
        0, 29, 138, 70, 48, 0, 0, 0, 0, 30, 168, 91, 176, 0, 0, 0, 0, 31, 106, 54, 64, 0, 0, 0, 0,
        32, 136, 61, 176, 0, 0, 0, 0, 33, 74, 24, 64, 0, 0, 0, 0, 34, 104, 31, 176, 0, 0, 0, 0, 35,
        41, 250, 64, 0, 0, 0, 0, 36, 72, 1, 176, 0, 0, 0, 0, 37, 9, 220, 64, 0, 0, 0, 0, 38, 49,
        30, 48, 0, 0, 0, 0, 38, 233, 190, 64, 0, 0, 0, 0, 40, 17, 0, 48, 0, 0, 0, 0, 40, 210, 218,
        192, 0, 0, 0, 0, 41, 240, 226, 48, 0, 0, 0, 0, 42, 178, 188, 192, 0, 0, 0, 0, 43, 208, 196,
        48, 0, 0, 0, 0, 44, 146, 158, 192, 0, 0, 0, 0, 45, 176, 166, 48, 0, 0, 0, 0, 46, 114, 128,
        192, 0, 0, 0, 0, 47, 144, 136, 48, 0, 0, 0, 0, 48, 82, 98, 192, 0, 0, 0, 0, 49, 121, 164,
        176, 0, 0, 0, 0, 50, 59, 127, 64, 0, 0, 0, 0, 51, 89, 134, 176, 0, 0, 0, 0, 52, 27, 97, 64,
        0, 0, 0, 0, 53, 57, 104, 176, 0, 0, 0, 0, 53, 251, 67, 64, 0, 0, 0, 0, 55, 25, 74, 176, 0,
        0, 0, 0, 55, 219, 37, 64, 0, 0, 0, 0, 56, 249, 44, 176, 0, 0, 0, 0, 57, 187, 7, 64, 0, 0,
        0, 0, 58, 217, 42, 208, 0, 0, 0, 0, 59, 145, 202, 224, 0, 0, 0, 0, 60, 194, 71, 80, 0, 0,
        0, 0, 61, 113, 172, 224, 0, 0, 0, 0, 62, 162, 41, 80, 0, 0, 0, 0, 63, 90, 201, 96, 0, 0, 0,
        0, 64, 130, 11, 80, 0, 0, 0, 0, 65, 58, 171, 96, 0, 0, 0, 0, 66, 97, 237, 80, 0, 0, 0, 0,
        67, 26, 141, 96, 0, 0, 0, 0, 68, 65, 207, 80, 0, 0, 0, 0, 68, 250, 111, 96, 0, 0, 0, 0, 70,
        33, 177, 80, 0, 0, 0, 0, 70, 218, 81, 96, 0, 0, 0, 0, 72, 10, 205, 208, 0, 0, 0, 0, 72,
        195, 109, 224, 0, 0, 0, 0, 73, 234, 175, 208, 0, 0, 0, 0, 74, 163, 79, 224, 0, 0, 0, 0, 75,
        202, 145, 208, 0, 0, 0, 0, 76, 131, 49, 224, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 5,
        4, 5, 4, 5, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 5, 255, 255, 201,
        196, 0, 0, 255, 255, 201, 196, 0, 4, 255, 255, 213, 208, 1, 8, 255, 255, 199, 192, 0, 12,
        255, 255, 227, 224, 1, 16, 255, 255, 213, 208, 0, 8, 76, 77, 84, 0, 83, 77, 84, 0, 45, 48,
        51, 0, 45, 48, 52, 0, 45, 48, 50, 0, 10, 60, 45, 48, 51, 62, 51, 10,
    ];
    pub(crate) const ATLANTIC_ST_HELENA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 105, 134, 224, 216, 255, 255, 255, 255,
        220, 66, 155, 88, 1, 2, 255, 255, 250, 168, 0, 0, 255, 255, 250, 168, 0, 4, 0, 0, 0, 0, 0,
        8, 76, 77, 84, 0, 74, 77, 84, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const AUSTRALIA_ACT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        83, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 115, 22, 127, 60, 255, 255, 255, 255, 156,
        78, 194, 128, 255, 255, 255, 255, 156, 188, 47, 0, 255, 255, 255, 255, 203, 84, 179, 0,
        255, 255, 255, 255, 203, 199, 101, 128, 255, 255, 255, 255, 204, 183, 86, 128, 255, 255,
        255, 255, 205, 167, 71, 128, 255, 255, 255, 255, 206, 160, 115, 0, 255, 255, 255, 255, 207,
        135, 41, 128, 0, 0, 0, 0, 3, 112, 57, 128, 0, 0, 0, 0, 4, 13, 28, 0, 0, 0, 0, 0, 5, 80, 27,
        128, 0, 0, 0, 0, 5, 246, 56, 128, 0, 0, 0, 0, 7, 47, 253, 128, 0, 0, 0, 0, 7, 214, 26, 128,
        0, 0, 0, 0, 9, 15, 223, 128, 0, 0, 0, 0, 9, 181, 252, 128, 0, 0, 0, 0, 10, 239, 193, 128,
        0, 0, 0, 0, 11, 159, 25, 0, 0, 0, 0, 0, 12, 216, 222, 0, 0, 0, 0, 0, 13, 126, 251, 0, 0, 0,
        0, 0, 14, 184, 192, 0, 0, 0, 0, 0, 15, 94, 221, 0, 0, 0, 0, 0, 16, 152, 162, 0, 0, 0, 0, 0,
        17, 62, 191, 0, 0, 0, 0, 0, 18, 120, 132, 0, 0, 0, 0, 0, 19, 30, 161, 0, 0, 0, 0, 0, 20,
        88, 102, 0, 0, 0, 0, 0, 20, 254, 131, 0, 0, 0, 0, 0, 22, 56, 72, 0, 0, 0, 0, 0, 23, 12,
        137, 128, 0, 0, 0, 0, 24, 33, 100, 128, 0, 0, 0, 0, 24, 199, 129, 128, 0, 0, 0, 0, 26, 1,
        70, 128, 0, 0, 0, 0, 26, 167, 99, 128, 0, 0, 0, 0, 27, 225, 40, 128, 0, 0, 0, 0, 28, 135,
        69, 128, 0, 0, 0, 0, 29, 193, 10, 128, 0, 0, 0, 0, 30, 121, 156, 128, 0, 0, 0, 0, 31, 151,
        178, 0, 0, 0, 0, 0, 32, 89, 126, 128, 0, 0, 0, 0, 33, 128, 206, 128, 0, 0, 0, 0, 34, 66,
        155, 0, 0, 0, 0, 0, 35, 105, 235, 0, 0, 0, 0, 0, 36, 34, 125, 0, 0, 0, 0, 0, 37, 73, 205,
        0, 0, 0, 0, 0, 37, 239, 234, 0, 0, 0, 0, 0, 39, 41, 175, 0, 0, 0, 0, 0, 39, 207, 204, 0, 0,
        0, 0, 0, 41, 9, 145, 0, 0, 0, 0, 0, 41, 175, 174, 0, 0, 0, 0, 0, 42, 233, 115, 0, 0, 0, 0,
        0, 43, 152, 202, 128, 0, 0, 0, 0, 44, 210, 143, 128, 0, 0, 0, 0, 45, 120, 172, 128, 0, 0,
        0, 0, 46, 178, 113, 128, 0, 0, 0, 0, 47, 88, 142, 128, 0, 0, 0, 0, 48, 146, 83, 128, 0, 0,
        0, 0, 49, 93, 90, 128, 0, 0, 0, 0, 50, 114, 53, 128, 0, 0, 0, 0, 51, 61, 60, 128, 0, 0, 0,
        0, 52, 82, 23, 128, 0, 0, 0, 0, 53, 29, 30, 128, 0, 0, 0, 0, 54, 49, 249, 128, 0, 0, 0, 0,
        54, 253, 0, 128, 0, 0, 0, 0, 56, 27, 22, 0, 0, 0, 0, 0, 56, 220, 226, 128, 0, 0, 0, 0, 57,
        167, 233, 128, 0, 0, 0, 0, 58, 188, 196, 128, 0, 0, 0, 0, 59, 218, 218, 0, 0, 0, 0, 0, 60,
        165, 225, 0, 0, 0, 0, 0, 61, 186, 188, 0, 0, 0, 0, 0, 62, 133, 195, 0, 0, 0, 0, 0, 63, 154,
        158, 0, 0, 0, 0, 0, 64, 101, 165, 0, 0, 0, 0, 0, 65, 131, 186, 128, 0, 0, 0, 0, 66, 69,
        135, 0, 0, 0, 0, 0, 67, 99, 156, 128, 0, 0, 0, 0, 68, 46, 163, 128, 0, 0, 0, 0, 69, 67,
        126, 128, 0, 0, 0, 0, 70, 5, 75, 0, 0, 0, 0, 0, 71, 35, 96, 128, 0, 0, 0, 0, 71, 247, 162,
        0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 141, 196, 0,
        0, 0, 0, 154, 176, 1, 4, 0, 0, 140, 160, 0, 9, 76, 77, 84, 0, 65, 69, 68, 84, 0, 65, 69,
        83, 84, 0, 10, 65, 69, 83, 84, 45, 49, 48, 65, 69, 68, 84, 44, 77, 49, 48, 46, 49, 46, 48,
        44, 77, 52, 46, 49, 46, 48, 47, 51, 10,
    ];
    pub(crate) const AUSTRALIA_ADELAIDE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        84, 0, 0, 0, 4, 0, 0, 0, 14, 255, 255, 255, 255, 115, 22, 139, 20, 255, 255, 255, 255, 123,
        18, 3, 112, 255, 255, 255, 255, 156, 78, 201, 136, 255, 255, 255, 255, 156, 188, 54, 8,
        255, 255, 255, 255, 203, 84, 186, 8, 255, 255, 255, 255, 203, 199, 108, 136, 255, 255, 255,
        255, 204, 183, 93, 136, 255, 255, 255, 255, 205, 167, 78, 136, 255, 255, 255, 255, 206,
        160, 122, 8, 255, 255, 255, 255, 207, 135, 48, 136, 0, 0, 0, 0, 3, 112, 64, 136, 0, 0, 0,
        0, 4, 13, 35, 8, 0, 0, 0, 0, 5, 80, 34, 136, 0, 0, 0, 0, 5, 246, 63, 136, 0, 0, 0, 0, 7,
        48, 4, 136, 0, 0, 0, 0, 7, 214, 33, 136, 0, 0, 0, 0, 9, 15, 230, 136, 0, 0, 0, 0, 9, 182,
        3, 136, 0, 0, 0, 0, 10, 239, 200, 136, 0, 0, 0, 0, 11, 159, 32, 8, 0, 0, 0, 0, 12, 216,
        229, 8, 0, 0, 0, 0, 13, 127, 2, 8, 0, 0, 0, 0, 14, 184, 199, 8, 0, 0, 0, 0, 15, 94, 228, 8,
        0, 0, 0, 0, 16, 152, 169, 8, 0, 0, 0, 0, 17, 62, 198, 8, 0, 0, 0, 0, 18, 120, 139, 8, 0, 0,
        0, 0, 19, 30, 168, 8, 0, 0, 0, 0, 20, 88, 109, 8, 0, 0, 0, 0, 20, 254, 138, 8, 0, 0, 0, 0,
        22, 56, 79, 8, 0, 0, 0, 0, 22, 231, 166, 136, 0, 0, 0, 0, 24, 33, 107, 136, 0, 0, 0, 0, 24,
        199, 136, 136, 0, 0, 0, 0, 26, 1, 77, 136, 0, 0, 0, 0, 26, 167, 106, 136, 0, 0, 0, 0, 27,
        225, 47, 136, 0, 0, 0, 0, 28, 135, 76, 136, 0, 0, 0, 0, 29, 193, 17, 136, 0, 0, 0, 0, 30,
        121, 163, 136, 0, 0, 0, 0, 31, 151, 185, 8, 0, 0, 0, 0, 32, 89, 133, 136, 0, 0, 0, 0, 33,
        128, 213, 136, 0, 0, 0, 0, 34, 66, 162, 8, 0, 0, 0, 0, 35, 105, 242, 8, 0, 0, 0, 0, 36, 34,
        132, 8, 0, 0, 0, 0, 37, 73, 212, 8, 0, 0, 0, 0, 38, 2, 102, 8, 0, 0, 0, 0, 39, 41, 182, 8,
        0, 0, 0, 0, 39, 207, 211, 8, 0, 0, 0, 0, 41, 9, 152, 8, 0, 0, 0, 0, 41, 203, 100, 136, 0,
        0, 0, 0, 42, 233, 122, 8, 0, 0, 0, 0, 43, 152, 209, 136, 0, 0, 0, 0, 44, 210, 150, 136, 0,
        0, 0, 0, 45, 139, 40, 136, 0, 0, 0, 0, 46, 178, 120, 136, 0, 0, 0, 0, 47, 116, 69, 8, 0, 0,
        0, 0, 48, 146, 90, 136, 0, 0, 0, 0, 49, 93, 97, 136, 0, 0, 0, 0, 50, 114, 60, 136, 0, 0, 0,
        0, 51, 61, 67, 136, 0, 0, 0, 0, 52, 82, 30, 136, 0, 0, 0, 0, 53, 29, 37, 136, 0, 0, 0, 0,
        54, 50, 0, 136, 0, 0, 0, 0, 54, 253, 7, 136, 0, 0, 0, 0, 56, 27, 29, 8, 0, 0, 0, 0, 56,
        220, 233, 136, 0, 0, 0, 0, 57, 250, 255, 8, 0, 0, 0, 0, 58, 188, 203, 136, 0, 0, 0, 0, 59,
        218, 225, 8, 0, 0, 0, 0, 60, 165, 232, 8, 0, 0, 0, 0, 61, 186, 195, 8, 0, 0, 0, 0, 62, 133,
        202, 8, 0, 0, 0, 0, 63, 154, 165, 8, 0, 0, 0, 0, 64, 101, 172, 8, 0, 0, 0, 0, 65, 131, 193,
        136, 0, 0, 0, 0, 66, 69, 142, 8, 0, 0, 0, 0, 67, 99, 163, 136, 0, 0, 0, 0, 68, 46, 170,
        136, 0, 0, 0, 0, 69, 67, 133, 136, 0, 0, 0, 0, 70, 5, 82, 8, 0, 0, 0, 0, 71, 35, 103, 136,
        0, 0, 0, 0, 71, 247, 169, 8, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 0, 0, 129, 236, 0, 0, 0, 0, 126, 144, 0, 4, 0, 0, 147, 168, 1, 9, 0, 0, 133, 152,
        0, 4, 76, 77, 84, 0, 65, 67, 83, 84, 0, 65, 67, 68, 84, 0, 10, 65, 67, 83, 84, 45, 57, 58,
        51, 48, 65, 67, 68, 84, 44, 77, 49, 48, 46, 49, 46, 48, 44, 77, 52, 46, 49, 46, 48, 47, 51,
        10,
    ];
    pub(crate) const AUSTRALIA_BRISBANE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        17, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 114, 237, 159, 8, 255, 255, 255, 255, 156,
        78, 194, 128, 255, 255, 255, 255, 156, 188, 47, 0, 255, 255, 255, 255, 203, 84, 179, 0,
        255, 255, 255, 255, 203, 199, 101, 128, 255, 255, 255, 255, 204, 183, 86, 128, 255, 255,
        255, 255, 205, 167, 71, 128, 255, 255, 255, 255, 206, 160, 115, 0, 255, 255, 255, 255, 207,
        135, 41, 128, 0, 0, 0, 0, 3, 112, 57, 128, 0, 0, 0, 0, 4, 13, 28, 0, 0, 0, 0, 0, 37, 73,
        205, 0, 0, 0, 0, 0, 37, 239, 234, 0, 0, 0, 0, 0, 39, 41, 175, 0, 0, 0, 0, 0, 39, 207, 204,
        0, 0, 0, 0, 0, 41, 9, 145, 0, 0, 0, 0, 0, 41, 175, 174, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 0, 0, 143, 120, 0, 0, 0, 0, 154, 176, 1, 4, 0, 0, 140, 160, 0, 9, 76, 77,
        84, 0, 65, 69, 68, 84, 0, 65, 69, 83, 84, 0, 10, 65, 69, 83, 84, 45, 49, 48, 10,
    ];
    pub(crate) const AUSTRALIA_BROKEN_HILL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        85, 0, 0, 0, 5, 0, 0, 0, 19, 255, 255, 255, 255, 115, 22, 136, 100, 255, 255, 255, 255,
        118, 4, 165, 224, 255, 255, 255, 255, 123, 18, 3, 112, 255, 255, 255, 255, 156, 78, 201,
        136, 255, 255, 255, 255, 156, 188, 54, 8, 255, 255, 255, 255, 203, 84, 186, 8, 255, 255,
        255, 255, 203, 199, 108, 136, 255, 255, 255, 255, 204, 183, 93, 136, 255, 255, 255, 255,
        205, 167, 78, 136, 255, 255, 255, 255, 206, 160, 122, 8, 255, 255, 255, 255, 207, 135, 48,
        136, 0, 0, 0, 0, 3, 112, 64, 136, 0, 0, 0, 0, 4, 13, 35, 8, 0, 0, 0, 0, 5, 80, 34, 136, 0,
        0, 0, 0, 5, 246, 63, 136, 0, 0, 0, 0, 7, 48, 4, 136, 0, 0, 0, 0, 7, 214, 33, 136, 0, 0, 0,
        0, 9, 15, 230, 136, 0, 0, 0, 0, 9, 182, 3, 136, 0, 0, 0, 0, 10, 239, 200, 136, 0, 0, 0, 0,
        11, 159, 32, 8, 0, 0, 0, 0, 12, 216, 229, 8, 0, 0, 0, 0, 13, 127, 2, 8, 0, 0, 0, 0, 14,
        184, 199, 8, 0, 0, 0, 0, 15, 94, 228, 8, 0, 0, 0, 0, 16, 152, 169, 8, 0, 0, 0, 0, 17, 62,
        198, 8, 0, 0, 0, 0, 18, 120, 139, 8, 0, 0, 0, 0, 19, 30, 168, 8, 0, 0, 0, 0, 20, 88, 109,
        8, 0, 0, 0, 0, 20, 254, 138, 8, 0, 0, 0, 0, 22, 56, 79, 8, 0, 0, 0, 0, 23, 12, 144, 136, 0,
        0, 0, 0, 24, 33, 107, 136, 0, 0, 0, 0, 24, 199, 136, 136, 0, 0, 0, 0, 26, 1, 77, 136, 0, 0,
        0, 0, 26, 167, 106, 136, 0, 0, 0, 0, 27, 225, 47, 136, 0, 0, 0, 0, 28, 135, 76, 136, 0, 0,
        0, 0, 29, 193, 17, 136, 0, 0, 0, 0, 30, 121, 163, 136, 0, 0, 0, 0, 31, 151, 185, 8, 0, 0,
        0, 0, 32, 89, 133, 136, 0, 0, 0, 0, 33, 128, 213, 136, 0, 0, 0, 0, 34, 66, 162, 8, 0, 0, 0,
        0, 35, 105, 242, 8, 0, 0, 0, 0, 36, 34, 132, 8, 0, 0, 0, 0, 37, 73, 212, 8, 0, 0, 0, 0, 37,
        239, 241, 8, 0, 0, 0, 0, 39, 41, 182, 8, 0, 0, 0, 0, 39, 207, 211, 8, 0, 0, 0, 0, 41, 9,
        152, 8, 0, 0, 0, 0, 41, 175, 181, 8, 0, 0, 0, 0, 42, 233, 122, 8, 0, 0, 0, 0, 43, 152, 209,
        136, 0, 0, 0, 0, 44, 210, 150, 136, 0, 0, 0, 0, 45, 120, 179, 136, 0, 0, 0, 0, 46, 178,
        120, 136, 0, 0, 0, 0, 47, 88, 149, 136, 0, 0, 0, 0, 48, 146, 90, 136, 0, 0, 0, 0, 49, 93,
        97, 136, 0, 0, 0, 0, 50, 114, 60, 136, 0, 0, 0, 0, 51, 61, 67, 136, 0, 0, 0, 0, 52, 82, 30,
        136, 0, 0, 0, 0, 53, 29, 37, 136, 0, 0, 0, 0, 54, 50, 0, 136, 0, 0, 0, 0, 54, 253, 7, 136,
        0, 0, 0, 0, 56, 27, 29, 8, 0, 0, 0, 0, 56, 220, 233, 136, 0, 0, 0, 0, 57, 250, 255, 8, 0,
        0, 0, 0, 58, 188, 203, 136, 0, 0, 0, 0, 59, 218, 225, 8, 0, 0, 0, 0, 60, 165, 232, 8, 0, 0,
        0, 0, 61, 186, 195, 8, 0, 0, 0, 0, 62, 133, 202, 8, 0, 0, 0, 0, 63, 154, 165, 8, 0, 0, 0,
        0, 64, 101, 172, 8, 0, 0, 0, 0, 65, 131, 193, 136, 0, 0, 0, 0, 66, 69, 142, 8, 0, 0, 0, 0,
        67, 99, 163, 136, 0, 0, 0, 0, 68, 46, 170, 136, 0, 0, 0, 0, 69, 67, 133, 136, 0, 0, 0, 0,
        70, 5, 82, 8, 0, 0, 0, 0, 71, 35, 103, 136, 0, 0, 0, 0, 71, 247, 169, 8, 1, 2, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 0, 0, 132, 156, 0, 0, 0, 0, 140,
        160, 0, 4, 0, 0, 126, 144, 0, 9, 0, 0, 147, 168, 1, 14, 0, 0, 133, 152, 0, 9, 76, 77, 84,
        0, 65, 69, 83, 84, 0, 65, 67, 83, 84, 0, 65, 67, 68, 84, 0, 10, 65, 67, 83, 84, 45, 57, 58,
        51, 48, 65, 67, 68, 84, 44, 77, 49, 48, 46, 49, 46, 48, 44, 77, 52, 46, 49, 46, 48, 47, 51,
        10,
    ];
    pub(crate) const AUSTRALIA_CURRIE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        92, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 116, 46, 4, 32, 255, 255, 255, 255, 155,
        213, 120, 128, 255, 255, 255, 255, 156, 188, 47, 0, 255, 255, 255, 255, 157, 218, 68, 128,
        255, 255, 255, 255, 158, 128, 97, 128, 255, 255, 255, 255, 159, 186, 38, 128, 255, 255,
        255, 255, 160, 96, 67, 128, 255, 255, 255, 255, 203, 84, 179, 0, 255, 255, 255, 255, 203,
        199, 101, 128, 255, 255, 255, 255, 204, 183, 86, 128, 255, 255, 255, 255, 205, 167, 71,
        128, 255, 255, 255, 255, 206, 160, 115, 0, 255, 255, 255, 255, 207, 135, 41, 128, 255, 255,
        255, 255, 253, 199, 89, 0, 255, 255, 255, 255, 254, 118, 176, 128, 255, 255, 255, 255, 255,
        167, 59, 0, 0, 0, 0, 0, 0, 86, 146, 128, 0, 0, 0, 0, 1, 135, 29, 0, 0, 0, 0, 0, 2, 63, 175,
        0, 0, 0, 0, 0, 3, 112, 57, 128, 0, 0, 0, 0, 4, 13, 28, 0, 0, 0, 0, 0, 5, 80, 27, 128, 0, 0,
        0, 0, 5, 246, 56, 128, 0, 0, 0, 0, 7, 47, 253, 128, 0, 0, 0, 0, 7, 214, 26, 128, 0, 0, 0,
        0, 9, 15, 223, 128, 0, 0, 0, 0, 9, 181, 252, 128, 0, 0, 0, 0, 10, 239, 193, 128, 0, 0, 0,
        0, 11, 159, 25, 0, 0, 0, 0, 0, 12, 216, 222, 0, 0, 0, 0, 0, 13, 126, 251, 0, 0, 0, 0, 0,
        14, 184, 192, 0, 0, 0, 0, 0, 15, 94, 221, 0, 0, 0, 0, 0, 16, 152, 162, 0, 0, 0, 0, 0, 17,
        62, 191, 0, 0, 0, 0, 0, 18, 120, 132, 0, 0, 0, 0, 0, 19, 30, 161, 0, 0, 0, 0, 0, 20, 88,
        102, 0, 0, 0, 0, 0, 20, 254, 131, 0, 0, 0, 0, 0, 22, 56, 72, 0, 0, 0, 0, 0, 23, 3, 79, 0,
        0, 0, 0, 0, 24, 33, 100, 128, 0, 0, 0, 0, 24, 227, 49, 0, 0, 0, 0, 0, 26, 1, 70, 128, 0, 0,
        0, 0, 26, 167, 99, 128, 0, 0, 0, 0, 27, 225, 40, 128, 0, 0, 0, 0, 28, 135, 69, 128, 0, 0,
        0, 0, 29, 193, 10, 128, 0, 0, 0, 0, 30, 103, 39, 128, 0, 0, 0, 0, 31, 151, 178, 0, 0, 0, 0,
        0, 32, 89, 126, 128, 0, 0, 0, 0, 33, 128, 206, 128, 0, 0, 0, 0, 34, 66, 155, 0, 0, 0, 0, 0,
        35, 105, 235, 0, 0, 0, 0, 0, 36, 34, 125, 0, 0, 0, 0, 0, 37, 73, 205, 0, 0, 0, 0, 0, 38, 2,
        95, 0, 0, 0, 0, 0, 39, 41, 175, 0, 0, 0, 0, 0, 39, 244, 182, 0, 0, 0, 0, 0, 40, 237, 225,
        128, 0, 0, 0, 0, 41, 212, 152, 0, 0, 0, 0, 0, 42, 205, 195, 128, 0, 0, 0, 0, 43, 180, 122,
        0, 0, 0, 0, 0, 44, 173, 165, 128, 0, 0, 0, 0, 45, 148, 92, 0, 0, 0, 0, 0, 46, 141, 135,
        128, 0, 0, 0, 0, 47, 116, 62, 0, 0, 0, 0, 0, 48, 109, 105, 128, 0, 0, 0, 0, 49, 93, 90,
        128, 0, 0, 0, 0, 50, 86, 134, 0, 0, 0, 0, 0, 51, 61, 60, 128, 0, 0, 0, 0, 52, 54, 104, 0,
        0, 0, 0, 0, 53, 29, 30, 128, 0, 0, 0, 0, 54, 22, 74, 0, 0, 0, 0, 0, 54, 253, 0, 128, 0, 0,
        0, 0, 55, 246, 44, 0, 0, 0, 0, 0, 56, 220, 226, 128, 0, 0, 0, 0, 57, 167, 233, 128, 0, 0,
        0, 0, 58, 188, 196, 128, 0, 0, 0, 0, 59, 191, 42, 128, 0, 0, 0, 0, 60, 165, 225, 0, 0, 0,
        0, 0, 61, 159, 12, 128, 0, 0, 0, 0, 62, 133, 195, 0, 0, 0, 0, 0, 63, 126, 238, 128, 0, 0,
        0, 0, 64, 101, 165, 0, 0, 0, 0, 0, 65, 94, 208, 128, 0, 0, 0, 0, 66, 69, 135, 0, 0, 0, 0,
        0, 67, 62, 178, 128, 0, 0, 0, 0, 68, 46, 163, 128, 0, 0, 0, 0, 69, 30, 148, 128, 0, 0, 0,
        0, 70, 5, 75, 0, 0, 0, 0, 0, 71, 7, 177, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 134, 224, 0, 0, 0, 0, 154, 176, 1, 4,
        0, 0, 140, 160, 0, 9, 76, 77, 84, 0, 65, 69, 68, 84, 0, 65, 69, 83, 84, 0, 10, 65, 69, 83,
        84, 45, 49, 48, 65, 69, 68, 84, 44, 77, 49, 48, 46, 49, 46, 48, 44, 77, 52, 46, 49, 46, 48,
        47, 51, 10,
    ];
    pub(crate) const AUSTRALIA_DARWIN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10, 0, 0, 0, 4, 0, 0, 0, 14, 255, 255, 255, 255, 115, 22, 146, 88, 255, 255, 255, 255, 123,
        18, 3, 112, 255, 255, 255, 255, 156, 78, 201, 136, 255, 255, 255, 255, 156, 188, 54, 8,
        255, 255, 255, 255, 203, 84, 186, 8, 255, 255, 255, 255, 203, 199, 108, 136, 255, 255, 255,
        255, 204, 183, 93, 136, 255, 255, 255, 255, 205, 167, 78, 136, 255, 255, 255, 255, 206,
        160, 122, 8, 255, 255, 255, 255, 207, 135, 48, 136, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0,
        122, 168, 0, 0, 0, 0, 126, 144, 0, 4, 0, 0, 147, 168, 1, 9, 0, 0, 133, 152, 0, 4, 76, 77,
        84, 0, 65, 67, 83, 84, 0, 65, 67, 68, 84, 0, 10, 65, 67, 83, 84, 45, 57, 58, 51, 48, 10,
    ];
    pub(crate) const AUSTRALIA_EUCLA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        19, 0, 0, 0, 3, 0, 0, 0, 16, 255, 255, 255, 255, 116, 166, 10, 176, 255, 255, 255, 255,
        156, 78, 212, 20, 255, 255, 255, 255, 156, 188, 64, 148, 255, 255, 255, 255, 203, 84, 196,
        148, 255, 255, 255, 255, 203, 199, 119, 20, 255, 255, 255, 255, 204, 183, 104, 20, 255,
        255, 255, 255, 205, 167, 89, 20, 0, 0, 0, 0, 9, 15, 241, 20, 0, 0, 0, 0, 9, 182, 14, 20, 0,
        0, 0, 0, 26, 1, 88, 20, 0, 0, 0, 0, 26, 167, 117, 20, 0, 0, 0, 0, 41, 37, 82, 20, 0, 0, 0,
        0, 41, 175, 191, 148, 0, 0, 0, 0, 69, 113, 180, 148, 0, 0, 0, 0, 70, 5, 92, 148, 0, 0, 0,
        0, 71, 35, 114, 20, 0, 0, 0, 0, 71, 238, 121, 20, 0, 0, 0, 0, 73, 3, 84, 20, 0, 0, 0, 0,
        73, 206, 91, 20, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 120, 208,
        0, 0, 0, 0, 137, 28, 1, 4, 0, 0, 123, 12, 0, 10, 76, 77, 84, 0, 43, 48, 57, 52, 53, 0, 43,
        48, 56, 52, 53, 0, 10, 60, 43, 48, 56, 52, 53, 62, 45, 56, 58, 52, 53, 10,
    ];
    pub(crate) const AUSTRALIA_HOBART: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        94, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 116, 46, 0, 228, 255, 255, 255, 255, 155,
        213, 120, 128, 255, 255, 255, 255, 156, 188, 47, 0, 255, 255, 255, 255, 157, 218, 68, 128,
        255, 255, 255, 255, 158, 128, 97, 128, 255, 255, 255, 255, 159, 186, 38, 128, 255, 255,
        255, 255, 160, 96, 67, 128, 255, 255, 255, 255, 203, 84, 179, 0, 255, 255, 255, 255, 203,
        199, 101, 128, 255, 255, 255, 255, 204, 183, 86, 128, 255, 255, 255, 255, 205, 167, 71,
        128, 255, 255, 255, 255, 206, 160, 115, 0, 255, 255, 255, 255, 207, 135, 41, 128, 255, 255,
        255, 255, 251, 194, 141, 0, 255, 255, 255, 255, 252, 178, 126, 0, 255, 255, 255, 255, 253,
        199, 89, 0, 255, 255, 255, 255, 254, 118, 176, 128, 255, 255, 255, 255, 255, 167, 59, 0, 0,
        0, 0, 0, 0, 86, 146, 128, 0, 0, 0, 0, 1, 135, 29, 0, 0, 0, 0, 0, 2, 63, 175, 0, 0, 0, 0, 0,
        3, 112, 57, 128, 0, 0, 0, 0, 4, 13, 28, 0, 0, 0, 0, 0, 5, 80, 27, 128, 0, 0, 0, 0, 5, 246,
        56, 128, 0, 0, 0, 0, 7, 47, 253, 128, 0, 0, 0, 0, 7, 214, 26, 128, 0, 0, 0, 0, 9, 15, 223,
        128, 0, 0, 0, 0, 9, 181, 252, 128, 0, 0, 0, 0, 10, 239, 193, 128, 0, 0, 0, 0, 11, 159, 25,
        0, 0, 0, 0, 0, 12, 216, 222, 0, 0, 0, 0, 0, 13, 126, 251, 0, 0, 0, 0, 0, 14, 184, 192, 0,
        0, 0, 0, 0, 15, 94, 221, 0, 0, 0, 0, 0, 16, 152, 162, 0, 0, 0, 0, 0, 17, 62, 191, 0, 0, 0,
        0, 0, 18, 120, 132, 0, 0, 0, 0, 0, 19, 30, 161, 0, 0, 0, 0, 0, 20, 88, 102, 0, 0, 0, 0, 0,
        20, 254, 131, 0, 0, 0, 0, 0, 22, 56, 72, 0, 0, 0, 0, 0, 23, 3, 79, 0, 0, 0, 0, 0, 24, 33,
        100, 128, 0, 0, 0, 0, 24, 227, 49, 0, 0, 0, 0, 0, 26, 1, 70, 128, 0, 0, 0, 0, 26, 167, 99,
        128, 0, 0, 0, 0, 27, 225, 40, 128, 0, 0, 0, 0, 28, 135, 69, 128, 0, 0, 0, 0, 29, 193, 10,
        128, 0, 0, 0, 0, 30, 103, 39, 128, 0, 0, 0, 0, 31, 151, 178, 0, 0, 0, 0, 0, 32, 89, 126,
        128, 0, 0, 0, 0, 33, 128, 206, 128, 0, 0, 0, 0, 34, 66, 155, 0, 0, 0, 0, 0, 35, 105, 235,
        0, 0, 0, 0, 0, 36, 34, 125, 0, 0, 0, 0, 0, 37, 73, 205, 0, 0, 0, 0, 0, 38, 2, 95, 0, 0, 0,
        0, 0, 39, 41, 175, 0, 0, 0, 0, 0, 39, 244, 182, 0, 0, 0, 0, 0, 40, 237, 225, 128, 0, 0, 0,
        0, 41, 212, 152, 0, 0, 0, 0, 0, 42, 205, 195, 128, 0, 0, 0, 0, 43, 180, 122, 0, 0, 0, 0, 0,
        44, 173, 165, 128, 0, 0, 0, 0, 45, 148, 92, 0, 0, 0, 0, 0, 46, 141, 135, 128, 0, 0, 0, 0,
        47, 116, 62, 0, 0, 0, 0, 0, 48, 109, 105, 128, 0, 0, 0, 0, 49, 93, 90, 128, 0, 0, 0, 0, 50,
        86, 134, 0, 0, 0, 0, 0, 51, 61, 60, 128, 0, 0, 0, 0, 52, 54, 104, 0, 0, 0, 0, 0, 53, 29,
        30, 128, 0, 0, 0, 0, 54, 22, 74, 0, 0, 0, 0, 0, 54, 253, 0, 128, 0, 0, 0, 0, 55, 246, 44,
        0, 0, 0, 0, 0, 56, 220, 226, 128, 0, 0, 0, 0, 57, 167, 233, 128, 0, 0, 0, 0, 58, 188, 196,
        128, 0, 0, 0, 0, 59, 191, 42, 128, 0, 0, 0, 0, 60, 165, 225, 0, 0, 0, 0, 0, 61, 159, 12,
        128, 0, 0, 0, 0, 62, 133, 195, 0, 0, 0, 0, 0, 63, 126, 238, 128, 0, 0, 0, 0, 64, 101, 165,
        0, 0, 0, 0, 0, 65, 94, 208, 128, 0, 0, 0, 0, 66, 69, 135, 0, 0, 0, 0, 0, 67, 62, 178, 128,
        0, 0, 0, 0, 68, 46, 163, 128, 0, 0, 0, 0, 69, 30, 148, 128, 0, 0, 0, 0, 70, 5, 75, 0, 0, 0,
        0, 0, 71, 7, 177, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 138, 28, 0, 0, 0, 0, 154, 176, 1, 4, 0, 0, 140, 160,
        0, 9, 76, 77, 84, 0, 65, 69, 68, 84, 0, 65, 69, 83, 84, 0, 10, 65, 69, 83, 84, 45, 49, 48,
        65, 69, 68, 84, 44, 77, 49, 48, 46, 49, 46, 48, 44, 77, 52, 46, 49, 46, 48, 47, 51, 10,
    ];
    pub(crate) const AUSTRALIA_LHI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        56, 0, 0, 0, 5, 0, 0, 0, 25, 255, 255, 255, 255, 115, 22, 119, 220, 0, 0, 0, 0, 20, 254,
        102, 224, 0, 0, 0, 0, 22, 56, 64, 248, 0, 0, 0, 0, 22, 231, 138, 104, 0, 0, 0, 0, 24, 33,
        93, 120, 0, 0, 0, 0, 24, 199, 108, 104, 0, 0, 0, 0, 26, 1, 63, 120, 0, 0, 0, 0, 26, 167,
        78, 104, 0, 0, 0, 0, 27, 225, 33, 120, 0, 0, 0, 0, 28, 135, 48, 104, 0, 0, 0, 0, 29, 193,
        3, 120, 0, 0, 0, 0, 30, 121, 142, 112, 0, 0, 0, 0, 31, 151, 170, 248, 0, 0, 0, 0, 32, 89,
        112, 112, 0, 0, 0, 0, 33, 128, 199, 120, 0, 0, 0, 0, 34, 66, 140, 240, 0, 0, 0, 0, 35, 105,
        227, 248, 0, 0, 0, 0, 36, 34, 110, 240, 0, 0, 0, 0, 37, 73, 197, 248, 0, 0, 0, 0, 37, 239,
        219, 240, 0, 0, 0, 0, 39, 41, 167, 248, 0, 0, 0, 0, 39, 207, 189, 240, 0, 0, 0, 0, 41, 9,
        137, 248, 0, 0, 0, 0, 41, 175, 159, 240, 0, 0, 0, 0, 42, 233, 107, 248, 0, 0, 0, 0, 43,
        152, 188, 112, 0, 0, 0, 0, 44, 210, 136, 120, 0, 0, 0, 0, 45, 120, 158, 112, 0, 0, 0, 0,
        46, 178, 106, 120, 0, 0, 0, 0, 47, 88, 128, 112, 0, 0, 0, 0, 48, 146, 76, 120, 0, 0, 0, 0,
        49, 93, 76, 112, 0, 0, 0, 0, 50, 114, 46, 120, 0, 0, 0, 0, 51, 61, 46, 112, 0, 0, 0, 0, 52,
        82, 16, 120, 0, 0, 0, 0, 53, 29, 16, 112, 0, 0, 0, 0, 54, 49, 242, 120, 0, 0, 0, 0, 54,
        252, 242, 112, 0, 0, 0, 0, 56, 27, 14, 248, 0, 0, 0, 0, 56, 220, 212, 112, 0, 0, 0, 0, 57,
        167, 226, 120, 0, 0, 0, 0, 58, 188, 182, 112, 0, 0, 0, 0, 59, 218, 210, 248, 0, 0, 0, 0,
        60, 165, 210, 240, 0, 0, 0, 0, 61, 186, 180, 248, 0, 0, 0, 0, 62, 133, 180, 240, 0, 0, 0,
        0, 63, 154, 150, 248, 0, 0, 0, 0, 64, 101, 150, 240, 0, 0, 0, 0, 65, 131, 179, 120, 0, 0,
        0, 0, 66, 69, 120, 240, 0, 0, 0, 0, 67, 99, 149, 120, 0, 0, 0, 0, 68, 46, 149, 112, 0, 0,
        0, 0, 69, 67, 119, 120, 0, 0, 0, 0, 70, 5, 60, 240, 0, 0, 0, 0, 71, 35, 89, 120, 0, 0, 0,
        0, 71, 247, 147, 240, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 0, 0, 149, 36, 0, 0, 0, 0, 140, 160, 0, 4, 0, 0, 161, 184, 1, 9, 0, 0, 147, 168,
        0, 15, 0, 0, 154, 176, 1, 21, 76, 77, 84, 0, 65, 69, 83, 84, 0, 43, 49, 49, 51, 48, 0, 43,
        49, 48, 51, 48, 0, 43, 49, 49, 0, 10, 60, 43, 49, 48, 51, 48, 62, 45, 49, 48, 58, 51, 48,
        60, 43, 49, 49, 62, 45, 49, 49, 44, 77, 49, 48, 46, 49, 46, 48, 44, 77, 52, 46, 49, 46, 48,
        10,
    ];
    pub(crate) const AUSTRALIA_LINDEMAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        21, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 114, 237, 162, 212, 255, 255, 255, 255,
        156, 78, 194, 128, 255, 255, 255, 255, 156, 188, 47, 0, 255, 255, 255, 255, 203, 84, 179,
        0, 255, 255, 255, 255, 203, 199, 101, 128, 255, 255, 255, 255, 204, 183, 86, 128, 255, 255,
        255, 255, 205, 167, 71, 128, 255, 255, 255, 255, 206, 160, 115, 0, 255, 255, 255, 255, 207,
        135, 41, 128, 0, 0, 0, 0, 3, 112, 57, 128, 0, 0, 0, 0, 4, 13, 28, 0, 0, 0, 0, 0, 37, 73,
        205, 0, 0, 0, 0, 0, 37, 239, 234, 0, 0, 0, 0, 0, 39, 41, 175, 0, 0, 0, 0, 0, 39, 207, 204,
        0, 0, 0, 0, 0, 41, 9, 145, 0, 0, 0, 0, 0, 41, 175, 174, 0, 0, 0, 0, 0, 42, 233, 115, 0, 0,
        0, 0, 0, 43, 152, 202, 128, 0, 0, 0, 0, 44, 210, 143, 128, 0, 0, 0, 0, 45, 120, 172, 128,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 139, 172, 0, 0, 0, 0,
        154, 176, 1, 4, 0, 0, 140, 160, 0, 9, 76, 77, 84, 0, 65, 69, 68, 84, 0, 65, 69, 83, 84, 0,
        10, 65, 69, 83, 84, 45, 49, 48, 10,
    ];
    pub(crate) const AUSTRALIA_MELBOURNE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        83, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 115, 22, 133, 24, 255, 255, 255, 255, 156,
        78, 194, 128, 255, 255, 255, 255, 156, 188, 47, 0, 255, 255, 255, 255, 203, 84, 179, 0,
        255, 255, 255, 255, 203, 199, 101, 128, 255, 255, 255, 255, 204, 183, 86, 128, 255, 255,
        255, 255, 205, 167, 71, 128, 255, 255, 255, 255, 206, 160, 115, 0, 255, 255, 255, 255, 207,
        135, 41, 128, 0, 0, 0, 0, 3, 112, 57, 128, 0, 0, 0, 0, 4, 13, 28, 0, 0, 0, 0, 0, 5, 80, 27,
        128, 0, 0, 0, 0, 5, 246, 56, 128, 0, 0, 0, 0, 7, 47, 253, 128, 0, 0, 0, 0, 7, 214, 26, 128,
        0, 0, 0, 0, 9, 15, 223, 128, 0, 0, 0, 0, 9, 181, 252, 128, 0, 0, 0, 0, 10, 239, 193, 128,
        0, 0, 0, 0, 11, 159, 25, 0, 0, 0, 0, 0, 12, 216, 222, 0, 0, 0, 0, 0, 13, 126, 251, 0, 0, 0,
        0, 0, 14, 184, 192, 0, 0, 0, 0, 0, 15, 94, 221, 0, 0, 0, 0, 0, 16, 152, 162, 0, 0, 0, 0, 0,
        17, 62, 191, 0, 0, 0, 0, 0, 18, 120, 132, 0, 0, 0, 0, 0, 19, 30, 161, 0, 0, 0, 0, 0, 20,
        88, 102, 0, 0, 0, 0, 0, 20, 254, 131, 0, 0, 0, 0, 0, 22, 56, 72, 0, 0, 0, 0, 0, 22, 231,
        159, 128, 0, 0, 0, 0, 24, 33, 100, 128, 0, 0, 0, 0, 24, 199, 129, 128, 0, 0, 0, 0, 26, 1,
        70, 128, 0, 0, 0, 0, 26, 167, 99, 128, 0, 0, 0, 0, 27, 225, 40, 128, 0, 0, 0, 0, 28, 135,
        69, 128, 0, 0, 0, 0, 29, 193, 10, 128, 0, 0, 0, 0, 30, 121, 156, 128, 0, 0, 0, 0, 31, 151,
        178, 0, 0, 0, 0, 0, 32, 89, 126, 128, 0, 0, 0, 0, 33, 119, 148, 0, 0, 0, 0, 0, 34, 66, 155,
        0, 0, 0, 0, 0, 35, 105, 235, 0, 0, 0, 0, 0, 36, 34, 125, 0, 0, 0, 0, 0, 37, 73, 205, 0, 0,
        0, 0, 0, 38, 2, 95, 0, 0, 0, 0, 0, 39, 41, 175, 0, 0, 0, 0, 0, 39, 207, 204, 0, 0, 0, 0, 0,
        41, 9, 145, 0, 0, 0, 0, 0, 41, 175, 174, 0, 0, 0, 0, 0, 42, 233, 115, 0, 0, 0, 0, 0, 43,
        152, 202, 128, 0, 0, 0, 0, 44, 210, 143, 128, 0, 0, 0, 0, 45, 120, 172, 128, 0, 0, 0, 0,
        46, 178, 113, 128, 0, 0, 0, 0, 47, 116, 62, 0, 0, 0, 0, 0, 48, 146, 83, 128, 0, 0, 0, 0,
        49, 93, 90, 128, 0, 0, 0, 0, 50, 114, 53, 128, 0, 0, 0, 0, 51, 61, 60, 128, 0, 0, 0, 0, 52,
        82, 23, 128, 0, 0, 0, 0, 53, 29, 30, 128, 0, 0, 0, 0, 54, 49, 249, 128, 0, 0, 0, 0, 54,
        253, 0, 128, 0, 0, 0, 0, 56, 27, 22, 0, 0, 0, 0, 0, 56, 220, 226, 128, 0, 0, 0, 0, 57, 167,
        233, 128, 0, 0, 0, 0, 58, 188, 196, 128, 0, 0, 0, 0, 59, 218, 218, 0, 0, 0, 0, 0, 60, 165,
        225, 0, 0, 0, 0, 0, 61, 186, 188, 0, 0, 0, 0, 0, 62, 133, 195, 0, 0, 0, 0, 0, 63, 154, 158,
        0, 0, 0, 0, 0, 64, 101, 165, 0, 0, 0, 0, 0, 65, 131, 186, 128, 0, 0, 0, 0, 66, 69, 135, 0,
        0, 0, 0, 0, 67, 99, 156, 128, 0, 0, 0, 0, 68, 46, 163, 128, 0, 0, 0, 0, 69, 67, 126, 128,
        0, 0, 0, 0, 70, 5, 75, 0, 0, 0, 0, 0, 71, 35, 96, 128, 0, 0, 0, 0, 71, 247, 162, 0, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 135, 232, 0, 0, 0, 0,
        154, 176, 1, 4, 0, 0, 140, 160, 0, 9, 76, 77, 84, 0, 65, 69, 68, 84, 0, 65, 69, 83, 84, 0,
        10, 65, 69, 83, 84, 45, 49, 48, 65, 69, 68, 84, 44, 77, 49, 48, 46, 49, 46, 48, 44, 77, 52,
        46, 49, 46, 48, 47, 51, 10,
    ];
    pub(crate) const AUSTRALIA_PERTH: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        19, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 116, 166, 22, 228, 255, 255, 255, 255,
        156, 78, 222, 160, 255, 255, 255, 255, 156, 188, 75, 32, 255, 255, 255, 255, 203, 84, 207,
        32, 255, 255, 255, 255, 203, 199, 129, 160, 255, 255, 255, 255, 204, 183, 114, 160, 255,
        255, 255, 255, 205, 167, 99, 160, 0, 0, 0, 0, 9, 15, 251, 160, 0, 0, 0, 0, 9, 182, 24, 160,
        0, 0, 0, 0, 26, 1, 98, 160, 0, 0, 0, 0, 26, 167, 127, 160, 0, 0, 0, 0, 41, 37, 92, 160, 0,
        0, 0, 0, 41, 175, 202, 32, 0, 0, 0, 0, 69, 113, 191, 32, 0, 0, 0, 0, 70, 5, 103, 32, 0, 0,
        0, 0, 71, 35, 124, 160, 0, 0, 0, 0, 71, 238, 131, 160, 0, 0, 0, 0, 73, 3, 94, 160, 0, 0, 0,
        0, 73, 206, 101, 160, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 108,
        156, 0, 0, 0, 0, 126, 144, 1, 4, 0, 0, 112, 128, 0, 9, 76, 77, 84, 0, 65, 87, 68, 84, 0,
        65, 87, 83, 84, 0, 10, 65, 87, 83, 84, 45, 56, 10,
    ];
    pub(crate) const CET: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        53, 0, 0, 0, 2, 0, 0, 0, 9, 255, 255, 255, 255, 155, 12, 23, 96, 255, 255, 255, 255, 155,
        213, 218, 240, 255, 255, 255, 255, 156, 217, 174, 144, 255, 255, 255, 255, 157, 164, 181,
        144, 255, 255, 255, 255, 158, 185, 144, 144, 255, 255, 255, 255, 159, 132, 151, 144, 255,
        255, 255, 255, 200, 9, 113, 144, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255,
        205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52,
        16, 255, 255, 255, 255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255,
        255, 255, 210, 78, 64, 144, 0, 0, 0, 0, 13, 164, 99, 144, 0, 0, 0, 0, 14, 139, 26, 16, 0,
        0, 0, 0, 15, 132, 69, 144, 0, 0, 0, 0, 16, 116, 54, 144, 0, 0, 0, 0, 17, 100, 39, 144, 0,
        0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0,
        0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0,
        0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0,
        0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0,
        0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0,
        0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0,
        35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12,
        24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37,
        144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248,
        144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132,
        203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93,
        217, 16, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 14, 16,
        0, 5, 0, 0, 28, 32, 1, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69,
        83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const CHILE_EASTER_ISLAND: &[u8] = &[
        84, 90, 105, 102, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 51,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        102, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 105, 135, 66, 8, 255, 255, 255, 255, 185,
        199, 64, 136, 255, 255, 255, 255, 253, 209, 60, 64, 255, 255, 255, 255, 254, 146, 250, 176,
        255, 255, 255, 255, 255, 204, 205, 192, 0, 0, 0, 0, 0, 114, 220, 176, 0, 0, 0, 0, 1, 117,
        80, 192, 0, 0, 0, 0, 2, 64, 73, 176, 0, 0, 0, 0, 3, 85, 50, 192, 0, 0, 0, 0, 4, 32, 43,
        176, 0, 0, 0, 0, 5, 62, 79, 64, 0, 0, 0, 0, 6, 0, 13, 176, 0, 0, 0, 0, 7, 11, 188, 64, 0,
        0, 0, 0, 7, 223, 239, 176, 0, 0, 0, 0, 8, 254, 19, 64, 0, 0, 0, 0, 9, 191, 209, 176, 0, 0,
        0, 0, 10, 221, 245, 64, 0, 0, 0, 0, 11, 168, 238, 48, 0, 0, 0, 0, 12, 189, 215, 64, 0, 0,
        0, 0, 13, 136, 208, 48, 0, 0, 0, 0, 14, 157, 185, 64, 0, 0, 0, 0, 15, 104, 178, 48, 0, 0,
        0, 0, 16, 134, 213, 192, 0, 0, 0, 0, 17, 72, 148, 48, 0, 0, 0, 0, 18, 102, 183, 192, 0, 0,
        0, 0, 19, 40, 118, 48, 0, 0, 0, 0, 20, 70, 153, 192, 0, 0, 0, 0, 21, 17, 146, 176, 0, 0, 0,
        0, 22, 38, 123, 192, 0, 0, 0, 0, 22, 241, 116, 176, 0, 0, 0, 0, 24, 6, 93, 192, 0, 0, 0, 0,
        24, 209, 86, 176, 0, 0, 0, 0, 25, 230, 63, 192, 0, 0, 0, 0, 26, 177, 56, 176, 0, 0, 0, 0,
        27, 207, 92, 64, 0, 0, 0, 0, 28, 145, 26, 176, 0, 0, 0, 0, 29, 175, 62, 64, 0, 0, 0, 0, 30,
        112, 252, 176, 0, 0, 0, 0, 31, 143, 32, 64, 0, 0, 0, 0, 32, 127, 3, 48, 0, 0, 0, 0, 33,
        111, 2, 64, 0, 0, 0, 0, 34, 57, 251, 48, 0, 0, 0, 0, 35, 78, 228, 64, 0, 0, 0, 0, 36, 25,
        221, 48, 0, 0, 0, 0, 37, 56, 0, 192, 0, 0, 0, 0, 37, 249, 191, 48, 0, 0, 0, 0, 38, 242,
        248, 192, 0, 0, 0, 0, 39, 217, 161, 48, 0, 0, 0, 0, 40, 247, 196, 192, 0, 0, 0, 0, 41, 194,
        189, 176, 0, 0, 0, 0, 42, 215, 166, 192, 0, 0, 0, 0, 43, 162, 159, 176, 0, 0, 0, 0, 44,
        183, 136, 192, 0, 0, 0, 0, 45, 130, 129, 176, 0, 0, 0, 0, 46, 151, 106, 192, 0, 0, 0, 0,
        47, 98, 99, 176, 0, 0, 0, 0, 48, 128, 135, 64, 0, 0, 0, 0, 49, 66, 69, 176, 0, 0, 0, 0, 50,
        96, 105, 64, 0, 0, 0, 0, 51, 61, 215, 48, 0, 0, 0, 0, 52, 64, 75, 64, 0, 0, 0, 0, 53, 11,
        68, 48, 0, 0, 0, 0, 54, 13, 184, 64, 0, 0, 0, 0, 55, 6, 213, 176, 0, 0, 0, 0, 56, 0, 15,
        64, 0, 0, 0, 0, 56, 203, 8, 48, 0, 0, 0, 0, 57, 233, 43, 192, 0, 0, 0, 0, 58, 170, 234, 48,
        0, 0, 0, 0, 59, 201, 13, 192, 0, 0, 0, 0, 60, 138, 204, 48, 0, 0, 0, 0, 61, 168, 239, 192,
        0, 0, 0, 0, 62, 106, 174, 48, 0, 0, 0, 0, 63, 136, 209, 192, 0, 0, 0, 0, 64, 83, 202, 176,
        0, 0, 0, 0, 65, 104, 179, 192, 0, 0, 0, 0, 66, 51, 172, 176, 0, 0, 0, 0, 67, 72, 149, 192,
        0, 0, 0, 0, 68, 19, 142, 176, 0, 0, 0, 0, 69, 49, 178, 64, 0, 0, 0, 0, 69, 243, 112, 176,
        0, 0, 0, 0, 71, 17, 148, 64, 0, 0, 0, 0, 71, 239, 2, 48, 0, 0, 0, 0, 72, 241, 118, 64, 0,
        0, 0, 0, 73, 188, 111, 48, 0, 0, 0, 0, 74, 209, 88, 64, 0, 0, 0, 0, 75, 184, 0, 176, 0, 0,
        0, 0, 76, 177, 58, 64, 0, 0, 0, 0, 77, 198, 7, 48, 0, 0, 0, 0, 78, 80, 130, 192, 0, 0, 0,
        0, 79, 156, 174, 176, 0, 0, 0, 0, 80, 66, 217, 192, 0, 0, 0, 0, 81, 124, 144, 176, 0, 0, 0,
        0, 82, 43, 246, 64, 0, 0, 0, 0, 83, 92, 114, 176, 0, 0, 0, 0, 84, 11, 216, 64, 0, 0, 0, 0,
        87, 55, 230, 48, 0, 0, 0, 0, 87, 175, 236, 192, 0, 0, 0, 0, 89, 23, 200, 48, 0, 0, 0, 0,
        89, 143, 206, 192, 0, 0, 0, 0, 90, 247, 170, 48, 0, 0, 0, 0, 91, 111, 176, 192, 0, 0, 0, 0,
        92, 169, 103, 176, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 255, 255, 153, 120, 0, 0, 255, 255,
        153, 120, 0, 4, 255, 255, 171, 160, 1, 8, 255, 255, 157, 144, 0, 12, 255, 255, 171, 160, 0,
        8, 255, 255, 185, 176, 1, 16, 76, 77, 84, 0, 69, 77, 84, 0, 45, 48, 54, 0, 45, 48, 55, 0,
        45, 48, 53, 0, 10, 60, 45, 48, 54, 62, 54, 60, 45, 48, 53, 62, 44, 77, 57, 46, 49, 46, 54,
        47, 50, 50, 44, 77, 52, 46, 49, 46, 54, 47, 50, 50, 10,
    ];
    pub(crate) const CST_6_CDT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        88, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 158, 166, 44, 128, 255, 255, 255, 255,
        159, 186, 249, 112, 255, 255, 255, 255, 160, 134, 14, 128, 255, 255, 255, 255, 161, 154,
        219, 112, 255, 255, 255, 255, 203, 136, 254, 128, 255, 255, 255, 255, 210, 35, 244, 112,
        255, 255, 255, 255, 210, 97, 9, 240, 255, 255, 255, 255, 250, 248, 103, 0, 255, 255, 255,
        255, 251, 232, 73, 240, 255, 255, 255, 255, 252, 216, 73, 0, 255, 255, 255, 255, 253, 200,
        43, 240, 255, 255, 255, 255, 254, 184, 43, 0, 255, 255, 255, 255, 255, 168, 13, 240, 0, 0,
        0, 0, 0, 152, 13, 0, 0, 0, 0, 0, 1, 135, 239, 240, 0, 0, 0, 0, 2, 119, 239, 0, 0, 0, 0, 0,
        3, 113, 12, 112, 0, 0, 0, 0, 4, 97, 11, 128, 0, 0, 0, 0, 5, 80, 238, 112, 0, 0, 0, 0, 6,
        64, 237, 128, 0, 0, 0, 0, 7, 48, 208, 112, 0, 0, 0, 0, 7, 141, 39, 128, 0, 0, 0, 0, 9, 16,
        178, 112, 0, 0, 0, 0, 9, 173, 163, 0, 0, 0, 0, 0, 10, 240, 148, 112, 0, 0, 0, 0, 11, 224,
        147, 128, 0, 0, 0, 0, 12, 217, 176, 240, 0, 0, 0, 0, 13, 192, 117, 128, 0, 0, 0, 0, 14,
        185, 146, 240, 0, 0, 0, 0, 15, 169, 146, 0, 0, 0, 0, 0, 16, 153, 116, 240, 0, 0, 0, 0, 17,
        137, 116, 0, 0, 0, 0, 0, 18, 121, 86, 240, 0, 0, 0, 0, 19, 105, 86, 0, 0, 0, 0, 0, 20, 89,
        56, 240, 0, 0, 0, 0, 21, 73, 56, 0, 0, 0, 0, 0, 22, 57, 26, 240, 0, 0, 0, 0, 23, 41, 26, 0,
        0, 0, 0, 0, 24, 34, 55, 112, 0, 0, 0, 0, 25, 8, 252, 0, 0, 0, 0, 0, 26, 2, 25, 112, 0, 0,
        0, 0, 26, 242, 24, 128, 0, 0, 0, 0, 27, 225, 251, 112, 0, 0, 0, 0, 28, 209, 250, 128, 0, 0,
        0, 0, 29, 193, 221, 112, 0, 0, 0, 0, 30, 177, 220, 128, 0, 0, 0, 0, 31, 161, 191, 112, 0,
        0, 0, 0, 32, 118, 15, 0, 0, 0, 0, 0, 33, 129, 161, 112, 0, 0, 0, 0, 34, 85, 241, 0, 0, 0,
        0, 0, 35, 106, 189, 240, 0, 0, 0, 0, 36, 53, 211, 0, 0, 0, 0, 0, 37, 74, 159, 240, 0, 0, 0,
        0, 38, 21, 181, 0, 0, 0, 0, 0, 39, 42, 129, 240, 0, 0, 0, 0, 39, 254, 209, 128, 0, 0, 0, 0,
        41, 10, 99, 240, 0, 0, 0, 0, 41, 222, 179, 128, 0, 0, 0, 0, 42, 234, 69, 240, 0, 0, 0, 0,
        43, 190, 149, 128, 0, 0, 0, 0, 44, 211, 98, 112, 0, 0, 0, 0, 45, 158, 119, 128, 0, 0, 0, 0,
        46, 179, 68, 112, 0, 0, 0, 0, 47, 126, 89, 128, 0, 0, 0, 0, 48, 147, 38, 112, 0, 0, 0, 0,
        49, 103, 118, 0, 0, 0, 0, 0, 50, 115, 8, 112, 0, 0, 0, 0, 51, 71, 88, 0, 0, 0, 0, 0, 52,
        82, 234, 112, 0, 0, 0, 0, 53, 39, 58, 0, 0, 0, 0, 0, 54, 50, 204, 112, 0, 0, 0, 0, 55, 7,
        28, 0, 0, 0, 0, 0, 56, 27, 232, 240, 0, 0, 0, 0, 56, 230, 254, 0, 0, 0, 0, 0, 57, 251, 202,
        240, 0, 0, 0, 0, 58, 198, 224, 0, 0, 0, 0, 0, 59, 219, 172, 240, 0, 0, 0, 0, 60, 175, 252,
        128, 0, 0, 0, 0, 61, 187, 142, 240, 0, 0, 0, 0, 62, 143, 222, 128, 0, 0, 0, 0, 63, 155,
        112, 240, 0, 0, 0, 0, 64, 111, 192, 128, 0, 0, 0, 0, 65, 132, 141, 112, 0, 0, 0, 0, 66, 79,
        162, 128, 0, 0, 0, 0, 67, 100, 111, 112, 0, 0, 0, 0, 68, 47, 132, 128, 0, 0, 0, 0, 69, 68,
        81, 112, 0, 0, 0, 0, 69, 243, 183, 0, 1, 0, 1, 0, 2, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 255, 255, 171, 160, 0, 4, 255, 255, 185, 176, 1, 0, 255, 255,
        185, 176, 1, 8, 255, 255, 185, 176, 1, 12, 67, 68, 84, 0, 67, 83, 84, 0, 67, 87, 84, 0, 67,
        80, 84, 0, 10, 67, 83, 84, 54, 67, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46,
        49, 46, 48, 10,
    ];
    pub(crate) const CUBA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        106, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 105, 135, 40, 184, 255, 255, 255, 255,
        172, 98, 194, 128, 255, 255, 255, 255, 177, 211, 148, 80, 255, 255, 255, 255, 178, 116, 93,
        64, 255, 255, 255, 255, 200, 91, 102, 208, 255, 255, 255, 255, 200, 211, 81, 64, 255, 255,
        255, 255, 202, 59, 72, 208, 255, 255, 255, 255, 202, 188, 109, 192, 255, 255, 255, 255,
        204, 36, 101, 80, 255, 255, 255, 255, 204, 156, 79, 192, 255, 255, 255, 255, 209, 196, 11,
        80, 255, 255, 255, 255, 210, 59, 245, 192, 255, 255, 255, 255, 211, 163, 237, 80, 255, 255,
        255, 255, 212, 27, 215, 192, 255, 255, 255, 255, 247, 96, 5, 208, 255, 255, 255, 255, 247,
        255, 125, 64, 255, 255, 255, 255, 249, 61, 68, 208, 255, 255, 255, 255, 249, 227, 83, 192,
        255, 255, 255, 255, 250, 219, 59, 208, 255, 255, 255, 255, 251, 167, 134, 64, 255, 255,
        255, 255, 252, 197, 169, 208, 255, 255, 255, 255, 253, 135, 104, 64, 255, 255, 255, 255,
        254, 184, 0, 208, 255, 255, 255, 255, 255, 167, 227, 192, 0, 0, 0, 0, 0, 151, 226, 208, 0,
        0, 0, 0, 1, 135, 197, 192, 0, 0, 0, 0, 2, 119, 196, 208, 0, 0, 0, 0, 3, 112, 226, 64, 0, 0,
        0, 0, 4, 96, 225, 80, 0, 0, 0, 0, 5, 53, 20, 192, 0, 0, 0, 0, 6, 64, 195, 80, 0, 0, 0, 0,
        7, 22, 72, 64, 0, 0, 0, 0, 8, 32, 165, 80, 0, 0, 0, 0, 8, 247, 123, 192, 0, 0, 0, 0, 10, 0,
        135, 80, 0, 0, 0, 0, 10, 240, 106, 64, 0, 0, 0, 0, 11, 224, 105, 80, 0, 0, 0, 0, 12, 217,
        134, 192, 0, 0, 0, 0, 13, 192, 75, 80, 0, 0, 0, 0, 14, 185, 104, 192, 0, 0, 0, 0, 15, 178,
        162, 80, 0, 0, 0, 0, 16, 125, 155, 64, 0, 0, 0, 0, 17, 81, 234, 208, 0, 0, 0, 0, 18, 102,
        183, 192, 0, 0, 0, 0, 19, 49, 204, 208, 0, 0, 0, 0, 20, 70, 153, 192, 0, 0, 0, 0, 21, 91,
        130, 208, 0, 0, 0, 0, 22, 38, 123, 192, 0, 0, 0, 0, 23, 59, 100, 208, 0, 0, 0, 0, 24, 6,
        93, 192, 0, 0, 0, 0, 25, 27, 70, 208, 0, 0, 0, 0, 25, 230, 63, 192, 0, 0, 0, 0, 26, 251,
        40, 208, 0, 0, 0, 0, 27, 207, 92, 64, 0, 0, 0, 0, 28, 219, 10, 208, 0, 0, 0, 0, 29, 175,
        62, 64, 0, 0, 0, 0, 30, 122, 83, 80, 0, 0, 0, 0, 31, 143, 32, 64, 0, 0, 0, 0, 32, 90, 53,
        80, 0, 0, 0, 0, 33, 111, 2, 64, 0, 0, 0, 0, 34, 67, 81, 208, 0, 0, 0, 0, 35, 78, 228, 64,
        0, 0, 0, 0, 36, 35, 51, 208, 0, 0, 0, 0, 37, 46, 198, 64, 0, 0, 0, 0, 38, 21, 138, 208, 0,
        0, 0, 0, 39, 23, 226, 192, 0, 0, 0, 0, 39, 254, 167, 80, 0, 0, 0, 0, 40, 247, 210, 208, 0,
        0, 0, 0, 41, 222, 137, 80, 0, 0, 0, 0, 42, 215, 180, 208, 0, 0, 0, 0, 43, 190, 107, 80, 0,
        0, 0, 0, 44, 183, 150, 208, 0, 0, 0, 0, 45, 158, 77, 80, 0, 0, 0, 0, 46, 151, 120, 208, 0,
        0, 0, 0, 47, 126, 47, 80, 0, 0, 0, 0, 48, 119, 90, 208, 0, 0, 0, 0, 49, 103, 75, 208, 0, 0,
        0, 0, 50, 87, 60, 208, 0, 0, 0, 0, 51, 71, 45, 208, 0, 0, 0, 0, 52, 64, 89, 80, 0, 0, 0, 0,
        53, 29, 213, 80, 0, 0, 0, 0, 54, 50, 176, 80, 0, 0, 0, 0, 54, 253, 183, 80, 0, 0, 0, 0, 56,
        27, 204, 208, 0, 0, 0, 0, 56, 230, 211, 208, 0, 0, 0, 0, 57, 251, 174, 208, 0, 0, 0, 0, 58,
        198, 181, 208, 0, 0, 0, 0, 59, 219, 144, 208, 0, 0, 0, 0, 60, 175, 210, 80, 0, 0, 0, 0, 61,
        187, 114, 208, 0, 0, 0, 0, 62, 143, 180, 80, 0, 0, 0, 0, 63, 155, 84, 208, 0, 0, 0, 0, 64,
        102, 91, 208, 0, 0, 0, 0, 69, 68, 53, 80, 0, 0, 0, 0, 69, 243, 140, 208, 0, 0, 0, 0, 71,
        36, 23, 80, 0, 0, 0, 0, 71, 220, 169, 80, 0, 0, 0, 0, 73, 3, 249, 80, 0, 0, 0, 0, 73, 179,
        80, 208, 0, 0, 0, 0, 74, 227, 219, 80, 0, 0, 0, 0, 75, 156, 109, 80, 0, 0, 0, 0, 76, 204,
        247, 208, 0, 0, 0, 0, 77, 133, 137, 208, 0, 0, 0, 0, 78, 191, 78, 208, 0, 0, 0, 0, 79, 119,
        224, 208, 0, 0, 0, 0, 80, 149, 246, 80, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 255,
        255, 178, 200, 0, 0, 255, 255, 178, 192, 0, 4, 255, 255, 199, 192, 1, 8, 255, 255, 185,
        176, 0, 12, 76, 77, 84, 0, 72, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 10, 67, 83, 84, 53,
        67, 68, 84, 44, 77, 51, 46, 50, 46, 48, 47, 48, 44, 77, 49, 49, 46, 49, 46, 48, 47, 49, 10,
    ];
    pub(crate) const EET: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        39, 0, 0, 0, 2, 0, 0, 0, 9, 0, 0, 0, 0, 13, 164, 99, 144, 0, 0, 0, 0, 14, 139, 26, 16, 0,
        0, 0, 0, 15, 132, 69, 144, 0, 0, 0, 0, 16, 116, 54, 144, 0, 0, 0, 0, 17, 100, 39, 144, 0,
        0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0,
        0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0,
        0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0,
        0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0,
        0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0,
        0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0,
        35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12,
        24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37,
        144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248,
        144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132,
        203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93,
        217, 16, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 28, 32, 0, 5, 0, 0, 42, 48, 1, 0, 69, 69, 83, 84,
        0, 69, 69, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47,
        51, 44, 77, 49, 48, 46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const EGYPT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        127, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 125, 189, 77, 171, 255, 255, 255, 255,
        200, 147, 180, 224, 255, 255, 255, 255, 200, 250, 123, 208, 255, 255, 255, 255, 201, 252,
        239, 224, 255, 255, 255, 255, 202, 199, 232, 208, 255, 255, 255, 255, 203, 203, 174, 96,
        255, 255, 255, 255, 204, 223, 41, 208, 255, 255, 255, 255, 205, 172, 225, 224, 255, 255,
        255, 255, 206, 198, 244, 208, 255, 255, 255, 255, 207, 143, 102, 224, 255, 255, 255, 255,
        208, 169, 121, 208, 255, 255, 255, 255, 209, 132, 96, 224, 255, 255, 255, 255, 210, 138,
        173, 80, 255, 255, 255, 255, 232, 54, 99, 96, 255, 255, 255, 255, 232, 244, 45, 80, 255,
        255, 255, 255, 234, 11, 185, 96, 255, 255, 255, 255, 234, 213, 96, 208, 255, 255, 255, 255,
        235, 236, 250, 240, 255, 255, 255, 255, 236, 181, 109, 0, 255, 255, 255, 255, 237, 207,
        127, 240, 255, 255, 255, 255, 238, 151, 242, 0, 255, 255, 255, 255, 239, 176, 179, 112,
        255, 255, 255, 255, 240, 121, 37, 128, 255, 255, 255, 255, 241, 145, 230, 240, 255, 255,
        255, 255, 242, 90, 89, 0, 255, 255, 255, 255, 243, 115, 26, 112, 255, 255, 255, 255, 244,
        59, 140, 128, 255, 255, 255, 255, 245, 85, 159, 112, 255, 255, 255, 255, 246, 30, 17, 128,
        255, 255, 255, 255, 247, 54, 210, 240, 255, 255, 255, 255, 247, 255, 69, 0, 255, 255, 255,
        255, 249, 24, 6, 112, 255, 255, 255, 255, 249, 225, 202, 0, 255, 255, 255, 255, 250, 249,
        57, 240, 255, 255, 255, 255, 251, 194, 253, 128, 255, 255, 255, 255, 252, 219, 190, 240,
        255, 255, 255, 255, 253, 165, 130, 128, 255, 255, 255, 255, 254, 188, 242, 112, 255, 255,
        255, 255, 255, 134, 182, 0, 0, 0, 0, 0, 0, 158, 37, 240, 0, 0, 0, 0, 1, 103, 233, 128, 0,
        0, 0, 0, 2, 127, 89, 112, 0, 0, 0, 0, 3, 73, 29, 0, 0, 0, 0, 0, 4, 97, 222, 112, 0, 0, 0,
        0, 5, 43, 162, 0, 0, 0, 0, 0, 6, 67, 17, 240, 0, 0, 0, 0, 7, 12, 213, 128, 0, 0, 0, 0, 8,
        36, 69, 112, 0, 0, 0, 0, 8, 238, 9, 0, 0, 0, 0, 0, 10, 5, 120, 240, 0, 0, 0, 0, 10, 207,
        60, 128, 0, 0, 0, 0, 11, 231, 253, 240, 0, 0, 0, 0, 12, 177, 193, 128, 0, 0, 0, 0, 13, 201,
        49, 112, 0, 0, 0, 0, 14, 146, 245, 0, 0, 0, 0, 0, 15, 170, 100, 240, 0, 0, 0, 0, 16, 116,
        40, 128, 0, 0, 0, 0, 17, 139, 152, 112, 0, 0, 0, 0, 18, 85, 92, 0, 0, 0, 0, 0, 19, 110, 29,
        112, 0, 0, 0, 0, 20, 55, 225, 0, 0, 0, 0, 0, 21, 79, 80, 240, 0, 0, 0, 0, 22, 25, 20, 128,
        0, 0, 0, 0, 23, 160, 147, 240, 0, 0, 0, 0, 23, 250, 72, 0, 0, 0, 0, 0, 25, 112, 163, 240,
        0, 0, 0, 0, 25, 219, 123, 128, 0, 0, 0, 0, 26, 244, 60, 240, 0, 0, 0, 0, 27, 190, 0, 128,
        0, 0, 0, 0, 28, 213, 112, 112, 0, 0, 0, 0, 29, 159, 52, 0, 0, 0, 0, 0, 30, 182, 163, 240,
        0, 0, 0, 0, 31, 128, 103, 128, 0, 0, 0, 0, 32, 151, 215, 112, 0, 0, 0, 0, 33, 97, 155, 0,
        0, 0, 0, 0, 34, 122, 92, 112, 0, 0, 0, 0, 35, 68, 32, 0, 0, 0, 0, 0, 36, 98, 39, 112, 0, 0,
        0, 0, 37, 37, 83, 128, 0, 0, 0, 0, 38, 60, 195, 112, 0, 0, 0, 0, 39, 6, 135, 0, 0, 0, 0, 0,
        40, 29, 246, 240, 0, 0, 0, 0, 40, 231, 186, 128, 0, 0, 0, 0, 42, 0, 123, 240, 0, 0, 0, 0,
        42, 202, 63, 128, 0, 0, 0, 0, 43, 225, 175, 112, 0, 0, 0, 0, 44, 171, 115, 0, 0, 0, 0, 0,
        45, 194, 226, 240, 0, 0, 0, 0, 46, 140, 166, 128, 0, 0, 0, 0, 47, 160, 19, 224, 0, 0, 0, 0,
        48, 107, 12, 208, 0, 0, 0, 0, 49, 127, 245, 224, 0, 0, 0, 0, 50, 74, 238, 208, 0, 0, 0, 0,
        51, 95, 215, 224, 0, 0, 0, 0, 52, 42, 208, 208, 0, 0, 0, 0, 53, 63, 185, 224, 0, 0, 0, 0,
        54, 10, 178, 208, 0, 0, 0, 0, 55, 40, 214, 96, 0, 0, 0, 0, 55, 243, 207, 80, 0, 0, 0, 0,
        57, 8, 184, 96, 0, 0, 0, 0, 57, 211, 177, 80, 0, 0, 0, 0, 58, 232, 154, 96, 0, 0, 0, 0, 59,
        179, 147, 80, 0, 0, 0, 0, 60, 200, 124, 96, 0, 0, 0, 0, 61, 147, 117, 80, 0, 0, 0, 0, 62,
        168, 94, 96, 0, 0, 0, 0, 63, 115, 87, 80, 0, 0, 0, 0, 64, 145, 122, 224, 0, 0, 0, 0, 65,
        92, 115, 208, 0, 0, 0, 0, 66, 113, 92, 224, 0, 0, 0, 0, 67, 60, 85, 208, 0, 0, 0, 0, 68,
        81, 62, 224, 0, 0, 0, 0, 69, 18, 253, 80, 0, 0, 0, 0, 70, 49, 32, 224, 0, 0, 0, 0, 70, 224,
        106, 80, 0, 0, 0, 0, 72, 17, 2, 224, 0, 0, 0, 0, 72, 183, 17, 208, 0, 0, 0, 0, 73, 240,
        228, 224, 0, 0, 0, 0, 74, 141, 185, 80, 0, 0, 0, 0, 75, 218, 1, 96, 0, 0, 0, 0, 76, 97,
        189, 208, 0, 0, 0, 0, 76, 137, 88, 224, 0, 0, 0, 0, 76, 164, 250, 80, 0, 0, 0, 0, 83, 117,
        56, 224, 0, 0, 0, 0, 83, 172, 137, 208, 0, 0, 0, 0, 83, 218, 188, 96, 0, 0, 0, 0, 84, 36,
        130, 80, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 29, 85, 0, 0, 0, 0, 42, 48, 1, 4, 0, 0, 28, 32, 0, 9,
        76, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 10, 69, 69, 84, 45, 50, 10,
    ];
    pub(crate) const EIRE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        145, 0, 0, 0, 8, 0, 0, 0, 20, 255, 255, 255, 255, 87, 209, 10, 220, 255, 255, 255, 255,
        155, 38, 179, 145, 255, 255, 255, 255, 155, 214, 11, 17, 255, 255, 255, 255, 156, 207, 48,
        160, 255, 255, 255, 255, 157, 164, 195, 160, 255, 255, 255, 255, 158, 156, 157, 160, 255,
        255, 255, 255, 159, 151, 26, 160, 255, 255, 255, 255, 160, 133, 186, 32, 255, 255, 255,
        255, 161, 118, 252, 160, 255, 255, 255, 255, 162, 101, 156, 32, 255, 255, 255, 255, 163,
        123, 200, 160, 255, 255, 255, 255, 164, 78, 184, 160, 255, 255, 255, 255, 165, 63, 251, 32,
        255, 255, 255, 255, 166, 37, 96, 32, 255, 255, 255, 255, 167, 39, 198, 32, 255, 255, 255,
        255, 168, 42, 44, 32, 255, 255, 255, 255, 168, 235, 248, 160, 255, 255, 255, 255, 170, 0,
        211, 160, 255, 255, 255, 255, 170, 213, 21, 32, 255, 255, 255, 255, 171, 233, 240, 32, 255,
        255, 255, 255, 172, 199, 108, 32, 255, 255, 255, 255, 173, 201, 210, 32, 255, 255, 255,
        255, 174, 167, 78, 32, 255, 255, 255, 255, 175, 160, 121, 160, 255, 255, 255, 255, 176,
        135, 48, 32, 255, 255, 255, 255, 177, 146, 208, 160, 255, 255, 255, 255, 178, 112, 76, 160,
        255, 255, 255, 255, 179, 114, 178, 160, 255, 255, 255, 255, 180, 80, 46, 160, 255, 255,
        255, 255, 181, 73, 90, 32, 255, 255, 255, 255, 182, 48, 16, 160, 255, 255, 255, 255, 183,
        50, 118, 160, 255, 255, 255, 255, 184, 15, 242, 160, 255, 255, 255, 255, 185, 18, 88, 160,
        255, 255, 255, 255, 185, 239, 212, 160, 255, 255, 255, 255, 186, 233, 0, 32, 255, 255, 255,
        255, 187, 216, 241, 32, 255, 255, 255, 255, 188, 219, 87, 32, 255, 255, 255, 255, 189, 184,
        211, 32, 255, 255, 255, 255, 190, 177, 254, 160, 255, 255, 255, 255, 191, 152, 181, 32,
        255, 255, 255, 255, 192, 155, 27, 32, 255, 255, 255, 255, 193, 120, 151, 32, 255, 255, 255,
        255, 194, 122, 253, 32, 255, 255, 255, 255, 195, 88, 121, 32, 255, 255, 255, 255, 196, 81,
        164, 160, 255, 255, 255, 255, 197, 56, 91, 32, 255, 255, 255, 255, 198, 58, 193, 32, 255,
        255, 255, 255, 199, 88, 214, 160, 255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255,
        212, 73, 224, 32, 255, 255, 255, 255, 213, 30, 33, 160, 255, 255, 255, 255, 214, 78, 172,
        32, 255, 255, 255, 255, 215, 44, 40, 32, 255, 255, 255, 255, 216, 46, 142, 32, 255, 255,
        255, 255, 216, 249, 149, 32, 255, 255, 255, 255, 218, 14, 112, 32, 255, 255, 255, 255, 218,
        235, 236, 32, 255, 255, 255, 255, 219, 229, 23, 160, 255, 255, 255, 255, 220, 203, 206, 32,
        255, 255, 255, 255, 221, 196, 249, 160, 255, 255, 255, 255, 222, 180, 234, 160, 255, 255,
        255, 255, 223, 174, 22, 32, 255, 255, 255, 255, 224, 148, 204, 160, 255, 255, 255, 255,
        225, 114, 72, 160, 255, 255, 255, 255, 226, 107, 116, 32, 255, 255, 255, 255, 227, 82, 42,
        160, 255, 255, 255, 255, 228, 84, 144, 160, 255, 255, 255, 255, 229, 50, 12, 160, 255, 255,
        255, 255, 230, 61, 173, 32, 255, 255, 255, 255, 231, 27, 41, 32, 255, 255, 255, 255, 232,
        20, 84, 160, 255, 255, 255, 255, 232, 251, 11, 32, 255, 255, 255, 255, 233, 253, 113, 32,
        255, 255, 255, 255, 234, 218, 237, 32, 255, 255, 255, 255, 235, 221, 83, 32, 255, 255, 255,
        255, 236, 186, 207, 32, 255, 255, 255, 255, 237, 179, 250, 160, 255, 255, 255, 255, 238,
        154, 177, 32, 255, 255, 255, 255, 239, 129, 103, 160, 255, 255, 255, 255, 240, 159, 125,
        32, 255, 255, 255, 255, 241, 97, 73, 160, 255, 255, 255, 255, 242, 127, 95, 32, 255, 255,
        255, 255, 243, 74, 102, 32, 255, 255, 255, 255, 244, 95, 65, 32, 255, 255, 255, 255, 245,
        33, 13, 160, 255, 255, 255, 255, 246, 63, 35, 32, 255, 255, 255, 255, 247, 0, 239, 160,
        255, 255, 255, 255, 248, 31, 5, 32, 255, 255, 255, 255, 248, 224, 209, 160, 255, 255, 255,
        255, 249, 254, 231, 32, 255, 255, 255, 255, 250, 192, 179, 160, 255, 255, 255, 255, 251,
        232, 3, 160, 255, 255, 255, 255, 252, 123, 171, 160, 255, 255, 255, 255, 253, 199, 187,
        112, 0, 0, 0, 0, 3, 112, 198, 32, 0, 0, 0, 0, 4, 41, 88, 32, 0, 0, 0, 0, 5, 80, 168, 32, 0,
        0, 0, 0, 6, 9, 58, 32, 0, 0, 0, 0, 7, 48, 138, 32, 0, 0, 0, 0, 7, 233, 28, 32, 0, 0, 0, 0,
        9, 16, 108, 32, 0, 0, 0, 0, 9, 200, 254, 32, 0, 0, 0, 0, 10, 240, 78, 32, 0, 0, 0, 0, 11,
        178, 26, 160, 0, 0, 0, 0, 12, 208, 48, 32, 0, 0, 0, 0, 13, 145, 252, 160, 0, 0, 0, 0, 14,
        176, 18, 32, 0, 0, 0, 0, 15, 113, 222, 160, 0, 0, 0, 0, 16, 153, 46, 160, 0, 0, 0, 0, 17,
        81, 192, 160, 0, 0, 0, 0, 18, 121, 16, 160, 0, 0, 0, 0, 19, 49, 162, 160, 0, 0, 0, 0, 20,
        88, 242, 160, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 56, 198, 144, 0, 0, 0, 0, 23,
        3, 205, 144, 0, 0, 0, 0, 24, 24, 168, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25,
        248, 138, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 225, 167, 16, 0, 0, 0, 0, 28,
        172, 174, 16, 0, 0, 0, 0, 29, 193, 137, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31,
        161, 107, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 129, 77, 16, 0, 0, 0, 0, 34,
        76, 84, 16, 0, 0, 0, 0, 35, 97, 47, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 74, 75,
        144, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 42, 45, 144, 0, 0, 0, 0, 39, 245, 52, 144,
        0, 0, 0, 0, 41, 10, 15, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 233, 241, 144,
        0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 201, 211, 144, 0, 0, 0, 0, 45, 148, 218,
        144, 0, 0, 0, 0, 46, 169, 181, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 137,
        151, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,
        6, 7, 6, 7, 6, 7, 6, 7, 255, 255, 250, 36, 0, 0, 255, 255, 250, 15, 0, 4, 0, 0, 8, 31, 1,
        8, 0, 0, 14, 16, 1, 12, 0, 0, 0, 0, 0, 16, 0, 0, 14, 16, 1, 8, 0, 0, 0, 0, 1, 16, 0, 0, 14,
        16, 0, 8, 76, 77, 84, 0, 68, 77, 84, 0, 73, 83, 84, 0, 66, 83, 84, 0, 71, 77, 84, 0, 10,
        73, 83, 84, 45, 49, 71, 77, 84, 48, 44, 77, 49, 48, 46, 53, 46, 48, 44, 77, 51, 46, 53, 46,
        48, 47, 49, 10,
    ];
    pub(crate) const EST: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 185, 176, 0, 0, 69, 83, 84, 0, 10, 69, 83, 84, 53, 10,
    ];
    pub(crate) const EST_5_EDT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        88, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 158, 166, 30, 112, 255, 255, 255, 255,
        159, 186, 235, 96, 255, 255, 255, 255, 160, 134, 0, 112, 255, 255, 255, 255, 161, 154, 205,
        96, 255, 255, 255, 255, 203, 136, 240, 112, 255, 255, 255, 255, 210, 35, 244, 112, 255,
        255, 255, 255, 210, 96, 251, 224, 255, 255, 255, 255, 250, 248, 88, 240, 255, 255, 255,
        255, 251, 232, 59, 224, 255, 255, 255, 255, 252, 216, 58, 240, 255, 255, 255, 255, 253,
        200, 29, 224, 255, 255, 255, 255, 254, 184, 28, 240, 255, 255, 255, 255, 255, 167, 255,
        224, 0, 0, 0, 0, 0, 151, 254, 240, 0, 0, 0, 0, 1, 135, 225, 224, 0, 0, 0, 0, 2, 119, 224,
        240, 0, 0, 0, 0, 3, 112, 254, 96, 0, 0, 0, 0, 4, 96, 253, 112, 0, 0, 0, 0, 5, 80, 224, 96,
        0, 0, 0, 0, 6, 64, 223, 112, 0, 0, 0, 0, 7, 48, 194, 96, 0, 0, 0, 0, 7, 141, 25, 112, 0, 0,
        0, 0, 9, 16, 164, 96, 0, 0, 0, 0, 9, 173, 148, 240, 0, 0, 0, 0, 10, 240, 134, 96, 0, 0, 0,
        0, 11, 224, 133, 112, 0, 0, 0, 0, 12, 217, 162, 224, 0, 0, 0, 0, 13, 192, 103, 112, 0, 0,
        0, 0, 14, 185, 132, 224, 0, 0, 0, 0, 15, 169, 131, 240, 0, 0, 0, 0, 16, 153, 102, 224, 0,
        0, 0, 0, 17, 137, 101, 240, 0, 0, 0, 0, 18, 121, 72, 224, 0, 0, 0, 0, 19, 105, 71, 240, 0,
        0, 0, 0, 20, 89, 42, 224, 0, 0, 0, 0, 21, 73, 41, 240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0,
        0, 0, 23, 41, 11, 240, 0, 0, 0, 0, 24, 34, 41, 96, 0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0,
        26, 2, 11, 96, 0, 0, 0, 0, 26, 242, 10, 112, 0, 0, 0, 0, 27, 225, 237, 96, 0, 0, 0, 0, 28,
        209, 236, 112, 0, 0, 0, 0, 29, 193, 207, 96, 0, 0, 0, 0, 30, 177, 206, 112, 0, 0, 0, 0, 31,
        161, 177, 96, 0, 0, 0, 0, 32, 118, 0, 240, 0, 0, 0, 0, 33, 129, 147, 96, 0, 0, 0, 0, 34,
        85, 226, 240, 0, 0, 0, 0, 35, 106, 175, 224, 0, 0, 0, 0, 36, 53, 196, 240, 0, 0, 0, 0, 37,
        74, 145, 224, 0, 0, 0, 0, 38, 21, 166, 240, 0, 0, 0, 0, 39, 42, 115, 224, 0, 0, 0, 0, 39,
        254, 195, 112, 0, 0, 0, 0, 41, 10, 85, 224, 0, 0, 0, 0, 41, 222, 165, 112, 0, 0, 0, 0, 42,
        234, 55, 224, 0, 0, 0, 0, 43, 190, 135, 112, 0, 0, 0, 0, 44, 211, 84, 96, 0, 0, 0, 0, 45,
        158, 105, 112, 0, 0, 0, 0, 46, 179, 54, 96, 0, 0, 0, 0, 47, 126, 75, 112, 0, 0, 0, 0, 48,
        147, 24, 96, 0, 0, 0, 0, 49, 103, 103, 240, 0, 0, 0, 0, 50, 114, 250, 96, 0, 0, 0, 0, 51,
        71, 73, 240, 0, 0, 0, 0, 52, 82, 220, 96, 0, 0, 0, 0, 53, 39, 43, 240, 0, 0, 0, 0, 54, 50,
        190, 96, 0, 0, 0, 0, 55, 7, 13, 240, 0, 0, 0, 0, 56, 27, 218, 224, 0, 0, 0, 0, 56, 230,
        239, 240, 0, 0, 0, 0, 57, 251, 188, 224, 0, 0, 0, 0, 58, 198, 209, 240, 0, 0, 0, 0, 59,
        219, 158, 224, 0, 0, 0, 0, 60, 175, 238, 112, 0, 0, 0, 0, 61, 187, 128, 224, 0, 0, 0, 0,
        62, 143, 208, 112, 0, 0, 0, 0, 63, 155, 98, 224, 0, 0, 0, 0, 64, 111, 178, 112, 0, 0, 0, 0,
        65, 132, 127, 96, 0, 0, 0, 0, 66, 79, 148, 112, 0, 0, 0, 0, 67, 100, 97, 96, 0, 0, 0, 0,
        68, 47, 118, 112, 0, 0, 0, 0, 69, 68, 67, 96, 0, 0, 0, 0, 69, 243, 168, 240, 1, 0, 1, 0, 2,
        3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 255, 255, 185, 176, 0,
        4, 255, 255, 199, 192, 1, 0, 255, 255, 199, 192, 1, 8, 255, 255, 199, 192, 1, 12, 69, 68,
        84, 0, 69, 83, 84, 0, 69, 87, 84, 0, 69, 80, 84, 0, 10, 69, 83, 84, 53, 69, 68, 84, 44, 77,
        51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_1: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 14, 16, 0, 0, 43, 48, 49, 0, 10, 60, 43, 48, 49, 62, 45,
        49, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_10: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 140, 160, 0, 0, 43, 49, 48, 0, 10, 60, 43, 49, 48, 62, 45,
        49, 48, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_11: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 154, 176, 0, 0, 43, 49, 49, 0, 10, 60, 43, 49, 49, 62, 45,
        49, 49, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_12: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 168, 192, 0, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50, 62, 45,
        49, 50, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_13: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 182, 208, 0, 0, 43, 49, 51, 0, 10, 60, 43, 49, 51, 62, 45,
        49, 51, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_14: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 196, 224, 0, 0, 43, 49, 52, 0, 10, 60, 43, 49, 52, 62, 45,
        49, 52, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_2: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 28, 32, 0, 0, 43, 48, 50, 0, 10, 60, 43, 48, 50, 62, 45,
        50, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_3: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 42, 48, 0, 0, 43, 48, 51, 0, 10, 60, 43, 48, 51, 62, 45,
        51, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_4: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 56, 64, 0, 0, 43, 48, 52, 0, 10, 60, 43, 48, 52, 62, 45,
        52, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_5: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 70, 80, 0, 0, 43, 48, 53, 0, 10, 60, 43, 48, 53, 62, 45,
        53, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_6: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 84, 96, 0, 0, 43, 48, 54, 0, 10, 60, 43, 48, 54, 62, 45,
        54, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_7: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 98, 112, 0, 0, 43, 48, 55, 0, 10, 60, 43, 48, 55, 62, 45,
        55, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_8: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 112, 128, 0, 0, 43, 48, 56, 0, 10, 60, 43, 48, 56, 62, 45,
        56, 10,
    ];
    pub(crate) const ETC_GMT_MINUS_9: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 126, 144, 0, 0, 43, 48, 57, 0, 10, 60, 43, 48, 57, 62, 45,
        57, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_10: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 115, 96, 0, 0, 45, 49, 48, 0, 10, 60, 45, 49, 48, 62,
        49, 48, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_11: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 101, 80, 0, 0, 45, 49, 49, 0, 10, 60, 45, 49, 49, 62,
        49, 49, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_12: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 87, 64, 0, 0, 45, 49, 50, 0, 10, 60, 45, 49, 50, 62,
        49, 50, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_2: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 227, 224, 0, 0, 45, 48, 50, 0, 10, 60, 45, 48, 50, 62,
        50, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_3: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 213, 208, 0, 0, 45, 48, 51, 0, 10, 60, 45, 48, 51, 62,
        51, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_4: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 199, 192, 0, 0, 45, 48, 52, 0, 10, 60, 45, 48, 52, 62,
        52, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_5: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 185, 176, 0, 0, 45, 48, 53, 0, 10, 60, 45, 48, 53, 62,
        53, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_6: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 171, 160, 0, 0, 45, 48, 54, 0, 10, 60, 45, 48, 54, 62,
        54, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_7: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 157, 144, 0, 0, 45, 48, 55, 0, 10, 60, 45, 48, 55, 62,
        55, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_8: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 143, 128, 0, 0, 45, 48, 56, 0, 10, 60, 45, 48, 56, 62,
        56, 10,
    ];
    pub(crate) const ETC_GMT_PLUS_9: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 129, 112, 0, 0, 45, 48, 57, 0, 10, 60, 45, 48, 57, 62,
        57, 10,
    ];
    pub(crate) const EUROPE_AMSTERDAM: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        97, 0, 0, 0, 7, 0, 0, 0, 33, 255, 255, 255, 255, 2, 18, 81, 108, 255, 255, 255, 255, 155,
        12, 46, 236, 255, 255, 255, 255, 155, 213, 214, 92, 255, 255, 255, 255, 156, 217, 184, 12,
        255, 255, 255, 255, 157, 164, 191, 12, 255, 255, 255, 255, 158, 167, 37, 12, 255, 255, 255,
        255, 159, 151, 22, 12, 255, 255, 255, 255, 160, 144, 65, 140, 255, 255, 255, 255, 161, 118,
        248, 12, 255, 255, 255, 255, 162, 112, 35, 140, 255, 255, 255, 255, 163, 86, 218, 12, 255,
        255, 255, 255, 164, 80, 5, 140, 255, 255, 255, 255, 165, 54, 188, 12, 255, 255, 255, 255,
        166, 37, 91, 140, 255, 255, 255, 255, 167, 39, 193, 140, 255, 255, 255, 255, 168, 94, 227,
        140, 255, 255, 255, 255, 169, 7, 163, 140, 255, 255, 255, 255, 169, 238, 90, 12, 255, 255,
        255, 255, 170, 231, 133, 140, 255, 255, 255, 255, 172, 39, 226, 12, 255, 255, 255, 255,
        172, 199, 103, 140, 255, 255, 255, 255, 173, 237, 102, 12, 255, 255, 255, 255, 174, 167,
        73, 140, 255, 255, 255, 255, 175, 206, 153, 140, 255, 255, 255, 255, 176, 135, 43, 140,
        255, 255, 255, 255, 177, 177, 30, 140, 255, 255, 255, 255, 178, 112, 72, 12, 255, 255, 255,
        255, 179, 146, 82, 12, 255, 255, 255, 255, 180, 80, 42, 12, 255, 255, 255, 255, 181, 115,
        133, 140, 255, 255, 255, 255, 182, 48, 12, 12, 255, 255, 255, 255, 183, 84, 185, 12, 255,
        255, 255, 255, 184, 15, 238, 12, 255, 255, 255, 255, 185, 64, 120, 140, 255, 255, 255, 255,
        185, 239, 208, 12, 255, 255, 255, 255, 187, 24, 113, 140, 255, 255, 255, 255, 187, 216,
        236, 140, 255, 255, 255, 255, 188, 249, 165, 12, 255, 255, 255, 255, 189, 184, 206, 140,
        255, 255, 255, 255, 190, 218, 216, 140, 255, 255, 255, 255, 191, 152, 176, 140, 255, 255,
        255, 255, 192, 189, 93, 140, 255, 255, 255, 255, 193, 120, 146, 140, 255, 255, 255, 255,
        194, 167, 203, 140, 255, 255, 255, 255, 194, 220, 93, 92, 255, 255, 255, 255, 195, 88, 116,
        112, 255, 255, 255, 255, 196, 127, 196, 112, 255, 255, 255, 255, 197, 56, 86, 112, 255,
        255, 255, 255, 198, 96, 247, 240, 255, 255, 255, 255, 199, 33, 114, 240, 255, 255, 255,
        255, 200, 68, 178, 80, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169,
        23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255,
        255, 255, 255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255,
        210, 78, 64, 144, 0, 0, 0, 0, 13, 164, 99, 144, 0, 0, 0, 0, 14, 139, 26, 16, 0, 0, 0, 0,
        15, 132, 69, 144, 0, 0, 0, 0, 16, 116, 54, 144, 0, 0, 0, 0, 17, 100, 39, 144, 0, 0, 0, 0,
        18, 84, 24, 144, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21,
        35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23,
        243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0,
        26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0,
        29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0,
        32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35,
        60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24,
        16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144,
        0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144,
        0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203,
        144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217,
        16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 4, 3, 4, 3, 4, 3, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 6, 5, 6, 5, 6, 5, 6, 0, 0, 4, 148, 0, 0, 0, 0, 18, 164, 1, 4, 0, 0, 4, 148, 0, 8, 0, 0,
        4, 176, 0, 12, 0, 0, 18, 192, 1, 18, 0, 0, 14, 16, 0, 24, 0, 0, 28, 32, 1, 28, 76, 77, 84,
        0, 78, 83, 84, 0, 65, 77, 84, 0, 43, 48, 48, 50, 48, 0, 43, 48, 49, 50, 48, 0, 67, 69, 84,
        0, 67, 69, 83, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48,
        44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_ANDORRA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        25, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 126, 54, 179, 148, 255, 255, 255, 255,
        212, 65, 219, 0, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0,
        30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0,
        33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44,
        54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144,
        0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144,
        0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144,
        0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188,
        144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0, 1, 108, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
        14, 16, 0, 8, 0, 0, 28, 32, 1, 12, 76, 77, 84, 0, 87, 69, 84, 0, 67, 69, 84, 0, 67, 69, 83,
        84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48,
        46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_ASTRAKHAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 170, 24, 69, 116, 255, 255, 255, 255, 181,
        164, 11, 80, 0, 0, 0, 0, 21, 39, 153, 192, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0, 23, 8,
        205, 64, 0, 0, 0, 0, 23, 250, 1, 176, 0, 0, 0, 0, 24, 234, 0, 192, 0, 0, 0, 0, 25, 219, 53,
        48, 0, 0, 0, 0, 26, 204, 133, 192, 0, 0, 0, 0, 27, 188, 146, 224, 0, 0, 0, 0, 28, 172, 131,
        224, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 86,
        224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0, 33, 92, 56, 224, 0, 0, 0, 0, 34, 76, 41,
        224, 0, 0, 0, 0, 35, 60, 26, 224, 0, 0, 0, 0, 36, 44, 11, 224, 0, 0, 0, 0, 37, 28, 10, 240,
        0, 0, 0, 0, 38, 11, 251, 240, 0, 0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 245, 24, 112, 0,
        0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 196, 235, 112, 0, 0, 0, 0, 43, 180, 220, 112, 0,
        0, 0, 0, 44, 164, 205, 112, 0, 0, 0, 0, 45, 148, 190, 112, 0, 0, 0, 0, 46, 132, 175, 112,
        0, 0, 0, 0, 47, 116, 160, 112, 0, 0, 0, 0, 48, 100, 145, 112, 0, 0, 0, 0, 49, 93, 188, 240,
        0, 0, 0, 0, 50, 114, 151, 240, 0, 0, 0, 0, 51, 61, 158, 240, 0, 0, 0, 0, 52, 82, 121, 240,
        0, 0, 0, 0, 53, 29, 128, 240, 0, 0, 0, 0, 54, 50, 91, 240, 0, 0, 0, 0, 54, 253, 98, 240, 0,
        0, 0, 0, 56, 27, 120, 112, 0, 0, 0, 0, 56, 221, 68, 240, 0, 0, 0, 0, 57, 251, 90, 112, 0,
        0, 0, 0, 58, 189, 38, 240, 0, 0, 0, 0, 59, 219, 60, 112, 0, 0, 0, 0, 60, 166, 67, 112, 0,
        0, 0, 0, 61, 187, 30, 112, 0, 0, 0, 0, 62, 134, 37, 112, 0, 0, 0, 0, 63, 155, 0, 112, 0, 0,
        0, 0, 64, 102, 7, 112, 0, 0, 0, 0, 65, 132, 28, 240, 0, 0, 0, 0, 66, 69, 233, 112, 0, 0, 0,
        0, 67, 99, 254, 240, 0, 0, 0, 0, 68, 37, 203, 112, 0, 0, 0, 0, 69, 67, 224, 240, 0, 0, 0,
        0, 70, 5, 173, 112, 0, 0, 0, 0, 71, 35, 194, 240, 0, 0, 0, 0, 71, 238, 201, 240, 0, 0, 0,
        0, 73, 3, 164, 240, 0, 0, 0, 0, 73, 206, 171, 240, 0, 0, 0, 0, 74, 227, 134, 240, 0, 0, 0,
        0, 75, 174, 141, 240, 0, 0, 0, 0, 76, 204, 163, 112, 0, 0, 0, 0, 77, 142, 111, 240, 0, 0,
        0, 0, 84, 76, 29, 96, 0, 0, 0, 0, 86, 247, 20, 112, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 4, 1, 4, 1, 3, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
        4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 3, 1, 3, 0, 0, 45, 12, 0, 0, 0, 0,
        42, 48, 0, 4, 0, 0, 70, 80, 1, 8, 0, 0, 56, 64, 0, 12, 0, 0, 56, 64, 1, 12, 76, 77, 84, 0,
        43, 48, 51, 0, 43, 48, 53, 0, 43, 48, 52, 0, 10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const EUROPE_ATHENS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        55, 0, 0, 0, 6, 0, 0, 0, 26, 255, 255, 255, 255, 116, 63, 152, 68, 255, 255, 255, 255, 155,
        128, 33, 128, 255, 255, 255, 255, 185, 124, 233, 224, 255, 255, 255, 255, 185, 198, 175,
        208, 255, 255, 255, 255, 201, 242, 99, 224, 255, 255, 255, 255, 202, 16, 168, 80, 255, 255,
        255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 170, 76, 240, 255, 255, 255, 255, 206,
        162, 24, 224, 255, 255, 255, 255, 207, 147, 105, 112, 255, 255, 255, 255, 223, 19, 158, 96,
        255, 255, 255, 255, 223, 183, 10, 80, 0, 0, 0, 0, 9, 236, 94, 96, 0, 0, 0, 0, 11, 24, 244,
        96, 0, 0, 0, 0, 11, 205, 174, 0, 0, 0, 0, 0, 12, 189, 159, 0, 0, 0, 0, 0, 13, 164, 85, 128,
        0, 0, 0, 0, 14, 140, 93, 128, 0, 0, 0, 0, 15, 132, 55, 128, 0, 0, 0, 0, 16, 106, 252, 16,
        0, 0, 0, 0, 17, 100, 123, 240, 0, 0, 0, 0, 18, 82, 170, 240, 0, 0, 0, 0, 19, 70, 130, 96,
        0, 0, 0, 0, 20, 51, 194, 80, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0,
        0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0,
        0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0,
        0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0,
        0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0,
        0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0,
        37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39,
        245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42,
        197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45,
        148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0,
        48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 3, 2, 3, 2, 5, 4, 5, 4, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0, 22, 60, 0, 0, 0, 0, 22, 60, 0, 4, 0, 0, 42, 48, 1,
        8, 0, 0, 28, 32, 0, 13, 0, 0, 14, 16, 0, 17, 0, 0, 28, 32, 1, 21, 76, 77, 84, 0, 65, 77,
        84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 10, 69, 69, 84,
        45, 50, 69, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48, 46, 53, 46, 48,
        47, 52, 10,
    ];
    pub(crate) const EUROPE_BELFAST: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        159, 0, 0, 0, 7, 0, 0, 0, 25, 255, 255, 255, 255, 87, 209, 10, 140, 255, 255, 255, 255,
        155, 38, 179, 145, 255, 255, 255, 255, 155, 214, 11, 17, 255, 255, 255, 255, 156, 207, 48,
        160, 255, 255, 255, 255, 157, 164, 195, 160, 255, 255, 255, 255, 158, 156, 157, 160, 255,
        255, 255, 255, 159, 151, 26, 160, 255, 255, 255, 255, 160, 133, 186, 32, 255, 255, 255,
        255, 161, 118, 252, 160, 255, 255, 255, 255, 162, 101, 156, 32, 255, 255, 255, 255, 163,
        123, 200, 160, 255, 255, 255, 255, 164, 78, 184, 160, 255, 255, 255, 255, 165, 63, 251, 32,
        255, 255, 255, 255, 166, 37, 96, 32, 255, 255, 255, 255, 167, 39, 198, 32, 255, 255, 255,
        255, 168, 42, 44, 32, 255, 255, 255, 255, 168, 235, 248, 160, 255, 255, 255, 255, 170, 0,
        211, 160, 255, 255, 255, 255, 170, 213, 21, 32, 255, 255, 255, 255, 171, 233, 240, 32, 255,
        255, 255, 255, 172, 199, 108, 32, 255, 255, 255, 255, 173, 201, 210, 32, 255, 255, 255,
        255, 174, 167, 78, 32, 255, 255, 255, 255, 175, 160, 121, 160, 255, 255, 255, 255, 176,
        135, 48, 32, 255, 255, 255, 255, 177, 146, 208, 160, 255, 255, 255, 255, 178, 112, 76, 160,
        255, 255, 255, 255, 179, 114, 178, 160, 255, 255, 255, 255, 180, 80, 46, 160, 255, 255,
        255, 255, 181, 73, 90, 32, 255, 255, 255, 255, 182, 48, 16, 160, 255, 255, 255, 255, 183,
        50, 118, 160, 255, 255, 255, 255, 184, 15, 242, 160, 255, 255, 255, 255, 185, 18, 88, 160,
        255, 255, 255, 255, 185, 239, 212, 160, 255, 255, 255, 255, 186, 233, 0, 32, 255, 255, 255,
        255, 187, 216, 241, 32, 255, 255, 255, 255, 188, 219, 87, 32, 255, 255, 255, 255, 189, 184,
        211, 32, 255, 255, 255, 255, 190, 177, 254, 160, 255, 255, 255, 255, 191, 152, 181, 32,
        255, 255, 255, 255, 192, 155, 27, 32, 255, 255, 255, 255, 193, 120, 151, 32, 255, 255, 255,
        255, 194, 122, 253, 32, 255, 255, 255, 255, 195, 88, 121, 32, 255, 255, 255, 255, 196, 81,
        164, 160, 255, 255, 255, 255, 197, 56, 91, 32, 255, 255, 255, 255, 198, 58, 193, 32, 255,
        255, 255, 255, 199, 88, 214, 160, 255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255,
        202, 22, 38, 144, 255, 255, 255, 255, 202, 151, 89, 144, 255, 255, 255, 255, 203, 209, 30,
        144, 255, 255, 255, 255, 204, 119, 59, 144, 255, 255, 255, 255, 205, 177, 0, 144, 255, 255,
        255, 255, 206, 96, 88, 16, 255, 255, 255, 255, 207, 144, 226, 144, 255, 255, 255, 255, 208,
        110, 94, 144, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 209, 251, 50, 16,
        255, 255, 255, 255, 210, 105, 254, 32, 255, 255, 255, 255, 211, 99, 41, 160, 255, 255, 255,
        255, 212, 73, 224, 32, 255, 255, 255, 255, 213, 30, 33, 160, 255, 255, 255, 255, 213, 66,
        253, 144, 255, 255, 255, 255, 213, 223, 224, 16, 255, 255, 255, 255, 214, 78, 172, 32, 255,
        255, 255, 255, 214, 254, 3, 160, 255, 255, 255, 255, 216, 46, 142, 32, 255, 255, 255, 255,
        216, 249, 149, 32, 255, 255, 255, 255, 218, 14, 112, 32, 255, 255, 255, 255, 218, 235, 236,
        32, 255, 255, 255, 255, 219, 229, 23, 160, 255, 255, 255, 255, 220, 203, 206, 32, 255, 255,
        255, 255, 221, 196, 249, 160, 255, 255, 255, 255, 222, 180, 234, 160, 255, 255, 255, 255,
        223, 174, 22, 32, 255, 255, 255, 255, 224, 148, 204, 160, 255, 255, 255, 255, 225, 114, 72,
        160, 255, 255, 255, 255, 226, 107, 116, 32, 255, 255, 255, 255, 227, 82, 42, 160, 255, 255,
        255, 255, 228, 84, 144, 160, 255, 255, 255, 255, 229, 50, 12, 160, 255, 255, 255, 255, 230,
        61, 173, 32, 255, 255, 255, 255, 231, 27, 41, 32, 255, 255, 255, 255, 232, 20, 84, 160,
        255, 255, 255, 255, 232, 251, 11, 32, 255, 255, 255, 255, 233, 253, 113, 32, 255, 255, 255,
        255, 234, 218, 237, 32, 255, 255, 255, 255, 235, 221, 83, 32, 255, 255, 255, 255, 236, 186,
        207, 32, 255, 255, 255, 255, 237, 179, 250, 160, 255, 255, 255, 255, 238, 154, 177, 32,
        255, 255, 255, 255, 239, 129, 103, 160, 255, 255, 255, 255, 240, 159, 125, 32, 255, 255,
        255, 255, 241, 97, 73, 160, 255, 255, 255, 255, 242, 127, 95, 32, 255, 255, 255, 255, 243,
        74, 102, 32, 255, 255, 255, 255, 244, 95, 65, 32, 255, 255, 255, 255, 245, 33, 13, 160,
        255, 255, 255, 255, 246, 63, 35, 32, 255, 255, 255, 255, 247, 0, 239, 160, 255, 255, 255,
        255, 248, 31, 5, 32, 255, 255, 255, 255, 248, 224, 209, 160, 255, 255, 255, 255, 249, 254,
        231, 32, 255, 255, 255, 255, 250, 192, 179, 160, 255, 255, 255, 255, 251, 232, 3, 160, 255,
        255, 255, 255, 252, 123, 171, 160, 255, 255, 255, 255, 253, 199, 187, 112, 0, 0, 0, 0, 3,
        112, 198, 32, 0, 0, 0, 0, 4, 41, 88, 32, 0, 0, 0, 0, 5, 80, 168, 32, 0, 0, 0, 0, 6, 9, 58,
        32, 0, 0, 0, 0, 7, 48, 138, 32, 0, 0, 0, 0, 7, 233, 28, 32, 0, 0, 0, 0, 9, 16, 108, 32, 0,
        0, 0, 0, 9, 200, 254, 32, 0, 0, 0, 0, 10, 240, 78, 32, 0, 0, 0, 0, 11, 178, 26, 160, 0, 0,
        0, 0, 12, 208, 48, 32, 0, 0, 0, 0, 13, 145, 252, 160, 0, 0, 0, 0, 14, 176, 18, 32, 0, 0, 0,
        0, 15, 113, 222, 160, 0, 0, 0, 0, 16, 153, 46, 160, 0, 0, 0, 0, 17, 81, 192, 160, 0, 0, 0,
        0, 18, 121, 16, 160, 0, 0, 0, 0, 19, 49, 162, 160, 0, 0, 0, 0, 20, 88, 242, 160, 0, 0, 0,
        0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 56, 198, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0,
        24, 24, 168, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 248, 138, 144, 0, 0, 0, 0,
        26, 195, 145, 144, 0, 0, 0, 0, 27, 225, 167, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0,
        29, 193, 137, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 161, 107, 16, 0, 0, 0, 0,
        32, 108, 114, 16, 0, 0, 0, 0, 33, 129, 77, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35,
        97, 47, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 74, 75, 144, 0, 0, 0, 0, 38, 12,
        24, 16, 0, 0, 0, 0, 39, 42, 45, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 41, 10, 15,
        144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 233, 241, 144, 0, 0, 0, 0, 43, 180, 248,
        144, 0, 0, 0, 0, 44, 201, 211, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 169,
        181, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 137, 151, 144, 0, 0, 0, 0, 49, 93,
        217, 16, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5,
        3, 5, 3, 4, 3, 4, 3, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 6, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 255, 255, 250, 116, 0, 0, 255, 255, 250, 15, 0, 4, 0,
        0, 8, 31, 1, 8, 0, 0, 14, 16, 1, 12, 0, 0, 0, 0, 0, 16, 0, 0, 28, 32, 1, 20, 0, 0, 14, 16,
        0, 12, 76, 77, 84, 0, 68, 77, 84, 0, 73, 83, 84, 0, 66, 83, 84, 0, 71, 77, 84, 0, 66, 68,
        83, 84, 0, 10, 71, 77, 84, 48, 66, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 49, 44, 77, 49,
        48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const EUROPE_BELGRADE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        36, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 94, 60, 240, 72, 255, 255, 255, 255, 202,
        2, 53, 224, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144,
        255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255,
        255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 161, 140, 16, 255, 255, 255, 255, 210, 78,
        64, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195,
        145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156,
        159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108,
        114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69,
        16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0,
        0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0,
        0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0,
        0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0,
        0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 0, 0, 19, 56, 0, 0, 0, 0, 14, 16, 0, 4, 0, 0, 28, 32, 1, 8, 76, 77, 84, 0,
        67, 69, 84, 0, 67, 69, 83, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46,
        53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_BERLIN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        60, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 111, 162, 97, 248, 255, 255, 255, 255,
        155, 12, 23, 96, 255, 255, 255, 255, 155, 213, 218, 240, 255, 255, 255, 255, 156, 217, 174,
        144, 255, 255, 255, 255, 157, 164, 181, 144, 255, 255, 255, 255, 158, 185, 144, 144, 255,
        255, 255, 255, 159, 132, 151, 144, 255, 255, 255, 255, 200, 9, 113, 144, 255, 255, 255,
        255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162,
        67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 130, 37, 16, 255,
        255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 209, 182, 150, 0, 255, 255, 255, 255,
        210, 88, 190, 128, 255, 255, 255, 255, 210, 161, 79, 16, 255, 255, 255, 255, 211, 99, 27,
        144, 255, 255, 255, 255, 212, 75, 35, 144, 255, 255, 255, 255, 213, 57, 209, 32, 255, 255,
        255, 255, 213, 103, 231, 144, 255, 255, 255, 255, 213, 168, 115, 0, 255, 255, 255, 255,
        214, 41, 180, 16, 255, 255, 255, 255, 215, 44, 26, 16, 255, 255, 255, 255, 216, 9, 150, 16,
        255, 255, 255, 255, 217, 2, 193, 144, 255, 255, 255, 255, 217, 233, 120, 16, 0, 0, 0, 0,
        19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22,
        19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24,
        227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0,
        27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0,
        30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0,
        33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44,
        54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144,
        0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144,
        0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144,
        0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188,
        144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 12, 136, 0, 0, 0, 0,
        28, 32, 1, 4, 0, 0, 14, 16, 0, 9, 0, 0, 42, 48, 1, 13, 76, 77, 84, 0, 67, 69, 83, 84, 0,
        67, 69, 84, 0, 67, 69, 77, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46,
        53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_BRATISLAVA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        61, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 30, 73, 146, 248, 255, 255, 255, 255, 108,
        207, 234, 248, 255, 255, 255, 255, 155, 12, 23, 96, 255, 255, 255, 255, 155, 213, 218, 240,
        255, 255, 255, 255, 156, 217, 174, 144, 255, 255, 255, 255, 157, 164, 181, 144, 255, 255,
        255, 255, 158, 185, 144, 144, 255, 255, 255, 255, 159, 132, 151, 144, 255, 255, 255, 255,
        200, 9, 113, 144, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23,
        144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255,
        255, 255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 210,
        98, 7, 16, 255, 255, 255, 255, 211, 128, 28, 144, 255, 255, 255, 255, 212, 73, 210, 16,
        255, 255, 255, 255, 212, 147, 180, 32, 255, 255, 255, 255, 213, 2, 114, 32, 255, 255, 255,
        255, 213, 76, 56, 16, 255, 255, 255, 255, 214, 41, 180, 16, 255, 255, 255, 255, 215, 44,
        26, 16, 255, 255, 255, 255, 216, 9, 150, 16, 255, 255, 255, 255, 217, 1, 112, 16, 255, 255,
        255, 255, 217, 233, 120, 16, 0, 0, 0, 0, 17, 100, 39, 144, 0, 0, 0, 0, 18, 84, 24, 144, 0,
        0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0,
        0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0,
        0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0,
        0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0,
        0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0,
        0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0,
        0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39,
        5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41,
        213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44,
        164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0,
        47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0, 13,
        136, 0, 0, 0, 0, 13, 136, 0, 4, 0, 0, 28, 32, 1, 8, 0, 0, 14, 16, 0, 13, 0, 0, 0, 0, 1, 17,
        76, 77, 84, 0, 80, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 71, 77, 84, 0, 10, 67, 69,
        84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47,
        51, 10,
    ];
    pub(crate) const EUROPE_BRUSSELS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        102, 0, 0, 0, 6, 0, 0, 0, 26, 255, 255, 255, 255, 86, 182, 223, 230, 255, 255, 255, 255,
        109, 232, 200, 0, 255, 255, 255, 255, 152, 68, 73, 128, 255, 255, 255, 255, 155, 12, 37,
        112, 255, 255, 255, 255, 155, 213, 218, 240, 255, 255, 255, 255, 156, 217, 174, 144, 255,
        255, 255, 255, 157, 164, 181, 144, 255, 255, 255, 255, 158, 185, 144, 144, 255, 255, 255,
        255, 159, 132, 151, 144, 255, 255, 255, 255, 159, 206, 248, 48, 255, 255, 255, 255, 160,
        96, 165, 240, 255, 255, 255, 255, 161, 126, 187, 112, 255, 255, 255, 255, 162, 46, 18, 240,
        255, 255, 255, 255, 163, 122, 76, 240, 255, 255, 255, 255, 164, 53, 129, 240, 255, 255,
        255, 255, 165, 94, 35, 112, 255, 255, 255, 255, 166, 37, 53, 240, 255, 255, 255, 255, 167,
        39, 155, 240, 255, 255, 255, 255, 168, 42, 1, 240, 255, 255, 255, 255, 169, 7, 125, 240,
        255, 255, 255, 255, 169, 238, 52, 112, 255, 255, 255, 255, 170, 231, 95, 240, 255, 255,
        255, 255, 171, 215, 80, 240, 255, 255, 255, 255, 172, 199, 65, 240, 255, 255, 255, 255,
        173, 201, 167, 240, 255, 255, 255, 255, 174, 167, 35, 240, 255, 255, 255, 255, 175, 160,
        79, 112, 255, 255, 255, 255, 176, 135, 5, 240, 255, 255, 255, 255, 177, 137, 107, 240, 255,
        255, 255, 255, 178, 112, 76, 160, 255, 255, 255, 255, 179, 114, 178, 160, 255, 255, 255,
        255, 180, 80, 46, 160, 255, 255, 255, 255, 181, 73, 90, 32, 255, 255, 255, 255, 182, 48,
        16, 160, 255, 255, 255, 255, 183, 50, 118, 160, 255, 255, 255, 255, 184, 15, 242, 160, 255,
        255, 255, 255, 184, 255, 227, 160, 255, 255, 255, 255, 185, 239, 212, 160, 255, 255, 255,
        255, 186, 214, 139, 32, 255, 255, 255, 255, 187, 216, 241, 32, 255, 255, 255, 255, 188,
        200, 226, 32, 255, 255, 255, 255, 189, 184, 211, 32, 255, 255, 255, 255, 190, 159, 137,
        160, 255, 255, 255, 255, 191, 152, 181, 32, 255, 255, 255, 255, 192, 155, 27, 32, 255, 255,
        255, 255, 193, 120, 151, 32, 255, 255, 255, 255, 194, 104, 136, 32, 255, 255, 255, 255,
        195, 88, 121, 32, 255, 255, 255, 255, 196, 63, 47, 160, 255, 255, 255, 255, 197, 56, 91,
        32, 255, 255, 255, 255, 198, 58, 193, 32, 255, 255, 255, 255, 199, 88, 214, 160, 255, 255,
        255, 255, 199, 218, 9, 160, 255, 255, 255, 255, 200, 74, 25, 32, 255, 255, 255, 255, 204,
        231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16,
        255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 110, 94, 144, 255, 255, 255,
        255, 209, 114, 22, 16, 255, 255, 255, 255, 210, 78, 64, 144, 255, 255, 255, 255, 211, 145,
        64, 16, 255, 255, 255, 255, 212, 75, 35, 144, 0, 0, 0, 0, 13, 164, 99, 144, 0, 0, 0, 0, 14,
        139, 26, 16, 0, 0, 0, 0, 15, 132, 69, 144, 0, 0, 0, 0, 16, 116, 54, 144, 0, 0, 0, 0, 17,
        100, 39, 144, 0, 0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51,
        250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3,
        205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25,
        211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28,
        172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31,
        124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76,
        84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16,
        0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0,
        0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0,
        0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0,
        0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0,
        0, 0, 0, 49, 93, 217, 16, 1, 2, 3, 4, 3, 4, 3, 4, 3, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
        5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
        5, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 0, 0, 4, 26, 0, 0, 0, 0, 4, 26,
        0, 4, 0, 0, 0, 0, 0, 8, 0, 0, 14, 16, 0, 12, 0, 0, 28, 32, 1, 16, 0, 0, 14, 16, 1, 21, 76,
        77, 84, 0, 66, 77, 84, 0, 87, 69, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 87, 69, 83, 84,
        0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46,
        53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_BUCHAREST: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        55, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 108, 207, 224, 8, 255, 255, 255, 255, 183,
        176, 210, 8, 255, 255, 255, 255, 185, 62, 243, 96, 255, 255, 255, 255, 185, 239, 156, 96,
        255, 255, 255, 255, 186, 223, 141, 96, 255, 255, 255, 255, 187, 207, 126, 96, 255, 255,
        255, 255, 188, 200, 169, 224, 255, 255, 255, 255, 189, 184, 154, 224, 255, 255, 255, 255,
        190, 168, 139, 224, 255, 255, 255, 255, 191, 152, 124, 224, 255, 255, 255, 255, 192, 136,
        109, 224, 255, 255, 255, 255, 193, 120, 94, 224, 255, 255, 255, 255, 194, 104, 79, 224,
        255, 255, 255, 255, 195, 88, 64, 224, 255, 255, 255, 255, 196, 72, 49, 224, 255, 255, 255,
        255, 197, 56, 34, 224, 255, 255, 255, 255, 198, 40, 19, 224, 255, 255, 255, 255, 199, 24,
        4, 224, 0, 0, 0, 0, 17, 173, 209, 96, 0, 0, 0, 0, 18, 83, 224, 80, 0, 0, 0, 0, 19, 77, 11,
        208, 0, 0, 0, 0, 20, 51, 208, 96, 0, 0, 0, 0, 21, 35, 221, 128, 0, 0, 0, 0, 22, 19, 206,
        128, 0, 0, 0, 0, 23, 3, 191, 128, 0, 0, 0, 0, 23, 243, 176, 128, 0, 0, 0, 0, 24, 227, 161,
        128, 0, 0, 0, 0, 25, 211, 146, 128, 0, 0, 0, 0, 26, 195, 131, 128, 0, 0, 0, 0, 27, 188,
        175, 0, 0, 0, 0, 0, 28, 172, 160, 0, 0, 0, 0, 0, 29, 156, 145, 0, 0, 0, 0, 0, 30, 140, 130,
        0, 0, 0, 0, 0, 31, 124, 115, 0, 0, 0, 0, 0, 32, 108, 100, 0, 0, 0, 0, 0, 33, 92, 85, 0, 0,
        0, 0, 0, 34, 76, 70, 0, 0, 0, 0, 0, 35, 60, 55, 0, 0, 0, 0, 0, 36, 44, 40, 0, 0, 0, 0, 0,
        37, 28, 25, 0, 0, 0, 0, 0, 38, 12, 10, 0, 0, 0, 0, 0, 39, 5, 53, 128, 0, 0, 0, 0, 39, 245,
        10, 96, 0, 0, 0, 0, 40, 228, 251, 96, 0, 0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 196,
        221, 96, 0, 0, 0, 0, 43, 180, 206, 96, 0, 0, 0, 0, 44, 164, 191, 96, 0, 0, 0, 0, 45, 148,
        176, 96, 0, 0, 0, 0, 46, 132, 147, 80, 0, 0, 0, 0, 47, 116, 146, 96, 0, 0, 0, 0, 48, 100,
        117, 80, 0, 0, 0, 0, 49, 93, 174, 224, 0, 0, 0, 0, 50, 114, 123, 208, 0, 0, 0, 0, 51, 61,
        187, 16, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0,
        24, 120, 0, 0, 0, 0, 24, 120, 0, 4, 0, 0, 42, 48, 1, 8, 0, 0, 28, 32, 0, 13, 76, 77, 84, 0,
        66, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84,
        44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48, 46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const EUROPE_BUDAPEST: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        68, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 107, 23, 145, 156, 255, 255, 255, 255,
        155, 12, 23, 96, 255, 255, 255, 255, 155, 213, 218, 240, 255, 255, 255, 255, 156, 217, 174,
        144, 255, 255, 255, 255, 157, 164, 181, 144, 255, 255, 255, 255, 158, 185, 144, 144, 255,
        255, 255, 255, 159, 132, 151, 144, 255, 255, 255, 255, 160, 154, 196, 16, 255, 255, 255,
        255, 161, 100, 121, 144, 255, 255, 255, 255, 162, 112, 26, 16, 255, 255, 255, 255, 163, 77,
        150, 16, 255, 255, 255, 255, 201, 243, 181, 96, 255, 255, 255, 255, 204, 231, 75, 16, 255,
        255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255,
        207, 146, 52, 16, 255, 255, 255, 255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 153, 120,
        224, 255, 255, 255, 255, 210, 138, 201, 112, 255, 255, 255, 255, 211, 80, 166, 144, 255,
        255, 255, 255, 212, 75, 21, 128, 255, 255, 255, 255, 213, 57, 195, 16, 255, 255, 255, 255,
        214, 41, 180, 16, 255, 255, 255, 255, 215, 25, 165, 16, 255, 255, 255, 255, 216, 9, 150,
        16, 255, 255, 255, 255, 217, 2, 193, 144, 255, 255, 255, 255, 217, 233, 120, 16, 255, 255,
        255, 255, 226, 162, 168, 240, 255, 255, 255, 255, 227, 81, 242, 96, 255, 255, 255, 255,
        228, 130, 167, 16, 255, 255, 255, 255, 229, 49, 254, 144, 255, 255, 255, 255, 230, 116,
        254, 16, 255, 255, 255, 255, 231, 17, 224, 144, 255, 255, 255, 255, 232, 84, 224, 16, 255,
        255, 255, 255, 232, 241, 194, 144, 0, 0, 0, 0, 19, 77, 39, 240, 0, 0, 0, 0, 20, 51, 222,
        112, 0, 0, 0, 0, 21, 35, 207, 112, 0, 0, 0, 0, 22, 19, 192, 112, 0, 0, 0, 0, 23, 3, 177,
        112, 0, 0, 0, 0, 23, 243, 162, 112, 0, 0, 0, 0, 24, 227, 147, 112, 0, 0, 0, 0, 25, 211,
        132, 112, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172,
        174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124,
        129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84,
        16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0,
        0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0,
        0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0,
        43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0,
        0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0,
        0, 0, 49, 93, 217, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 17, 228, 0, 0, 0, 0, 28, 32, 1, 4, 0, 0,
        14, 16, 0, 9, 76, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 10, 67, 69, 84, 45, 49, 67,
        69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_BUSINGEN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        37, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 36, 240, 234, 128, 255, 255, 255, 255,
        113, 212, 6, 134, 255, 255, 255, 255, 202, 23, 106, 0, 255, 255, 255, 255, 202, 226, 113,
        0, 255, 255, 255, 255, 203, 247, 76, 0, 255, 255, 255, 255, 204, 194, 83, 0, 0, 0, 0, 0,
        21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0,
        23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0,
        0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0,
        0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0,
        0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0,
        35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12,
        24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37,
        144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248,
        144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132,
        203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93,
        217, 16, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0, 8, 0, 0, 0, 0, 0, 6, 250, 0, 4, 0, 0, 28, 32, 1, 8, 0,
        0, 14, 16, 0, 13, 76, 77, 84, 0, 66, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 10, 67,
        69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48,
        47, 51, 10,
    ];
    pub(crate) const EUROPE_CHISINAU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        60, 0, 0, 0, 9, 0, 0, 0, 38, 255, 255, 255, 255, 86, 182, 200, 248, 255, 255, 255, 255,
        158, 107, 159, 12, 255, 255, 255, 255, 183, 176, 210, 8, 255, 255, 255, 255, 185, 62, 243,
        96, 255, 255, 255, 255, 185, 239, 156, 96, 255, 255, 255, 255, 186, 223, 141, 96, 255, 255,
        255, 255, 187, 207, 126, 96, 255, 255, 255, 255, 188, 200, 169, 224, 255, 255, 255, 255,
        189, 184, 154, 224, 255, 255, 255, 255, 190, 168, 139, 224, 255, 255, 255, 255, 191, 152,
        124, 224, 255, 255, 255, 255, 192, 136, 109, 224, 255, 255, 255, 255, 193, 120, 94, 224,
        255, 255, 255, 255, 194, 104, 79, 224, 255, 255, 255, 255, 195, 88, 64, 224, 255, 255, 255,
        255, 196, 72, 49, 224, 255, 255, 255, 255, 197, 56, 34, 224, 255, 255, 255, 255, 198, 40,
        19, 224, 255, 255, 255, 255, 199, 24, 4, 224, 255, 255, 255, 255, 200, 188, 147, 96, 255,
        255, 255, 255, 202, 119, 125, 80, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255,
        205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52,
        16, 255, 255, 255, 255, 208, 78, 144, 96, 0, 0, 0, 0, 21, 39, 167, 208, 0, 0, 0, 0, 22, 24,
        220, 64, 0, 0, 0, 0, 23, 8, 219, 80, 0, 0, 0, 0, 23, 250, 15, 192, 0, 0, 0, 0, 24, 234, 14,
        208, 0, 0, 0, 0, 25, 219, 67, 64, 0, 0, 0, 0, 26, 204, 147, 208, 0, 0, 0, 0, 27, 188, 160,
        240, 0, 0, 0, 0, 28, 172, 145, 240, 0, 0, 0, 0, 29, 156, 130, 240, 0, 0, 0, 0, 30, 140,
        115, 240, 0, 0, 0, 0, 31, 124, 100, 240, 0, 0, 0, 0, 32, 108, 85, 240, 0, 0, 0, 0, 33, 92,
        70, 240, 0, 0, 0, 0, 34, 76, 55, 240, 0, 0, 0, 0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25,
        240, 0, 0, 0, 0, 37, 28, 10, 240, 0, 0, 0, 0, 38, 11, 251, 240, 0, 0, 0, 0, 38, 67, 76,
        224, 0, 0, 0, 0, 39, 5, 53, 128, 0, 0, 0, 0, 39, 245, 38, 128, 0, 0, 0, 0, 40, 229, 23,
        128, 0, 0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 196, 207, 80, 0, 0, 0, 0, 43, 180, 206,
        96, 0, 0, 0, 0, 44, 164, 177, 80, 0, 0, 0, 0, 45, 148, 176, 96, 0, 0, 0, 0, 46, 132, 147,
        80, 0, 0, 0, 0, 47, 116, 146, 96, 0, 0, 0, 0, 48, 100, 117, 80, 0, 0, 0, 0, 49, 93, 174,
        224, 0, 0, 0, 0, 50, 114, 123, 208, 0, 0, 0, 0, 51, 61, 173, 0, 1, 2, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 6, 5, 6, 5, 6, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7,
        8, 7, 8, 7, 8, 7, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0, 0, 27, 8, 0, 0, 0, 0, 26,
        244, 0, 4, 0, 0, 24, 120, 0, 8, 0, 0, 42, 48, 1, 12, 0, 0, 28, 32, 0, 17, 0, 0, 14, 16, 0,
        21, 0, 0, 28, 32, 1, 25, 0, 0, 56, 64, 1, 30, 0, 0, 42, 48, 0, 34, 76, 77, 84, 0, 67, 77,
        84, 0, 66, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0,
        77, 83, 68, 0, 77, 83, 75, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 51, 46, 53,
        46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_COPENHAGEN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        51, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 105, 134, 207, 180, 255, 255, 255, 255,
        113, 12, 239, 52, 255, 255, 255, 255, 155, 30, 140, 96, 255, 255, 255, 255, 155, 213, 190,
        208, 255, 255, 255, 255, 200, 67, 87, 112, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255,
        255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207,
        146, 52, 16, 255, 255, 255, 255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16,
        255, 255, 255, 255, 210, 36, 16, 144, 255, 255, 255, 255, 211, 121, 133, 16, 255, 255, 255,
        255, 212, 27, 173, 144, 255, 255, 255, 255, 213, 94, 173, 16, 255, 255, 255, 255, 213, 223,
        224, 16, 255, 255, 255, 255, 215, 71, 201, 144, 255, 255, 255, 255, 215, 191, 194, 16, 0,
        0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0,
        0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0,
        0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0,
        0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0,
        0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0,
        0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0,
        0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39,
        5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41,
        213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44,
        164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0,
        47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0, 11, 204, 0, 0, 0, 0, 11, 204, 0,
        4, 0, 0, 28, 32, 1, 8, 0, 0, 14, 16, 0, 13, 76, 77, 84, 0, 67, 77, 84, 0, 67, 69, 83, 84,
        0, 67, 69, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44,
        77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_GIBRALTAR: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        115, 0, 0, 0, 6, 0, 0, 0, 26, 255, 255, 255, 255, 87, 209, 10, 4, 255, 255, 255, 255, 155,
        38, 173, 160, 255, 255, 255, 255, 155, 214, 5, 32, 255, 255, 255, 255, 156, 207, 48, 160,
        255, 255, 255, 255, 157, 164, 195, 160, 255, 255, 255, 255, 158, 156, 157, 160, 255, 255,
        255, 255, 159, 151, 26, 160, 255, 255, 255, 255, 160, 133, 186, 32, 255, 255, 255, 255,
        161, 118, 252, 160, 255, 255, 255, 255, 162, 101, 156, 32, 255, 255, 255, 255, 163, 123,
        200, 160, 255, 255, 255, 255, 164, 78, 184, 160, 255, 255, 255, 255, 165, 63, 251, 32, 255,
        255, 255, 255, 166, 37, 96, 32, 255, 255, 255, 255, 167, 39, 198, 32, 255, 255, 255, 255,
        168, 42, 44, 32, 255, 255, 255, 255, 168, 235, 248, 160, 255, 255, 255, 255, 170, 0, 211,
        160, 255, 255, 255, 255, 170, 213, 21, 32, 255, 255, 255, 255, 171, 233, 240, 32, 255, 255,
        255, 255, 172, 199, 108, 32, 255, 255, 255, 255, 173, 201, 210, 32, 255, 255, 255, 255,
        174, 167, 78, 32, 255, 255, 255, 255, 175, 160, 121, 160, 255, 255, 255, 255, 176, 135, 48,
        32, 255, 255, 255, 255, 177, 146, 208, 160, 255, 255, 255, 255, 178, 112, 76, 160, 255,
        255, 255, 255, 179, 114, 178, 160, 255, 255, 255, 255, 180, 80, 46, 160, 255, 255, 255,
        255, 181, 73, 90, 32, 255, 255, 255, 255, 182, 48, 16, 160, 255, 255, 255, 255, 183, 50,
        118, 160, 255, 255, 255, 255, 184, 15, 242, 160, 255, 255, 255, 255, 185, 18, 88, 160, 255,
        255, 255, 255, 185, 239, 212, 160, 255, 255, 255, 255, 186, 233, 0, 32, 255, 255, 255, 255,
        187, 216, 241, 32, 255, 255, 255, 255, 188, 219, 87, 32, 255, 255, 255, 255, 189, 184, 211,
        32, 255, 255, 255, 255, 190, 177, 254, 160, 255, 255, 255, 255, 191, 152, 181, 32, 255,
        255, 255, 255, 192, 155, 27, 32, 255, 255, 255, 255, 193, 120, 151, 32, 255, 255, 255, 255,
        194, 122, 253, 32, 255, 255, 255, 255, 195, 88, 121, 32, 255, 255, 255, 255, 196, 81, 164,
        160, 255, 255, 255, 255, 197, 56, 91, 32, 255, 255, 255, 255, 198, 58, 193, 32, 255, 255,
        255, 255, 199, 88, 214, 160, 255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255, 202,
        22, 38, 144, 255, 255, 255, 255, 202, 151, 89, 144, 255, 255, 255, 255, 203, 209, 30, 144,
        255, 255, 255, 255, 204, 119, 59, 144, 255, 255, 255, 255, 205, 177, 0, 144, 255, 255, 255,
        255, 206, 96, 88, 16, 255, 255, 255, 255, 207, 144, 226, 144, 255, 255, 255, 255, 208, 110,
        94, 144, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 209, 251, 50, 16, 255,
        255, 255, 255, 210, 105, 254, 32, 255, 255, 255, 255, 211, 99, 41, 160, 255, 255, 255, 255,
        212, 73, 224, 32, 255, 255, 255, 255, 213, 30, 33, 160, 255, 255, 255, 255, 213, 66, 253,
        144, 255, 255, 255, 255, 213, 223, 224, 16, 255, 255, 255, 255, 214, 78, 172, 32, 255, 255,
        255, 255, 214, 254, 3, 160, 255, 255, 255, 255, 216, 46, 142, 32, 255, 255, 255, 255, 216,
        249, 149, 32, 255, 255, 255, 255, 218, 14, 112, 32, 255, 255, 255, 255, 218, 235, 236, 32,
        255, 255, 255, 255, 219, 229, 23, 160, 255, 255, 255, 255, 220, 203, 206, 32, 255, 255,
        255, 255, 221, 196, 249, 160, 255, 255, 255, 255, 222, 180, 234, 160, 255, 255, 255, 255,
        223, 174, 22, 32, 255, 255, 255, 255, 224, 148, 204, 160, 255, 255, 255, 255, 225, 114, 72,
        160, 255, 255, 255, 255, 226, 107, 116, 32, 255, 255, 255, 255, 227, 82, 42, 160, 255, 255,
        255, 255, 228, 84, 144, 160, 255, 255, 255, 255, 229, 50, 12, 160, 255, 255, 255, 255, 230,
        61, 173, 32, 255, 255, 255, 255, 231, 27, 41, 32, 255, 255, 255, 255, 232, 20, 84, 160, 0,
        0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0,
        0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0,
        0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0,
        0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0,
        0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0,
        37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39,
        245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42,
        197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45,
        148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0,
        48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 255, 255, 250, 252, 0, 0, 0, 0, 14, 16, 1, 4, 0, 0, 0, 0,
        0, 8, 0, 0, 28, 32, 1, 12, 0, 0, 14, 16, 0, 17, 0, 0, 28, 32, 1, 21, 76, 77, 84, 0, 66, 83,
        84, 0, 71, 77, 84, 0, 66, 68, 83, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 10, 67, 69, 84,
        45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51,
        10,
    ];
    pub(crate) const EUROPE_GUERNSEY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        158, 0, 0, 0, 7, 0, 0, 0, 26, 255, 255, 255, 255, 149, 166, 145, 225, 255, 255, 255, 255,
        155, 38, 173, 160, 255, 255, 255, 255, 155, 214, 5, 32, 255, 255, 255, 255, 156, 207, 48,
        160, 255, 255, 255, 255, 157, 164, 195, 160, 255, 255, 255, 255, 158, 156, 157, 160, 255,
        255, 255, 255, 159, 151, 26, 160, 255, 255, 255, 255, 160, 133, 186, 32, 255, 255, 255,
        255, 161, 118, 252, 160, 255, 255, 255, 255, 162, 101, 156, 32, 255, 255, 255, 255, 163,
        123, 200, 160, 255, 255, 255, 255, 164, 78, 184, 160, 255, 255, 255, 255, 165, 63, 251, 32,
        255, 255, 255, 255, 166, 37, 96, 32, 255, 255, 255, 255, 167, 39, 198, 32, 255, 255, 255,
        255, 168, 42, 44, 32, 255, 255, 255, 255, 168, 235, 248, 160, 255, 255, 255, 255, 170, 0,
        211, 160, 255, 255, 255, 255, 170, 213, 21, 32, 255, 255, 255, 255, 171, 233, 240, 32, 255,
        255, 255, 255, 172, 199, 108, 32, 255, 255, 255, 255, 173, 201, 210, 32, 255, 255, 255,
        255, 174, 167, 78, 32, 255, 255, 255, 255, 175, 160, 121, 160, 255, 255, 255, 255, 176,
        135, 48, 32, 255, 255, 255, 255, 177, 146, 208, 160, 255, 255, 255, 255, 178, 112, 76, 160,
        255, 255, 255, 255, 179, 114, 178, 160, 255, 255, 255, 255, 180, 80, 46, 160, 255, 255,
        255, 255, 181, 73, 90, 32, 255, 255, 255, 255, 182, 48, 16, 160, 255, 255, 255, 255, 183,
        50, 118, 160, 255, 255, 255, 255, 184, 15, 242, 160, 255, 255, 255, 255, 185, 18, 88, 160,
        255, 255, 255, 255, 185, 239, 212, 160, 255, 255, 255, 255, 186, 233, 0, 32, 255, 255, 255,
        255, 187, 216, 241, 32, 255, 255, 255, 255, 188, 219, 87, 32, 255, 255, 255, 255, 189, 184,
        211, 32, 255, 255, 255, 255, 190, 177, 254, 160, 255, 255, 255, 255, 191, 152, 181, 32,
        255, 255, 255, 255, 192, 155, 27, 32, 255, 255, 255, 255, 193, 120, 151, 32, 255, 255, 255,
        255, 194, 122, 253, 32, 255, 255, 255, 255, 195, 88, 121, 32, 255, 255, 255, 255, 196, 81,
        164, 160, 255, 255, 255, 255, 197, 56, 91, 32, 255, 255, 255, 255, 198, 58, 193, 32, 255,
        255, 255, 255, 199, 88, 214, 160, 255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255,
        200, 130, 159, 112, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23,
        144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255,
        255, 255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 209,
        161, 97, 224, 255, 255, 255, 255, 209, 251, 50, 16, 255, 255, 255, 255, 210, 105, 254, 32,
        255, 255, 255, 255, 211, 99, 41, 160, 255, 255, 255, 255, 212, 73, 224, 32, 255, 255, 255,
        255, 213, 30, 33, 160, 255, 255, 255, 255, 213, 66, 253, 144, 255, 255, 255, 255, 213, 223,
        224, 16, 255, 255, 255, 255, 214, 78, 172, 32, 255, 255, 255, 255, 214, 254, 3, 160, 255,
        255, 255, 255, 216, 46, 142, 32, 255, 255, 255, 255, 216, 249, 149, 32, 255, 255, 255, 255,
        218, 14, 112, 32, 255, 255, 255, 255, 218, 235, 236, 32, 255, 255, 255, 255, 219, 229, 23,
        160, 255, 255, 255, 255, 220, 203, 206, 32, 255, 255, 255, 255, 221, 196, 249, 160, 255,
        255, 255, 255, 222, 180, 234, 160, 255, 255, 255, 255, 223, 174, 22, 32, 255, 255, 255,
        255, 224, 148, 204, 160, 255, 255, 255, 255, 225, 114, 72, 160, 255, 255, 255, 255, 226,
        107, 116, 32, 255, 255, 255, 255, 227, 82, 42, 160, 255, 255, 255, 255, 228, 84, 144, 160,
        255, 255, 255, 255, 229, 50, 12, 160, 255, 255, 255, 255, 230, 61, 173, 32, 255, 255, 255,
        255, 231, 27, 41, 32, 255, 255, 255, 255, 232, 20, 84, 160, 255, 255, 255, 255, 232, 251,
        11, 32, 255, 255, 255, 255, 233, 253, 113, 32, 255, 255, 255, 255, 234, 218, 237, 32, 255,
        255, 255, 255, 235, 221, 83, 32, 255, 255, 255, 255, 236, 186, 207, 32, 255, 255, 255, 255,
        237, 179, 250, 160, 255, 255, 255, 255, 238, 154, 177, 32, 255, 255, 255, 255, 239, 129,
        103, 160, 255, 255, 255, 255, 240, 159, 125, 32, 255, 255, 255, 255, 241, 97, 73, 160, 255,
        255, 255, 255, 242, 127, 95, 32, 255, 255, 255, 255, 243, 74, 102, 32, 255, 255, 255, 255,
        244, 95, 65, 32, 255, 255, 255, 255, 245, 33, 13, 160, 255, 255, 255, 255, 246, 63, 35, 32,
        255, 255, 255, 255, 247, 0, 239, 160, 255, 255, 255, 255, 248, 31, 5, 32, 255, 255, 255,
        255, 248, 224, 209, 160, 255, 255, 255, 255, 249, 254, 231, 32, 255, 255, 255, 255, 250,
        192, 179, 160, 255, 255, 255, 255, 251, 232, 3, 160, 255, 255, 255, 255, 252, 123, 171,
        160, 255, 255, 255, 255, 253, 199, 187, 112, 0, 0, 0, 0, 3, 112, 198, 32, 0, 0, 0, 0, 4,
        41, 88, 32, 0, 0, 0, 0, 5, 80, 168, 32, 0, 0, 0, 0, 6, 9, 58, 32, 0, 0, 0, 0, 7, 48, 138,
        32, 0, 0, 0, 0, 7, 233, 28, 32, 0, 0, 0, 0, 9, 16, 108, 32, 0, 0, 0, 0, 9, 200, 254, 32, 0,
        0, 0, 0, 10, 240, 78, 32, 0, 0, 0, 0, 11, 178, 26, 160, 0, 0, 0, 0, 12, 208, 48, 32, 0, 0,
        0, 0, 13, 145, 252, 160, 0, 0, 0, 0, 14, 176, 18, 32, 0, 0, 0, 0, 15, 113, 222, 160, 0, 0,
        0, 0, 16, 153, 46, 160, 0, 0, 0, 0, 17, 81, 192, 160, 0, 0, 0, 0, 18, 121, 16, 160, 0, 0,
        0, 0, 19, 49, 162, 160, 0, 0, 0, 0, 20, 88, 242, 160, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0,
        0, 0, 22, 56, 198, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 24, 24, 168, 144, 0, 0, 0,
        0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 248, 138, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0,
        0, 0, 27, 225, 167, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 193, 137, 16, 0, 0,
        0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 161, 107, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0,
        0, 0, 33, 129, 77, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 97, 47, 16, 0, 0, 0, 0,
        36, 44, 54, 16, 0, 0, 0, 0, 37, 74, 75, 144, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39,
        42, 45, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 41, 10, 15, 144, 0, 0, 0, 0, 41,
        213, 22, 144, 0, 0, 0, 0, 42, 233, 241, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44,
        201, 211, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 169, 181, 144, 0, 0, 0, 0,
        47, 116, 188, 144, 0, 0, 0, 0, 48, 137, 151, 144, 0, 0, 0, 0, 49, 93, 217, 16, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 4, 3, 4, 3, 4, 3, 4, 5, 1, 2, 1, 2, 1, 5,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 6, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 255, 255, 253, 159, 0, 0, 0, 0, 14, 16, 1, 4, 0, 0, 0, 0, 0, 8, 0, 0, 14, 16,
        0, 12, 0, 0, 28, 32, 1, 16, 0, 0, 28, 32, 1, 21, 0, 0, 14, 16, 0, 4, 76, 77, 84, 0, 66, 83,
        84, 0, 71, 77, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 66, 68, 83, 84, 0, 10, 71, 77, 84,
        48, 66, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 49, 44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const EUROPE_HELSINKI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        35, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 83, 186, 38, 155, 255, 255, 255, 255, 164,
        115, 111, 27, 255, 255, 255, 255, 203, 206, 81, 96, 255, 255, 255, 255, 204, 192, 229, 96,
        0, 0, 0, 0, 21, 35, 221, 128, 0, 0, 0, 0, 22, 19, 206, 128, 0, 0, 0, 0, 23, 3, 191, 128, 0,
        0, 0, 0, 23, 243, 176, 128, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144,
        0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16,
        0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16,
        0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0,
        0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0,
        38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40,
        229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43,
        180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0,
        46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0,
        0, 49, 93, 217, 16, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0, 23, 101, 0, 0, 0, 0, 23, 101, 0, 4, 0, 0, 42, 48, 1,
        8, 0, 0, 28, 32, 0, 13, 76, 77, 84, 0, 72, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 10,
        69, 69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48, 46,
        53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const EUROPE_ISLE_OF_MAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        159, 0, 0, 0, 5, 0, 0, 0, 17, 255, 255, 255, 255, 92, 207, 216, 51, 255, 255, 255, 255,
        155, 38, 173, 160, 255, 255, 255, 255, 155, 214, 5, 32, 255, 255, 255, 255, 156, 207, 48,
        160, 255, 255, 255, 255, 157, 164, 195, 160, 255, 255, 255, 255, 158, 156, 157, 160, 255,
        255, 255, 255, 159, 151, 26, 160, 255, 255, 255, 255, 160, 133, 186, 32, 255, 255, 255,
        255, 161, 118, 252, 160, 255, 255, 255, 255, 162, 101, 156, 32, 255, 255, 255, 255, 163,
        123, 200, 160, 255, 255, 255, 255, 164, 78, 184, 160, 255, 255, 255, 255, 165, 63, 251, 32,
        255, 255, 255, 255, 166, 37, 96, 32, 255, 255, 255, 255, 167, 39, 198, 32, 255, 255, 255,
        255, 168, 42, 44, 32, 255, 255, 255, 255, 168, 235, 248, 160, 255, 255, 255, 255, 170, 0,
        211, 160, 255, 255, 255, 255, 170, 213, 21, 32, 255, 255, 255, 255, 171, 233, 240, 32, 255,
        255, 255, 255, 172, 199, 108, 32, 255, 255, 255, 255, 173, 201, 210, 32, 255, 255, 255,
        255, 174, 167, 78, 32, 255, 255, 255, 255, 175, 160, 121, 160, 255, 255, 255, 255, 176,
        135, 48, 32, 255, 255, 255, 255, 177, 146, 208, 160, 255, 255, 255, 255, 178, 112, 76, 160,
        255, 255, 255, 255, 179, 114, 178, 160, 255, 255, 255, 255, 180, 80, 46, 160, 255, 255,
        255, 255, 181, 73, 90, 32, 255, 255, 255, 255, 182, 48, 16, 160, 255, 255, 255, 255, 183,
        50, 118, 160, 255, 255, 255, 255, 184, 15, 242, 160, 255, 255, 255, 255, 185, 18, 88, 160,
        255, 255, 255, 255, 185, 239, 212, 160, 255, 255, 255, 255, 186, 233, 0, 32, 255, 255, 255,
        255, 187, 216, 241, 32, 255, 255, 255, 255, 188, 219, 87, 32, 255, 255, 255, 255, 189, 184,
        211, 32, 255, 255, 255, 255, 190, 177, 254, 160, 255, 255, 255, 255, 191, 152, 181, 32,
        255, 255, 255, 255, 192, 155, 27, 32, 255, 255, 255, 255, 193, 120, 151, 32, 255, 255, 255,
        255, 194, 122, 253, 32, 255, 255, 255, 255, 195, 88, 121, 32, 255, 255, 255, 255, 196, 81,
        164, 160, 255, 255, 255, 255, 197, 56, 91, 32, 255, 255, 255, 255, 198, 58, 193, 32, 255,
        255, 255, 255, 199, 88, 214, 160, 255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255,
        202, 22, 38, 144, 255, 255, 255, 255, 202, 151, 89, 144, 255, 255, 255, 255, 203, 209, 30,
        144, 255, 255, 255, 255, 204, 119, 59, 144, 255, 255, 255, 255, 205, 177, 0, 144, 255, 255,
        255, 255, 206, 96, 88, 16, 255, 255, 255, 255, 207, 144, 226, 144, 255, 255, 255, 255, 208,
        110, 94, 144, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 209, 251, 50, 16,
        255, 255, 255, 255, 210, 105, 254, 32, 255, 255, 255, 255, 211, 99, 41, 160, 255, 255, 255,
        255, 212, 73, 224, 32, 255, 255, 255, 255, 213, 30, 33, 160, 255, 255, 255, 255, 213, 66,
        253, 144, 255, 255, 255, 255, 213, 223, 224, 16, 255, 255, 255, 255, 214, 78, 172, 32, 255,
        255, 255, 255, 214, 254, 3, 160, 255, 255, 255, 255, 216, 46, 142, 32, 255, 255, 255, 255,
        216, 249, 149, 32, 255, 255, 255, 255, 218, 14, 112, 32, 255, 255, 255, 255, 218, 235, 236,
        32, 255, 255, 255, 255, 219, 229, 23, 160, 255, 255, 255, 255, 220, 203, 206, 32, 255, 255,
        255, 255, 221, 196, 249, 160, 255, 255, 255, 255, 222, 180, 234, 160, 255, 255, 255, 255,
        223, 174, 22, 32, 255, 255, 255, 255, 224, 148, 204, 160, 255, 255, 255, 255, 225, 114, 72,
        160, 255, 255, 255, 255, 226, 107, 116, 32, 255, 255, 255, 255, 227, 82, 42, 160, 255, 255,
        255, 255, 228, 84, 144, 160, 255, 255, 255, 255, 229, 50, 12, 160, 255, 255, 255, 255, 230,
        61, 173, 32, 255, 255, 255, 255, 231, 27, 41, 32, 255, 255, 255, 255, 232, 20, 84, 160,
        255, 255, 255, 255, 232, 251, 11, 32, 255, 255, 255, 255, 233, 253, 113, 32, 255, 255, 255,
        255, 234, 218, 237, 32, 255, 255, 255, 255, 235, 221, 83, 32, 255, 255, 255, 255, 236, 186,
        207, 32, 255, 255, 255, 255, 237, 179, 250, 160, 255, 255, 255, 255, 238, 154, 177, 32,
        255, 255, 255, 255, 239, 129, 103, 160, 255, 255, 255, 255, 240, 159, 125, 32, 255, 255,
        255, 255, 241, 97, 73, 160, 255, 255, 255, 255, 242, 127, 95, 32, 255, 255, 255, 255, 243,
        74, 102, 32, 255, 255, 255, 255, 244, 95, 65, 32, 255, 255, 255, 255, 245, 33, 13, 160,
        255, 255, 255, 255, 246, 63, 35, 32, 255, 255, 255, 255, 247, 0, 239, 160, 255, 255, 255,
        255, 248, 31, 5, 32, 255, 255, 255, 255, 248, 224, 209, 160, 255, 255, 255, 255, 249, 254,
        231, 32, 255, 255, 255, 255, 250, 192, 179, 160, 255, 255, 255, 255, 251, 232, 3, 160, 255,
        255, 255, 255, 252, 123, 171, 160, 255, 255, 255, 255, 253, 199, 187, 112, 0, 0, 0, 0, 3,
        112, 198, 32, 0, 0, 0, 0, 4, 41, 88, 32, 0, 0, 0, 0, 5, 80, 168, 32, 0, 0, 0, 0, 6, 9, 58,
        32, 0, 0, 0, 0, 7, 48, 138, 32, 0, 0, 0, 0, 7, 233, 28, 32, 0, 0, 0, 0, 9, 16, 108, 32, 0,
        0, 0, 0, 9, 200, 254, 32, 0, 0, 0, 0, 10, 240, 78, 32, 0, 0, 0, 0, 11, 178, 26, 160, 0, 0,
        0, 0, 12, 208, 48, 32, 0, 0, 0, 0, 13, 145, 252, 160, 0, 0, 0, 0, 14, 176, 18, 32, 0, 0, 0,
        0, 15, 113, 222, 160, 0, 0, 0, 0, 16, 153, 46, 160, 0, 0, 0, 0, 17, 81, 192, 160, 0, 0, 0,
        0, 18, 121, 16, 160, 0, 0, 0, 0, 19, 49, 162, 160, 0, 0, 0, 0, 20, 88, 242, 160, 0, 0, 0,
        0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 56, 198, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0,
        24, 24, 168, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 248, 138, 144, 0, 0, 0, 0,
        26, 195, 145, 144, 0, 0, 0, 0, 27, 225, 167, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0,
        29, 193, 137, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 161, 107, 16, 0, 0, 0, 0,
        32, 108, 114, 16, 0, 0, 0, 0, 33, 129, 77, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35,
        97, 47, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 74, 75, 144, 0, 0, 0, 0, 38, 12,
        24, 16, 0, 0, 0, 0, 39, 42, 45, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 41, 10, 15,
        144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 233, 241, 144, 0, 0, 0, 0, 43, 180, 248,
        144, 0, 0, 0, 0, 44, 201, 211, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 169,
        181, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 137, 151, 144, 0, 0, 0, 0, 49, 93,
        217, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3,
        1, 3, 1, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 4, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255, 251, 205, 0, 0, 0, 0, 14, 16, 1, 4, 0, 0, 0,
        0, 0, 8, 0, 0, 28, 32, 1, 12, 0, 0, 14, 16, 0, 4, 76, 77, 84, 0, 66, 83, 84, 0, 71, 77, 84,
        0, 66, 68, 83, 84, 0, 10, 71, 77, 84, 48, 66, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 49,
        44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const EUROPE_JERSEY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        158, 0, 0, 0, 7, 0, 0, 0, 26, 255, 255, 255, 255, 121, 104, 61, 0, 255, 255, 255, 255, 155,
        38, 173, 160, 255, 255, 255, 255, 155, 214, 5, 32, 255, 255, 255, 255, 156, 207, 48, 160,
        255, 255, 255, 255, 157, 164, 195, 160, 255, 255, 255, 255, 158, 156, 157, 160, 255, 255,
        255, 255, 159, 151, 26, 160, 255, 255, 255, 255, 160, 133, 186, 32, 255, 255, 255, 255,
        161, 118, 252, 160, 255, 255, 255, 255, 162, 101, 156, 32, 255, 255, 255, 255, 163, 123,
        200, 160, 255, 255, 255, 255, 164, 78, 184, 160, 255, 255, 255, 255, 165, 63, 251, 32, 255,
        255, 255, 255, 166, 37, 96, 32, 255, 255, 255, 255, 167, 39, 198, 32, 255, 255, 255, 255,
        168, 42, 44, 32, 255, 255, 255, 255, 168, 235, 248, 160, 255, 255, 255, 255, 170, 0, 211,
        160, 255, 255, 255, 255, 170, 213, 21, 32, 255, 255, 255, 255, 171, 233, 240, 32, 255, 255,
        255, 255, 172, 199, 108, 32, 255, 255, 255, 255, 173, 201, 210, 32, 255, 255, 255, 255,
        174, 167, 78, 32, 255, 255, 255, 255, 175, 160, 121, 160, 255, 255, 255, 255, 176, 135, 48,
        32, 255, 255, 255, 255, 177, 146, 208, 160, 255, 255, 255, 255, 178, 112, 76, 160, 255,
        255, 255, 255, 179, 114, 178, 160, 255, 255, 255, 255, 180, 80, 46, 160, 255, 255, 255,
        255, 181, 73, 90, 32, 255, 255, 255, 255, 182, 48, 16, 160, 255, 255, 255, 255, 183, 50,
        118, 160, 255, 255, 255, 255, 184, 15, 242, 160, 255, 255, 255, 255, 185, 18, 88, 160, 255,
        255, 255, 255, 185, 239, 212, 160, 255, 255, 255, 255, 186, 233, 0, 32, 255, 255, 255, 255,
        187, 216, 241, 32, 255, 255, 255, 255, 188, 219, 87, 32, 255, 255, 255, 255, 189, 184, 211,
        32, 255, 255, 255, 255, 190, 177, 254, 160, 255, 255, 255, 255, 191, 152, 181, 32, 255,
        255, 255, 255, 192, 155, 27, 32, 255, 255, 255, 255, 193, 120, 151, 32, 255, 255, 255, 255,
        194, 122, 253, 32, 255, 255, 255, 255, 195, 88, 121, 32, 255, 255, 255, 255, 196, 81, 164,
        160, 255, 255, 255, 255, 197, 56, 91, 32, 255, 255, 255, 255, 198, 58, 193, 32, 255, 255,
        255, 255, 199, 88, 214, 160, 255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255, 200,
        130, 159, 112, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144,
        255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255,
        255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 209, 161,
        97, 224, 255, 255, 255, 255, 209, 251, 50, 16, 255, 255, 255, 255, 210, 105, 254, 32, 255,
        255, 255, 255, 211, 99, 41, 160, 255, 255, 255, 255, 212, 73, 224, 32, 255, 255, 255, 255,
        213, 30, 33, 160, 255, 255, 255, 255, 213, 66, 253, 144, 255, 255, 255, 255, 213, 223, 224,
        16, 255, 255, 255, 255, 214, 78, 172, 32, 255, 255, 255, 255, 214, 254, 3, 160, 255, 255,
        255, 255, 216, 46, 142, 32, 255, 255, 255, 255, 216, 249, 149, 32, 255, 255, 255, 255, 218,
        14, 112, 32, 255, 255, 255, 255, 218, 235, 236, 32, 255, 255, 255, 255, 219, 229, 23, 160,
        255, 255, 255, 255, 220, 203, 206, 32, 255, 255, 255, 255, 221, 196, 249, 160, 255, 255,
        255, 255, 222, 180, 234, 160, 255, 255, 255, 255, 223, 174, 22, 32, 255, 255, 255, 255,
        224, 148, 204, 160, 255, 255, 255, 255, 225, 114, 72, 160, 255, 255, 255, 255, 226, 107,
        116, 32, 255, 255, 255, 255, 227, 82, 42, 160, 255, 255, 255, 255, 228, 84, 144, 160, 255,
        255, 255, 255, 229, 50, 12, 160, 255, 255, 255, 255, 230, 61, 173, 32, 255, 255, 255, 255,
        231, 27, 41, 32, 255, 255, 255, 255, 232, 20, 84, 160, 255, 255, 255, 255, 232, 251, 11,
        32, 255, 255, 255, 255, 233, 253, 113, 32, 255, 255, 255, 255, 234, 218, 237, 32, 255, 255,
        255, 255, 235, 221, 83, 32, 255, 255, 255, 255, 236, 186, 207, 32, 255, 255, 255, 255, 237,
        179, 250, 160, 255, 255, 255, 255, 238, 154, 177, 32, 255, 255, 255, 255, 239, 129, 103,
        160, 255, 255, 255, 255, 240, 159, 125, 32, 255, 255, 255, 255, 241, 97, 73, 160, 255, 255,
        255, 255, 242, 127, 95, 32, 255, 255, 255, 255, 243, 74, 102, 32, 255, 255, 255, 255, 244,
        95, 65, 32, 255, 255, 255, 255, 245, 33, 13, 160, 255, 255, 255, 255, 246, 63, 35, 32, 255,
        255, 255, 255, 247, 0, 239, 160, 255, 255, 255, 255, 248, 31, 5, 32, 255, 255, 255, 255,
        248, 224, 209, 160, 255, 255, 255, 255, 249, 254, 231, 32, 255, 255, 255, 255, 250, 192,
        179, 160, 255, 255, 255, 255, 251, 232, 3, 160, 255, 255, 255, 255, 252, 123, 171, 160,
        255, 255, 255, 255, 253, 199, 187, 112, 0, 0, 0, 0, 3, 112, 198, 32, 0, 0, 0, 0, 4, 41, 88,
        32, 0, 0, 0, 0, 5, 80, 168, 32, 0, 0, 0, 0, 6, 9, 58, 32, 0, 0, 0, 0, 7, 48, 138, 32, 0, 0,
        0, 0, 7, 233, 28, 32, 0, 0, 0, 0, 9, 16, 108, 32, 0, 0, 0, 0, 9, 200, 254, 32, 0, 0, 0, 0,
        10, 240, 78, 32, 0, 0, 0, 0, 11, 178, 26, 160, 0, 0, 0, 0, 12, 208, 48, 32, 0, 0, 0, 0, 13,
        145, 252, 160, 0, 0, 0, 0, 14, 176, 18, 32, 0, 0, 0, 0, 15, 113, 222, 160, 0, 0, 0, 0, 16,
        153, 46, 160, 0, 0, 0, 0, 17, 81, 192, 160, 0, 0, 0, 0, 18, 121, 16, 160, 0, 0, 0, 0, 19,
        49, 162, 160, 0, 0, 0, 0, 20, 88, 242, 160, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22,
        56, 198, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 24, 24, 168, 144, 0, 0, 0, 0, 24,
        227, 175, 144, 0, 0, 0, 0, 25, 248, 138, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0,
        27, 225, 167, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 193, 137, 16, 0, 0, 0, 0,
        30, 140, 144, 16, 0, 0, 0, 0, 31, 161, 107, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0,
        33, 129, 77, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 97, 47, 16, 0, 0, 0, 0, 36,
        44, 54, 16, 0, 0, 0, 0, 37, 74, 75, 144, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 42,
        45, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 41, 10, 15, 144, 0, 0, 0, 0, 41, 213,
        22, 144, 0, 0, 0, 0, 42, 233, 241, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 201,
        211, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 169, 181, 144, 0, 0, 0, 0, 47,
        116, 188, 144, 0, 0, 0, 0, 48, 137, 151, 144, 0, 0, 0, 0, 49, 93, 217, 16, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 4, 3, 4, 3, 4, 3, 4, 5, 1, 2, 1, 2, 1, 5, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 6, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 255, 255, 254, 6, 0, 0, 0, 0, 14, 16, 1, 4, 0, 0, 0, 0, 0, 8, 0, 0, 14, 16, 0, 12,
        0, 0, 28, 32, 1, 16, 0, 0, 28, 32, 1, 21, 0, 0, 14, 16, 0, 4, 76, 77, 84, 0, 66, 83, 84, 0,
        71, 77, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 66, 68, 83, 84, 0, 10, 71, 77, 84, 48, 66,
        83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 49, 44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const EUROPE_KALININGRAD: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        80, 0, 0, 0, 8, 0, 0, 0, 34, 255, 255, 255, 255, 111, 162, 91, 72, 255, 255, 255, 255, 155,
        12, 23, 96, 255, 255, 255, 255, 155, 213, 218, 240, 255, 255, 255, 255, 156, 217, 174, 144,
        255, 255, 255, 255, 157, 164, 181, 144, 255, 255, 255, 255, 158, 185, 144, 144, 255, 255,
        255, 255, 159, 132, 151, 144, 255, 255, 255, 255, 200, 9, 113, 144, 255, 255, 255, 255,
        204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67,
        16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 130, 37, 16, 255, 255,
        255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 209, 124, 119, 224, 255, 255, 255, 255,
        209, 149, 132, 96, 255, 255, 255, 255, 210, 138, 173, 80, 255, 255, 255, 255, 211, 89, 182,
        224, 0, 0, 0, 0, 21, 39, 167, 208, 0, 0, 0, 0, 22, 24, 220, 64, 0, 0, 0, 0, 23, 8, 219, 80,
        0, 0, 0, 0, 23, 250, 15, 192, 0, 0, 0, 0, 24, 234, 14, 208, 0, 0, 0, 0, 25, 219, 67, 64, 0,
        0, 0, 0, 26, 204, 147, 208, 0, 0, 0, 0, 27, 188, 160, 240, 0, 0, 0, 0, 28, 172, 145, 240,
        0, 0, 0, 0, 29, 156, 130, 240, 0, 0, 0, 0, 30, 140, 115, 240, 0, 0, 0, 0, 31, 124, 100,
        240, 0, 0, 0, 0, 32, 108, 85, 240, 0, 0, 0, 0, 33, 92, 70, 240, 0, 0, 0, 0, 34, 76, 55,
        240, 0, 0, 0, 0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 25, 0,
        0, 0, 0, 0, 38, 12, 10, 0, 0, 0, 0, 0, 39, 5, 53, 128, 0, 0, 0, 0, 39, 245, 38, 128, 0, 0,
        0, 0, 40, 229, 23, 128, 0, 0, 0, 0, 41, 213, 8, 128, 0, 0, 0, 0, 42, 196, 249, 128, 0, 0,
        0, 0, 43, 180, 234, 128, 0, 0, 0, 0, 44, 164, 219, 128, 0, 0, 0, 0, 45, 148, 204, 128, 0,
        0, 0, 0, 46, 132, 189, 128, 0, 0, 0, 0, 47, 116, 174, 128, 0, 0, 0, 0, 48, 100, 159, 128,
        0, 0, 0, 0, 49, 93, 203, 0, 0, 0, 0, 0, 50, 114, 166, 0, 0, 0, 0, 0, 51, 61, 173, 0, 0, 0,
        0, 0, 52, 82, 136, 0, 0, 0, 0, 0, 53, 29, 143, 0, 0, 0, 0, 0, 54, 50, 106, 0, 0, 0, 0, 0,
        54, 253, 113, 0, 0, 0, 0, 0, 56, 27, 134, 128, 0, 0, 0, 0, 56, 221, 83, 0, 0, 0, 0, 0, 57,
        251, 104, 128, 0, 0, 0, 0, 58, 189, 53, 0, 0, 0, 0, 0, 59, 219, 74, 128, 0, 0, 0, 0, 60,
        166, 81, 128, 0, 0, 0, 0, 61, 187, 44, 128, 0, 0, 0, 0, 62, 134, 51, 128, 0, 0, 0, 0, 63,
        155, 14, 128, 0, 0, 0, 0, 64, 102, 21, 128, 0, 0, 0, 0, 65, 132, 43, 0, 0, 0, 0, 0, 66, 69,
        247, 128, 0, 0, 0, 0, 67, 100, 13, 0, 0, 0, 0, 0, 68, 37, 217, 128, 0, 0, 0, 0, 69, 67,
        239, 0, 0, 0, 0, 0, 70, 5, 187, 128, 0, 0, 0, 0, 71, 35, 209, 0, 0, 0, 0, 0, 71, 238, 216,
        0, 0, 0, 0, 0, 73, 3, 179, 0, 0, 0, 0, 0, 73, 206, 186, 0, 0, 0, 0, 0, 74, 227, 149, 0, 0,
        0, 0, 0, 75, 174, 156, 0, 0, 0, 0, 0, 76, 204, 177, 128, 0, 0, 0, 0, 77, 142, 126, 0, 0, 0,
        0, 0, 84, 76, 43, 112, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 4, 3, 4, 6, 5, 6, 5, 6, 5,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 0, 0, 19,
        56, 0, 0, 0, 0, 28, 32, 1, 4, 0, 0, 14, 16, 0, 9, 0, 0, 42, 48, 1, 13, 0, 0, 28, 32, 0, 18,
        0, 0, 56, 64, 1, 22, 0, 0, 42, 48, 0, 26, 0, 0, 42, 48, 0, 30, 76, 77, 84, 0, 67, 69, 83,
        84, 0, 67, 69, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 77, 83, 68, 0, 77, 83, 75, 0, 43,
        48, 51, 0, 10, 69, 69, 84, 45, 50, 10,
    ];
    pub(crate) const EUROPE_KIEV: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        39, 0, 0, 0, 8, 0, 0, 0, 34, 255, 255, 255, 255, 86, 182, 199, 100, 255, 255, 255, 255,
        170, 25, 167, 100, 255, 255, 255, 255, 181, 164, 25, 96, 255, 255, 255, 255, 202, 205, 46,
        208, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255,
        255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 206, 205, 168, 112, 0, 0, 0, 0, 21, 39,
        167, 208, 0, 0, 0, 0, 22, 24, 220, 64, 0, 0, 0, 0, 23, 8, 219, 80, 0, 0, 0, 0, 23, 250, 15,
        192, 0, 0, 0, 0, 24, 234, 14, 208, 0, 0, 0, 0, 25, 219, 67, 64, 0, 0, 0, 0, 26, 204, 147,
        208, 0, 0, 0, 0, 27, 188, 160, 240, 0, 0, 0, 0, 28, 172, 145, 240, 0, 0, 0, 0, 29, 156,
        130, 240, 0, 0, 0, 0, 30, 140, 115, 240, 0, 0, 0, 0, 31, 124, 100, 240, 0, 0, 0, 0, 32,
        108, 85, 240, 0, 0, 0, 0, 33, 92, 70, 240, 0, 0, 0, 0, 34, 76, 55, 240, 0, 0, 0, 0, 35, 60,
        40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 10, 240, 0, 0, 0, 0, 38, 11, 251,
        240, 0, 0, 0, 0, 38, 141, 32, 224, 0, 0, 0, 0, 40, 229, 23, 128, 0, 0, 0, 0, 41, 213, 8,
        128, 0, 0, 0, 0, 42, 196, 249, 128, 0, 0, 0, 0, 43, 180, 234, 128, 0, 0, 0, 0, 44, 164,
        219, 128, 0, 0, 0, 0, 45, 148, 204, 128, 0, 0, 0, 0, 46, 132, 189, 128, 0, 0, 0, 0, 47,
        116, 174, 128, 0, 0, 0, 0, 48, 100, 159, 128, 0, 0, 0, 0, 49, 93, 203, 0, 0, 0, 0, 0, 50,
        114, 180, 16, 1, 2, 3, 5, 4, 5, 4, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
        6, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 0, 0, 28, 156, 0, 0, 0, 0, 28, 156, 0, 4, 0, 0, 28,
        32, 0, 8, 0, 0, 42, 48, 0, 12, 0, 0, 14, 16, 0, 16, 0, 0, 28, 32, 1, 20, 0, 0, 56, 64, 1,
        25, 0, 0, 42, 48, 1, 29, 76, 77, 84, 0, 75, 77, 84, 0, 69, 69, 84, 0, 77, 83, 75, 0, 67,
        69, 84, 0, 67, 69, 83, 84, 0, 77, 83, 68, 0, 69, 69, 83, 84, 0, 10, 69, 69, 84, 45, 50, 69,
        69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48, 46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const EUROPE_KIROV: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        63, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 161, 0, 57, 128, 255, 255, 255, 255, 181,
        164, 11, 80, 0, 0, 0, 0, 21, 39, 153, 192, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0, 23, 8,
        205, 64, 0, 0, 0, 0, 23, 250, 1, 176, 0, 0, 0, 0, 24, 234, 0, 192, 0, 0, 0, 0, 25, 219, 53,
        48, 0, 0, 0, 0, 26, 204, 133, 192, 0, 0, 0, 0, 27, 188, 146, 224, 0, 0, 0, 0, 28, 172, 131,
        224, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 86,
        224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0, 33, 92, 56, 224, 0, 0, 0, 0, 34, 76, 41,
        224, 0, 0, 0, 0, 35, 60, 26, 224, 0, 0, 0, 0, 36, 44, 11, 224, 0, 0, 0, 0, 37, 28, 10, 240,
        0, 0, 0, 0, 38, 11, 251, 240, 0, 0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 245, 24, 112, 0,
        0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 196, 235, 112, 0, 0, 0, 0, 43, 180, 220, 112, 0,
        0, 0, 0, 44, 164, 205, 112, 0, 0, 0, 0, 45, 148, 190, 112, 0, 0, 0, 0, 46, 132, 175, 112,
        0, 0, 0, 0, 47, 116, 160, 112, 0, 0, 0, 0, 48, 100, 145, 112, 0, 0, 0, 0, 49, 93, 188, 240,
        0, 0, 0, 0, 50, 114, 151, 240, 0, 0, 0, 0, 51, 61, 158, 240, 0, 0, 0, 0, 52, 82, 121, 240,
        0, 0, 0, 0, 53, 29, 128, 240, 0, 0, 0, 0, 54, 50, 91, 240, 0, 0, 0, 0, 54, 253, 98, 240, 0,
        0, 0, 0, 56, 27, 120, 112, 0, 0, 0, 0, 56, 221, 68, 240, 0, 0, 0, 0, 57, 251, 90, 112, 0,
        0, 0, 0, 58, 189, 38, 240, 0, 0, 0, 0, 59, 219, 60, 112, 0, 0, 0, 0, 60, 166, 67, 112, 0,
        0, 0, 0, 61, 187, 30, 112, 0, 0, 0, 0, 62, 134, 37, 112, 0, 0, 0, 0, 63, 155, 0, 112, 0, 0,
        0, 0, 64, 102, 7, 112, 0, 0, 0, 0, 65, 132, 28, 240, 0, 0, 0, 0, 66, 69, 233, 112, 0, 0, 0,
        0, 67, 99, 254, 240, 0, 0, 0, 0, 68, 37, 203, 112, 0, 0, 0, 0, 69, 67, 224, 240, 0, 0, 0,
        0, 70, 5, 173, 112, 0, 0, 0, 0, 71, 35, 194, 240, 0, 0, 0, 0, 71, 238, 201, 240, 0, 0, 0,
        0, 73, 3, 164, 240, 0, 0, 0, 0, 73, 206, 171, 240, 0, 0, 0, 0, 74, 227, 134, 240, 0, 0, 0,
        0, 75, 174, 141, 240, 0, 0, 0, 0, 76, 204, 163, 112, 0, 0, 0, 0, 77, 142, 111, 240, 0, 0,
        0, 0, 84, 76, 29, 96, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4, 1, 4, 1, 3,
        4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
        4, 1, 4, 1, 4, 1, 4, 1, 3, 1, 0, 0, 46, 152, 0, 0, 0, 0, 42, 48, 0, 4, 0, 0, 70, 80, 1, 8,
        0, 0, 56, 64, 0, 12, 0, 0, 56, 64, 1, 12, 76, 77, 84, 0, 43, 48, 51, 0, 43, 48, 53, 0, 43,
        48, 52, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const EUROPE_LJUBLJANA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        36, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 94, 60, 245, 228, 255, 255, 255, 255, 202,
        2, 53, 224, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144,
        255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255,
        255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 210, 78,
        64, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195,
        145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156,
        159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108,
        114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69,
        16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0,
        0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0,
        0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0,
        0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0,
        0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 0, 0, 13, 156, 0, 0, 0, 0, 14, 16, 0, 4, 0, 0, 28, 32, 1, 8, 76, 77, 84, 0,
        67, 69, 84, 0, 67, 69, 83, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46,
        53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_LUXEMBOURG: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        100, 0, 0, 0, 7, 0, 0, 0, 22, 255, 255, 255, 255, 132, 162, 173, 188, 255, 255, 255, 255,
        155, 30, 140, 96, 255, 255, 255, 255, 155, 213, 218, 240, 255, 255, 255, 255, 156, 234,
        167, 224, 255, 255, 255, 255, 157, 164, 153, 112, 255, 255, 255, 255, 158, 185, 144, 144,
        255, 255, 255, 255, 159, 132, 151, 144, 255, 255, 255, 255, 159, 224, 196, 112, 255, 255,
        255, 255, 160, 96, 165, 240, 255, 255, 255, 255, 161, 126, 229, 160, 255, 255, 255, 255,
        162, 46, 18, 240, 255, 255, 255, 255, 163, 122, 105, 16, 255, 255, 255, 255, 164, 53, 129,
        240, 255, 255, 255, 255, 165, 94, 63, 144, 255, 255, 255, 255, 166, 37, 53, 240, 255, 255,
        255, 255, 167, 39, 170, 0, 255, 255, 255, 255, 168, 42, 1, 240, 255, 255, 255, 255, 169, 7,
        154, 16, 255, 255, 255, 255, 169, 238, 52, 112, 255, 255, 255, 255, 170, 231, 110, 0, 255,
        255, 255, 255, 171, 216, 162, 112, 255, 255, 255, 255, 172, 199, 80, 0, 255, 255, 255, 255,
        173, 201, 167, 240, 255, 255, 255, 255, 174, 167, 50, 0, 255, 255, 255, 255, 175, 160, 79,
        112, 255, 255, 255, 255, 176, 135, 20, 0, 255, 255, 255, 255, 177, 137, 107, 240, 255, 255,
        255, 255, 178, 112, 48, 128, 255, 255, 255, 255, 179, 114, 136, 112, 255, 255, 255, 255,
        180, 80, 46, 160, 255, 255, 255, 255, 181, 73, 90, 32, 255, 255, 255, 255, 182, 48, 16,
        160, 255, 255, 255, 255, 183, 50, 118, 160, 255, 255, 255, 255, 184, 15, 242, 160, 255,
        255, 255, 255, 184, 255, 227, 160, 255, 255, 255, 255, 185, 239, 212, 160, 255, 255, 255,
        255, 186, 214, 139, 32, 255, 255, 255, 255, 187, 216, 241, 32, 255, 255, 255, 255, 188,
        200, 226, 32, 255, 255, 255, 255, 189, 184, 211, 32, 255, 255, 255, 255, 190, 159, 137,
        160, 255, 255, 255, 255, 191, 152, 181, 32, 255, 255, 255, 255, 192, 155, 27, 32, 255, 255,
        255, 255, 193, 120, 151, 32, 255, 255, 255, 255, 194, 104, 136, 32, 255, 255, 255, 255,
        195, 88, 121, 32, 255, 255, 255, 255, 196, 63, 47, 160, 255, 255, 255, 255, 197, 56, 91,
        32, 255, 255, 255, 255, 198, 58, 193, 32, 255, 255, 255, 255, 199, 88, 214, 160, 255, 255,
        255, 255, 199, 218, 9, 160, 255, 255, 255, 255, 200, 66, 48, 32, 255, 255, 255, 255, 204,
        231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16,
        255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 111, 176, 16, 255, 255, 255,
        255, 209, 114, 22, 16, 255, 255, 255, 255, 210, 78, 64, 144, 255, 255, 255, 255, 211, 145,
        64, 16, 255, 255, 255, 255, 212, 75, 35, 144, 0, 0, 0, 0, 13, 164, 99, 144, 0, 0, 0, 0, 14,
        139, 26, 16, 0, 0, 0, 0, 15, 132, 69, 144, 0, 0, 0, 0, 16, 116, 54, 144, 0, 0, 0, 0, 17,
        100, 39, 144, 0, 0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51,
        250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3,
        205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25,
        211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28,
        172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31,
        124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76,
        84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16,
        0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0,
        0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0,
        0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0,
        0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0,
        0, 0, 0, 49, 93, 217, 16, 2, 1, 2, 1, 2, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
        3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 6,
        5, 6, 5, 6, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 5, 196, 0, 0, 0, 0, 28, 32, 1,
        4, 0, 0, 14, 16, 0, 9, 0, 0, 14, 16, 1, 13, 0, 0, 0, 0, 0, 18, 0, 0, 14, 16, 0, 18, 0, 0,
        28, 32, 1, 13, 76, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 87, 69, 83, 84, 0, 87, 69,
        84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48,
        46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_MADRID: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        79, 0, 0, 0, 6, 0, 0, 0, 27, 255, 255, 255, 255, 126, 54, 181, 0, 255, 255, 255, 255, 158,
        186, 197, 240, 255, 255, 255, 255, 159, 160, 57, 0, 255, 255, 255, 255, 160, 144, 27, 240,
        255, 255, 255, 255, 161, 129, 108, 128, 255, 255, 255, 255, 170, 5, 239, 112, 255, 255,
        255, 255, 170, 231, 110, 0, 255, 255, 255, 255, 173, 201, 167, 240, 255, 255, 255, 255,
        174, 167, 50, 0, 255, 255, 255, 255, 175, 160, 79, 112, 255, 255, 255, 255, 176, 135, 20,
        0, 255, 255, 255, 255, 177, 137, 122, 0, 255, 255, 255, 255, 178, 112, 48, 128, 255, 255,
        255, 255, 179, 114, 136, 112, 255, 255, 255, 255, 180, 80, 18, 128, 255, 255, 255, 255,
        194, 201, 236, 240, 255, 255, 255, 255, 195, 88, 93, 0, 255, 255, 255, 255, 196, 72, 63,
        240, 255, 255, 255, 255, 196, 109, 27, 224, 255, 255, 255, 255, 197, 57, 116, 96, 255, 255,
        255, 255, 199, 33, 91, 128, 255, 255, 255, 255, 199, 245, 142, 240, 255, 255, 255, 255,
        203, 245, 222, 96, 255, 255, 255, 255, 204, 149, 113, 240, 255, 255, 255, 255, 205, 195,
        75, 96, 255, 255, 255, 255, 206, 160, 213, 112, 255, 255, 255, 255, 207, 163, 45, 96, 255,
        255, 255, 255, 208, 128, 183, 112, 255, 255, 255, 255, 209, 131, 15, 96, 255, 255, 255,
        255, 210, 96, 153, 112, 255, 255, 255, 255, 211, 98, 241, 96, 255, 255, 255, 255, 212, 64,
        123, 112, 255, 255, 255, 255, 217, 30, 70, 224, 255, 255, 255, 255, 217, 233, 91, 240, 0,
        0, 0, 0, 8, 13, 205, 224, 0, 0, 0, 0, 8, 244, 146, 112, 0, 0, 0, 0, 9, 237, 175, 224, 0, 0,
        0, 0, 10, 212, 116, 112, 0, 0, 0, 0, 11, 187, 28, 224, 0, 0, 0, 0, 12, 171, 27, 240, 0, 0,
        0, 0, 13, 164, 57, 96, 0, 0, 0, 0, 14, 138, 253, 240, 0, 0, 0, 0, 15, 132, 69, 144, 0, 0,
        0, 0, 16, 116, 54, 144, 0, 0, 0, 0, 17, 100, 39, 144, 0, 0, 0, 0, 18, 84, 24, 144, 0, 0, 0,
        0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0,
        22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0,
        24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0,
        0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0,
        0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0,
        0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36,
        44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67,
        144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22,
        144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233,
        144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116,
        188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 2, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
        5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 255, 255, 252, 140, 0, 0, 0, 0, 14, 16, 1, 4, 0, 0, 0,
        0, 0, 9, 0, 0, 28, 32, 1, 13, 0, 0, 28, 32, 1, 18, 0, 0, 14, 16, 0, 23, 76, 77, 84, 0, 87,
        69, 83, 84, 0, 87, 69, 84, 0, 87, 69, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 10, 67,
        69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48,
        47, 51, 10,
    ];
    pub(crate) const EUROPE_MALTA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        86, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 112, 189, 211, 100, 255, 255, 255, 255,
        155, 56, 248, 112, 255, 255, 255, 255, 155, 213, 204, 224, 255, 255, 255, 255, 156, 197,
        203, 240, 255, 255, 255, 255, 157, 183, 0, 96, 255, 255, 255, 255, 158, 137, 254, 112, 255,
        255, 255, 255, 159, 160, 28, 224, 255, 255, 255, 255, 160, 96, 165, 240, 255, 255, 255,
        255, 161, 126, 173, 96, 255, 255, 255, 255, 162, 92, 55, 112, 255, 255, 255, 255, 163, 76,
        26, 96, 255, 255, 255, 255, 200, 108, 53, 240, 255, 255, 255, 255, 204, 231, 75, 16, 255,
        255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255,
        207, 144, 226, 144, 255, 255, 255, 255, 208, 110, 94, 144, 255, 255, 255, 255, 209, 114,
        22, 16, 255, 255, 255, 255, 210, 76, 210, 240, 255, 255, 255, 255, 211, 62, 49, 144, 255,
        255, 255, 255, 212, 73, 210, 16, 255, 255, 255, 255, 213, 29, 247, 112, 255, 255, 255, 255,
        214, 41, 151, 240, 255, 255, 255, 255, 214, 235, 128, 144, 255, 255, 255, 255, 216, 9, 150,
        16, 255, 255, 255, 255, 249, 51, 181, 240, 255, 255, 255, 255, 249, 217, 196, 224, 255,
        255, 255, 255, 251, 28, 210, 112, 255, 255, 255, 255, 251, 185, 180, 240, 255, 255, 255,
        255, 252, 252, 180, 112, 255, 255, 255, 255, 253, 153, 150, 240, 255, 255, 255, 255, 254,
        229, 208, 240, 255, 255, 255, 255, 255, 130, 179, 112, 0, 0, 0, 0, 0, 197, 178, 240, 0, 0,
        0, 0, 1, 98, 149, 112, 0, 0, 0, 0, 2, 156, 90, 112, 0, 0, 0, 0, 3, 66, 119, 112, 0, 0, 0,
        0, 4, 133, 118, 240, 0, 0, 0, 0, 5, 43, 147, 240, 0, 0, 0, 0, 6, 26, 51, 112, 0, 0, 0, 0,
        7, 10, 36, 112, 0, 0, 0, 0, 8, 23, 22, 112, 0, 0, 0, 0, 8, 218, 52, 112, 0, 0, 0, 0, 9,
        247, 20, 144, 0, 0, 0, 0, 10, 194, 13, 128, 0, 0, 0, 0, 11, 214, 246, 144, 0, 0, 0, 0, 12,
        161, 239, 128, 0, 0, 0, 0, 13, 182, 216, 144, 0, 0, 0, 0, 14, 129, 209, 128, 0, 0, 0, 0,
        15, 150, 186, 144, 0, 0, 0, 0, 16, 97, 179, 128, 0, 0, 0, 0, 17, 118, 156, 144, 0, 0, 0, 0,
        18, 65, 149, 128, 0, 0, 0, 0, 19, 69, 91, 16, 0, 0, 0, 0, 20, 42, 178, 0, 0, 0, 0, 0, 21,
        35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23,
        243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0,
        26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0,
        29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0,
        32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35,
        60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24,
        16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144,
        0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144,
        0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203,
        144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217,
        16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 13,
        156, 0, 0, 0, 0, 28, 32, 1, 4, 0, 0, 14, 16, 0, 9, 76, 77, 84, 0, 67, 69, 83, 84, 0, 67,
        69, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49,
        48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_MINSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        68, 0, 0, 0, 9, 0, 0, 0, 38, 255, 255, 255, 255, 86, 182, 202, 40, 255, 255, 255, 255, 170,
        25, 170, 56, 255, 255, 255, 255, 181, 164, 25, 96, 255, 255, 255, 255, 202, 94, 112, 208,
        255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255,
        255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 10,
        2, 96, 0, 0, 0, 0, 21, 39, 167, 208, 0, 0, 0, 0, 22, 24, 220, 64, 0, 0, 0, 0, 23, 8, 219,
        80, 0, 0, 0, 0, 23, 250, 15, 192, 0, 0, 0, 0, 24, 234, 14, 208, 0, 0, 0, 0, 25, 219, 67,
        64, 0, 0, 0, 0, 26, 204, 147, 208, 0, 0, 0, 0, 27, 188, 160, 240, 0, 0, 0, 0, 28, 172, 145,
        240, 0, 0, 0, 0, 29, 156, 130, 240, 0, 0, 0, 0, 30, 140, 115, 240, 0, 0, 0, 0, 31, 124,
        100, 240, 0, 0, 0, 0, 32, 108, 85, 240, 0, 0, 0, 0, 33, 92, 70, 240, 0, 0, 0, 0, 34, 76,
        55, 240, 0, 0, 0, 0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 10,
        240, 0, 0, 0, 0, 39, 245, 24, 112, 0, 0, 0, 0, 40, 229, 23, 128, 0, 0, 0, 0, 41, 213, 8,
        128, 0, 0, 0, 0, 42, 196, 249, 128, 0, 0, 0, 0, 43, 180, 234, 128, 0, 0, 0, 0, 44, 164,
        219, 128, 0, 0, 0, 0, 45, 148, 204, 128, 0, 0, 0, 0, 46, 132, 189, 128, 0, 0, 0, 0, 47,
        116, 174, 128, 0, 0, 0, 0, 48, 100, 159, 128, 0, 0, 0, 0, 49, 93, 203, 0, 0, 0, 0, 0, 50,
        114, 166, 0, 0, 0, 0, 0, 51, 61, 173, 0, 0, 0, 0, 0, 52, 82, 136, 0, 0, 0, 0, 0, 53, 29,
        143, 0, 0, 0, 0, 0, 54, 50, 106, 0, 0, 0, 0, 0, 54, 253, 113, 0, 0, 0, 0, 0, 56, 27, 134,
        128, 0, 0, 0, 0, 56, 221, 83, 0, 0, 0, 0, 0, 57, 251, 104, 128, 0, 0, 0, 0, 58, 189, 53, 0,
        0, 0, 0, 0, 59, 219, 74, 128, 0, 0, 0, 0, 60, 166, 81, 128, 0, 0, 0, 0, 61, 187, 44, 128,
        0, 0, 0, 0, 62, 134, 51, 128, 0, 0, 0, 0, 63, 155, 14, 128, 0, 0, 0, 0, 64, 102, 21, 128,
        0, 0, 0, 0, 65, 132, 43, 0, 0, 0, 0, 0, 66, 69, 247, 128, 0, 0, 0, 0, 67, 100, 13, 0, 0, 0,
        0, 0, 68, 37, 217, 128, 0, 0, 0, 0, 69, 67, 239, 0, 0, 0, 0, 0, 70, 5, 187, 128, 0, 0, 0,
        0, 71, 35, 209, 0, 0, 0, 0, 0, 71, 238, 216, 0, 0, 0, 0, 0, 73, 3, 179, 0, 0, 0, 0, 0, 73,
        206, 186, 0, 0, 0, 0, 0, 74, 227, 149, 0, 0, 0, 0, 0, 75, 174, 156, 0, 0, 0, 0, 0, 76, 204,
        177, 128, 0, 0, 0, 0, 77, 142, 126, 0, 1, 2, 3, 5, 4, 5, 4, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3,
        6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2,
        7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 8, 0, 0, 25, 216, 0, 0, 0, 0,
        25, 200, 0, 4, 0, 0, 28, 32, 0, 8, 0, 0, 42, 48, 0, 12, 0, 0, 14, 16, 0, 16, 0, 0, 28, 32,
        1, 20, 0, 0, 56, 64, 1, 25, 0, 0, 42, 48, 1, 29, 0, 0, 42, 48, 0, 34, 76, 77, 84, 0, 77,
        77, 84, 0, 69, 69, 84, 0, 77, 83, 75, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 77, 83, 68, 0,
        69, 69, 83, 84, 0, 43, 48, 51, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const EUROPE_MONACO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        102, 0, 0, 0, 7, 0, 0, 0, 31, 255, 255, 255, 255, 110, 17, 159, 148, 255, 255, 255, 255,
        145, 120, 11, 79, 255, 255, 255, 255, 155, 71, 120, 240, 255, 255, 255, 255, 155, 215, 44,
        112, 255, 255, 255, 255, 156, 188, 145, 112, 255, 255, 255, 255, 157, 192, 72, 240, 255,
        255, 255, 255, 158, 137, 254, 112, 255, 255, 255, 255, 159, 160, 42, 240, 255, 255, 255,
        255, 160, 96, 165, 240, 255, 255, 255, 255, 161, 128, 12, 240, 255, 255, 255, 255, 162, 46,
        18, 240, 255, 255, 255, 255, 163, 122, 76, 240, 255, 255, 255, 255, 164, 53, 129, 240, 255,
        255, 255, 255, 165, 94, 35, 112, 255, 255, 255, 255, 166, 37, 53, 240, 255, 255, 255, 255,
        167, 39, 155, 240, 255, 255, 255, 255, 168, 88, 38, 112, 255, 255, 255, 255, 169, 7, 125,
        240, 255, 255, 255, 255, 169, 238, 52, 112, 255, 255, 255, 255, 170, 231, 95, 240, 255,
        255, 255, 255, 171, 215, 80, 240, 255, 255, 255, 255, 172, 199, 65, 240, 255, 255, 255,
        255, 173, 201, 167, 240, 255, 255, 255, 255, 174, 167, 35, 240, 255, 255, 255, 255, 175,
        160, 79, 112, 255, 255, 255, 255, 176, 135, 5, 240, 255, 255, 255, 255, 177, 137, 107, 240,
        255, 255, 255, 255, 178, 112, 34, 112, 255, 255, 255, 255, 179, 114, 136, 112, 255, 255,
        255, 255, 180, 80, 4, 112, 255, 255, 255, 255, 181, 73, 47, 240, 255, 255, 255, 255, 182,
        47, 230, 112, 255, 255, 255, 255, 183, 50, 76, 112, 255, 255, 255, 255, 184, 15, 200, 112,
        255, 255, 255, 255, 184, 255, 185, 112, 255, 255, 255, 255, 185, 239, 170, 112, 255, 255,
        255, 255, 186, 214, 96, 240, 255, 255, 255, 255, 187, 216, 198, 240, 255, 255, 255, 255,
        188, 200, 183, 240, 255, 255, 255, 255, 189, 184, 168, 240, 255, 255, 255, 255, 190, 159,
        95, 112, 255, 255, 255, 255, 191, 152, 138, 240, 255, 255, 255, 255, 192, 154, 240, 240,
        255, 255, 255, 255, 193, 120, 108, 240, 255, 255, 255, 255, 194, 104, 93, 240, 255, 255,
        255, 255, 195, 88, 78, 240, 255, 255, 255, 255, 196, 63, 5, 112, 255, 255, 255, 255, 197,
        56, 48, 240, 255, 255, 255, 255, 198, 58, 150, 240, 255, 255, 255, 255, 199, 88, 172, 112,
        255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255, 202, 23, 91, 240, 255, 255, 255,
        255, 202, 226, 84, 224, 255, 255, 255, 255, 203, 173, 105, 240, 255, 255, 255, 255, 204,
        231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16,
        255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 137, 241, 240, 255, 255,
        255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 210, 78, 64, 144, 0, 0, 0, 0, 11, 187, 57,
        0, 0, 0, 0, 0, 12, 171, 27, 240, 0, 0, 0, 0, 13, 164, 99, 144, 0, 0, 0, 0, 14, 139, 26, 16,
        0, 0, 0, 0, 15, 132, 69, 144, 0, 0, 0, 0, 16, 116, 54, 144, 0, 0, 0, 0, 17, 100, 39, 144,
        0, 0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0,
        0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0,
        0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0,
        0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0,
        0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0,
        0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0,
        0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38,
        12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229,
        37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180,
        248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46,
        132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0,
        49, 93, 217, 16, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 2, 4, 2,
        4, 2, 4, 2, 4, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 0, 0, 6, 236, 0, 0, 0, 0, 2, 49, 0, 4,
        0, 0, 14, 16, 1, 8, 0, 0, 0, 0, 0, 13, 0, 0, 28, 32, 1, 17, 0, 0, 28, 32, 1, 22, 0, 0, 14,
        16, 0, 27, 76, 77, 84, 0, 80, 77, 84, 0, 87, 69, 83, 84, 0, 87, 69, 84, 0, 87, 69, 77, 84,
        0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51,
        46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_PARIS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        101, 0, 0, 0, 7, 0, 0, 0, 31, 255, 255, 255, 255, 107, 201, 155, 207, 255, 255, 255, 255,
        145, 96, 80, 79, 255, 255, 255, 255, 155, 71, 120, 240, 255, 255, 255, 255, 155, 215, 44,
        112, 255, 255, 255, 255, 156, 188, 145, 112, 255, 255, 255, 255, 157, 192, 72, 240, 255,
        255, 255, 255, 158, 137, 254, 112, 255, 255, 255, 255, 159, 160, 42, 240, 255, 255, 255,
        255, 160, 96, 165, 240, 255, 255, 255, 255, 161, 128, 12, 240, 255, 255, 255, 255, 162, 46,
        18, 240, 255, 255, 255, 255, 163, 122, 76, 240, 255, 255, 255, 255, 164, 53, 129, 240, 255,
        255, 255, 255, 165, 94, 35, 112, 255, 255, 255, 255, 166, 37, 53, 240, 255, 255, 255, 255,
        167, 39, 155, 240, 255, 255, 255, 255, 168, 88, 38, 112, 255, 255, 255, 255, 169, 7, 125,
        240, 255, 255, 255, 255, 169, 238, 52, 112, 255, 255, 255, 255, 170, 231, 95, 240, 255,
        255, 255, 255, 171, 215, 80, 240, 255, 255, 255, 255, 172, 199, 65, 240, 255, 255, 255,
        255, 173, 201, 167, 240, 255, 255, 255, 255, 174, 167, 35, 240, 255, 255, 255, 255, 175,
        160, 79, 112, 255, 255, 255, 255, 176, 135, 5, 240, 255, 255, 255, 255, 177, 137, 107, 240,
        255, 255, 255, 255, 178, 112, 34, 112, 255, 255, 255, 255, 179, 114, 136, 112, 255, 255,
        255, 255, 180, 80, 4, 112, 255, 255, 255, 255, 181, 73, 47, 240, 255, 255, 255, 255, 182,
        47, 230, 112, 255, 255, 255, 255, 183, 50, 76, 112, 255, 255, 255, 255, 184, 15, 200, 112,
        255, 255, 255, 255, 184, 255, 185, 112, 255, 255, 255, 255, 185, 239, 170, 112, 255, 255,
        255, 255, 186, 214, 96, 240, 255, 255, 255, 255, 187, 216, 198, 240, 255, 255, 255, 255,
        188, 200, 183, 240, 255, 255, 255, 255, 189, 184, 168, 240, 255, 255, 255, 255, 190, 159,
        95, 112, 255, 255, 255, 255, 191, 152, 138, 240, 255, 255, 255, 255, 192, 154, 240, 240,
        255, 255, 255, 255, 193, 120, 108, 240, 255, 255, 255, 255, 194, 104, 93, 240, 255, 255,
        255, 255, 195, 88, 78, 240, 255, 255, 255, 255, 196, 63, 5, 112, 255, 255, 255, 255, 197,
        56, 48, 240, 255, 255, 255, 255, 198, 58, 150, 240, 255, 255, 255, 255, 199, 88, 172, 112,
        255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255, 200, 108, 39, 224, 255, 255, 255,
        255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162,
        67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 79, 225, 224, 255,
        255, 255, 255, 208, 137, 241, 240, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255,
        255, 210, 78, 64, 144, 0, 0, 0, 0, 11, 187, 57, 0, 0, 0, 0, 0, 12, 171, 27, 240, 0, 0, 0,
        0, 13, 164, 99, 144, 0, 0, 0, 0, 14, 139, 26, 16, 0, 0, 0, 0, 15, 132, 69, 144, 0, 0, 0, 0,
        16, 116, 54, 144, 0, 0, 0, 0, 17, 100, 39, 144, 0, 0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0,
        19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22,
        19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24,
        227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0,
        27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0,
        30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0,
        33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44,
        54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144,
        0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144,
        0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144,
        0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188,
        144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 4, 5, 4, 5, 6, 2, 6, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 0, 0, 2, 49, 0, 0, 0, 0, 2, 49, 0, 4, 0, 0, 14, 16, 1, 8, 0, 0, 0, 0, 0, 13, 0, 0,
        14, 16, 0, 17, 0, 0, 28, 32, 1, 21, 0, 0, 28, 32, 1, 26, 76, 77, 84, 0, 80, 77, 84, 0, 87,
        69, 83, 84, 0, 87, 69, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 87, 69, 77, 84, 0, 10, 67,
        69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48,
        47, 51, 10,
    ];
    pub(crate) const EUROPE_RIGA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        53, 0, 0, 0, 9, 0, 0, 0, 38, 255, 255, 255, 255, 86, 182, 205, 94, 255, 255, 255, 255, 158,
        185, 135, 254, 255, 255, 255, 255, 159, 132, 142, 254, 255, 255, 255, 255, 160, 136, 70,
        126, 255, 255, 255, 255, 160, 203, 130, 254, 255, 255, 255, 255, 173, 231, 241, 222, 255,
        255, 255, 255, 200, 175, 100, 96, 255, 255, 255, 255, 202, 98, 101, 80, 255, 255, 255, 255,
        204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67,
        16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 130, 37, 16, 255, 255,
        255, 255, 208, 144, 137, 112, 0, 0, 0, 0, 21, 39, 167, 208, 0, 0, 0, 0, 22, 24, 220, 64, 0,
        0, 0, 0, 23, 8, 219, 80, 0, 0, 0, 0, 23, 250, 15, 192, 0, 0, 0, 0, 24, 234, 14, 208, 0, 0,
        0, 0, 25, 219, 67, 64, 0, 0, 0, 0, 26, 204, 147, 208, 0, 0, 0, 0, 27, 188, 160, 240, 0, 0,
        0, 0, 28, 172, 145, 240, 0, 0, 0, 0, 29, 156, 130, 240, 0, 0, 0, 0, 30, 140, 115, 240, 0,
        0, 0, 0, 31, 124, 100, 240, 0, 0, 0, 0, 32, 108, 85, 240, 0, 0, 0, 0, 33, 92, 70, 240, 0,
        0, 0, 0, 34, 76, 55, 240, 0, 0, 0, 0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0,
        0, 0, 37, 28, 25, 0, 0, 0, 0, 0, 38, 12, 10, 0, 0, 0, 0, 0, 39, 5, 53, 128, 0, 0, 0, 0, 39,
        245, 38, 128, 0, 0, 0, 0, 40, 229, 23, 128, 0, 0, 0, 0, 41, 213, 8, 128, 0, 0, 0, 0, 42,
        196, 249, 128, 0, 0, 0, 0, 43, 180, 234, 128, 0, 0, 0, 0, 44, 164, 219, 128, 0, 0, 0, 0,
        45, 148, 204, 128, 0, 0, 0, 0, 46, 132, 189, 128, 0, 0, 0, 0, 47, 116, 174, 128, 0, 0, 0,
        0, 48, 100, 159, 128, 0, 0, 0, 0, 49, 93, 203, 0, 0, 0, 0, 0, 50, 77, 188, 0, 0, 0, 0, 0,
        51, 61, 187, 16, 0, 0, 0, 0, 52, 82, 150, 16, 0, 0, 0, 0, 53, 29, 157, 16, 0, 0, 0, 0, 54,
        50, 120, 16, 0, 0, 0, 0, 54, 253, 127, 16, 0, 0, 0, 0, 56, 27, 148, 144, 0, 0, 0, 0, 58,
        189, 67, 16, 1, 2, 1, 2, 1, 3, 4, 6, 5, 6, 5, 6, 5, 4, 7, 4, 7, 4, 7, 4, 7, 4, 7, 4, 7, 4,
        7, 4, 7, 4, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 0, 0, 22,
        162, 0, 0, 0, 0, 22, 162, 0, 4, 0, 0, 36, 178, 1, 8, 0, 0, 28, 32, 0, 12, 0, 0, 42, 48, 0,
        16, 0, 0, 14, 16, 0, 20, 0, 0, 28, 32, 1, 24, 0, 0, 56, 64, 1, 29, 0, 0, 42, 48, 1, 33, 76,
        77, 84, 0, 82, 77, 84, 0, 76, 83, 84, 0, 69, 69, 84, 0, 77, 83, 75, 0, 67, 69, 84, 0, 67,
        69, 83, 84, 0, 77, 83, 68, 0, 69, 69, 83, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84,
        44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48, 46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const EUROPE_ROME: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        87, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 62, 40, 232, 76, 255, 255, 255, 255, 112,
        188, 129, 112, 255, 255, 255, 255, 155, 56, 248, 112, 255, 255, 255, 255, 155, 213, 204,
        224, 255, 255, 255, 255, 156, 197, 203, 240, 255, 255, 255, 255, 157, 183, 0, 96, 255, 255,
        255, 255, 158, 137, 254, 112, 255, 255, 255, 255, 159, 160, 28, 224, 255, 255, 255, 255,
        160, 96, 165, 240, 255, 255, 255, 255, 161, 126, 173, 96, 255, 255, 255, 255, 162, 92, 55,
        112, 255, 255, 255, 255, 163, 76, 26, 96, 255, 255, 255, 255, 200, 108, 53, 240, 255, 255,
        255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206,
        162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 110, 94, 144,
        255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 210, 76, 210, 240, 255, 255, 255,
        255, 211, 62, 49, 144, 255, 255, 255, 255, 212, 73, 210, 16, 255, 255, 255, 255, 213, 29,
        247, 112, 255, 255, 255, 255, 214, 41, 151, 240, 255, 255, 255, 255, 214, 235, 128, 144,
        255, 255, 255, 255, 216, 9, 150, 16, 255, 255, 255, 255, 249, 51, 181, 240, 255, 255, 255,
        255, 249, 217, 196, 224, 255, 255, 255, 255, 251, 28, 210, 112, 255, 255, 255, 255, 251,
        185, 180, 240, 255, 255, 255, 255, 252, 252, 180, 112, 255, 255, 255, 255, 253, 153, 150,
        240, 255, 255, 255, 255, 254, 229, 208, 240, 255, 255, 255, 255, 255, 130, 179, 112, 0, 0,
        0, 0, 0, 197, 178, 240, 0, 0, 0, 0, 1, 98, 149, 112, 0, 0, 0, 0, 2, 156, 90, 112, 0, 0, 0,
        0, 3, 66, 119, 112, 0, 0, 0, 0, 4, 133, 118, 240, 0, 0, 0, 0, 5, 43, 147, 240, 0, 0, 0, 0,
        6, 110, 147, 112, 0, 0, 0, 0, 7, 11, 117, 240, 0, 0, 0, 0, 8, 69, 58, 240, 0, 0, 0, 0, 8,
        235, 87, 240, 0, 0, 0, 0, 10, 46, 87, 112, 0, 0, 0, 0, 10, 203, 57, 240, 0, 0, 0, 0, 12,
        14, 57, 112, 0, 0, 0, 0, 12, 171, 27, 240, 0, 0, 0, 0, 13, 228, 224, 240, 0, 0, 0, 0, 14,
        138, 253, 240, 0, 0, 0, 0, 15, 205, 253, 112, 0, 0, 0, 0, 16, 116, 26, 112, 0, 0, 0, 0, 17,
        173, 223, 112, 0, 0, 0, 0, 18, 83, 252, 112, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20,
        51, 250, 144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23,
        3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25,
        211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28,
        172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31,
        124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76,
        84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16,
        0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0,
        0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0,
        0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0,
        0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0,
        0, 0, 0, 49, 93, 217, 16, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 0, 0, 11, 180, 0, 0, 0, 0, 11, 180, 0, 4, 0, 0, 28, 32, 1, 8, 0, 0, 14, 16,
        0, 13, 76, 77, 84, 0, 82, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 10, 67, 69, 84, 45,
        49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_SAMARA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 161, 0, 57, 128, 255, 255, 255, 255, 181,
        164, 11, 80, 0, 0, 0, 0, 21, 39, 153, 192, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0, 23, 8,
        205, 64, 0, 0, 0, 0, 23, 250, 1, 176, 0, 0, 0, 0, 24, 234, 0, 192, 0, 0, 0, 0, 25, 219, 53,
        48, 0, 0, 0, 0, 26, 204, 133, 192, 0, 0, 0, 0, 27, 188, 146, 224, 0, 0, 0, 0, 28, 172, 131,
        224, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 86,
        224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0, 33, 92, 56, 224, 0, 0, 0, 0, 34, 76, 41,
        224, 0, 0, 0, 0, 35, 60, 26, 224, 0, 0, 0, 0, 36, 44, 11, 224, 0, 0, 0, 0, 37, 28, 10, 240,
        0, 0, 0, 0, 38, 11, 251, 240, 0, 0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 245, 24, 112, 0,
        0, 0, 0, 40, 229, 23, 128, 0, 0, 0, 0, 41, 0, 199, 0, 0, 0, 0, 0, 41, 212, 236, 96, 0, 0,
        0, 0, 42, 196, 221, 96, 0, 0, 0, 0, 43, 180, 206, 96, 0, 0, 0, 0, 44, 164, 191, 96, 0, 0,
        0, 0, 45, 148, 176, 96, 0, 0, 0, 0, 46, 132, 161, 96, 0, 0, 0, 0, 47, 116, 146, 96, 0, 0,
        0, 0, 48, 100, 131, 96, 0, 0, 0, 0, 49, 93, 174, 224, 0, 0, 0, 0, 50, 114, 137, 224, 0, 0,
        0, 0, 51, 61, 144, 224, 0, 0, 0, 0, 52, 82, 107, 224, 0, 0, 0, 0, 53, 29, 114, 224, 0, 0,
        0, 0, 54, 50, 77, 224, 0, 0, 0, 0, 54, 253, 84, 224, 0, 0, 0, 0, 56, 27, 106, 96, 0, 0, 0,
        0, 56, 221, 54, 224, 0, 0, 0, 0, 57, 251, 76, 96, 0, 0, 0, 0, 58, 189, 24, 224, 0, 0, 0, 0,
        59, 219, 46, 96, 0, 0, 0, 0, 60, 166, 53, 96, 0, 0, 0, 0, 61, 187, 16, 96, 0, 0, 0, 0, 62,
        134, 23, 96, 0, 0, 0, 0, 63, 154, 242, 96, 0, 0, 0, 0, 64, 101, 249, 96, 0, 0, 0, 0, 65,
        132, 14, 224, 0, 0, 0, 0, 66, 69, 219, 96, 0, 0, 0, 0, 67, 99, 240, 224, 0, 0, 0, 0, 68,
        37, 189, 96, 0, 0, 0, 0, 69, 67, 210, 224, 0, 0, 0, 0, 70, 5, 159, 96, 0, 0, 0, 0, 71, 35,
        180, 224, 0, 0, 0, 0, 71, 238, 187, 224, 0, 0, 0, 0, 73, 3, 150, 224, 0, 0, 0, 0, 73, 206,
        157, 224, 0, 0, 0, 0, 74, 227, 120, 224, 0, 0, 0, 0, 75, 174, 127, 224, 0, 0, 0, 0, 76,
        204, 163, 112, 0, 0, 0, 0, 77, 142, 111, 240, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 4, 1, 4, 1, 5, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 1, 2, 0, 0, 46, 244, 0, 0, 0, 0, 42, 48,
        0, 4, 0, 0, 56, 64, 0, 8, 0, 0, 70, 80, 1, 12, 0, 0, 56, 64, 1, 8, 0, 0, 42, 48, 1, 4, 76,
        77, 84, 0, 43, 48, 51, 0, 43, 48, 52, 0, 43, 48, 53, 0, 10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const EUROPE_SARAJEVO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        36, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 94, 60, 242, 60, 255, 255, 255, 255, 202,
        2, 53, 224, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144,
        255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255,
        255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 210, 78,
        64, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195,
        145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156,
        159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108,
        114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69,
        16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0,
        0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0,
        0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0,
        0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0,
        0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 0, 0, 17, 68, 0, 0, 0, 0, 14, 16, 0, 4, 0, 0, 28, 32, 1, 8, 76, 77, 84, 0,
        67, 69, 84, 0, 67, 69, 83, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46,
        53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_SARATOV: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 161, 0, 57, 128, 255, 255, 255, 255, 181,
        164, 11, 80, 0, 0, 0, 0, 21, 39, 153, 192, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0, 23, 8,
        205, 64, 0, 0, 0, 0, 23, 250, 1, 176, 0, 0, 0, 0, 24, 234, 0, 192, 0, 0, 0, 0, 25, 219, 53,
        48, 0, 0, 0, 0, 26, 204, 133, 192, 0, 0, 0, 0, 27, 188, 146, 224, 0, 0, 0, 0, 28, 172, 131,
        224, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 86,
        224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0, 33, 92, 56, 224, 0, 0, 0, 0, 34, 76, 41,
        224, 0, 0, 0, 0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 10, 240,
        0, 0, 0, 0, 38, 11, 251, 240, 0, 0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 245, 24, 112, 0,
        0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 196, 235, 112, 0, 0, 0, 0, 43, 180, 220, 112, 0,
        0, 0, 0, 44, 164, 205, 112, 0, 0, 0, 0, 45, 148, 190, 112, 0, 0, 0, 0, 46, 132, 175, 112,
        0, 0, 0, 0, 47, 116, 160, 112, 0, 0, 0, 0, 48, 100, 145, 112, 0, 0, 0, 0, 49, 93, 188, 240,
        0, 0, 0, 0, 50, 114, 151, 240, 0, 0, 0, 0, 51, 61, 158, 240, 0, 0, 0, 0, 52, 82, 121, 240,
        0, 0, 0, 0, 53, 29, 128, 240, 0, 0, 0, 0, 54, 50, 91, 240, 0, 0, 0, 0, 54, 253, 98, 240, 0,
        0, 0, 0, 56, 27, 120, 112, 0, 0, 0, 0, 56, 221, 68, 240, 0, 0, 0, 0, 57, 251, 90, 112, 0,
        0, 0, 0, 58, 189, 38, 240, 0, 0, 0, 0, 59, 219, 60, 112, 0, 0, 0, 0, 60, 166, 67, 112, 0,
        0, 0, 0, 61, 187, 30, 112, 0, 0, 0, 0, 62, 134, 37, 112, 0, 0, 0, 0, 63, 155, 0, 112, 0, 0,
        0, 0, 64, 102, 7, 112, 0, 0, 0, 0, 65, 132, 28, 240, 0, 0, 0, 0, 66, 69, 233, 112, 0, 0, 0,
        0, 67, 99, 254, 240, 0, 0, 0, 0, 68, 37, 203, 112, 0, 0, 0, 0, 69, 67, 224, 240, 0, 0, 0,
        0, 70, 5, 173, 112, 0, 0, 0, 0, 71, 35, 194, 240, 0, 0, 0, 0, 71, 238, 201, 240, 0, 0, 0,
        0, 73, 3, 164, 240, 0, 0, 0, 0, 73, 206, 171, 240, 0, 0, 0, 0, 74, 227, 134, 240, 0, 0, 0,
        0, 75, 174, 141, 240, 0, 0, 0, 0, 76, 204, 163, 112, 0, 0, 0, 0, 77, 142, 111, 240, 0, 0,
        0, 0, 84, 76, 29, 96, 0, 0, 0, 0, 88, 67, 78, 112, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 4, 1, 4, 1, 4, 1, 3, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
        4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 3, 1, 3, 0, 0, 43, 50, 0, 0, 0, 0,
        42, 48, 0, 4, 0, 0, 70, 80, 1, 8, 0, 0, 56, 64, 0, 12, 0, 0, 56, 64, 1, 12, 76, 77, 84, 0,
        43, 48, 51, 0, 43, 48, 53, 0, 43, 48, 52, 0, 10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const EUROPE_SIMFEROPOL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        75, 0, 0, 0, 9, 0, 0, 0, 34, 255, 255, 255, 255, 86, 182, 196, 8, 255, 255, 255, 255, 170,
        25, 164, 32, 255, 255, 255, 255, 181, 164, 25, 96, 255, 255, 255, 255, 203, 4, 141, 208,
        255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255,
        255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 207, 159,
        56, 224, 0, 0, 0, 0, 21, 39, 167, 208, 0, 0, 0, 0, 22, 24, 220, 64, 0, 0, 0, 0, 23, 8, 219,
        80, 0, 0, 0, 0, 23, 250, 15, 192, 0, 0, 0, 0, 24, 234, 14, 208, 0, 0, 0, 0, 25, 219, 67,
        64, 0, 0, 0, 0, 26, 204, 147, 208, 0, 0, 0, 0, 27, 188, 160, 240, 0, 0, 0, 0, 28, 172, 145,
        240, 0, 0, 0, 0, 29, 156, 130, 240, 0, 0, 0, 0, 30, 140, 115, 240, 0, 0, 0, 0, 31, 124,
        100, 240, 0, 0, 0, 0, 32, 108, 85, 240, 0, 0, 0, 0, 33, 92, 70, 240, 0, 0, 0, 0, 34, 76,
        55, 240, 0, 0, 0, 0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 10,
        240, 0, 0, 0, 0, 38, 141, 46, 240, 0, 0, 0, 0, 41, 213, 8, 128, 0, 0, 0, 0, 42, 196, 249,
        128, 0, 0, 0, 0, 43, 180, 234, 128, 0, 0, 0, 0, 44, 164, 219, 128, 0, 0, 0, 0, 45, 148,
        204, 128, 0, 0, 0, 0, 45, 194, 198, 208, 0, 0, 0, 0, 46, 132, 133, 64, 0, 0, 0, 0, 47, 116,
        132, 80, 0, 0, 0, 0, 48, 100, 103, 64, 0, 0, 0, 0, 49, 93, 160, 208, 0, 0, 0, 0, 50, 114,
        166, 0, 0, 0, 0, 0, 51, 61, 187, 16, 0, 0, 0, 0, 52, 82, 150, 16, 0, 0, 0, 0, 53, 29, 157,
        16, 0, 0, 0, 0, 54, 50, 120, 16, 0, 0, 0, 0, 54, 253, 127, 16, 0, 0, 0, 0, 56, 27, 148,
        144, 0, 0, 0, 0, 56, 221, 97, 16, 0, 0, 0, 0, 57, 251, 118, 144, 0, 0, 0, 0, 58, 189, 67,
        16, 0, 0, 0, 0, 59, 219, 88, 144, 0, 0, 0, 0, 60, 166, 95, 144, 0, 0, 0, 0, 61, 187, 58,
        144, 0, 0, 0, 0, 62, 134, 65, 144, 0, 0, 0, 0, 63, 155, 28, 144, 0, 0, 0, 0, 64, 102, 35,
        144, 0, 0, 0, 0, 65, 132, 57, 16, 0, 0, 0, 0, 66, 70, 5, 144, 0, 0, 0, 0, 67, 100, 27, 16,
        0, 0, 0, 0, 68, 37, 231, 144, 0, 0, 0, 0, 69, 67, 253, 16, 0, 0, 0, 0, 70, 5, 201, 144, 0,
        0, 0, 0, 71, 35, 223, 16, 0, 0, 0, 0, 71, 238, 230, 16, 0, 0, 0, 0, 73, 3, 193, 16, 0, 0,
        0, 0, 73, 206, 200, 16, 0, 0, 0, 0, 74, 227, 163, 16, 0, 0, 0, 0, 75, 174, 170, 16, 0, 0,
        0, 0, 76, 204, 191, 144, 0, 0, 0, 0, 77, 142, 140, 16, 0, 0, 0, 0, 78, 172, 161, 144, 0, 0,
        0, 0, 79, 110, 110, 16, 0, 0, 0, 0, 80, 140, 131, 144, 0, 0, 0, 0, 81, 87, 138, 144, 0, 0,
        0, 0, 82, 108, 101, 144, 0, 0, 0, 0, 83, 55, 94, 128, 0, 0, 0, 0, 84, 76, 29, 96, 1, 2, 3,
        5, 4, 5, 4, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 2, 7, 2, 7, 2, 7,
        6, 3, 6, 3, 6, 3, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2,
        7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 8, 3, 0, 0, 31, 248, 0, 0, 0, 0, 31, 224, 0, 4, 0, 0, 28, 32,
        0, 8, 0, 0, 42, 48, 0, 12, 0, 0, 14, 16, 0, 16, 0, 0, 28, 32, 1, 20, 0, 0, 56, 64, 1, 25,
        0, 0, 42, 48, 1, 29, 0, 0, 56, 64, 0, 12, 76, 77, 84, 0, 83, 77, 84, 0, 69, 69, 84, 0, 77,
        83, 75, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 77, 83, 68, 0, 69, 69, 83, 84, 0, 10, 77, 83,
        75, 45, 51, 10,
    ];
    pub(crate) const EUROPE_SKOPJE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        36, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 94, 60, 239, 104, 255, 255, 255, 255, 202,
        2, 53, 224, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144,
        255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255,
        255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 210, 78,
        64, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195,
        145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156,
        159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108,
        114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69,
        16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0,
        0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0,
        0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0,
        0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0,
        0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 0, 0, 20, 24, 0, 0, 0, 0, 14, 16, 0, 4, 0, 0, 28, 32, 1, 8, 76, 77, 84, 0,
        67, 69, 84, 0, 67, 69, 83, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46,
        53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_SOFIA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        45, 0, 0, 0, 6, 0, 0, 0, 26, 255, 255, 255, 255, 86, 182, 206, 36, 255, 255, 255, 255, 114,
        195, 227, 24, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144,
        255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255,
        255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 36, 32, 0, 0, 0, 0, 17, 99, 239, 80,
        0, 0, 0, 0, 18, 85, 63, 224, 0, 0, 0, 0, 19, 77, 11, 208, 0, 0, 0, 0, 20, 53, 33, 224, 0,
        0, 0, 0, 21, 44, 237, 208, 0, 0, 0, 0, 22, 19, 192, 112, 0, 0, 0, 0, 23, 12, 207, 208, 0,
        0, 0, 0, 23, 243, 176, 128, 0, 0, 0, 0, 24, 227, 161, 128, 0, 0, 0, 0, 25, 211, 146, 128,
        0, 0, 0, 0, 26, 195, 131, 128, 0, 0, 0, 0, 27, 188, 175, 0, 0, 0, 0, 0, 28, 172, 160, 0, 0,
        0, 0, 0, 29, 156, 145, 0, 0, 0, 0, 0, 30, 140, 130, 0, 0, 0, 0, 0, 31, 124, 115, 0, 0, 0,
        0, 0, 32, 108, 100, 0, 0, 0, 0, 0, 33, 92, 85, 0, 0, 0, 0, 0, 34, 76, 70, 0, 0, 0, 0, 0,
        35, 60, 55, 0, 0, 0, 0, 0, 36, 44, 40, 0, 0, 0, 0, 0, 37, 28, 25, 0, 0, 0, 0, 0, 38, 12,
        10, 0, 0, 0, 0, 0, 39, 5, 53, 128, 0, 0, 0, 0, 39, 245, 10, 96, 0, 0, 0, 0, 40, 228, 237,
        80, 0, 0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 196, 207, 80, 0, 0, 0, 0, 43, 180, 206,
        96, 0, 0, 0, 0, 44, 164, 177, 80, 0, 0, 0, 0, 45, 148, 176, 96, 0, 0, 0, 0, 46, 132, 147,
        80, 0, 0, 0, 0, 47, 116, 146, 96, 0, 0, 0, 0, 48, 100, 117, 80, 0, 0, 0, 0, 49, 93, 174,
        224, 0, 0, 0, 0, 50, 114, 123, 208, 0, 0, 0, 0, 51, 61, 187, 16, 1, 2, 3, 4, 3, 4, 3, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 0, 0, 21, 220, 0, 0, 0, 0, 27, 104, 0, 4, 0, 0, 28, 32, 0, 8, 0, 0, 14,
        16, 0, 12, 0, 0, 28, 32, 1, 16, 0, 0, 42, 48, 1, 21, 76, 77, 84, 0, 73, 77, 84, 0, 69, 69,
        84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 69, 69, 83, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69,
        83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48, 46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const EUROPE_STOCKHOLM: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        37, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 84, 213, 159, 148, 255, 255, 255, 255,
        124, 85, 115, 98, 255, 255, 255, 255, 155, 30, 140, 96, 255, 255, 255, 255, 155, 213, 218,
        240, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0, 0, 0, 21, 35, 235,
        144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190,
        144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195,
        145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156,
        159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108,
        114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69,
        16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0,
        0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0,
        0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0,
        0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0,
        0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 0, 0, 16, 236, 0, 0, 0, 0, 14, 30, 0, 4, 0, 0, 14, 16, 0, 8, 0, 0, 28,
        32, 1, 12, 76, 77, 84, 0, 83, 69, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 10, 67, 69, 84,
        45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51,
        10,
    ];
    pub(crate) const EUROPE_TALLINN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        52, 0, 0, 0, 8, 0, 0, 0, 34, 255, 255, 255, 255, 86, 182, 204, 204, 255, 255, 255, 255,
        158, 89, 45, 204, 255, 255, 255, 255, 158, 185, 144, 144, 255, 255, 255, 255, 159, 132,
        151, 144, 255, 255, 255, 255, 161, 0, 43, 112, 255, 255, 255, 255, 164, 115, 111, 76, 255,
        255, 255, 255, 200, 176, 181, 224, 255, 255, 255, 255, 202, 198, 151, 80, 255, 255, 255,
        255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162,
        67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 116, 203, 224, 0, 0,
        0, 0, 21, 39, 167, 208, 0, 0, 0, 0, 22, 24, 220, 64, 0, 0, 0, 0, 23, 8, 219, 80, 0, 0, 0,
        0, 23, 250, 15, 192, 0, 0, 0, 0, 24, 234, 14, 208, 0, 0, 0, 0, 25, 219, 67, 64, 0, 0, 0, 0,
        26, 204, 147, 208, 0, 0, 0, 0, 27, 188, 160, 240, 0, 0, 0, 0, 28, 172, 145, 240, 0, 0, 0,
        0, 29, 156, 130, 240, 0, 0, 0, 0, 30, 140, 115, 240, 0, 0, 0, 0, 31, 124, 100, 240, 0, 0,
        0, 0, 32, 108, 85, 240, 0, 0, 0, 0, 33, 92, 70, 240, 0, 0, 0, 0, 34, 76, 55, 240, 0, 0, 0,
        0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 25, 0, 0, 0, 0, 0, 38,
        12, 10, 0, 0, 0, 0, 0, 39, 5, 53, 128, 0, 0, 0, 0, 39, 245, 38, 128, 0, 0, 0, 0, 40, 229,
        23, 128, 0, 0, 0, 0, 41, 213, 8, 128, 0, 0, 0, 0, 42, 196, 249, 128, 0, 0, 0, 0, 43, 180,
        234, 128, 0, 0, 0, 0, 44, 164, 219, 128, 0, 0, 0, 0, 45, 148, 204, 128, 0, 0, 0, 0, 46,
        132, 189, 128, 0, 0, 0, 0, 47, 116, 174, 128, 0, 0, 0, 0, 48, 100, 159, 128, 0, 0, 0, 0,
        49, 93, 203, 0, 0, 0, 0, 0, 50, 114, 166, 0, 0, 0, 0, 0, 51, 61, 173, 0, 0, 0, 0, 0, 52,
        82, 136, 0, 0, 0, 0, 0, 53, 29, 143, 0, 0, 0, 0, 0, 54, 50, 120, 16, 0, 0, 0, 0, 54, 253,
        127, 16, 0, 0, 0, 0, 56, 27, 148, 144, 0, 0, 0, 0, 60, 166, 95, 144, 1, 3, 2, 3, 1, 4, 5,
        2, 3, 2, 3, 2, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 7, 4, 7, 4, 7, 4, 7, 4,
        7, 4, 7, 4, 7, 4, 7, 4, 7, 4, 7, 4, 7, 4, 7, 0, 0, 23, 52, 0, 0, 0, 0, 23, 52, 0, 4, 0, 0,
        28, 32, 1, 8, 0, 0, 14, 16, 0, 13, 0, 0, 28, 32, 0, 17, 0, 0, 42, 48, 0, 21, 0, 0, 56, 64,
        1, 25, 0, 0, 42, 48, 1, 29, 76, 77, 84, 0, 84, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0,
        69, 69, 84, 0, 77, 83, 75, 0, 77, 83, 68, 0, 69, 69, 83, 84, 0, 10, 69, 69, 84, 45, 50, 69,
        69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48, 46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const EUROPE_TIRANE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        50, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 150, 170, 52, 104, 255, 255, 255, 255,
        200, 109, 135, 112, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23,
        144, 255, 255, 255, 255, 205, 184, 233, 144, 0, 0, 0, 0, 8, 40, 57, 240, 0, 0, 0, 0, 8,
        239, 62, 96, 0, 0, 0, 0, 10, 5, 120, 240, 0, 0, 0, 0, 10, 208, 113, 224, 0, 0, 0, 0, 11,
        233, 79, 112, 0, 0, 0, 0, 12, 180, 72, 96, 0, 0, 0, 0, 13, 210, 107, 240, 0, 0, 0, 0, 14,
        148, 42, 96, 0, 0, 0, 0, 15, 176, 252, 112, 0, 0, 0, 0, 16, 116, 12, 96, 0, 0, 0, 0, 17,
        144, 222, 112, 0, 0, 0, 0, 18, 83, 238, 96, 0, 0, 0, 0, 19, 112, 192, 112, 0, 0, 0, 0, 20,
        59, 185, 96, 0, 0, 0, 0, 21, 72, 185, 112, 0, 0, 0, 0, 22, 19, 178, 96, 0, 0, 0, 0, 23, 49,
        213, 240, 0, 0, 0, 0, 23, 252, 206, 224, 0, 0, 0, 0, 25, 0, 148, 112, 0, 0, 0, 0, 25, 219,
        95, 96, 0, 0, 0, 0, 26, 204, 175, 240, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172,
        174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124,
        129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84,
        16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0,
        0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0,
        0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0,
        43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0,
        0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0,
        0, 0, 49, 93, 217, 16, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 18,
        152, 0, 0, 0, 0, 14, 16, 0, 4, 0, 0, 28, 32, 1, 8, 76, 77, 84, 0, 67, 69, 84, 0, 67, 69,
        83, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49,
        48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_TIRASPOL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        87, 0, 0, 0, 9, 0, 0, 0, 38, 255, 255, 255, 255, 86, 182, 200, 56, 255, 255, 255, 255, 158,
        107, 159, 12, 255, 255, 255, 255, 183, 176, 210, 8, 255, 255, 255, 255, 185, 62, 243, 96,
        255, 255, 255, 255, 185, 239, 156, 96, 255, 255, 255, 255, 186, 223, 141, 96, 255, 255,
        255, 255, 187, 207, 126, 96, 255, 255, 255, 255, 188, 200, 169, 224, 255, 255, 255, 255,
        189, 184, 154, 224, 255, 255, 255, 255, 190, 168, 139, 224, 255, 255, 255, 255, 191, 152,
        124, 224, 255, 255, 255, 255, 192, 136, 109, 224, 255, 255, 255, 255, 193, 120, 94, 224,
        255, 255, 255, 255, 194, 104, 79, 224, 255, 255, 255, 255, 195, 88, 64, 224, 255, 255, 255,
        255, 196, 72, 49, 224, 255, 255, 255, 255, 197, 56, 34, 224, 255, 255, 255, 255, 198, 40,
        19, 224, 255, 255, 255, 255, 199, 24, 4, 224, 255, 255, 255, 255, 200, 188, 147, 96, 255,
        255, 255, 255, 202, 119, 125, 80, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255,
        205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52,
        16, 255, 255, 255, 255, 208, 78, 144, 96, 0, 0, 0, 0, 21, 39, 167, 208, 0, 0, 0, 0, 22, 24,
        220, 64, 0, 0, 0, 0, 23, 8, 219, 80, 0, 0, 0, 0, 23, 250, 15, 192, 0, 0, 0, 0, 24, 234, 14,
        208, 0, 0, 0, 0, 25, 219, 67, 64, 0, 0, 0, 0, 26, 204, 147, 208, 0, 0, 0, 0, 27, 188, 160,
        240, 0, 0, 0, 0, 28, 172, 145, 240, 0, 0, 0, 0, 29, 156, 130, 240, 0, 0, 0, 0, 30, 140,
        115, 240, 0, 0, 0, 0, 31, 124, 100, 240, 0, 0, 0, 0, 32, 108, 85, 240, 0, 0, 0, 0, 33, 92,
        70, 240, 0, 0, 0, 0, 34, 76, 55, 240, 0, 0, 0, 0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25,
        240, 0, 0, 0, 0, 37, 28, 10, 240, 0, 0, 0, 0, 38, 11, 251, 240, 0, 0, 0, 0, 39, 5, 39, 112,
        0, 0, 0, 0, 39, 245, 24, 112, 0, 0, 0, 0, 40, 229, 23, 128, 0, 0, 0, 0, 41, 120, 191, 128,
        0, 0, 0, 0, 41, 212, 250, 112, 0, 0, 0, 0, 42, 196, 235, 112, 0, 0, 0, 0, 43, 180, 220,
        112, 0, 0, 0, 0, 44, 164, 205, 112, 0, 0, 0, 0, 45, 148, 190, 112, 0, 0, 0, 0, 46, 132,
        175, 112, 0, 0, 0, 0, 47, 116, 160, 112, 0, 0, 0, 0, 48, 100, 145, 112, 0, 0, 0, 0, 49, 93,
        188, 240, 0, 0, 0, 0, 50, 114, 151, 240, 0, 0, 0, 0, 51, 61, 158, 240, 0, 0, 0, 0, 52, 82,
        121, 240, 0, 0, 0, 0, 53, 29, 128, 240, 0, 0, 0, 0, 54, 50, 91, 240, 0, 0, 0, 0, 54, 253,
        98, 240, 0, 0, 0, 0, 56, 27, 120, 112, 0, 0, 0, 0, 56, 221, 68, 240, 0, 0, 0, 0, 57, 251,
        90, 112, 0, 0, 0, 0, 58, 189, 38, 240, 0, 0, 0, 0, 59, 219, 60, 112, 0, 0, 0, 0, 60, 166,
        67, 112, 0, 0, 0, 0, 61, 187, 30, 112, 0, 0, 0, 0, 62, 134, 37, 112, 0, 0, 0, 0, 63, 155,
        0, 112, 0, 0, 0, 0, 64, 102, 7, 112, 0, 0, 0, 0, 65, 132, 28, 240, 0, 0, 0, 0, 66, 69, 233,
        112, 0, 0, 0, 0, 67, 99, 254, 240, 0, 0, 0, 0, 68, 37, 203, 112, 0, 0, 0, 0, 69, 67, 224,
        240, 0, 0, 0, 0, 70, 5, 173, 112, 0, 0, 0, 0, 71, 35, 194, 240, 0, 0, 0, 0, 71, 238, 201,
        240, 0, 0, 0, 0, 73, 3, 164, 240, 0, 0, 0, 0, 73, 206, 171, 240, 0, 0, 0, 0, 74, 227, 134,
        240, 0, 0, 0, 0, 75, 174, 141, 240, 0, 0, 0, 0, 76, 204, 163, 112, 1, 2, 4, 3, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 6, 5, 6, 5, 6, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8,
        7, 8, 7, 8, 7, 8, 7, 8, 3, 4, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7,
        8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 0, 0, 27, 200, 0, 0, 0, 0, 26,
        244, 0, 4, 0, 0, 24, 120, 0, 8, 0, 0, 42, 48, 1, 12, 0, 0, 28, 32, 0, 17, 0, 0, 14, 16, 0,
        21, 0, 0, 28, 32, 1, 25, 0, 0, 56, 64, 1, 30, 0, 0, 42, 48, 0, 34, 76, 77, 84, 0, 67, 77,
        84, 0, 66, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0,
        77, 83, 68, 0, 77, 83, 75, 0, 10, 77, 83, 75, 45, 51, 10,
    ];
    pub(crate) const EUROPE_ULYANOVSK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        66, 0, 0, 0, 7, 0, 0, 0, 20, 255, 255, 255, 255, 161, 0, 57, 128, 255, 255, 255, 255, 181,
        164, 11, 80, 0, 0, 0, 0, 21, 39, 153, 192, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0, 23, 8,
        205, 64, 0, 0, 0, 0, 23, 250, 1, 176, 0, 0, 0, 0, 24, 234, 0, 192, 0, 0, 0, 0, 25, 219, 53,
        48, 0, 0, 0, 0, 26, 204, 133, 192, 0, 0, 0, 0, 27, 188, 146, 224, 0, 0, 0, 0, 28, 172, 131,
        224, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0, 31, 124, 86,
        224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0, 33, 92, 56, 224, 0, 0, 0, 0, 34, 76, 41,
        224, 0, 0, 0, 0, 35, 60, 26, 224, 0, 0, 0, 0, 36, 44, 11, 224, 0, 0, 0, 0, 37, 28, 10, 240,
        0, 0, 0, 0, 38, 11, 251, 240, 0, 0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 245, 24, 112, 0,
        0, 0, 0, 40, 229, 23, 128, 0, 0, 0, 0, 41, 120, 191, 128, 0, 0, 0, 0, 41, 212, 250, 112, 0,
        0, 0, 0, 42, 196, 235, 112, 0, 0, 0, 0, 43, 180, 220, 112, 0, 0, 0, 0, 44, 164, 205, 112,
        0, 0, 0, 0, 45, 148, 190, 112, 0, 0, 0, 0, 46, 132, 175, 112, 0, 0, 0, 0, 47, 116, 160,
        112, 0, 0, 0, 0, 48, 100, 145, 112, 0, 0, 0, 0, 49, 93, 188, 240, 0, 0, 0, 0, 50, 114, 151,
        240, 0, 0, 0, 0, 51, 61, 158, 240, 0, 0, 0, 0, 52, 82, 121, 240, 0, 0, 0, 0, 53, 29, 128,
        240, 0, 0, 0, 0, 54, 50, 91, 240, 0, 0, 0, 0, 54, 253, 98, 240, 0, 0, 0, 0, 56, 27, 120,
        112, 0, 0, 0, 0, 56, 221, 68, 240, 0, 0, 0, 0, 57, 251, 90, 112, 0, 0, 0, 0, 58, 189, 38,
        240, 0, 0, 0, 0, 59, 219, 60, 112, 0, 0, 0, 0, 60, 166, 67, 112, 0, 0, 0, 0, 61, 187, 30,
        112, 0, 0, 0, 0, 62, 134, 37, 112, 0, 0, 0, 0, 63, 155, 0, 112, 0, 0, 0, 0, 64, 102, 7,
        112, 0, 0, 0, 0, 65, 132, 28, 240, 0, 0, 0, 0, 66, 69, 233, 112, 0, 0, 0, 0, 67, 99, 254,
        240, 0, 0, 0, 0, 68, 37, 203, 112, 0, 0, 0, 0, 69, 67, 224, 240, 0, 0, 0, 0, 70, 5, 173,
        112, 0, 0, 0, 0, 71, 35, 194, 240, 0, 0, 0, 0, 71, 238, 201, 240, 0, 0, 0, 0, 73, 3, 164,
        240, 0, 0, 0, 0, 73, 206, 171, 240, 0, 0, 0, 0, 74, 227, 134, 240, 0, 0, 0, 0, 75, 174,
        141, 240, 0, 0, 0, 0, 76, 204, 163, 112, 0, 0, 0, 0, 77, 142, 111, 240, 0, 0, 0, 0, 84, 76,
        29, 96, 0, 0, 0, 0, 86, 247, 20, 112, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        4, 1, 4, 1, 5, 6, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
        1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 3, 1, 3, 0, 0, 45, 96, 0, 0, 0, 0, 42, 48, 0,
        4, 0, 0, 70, 80, 1, 8, 0, 0, 56, 64, 0, 12, 0, 0, 56, 64, 1, 12, 0, 0, 42, 48, 1, 4, 0, 0,
        28, 32, 0, 16, 76, 77, 84, 0, 43, 48, 51, 0, 43, 48, 53, 0, 43, 48, 52, 0, 43, 48, 50, 0,
        10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const EUROPE_UZHGOROD: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        38, 0, 0, 0, 7, 0, 0, 0, 30, 255, 255, 255, 255, 106, 238, 176, 24, 255, 255, 255, 255,
        200, 9, 113, 144, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23,
        144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255,
        255, 255, 208, 161, 158, 224, 255, 255, 255, 255, 209, 229, 253, 240, 0, 0, 0, 0, 21, 39,
        167, 208, 0, 0, 0, 0, 22, 24, 220, 64, 0, 0, 0, 0, 23, 8, 219, 80, 0, 0, 0, 0, 23, 250, 15,
        192, 0, 0, 0, 0, 24, 234, 14, 208, 0, 0, 0, 0, 25, 219, 67, 64, 0, 0, 0, 0, 26, 204, 147,
        208, 0, 0, 0, 0, 27, 188, 160, 240, 0, 0, 0, 0, 28, 172, 145, 240, 0, 0, 0, 0, 29, 156,
        130, 240, 0, 0, 0, 0, 30, 140, 115, 240, 0, 0, 0, 0, 31, 124, 100, 240, 0, 0, 0, 0, 32,
        108, 85, 240, 0, 0, 0, 0, 33, 92, 70, 240, 0, 0, 0, 0, 34, 76, 55, 240, 0, 0, 0, 0, 35, 60,
        40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 10, 240, 0, 0, 0, 0, 38, 141, 46,
        240, 0, 0, 0, 0, 39, 245, 66, 160, 0, 0, 0, 0, 41, 213, 8, 128, 0, 0, 0, 0, 42, 196, 249,
        128, 0, 0, 0, 0, 43, 180, 234, 128, 0, 0, 0, 0, 44, 164, 219, 128, 0, 0, 0, 0, 45, 148,
        204, 128, 0, 0, 0, 0, 46, 132, 189, 128, 0, 0, 0, 0, 47, 116, 174, 128, 0, 0, 0, 0, 48,
        100, 159, 128, 0, 0, 0, 0, 49, 93, 203, 0, 0, 0, 0, 0, 50, 114, 180, 16, 1, 2, 1, 2, 1, 2,
        1, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 1, 5, 6, 5, 6, 5, 6, 5, 6, 5,
        6, 5, 0, 0, 20, 232, 0, 0, 0, 0, 14, 16, 0, 4, 0, 0, 28, 32, 1, 8, 0, 0, 56, 64, 1, 13, 0,
        0, 42, 48, 0, 17, 0, 0, 28, 32, 0, 21, 0, 0, 42, 48, 1, 25, 76, 77, 84, 0, 67, 69, 84, 0,
        67, 69, 83, 84, 0, 77, 83, 68, 0, 77, 83, 75, 0, 69, 69, 84, 0, 69, 69, 83, 84, 0, 10, 69,
        69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48, 46, 53,
        46, 48, 47, 52, 10,
    ];
    pub(crate) const EUROPE_VADUZ: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        36, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 113, 212, 4, 148, 255, 255, 255, 255, 202,
        23, 106, 0, 255, 255, 255, 255, 202, 226, 113, 0, 255, 255, 255, 255, 203, 247, 76, 0, 255,
        255, 255, 255, 204, 194, 83, 0, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144,
        0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144,
        0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16,
        0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16,
        0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0,
        0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0,
        0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39,
        245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42,
        197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45,
        148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0,
        48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 8, 236, 0, 0, 0, 0,
        28, 32, 1, 4, 0, 0, 14, 16, 0, 9, 76, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 10, 67,
        69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48,
        47, 51, 10,
    ];
    pub(crate) const EUROPE_VIENNA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        56, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 111, 162, 95, 47, 255, 255, 255, 255, 155,
        12, 23, 96, 255, 255, 255, 255, 155, 213, 218, 240, 255, 255, 255, 255, 156, 217, 174, 144,
        255, 255, 255, 255, 157, 164, 181, 144, 255, 255, 255, 255, 158, 185, 144, 144, 255, 255,
        255, 255, 159, 132, 151, 144, 255, 255, 255, 255, 162, 112, 26, 16, 255, 255, 255, 255,
        163, 68, 91, 144, 255, 255, 255, 255, 200, 9, 113, 144, 255, 255, 255, 255, 204, 231, 75,
        16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255,
        255, 255, 207, 146, 52, 16, 255, 255, 255, 255, 208, 130, 37, 16, 255, 255, 255, 255, 209,
        114, 22, 16, 255, 255, 255, 255, 209, 127, 69, 16, 255, 255, 255, 255, 211, 99, 27, 144,
        255, 255, 255, 255, 212, 75, 35, 144, 255, 255, 255, 255, 213, 57, 195, 16, 255, 255, 255,
        255, 214, 41, 180, 16, 255, 255, 255, 255, 215, 44, 26, 16, 255, 255, 255, 255, 216, 9,
        150, 16, 0, 0, 0, 0, 19, 77, 39, 240, 0, 0, 0, 0, 20, 51, 208, 96, 0, 0, 0, 0, 21, 35, 235,
        144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0, 23, 243, 190,
        144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195,
        145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156,
        159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108,
        114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69,
        16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0,
        0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0,
        0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0,
        0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0,
        0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 15, 81, 0,
        0, 0, 0, 28, 32, 1, 4, 0, 0, 14, 16, 0, 9, 76, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0,
        10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53,
        46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_VILNIUS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        51, 0, 0, 0, 9, 0, 0, 0, 38, 255, 255, 255, 255, 86, 182, 204, 68, 255, 255, 255, 255, 156,
        79, 31, 80, 255, 255, 255, 255, 161, 133, 74, 152, 255, 255, 255, 255, 162, 241, 48, 240,
        255, 255, 255, 255, 163, 102, 120, 96, 255, 255, 255, 255, 200, 172, 207, 112, 255, 255,
        255, 255, 202, 89, 42, 208, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205,
        169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16,
        255, 255, 255, 255, 208, 48, 61, 224, 0, 0, 0, 0, 21, 39, 167, 208, 0, 0, 0, 0, 22, 24,
        220, 64, 0, 0, 0, 0, 23, 8, 219, 80, 0, 0, 0, 0, 23, 250, 15, 192, 0, 0, 0, 0, 24, 234, 14,
        208, 0, 0, 0, 0, 25, 219, 67, 64, 0, 0, 0, 0, 26, 204, 147, 208, 0, 0, 0, 0, 27, 188, 160,
        240, 0, 0, 0, 0, 28, 172, 145, 240, 0, 0, 0, 0, 29, 156, 130, 240, 0, 0, 0, 0, 30, 140,
        115, 240, 0, 0, 0, 0, 31, 124, 100, 240, 0, 0, 0, 0, 32, 108, 85, 240, 0, 0, 0, 0, 33, 92,
        70, 240, 0, 0, 0, 0, 34, 76, 55, 240, 0, 0, 0, 0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25,
        240, 0, 0, 0, 0, 37, 28, 25, 0, 0, 0, 0, 0, 38, 12, 10, 0, 0, 0, 0, 0, 39, 5, 53, 128, 0,
        0, 0, 0, 39, 245, 38, 128, 0, 0, 0, 0, 40, 229, 23, 128, 0, 0, 0, 0, 41, 213, 8, 128, 0, 0,
        0, 0, 42, 196, 249, 128, 0, 0, 0, 0, 43, 180, 234, 128, 0, 0, 0, 0, 44, 164, 219, 128, 0,
        0, 0, 0, 45, 148, 204, 128, 0, 0, 0, 0, 46, 132, 189, 128, 0, 0, 0, 0, 47, 116, 174, 128,
        0, 0, 0, 0, 48, 100, 159, 128, 0, 0, 0, 0, 49, 93, 203, 0, 0, 0, 0, 0, 50, 114, 166, 0, 0,
        0, 0, 0, 51, 61, 173, 0, 0, 0, 0, 0, 52, 82, 136, 0, 0, 0, 0, 0, 53, 29, 157, 16, 0, 0, 0,
        0, 54, 50, 120, 16, 0, 0, 0, 0, 54, 253, 127, 16, 0, 0, 0, 0, 56, 27, 148, 144, 0, 0, 0, 0,
        62, 134, 65, 144, 1, 2, 3, 4, 3, 5, 6, 3, 6, 3, 6, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5,
        7, 5, 7, 5, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 6, 3, 6, 4, 8, 0, 0, 23,
        188, 0, 0, 0, 0, 19, 176, 0, 4, 0, 0, 22, 104, 0, 8, 0, 0, 14, 16, 0, 12, 0, 0, 28, 32, 0,
        16, 0, 0, 42, 48, 0, 20, 0, 0, 28, 32, 1, 24, 0, 0, 56, 64, 1, 29, 0, 0, 42, 48, 1, 33, 76,
        77, 84, 0, 87, 77, 84, 0, 75, 77, 84, 0, 67, 69, 84, 0, 69, 69, 84, 0, 77, 83, 75, 0, 67,
        69, 83, 84, 0, 77, 83, 68, 0, 69, 69, 83, 84, 0, 10, 69, 69, 84, 45, 50, 69, 69, 83, 84,
        44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48, 46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const EUROPE_VOLGOGRAD: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        65, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 161, 245, 70, 220, 255, 255, 255, 255,
        181, 164, 11, 80, 0, 0, 0, 0, 21, 39, 153, 192, 0, 0, 0, 0, 22, 24, 206, 48, 0, 0, 0, 0,
        23, 8, 205, 64, 0, 0, 0, 0, 23, 250, 1, 176, 0, 0, 0, 0, 24, 234, 0, 192, 0, 0, 0, 0, 25,
        219, 53, 48, 0, 0, 0, 0, 26, 204, 133, 192, 0, 0, 0, 0, 27, 188, 146, 224, 0, 0, 0, 0, 28,
        172, 131, 224, 0, 0, 0, 0, 29, 156, 116, 224, 0, 0, 0, 0, 30, 140, 101, 224, 0, 0, 0, 0,
        31, 124, 86, 224, 0, 0, 0, 0, 32, 108, 71, 224, 0, 0, 0, 0, 33, 92, 56, 224, 0, 0, 0, 0,
        34, 76, 41, 224, 0, 0, 0, 0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37,
        28, 10, 240, 0, 0, 0, 0, 38, 11, 251, 240, 0, 0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 245,
        24, 112, 0, 0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 196, 235, 112, 0, 0, 0, 0, 43, 180,
        220, 112, 0, 0, 0, 0, 44, 164, 205, 112, 0, 0, 0, 0, 45, 148, 190, 112, 0, 0, 0, 0, 46,
        132, 175, 112, 0, 0, 0, 0, 47, 116, 160, 112, 0, 0, 0, 0, 48, 100, 145, 112, 0, 0, 0, 0,
        49, 93, 188, 240, 0, 0, 0, 0, 50, 114, 151, 240, 0, 0, 0, 0, 51, 61, 158, 240, 0, 0, 0, 0,
        52, 82, 121, 240, 0, 0, 0, 0, 53, 29, 128, 240, 0, 0, 0, 0, 54, 50, 91, 240, 0, 0, 0, 0,
        54, 253, 98, 240, 0, 0, 0, 0, 56, 27, 120, 112, 0, 0, 0, 0, 56, 221, 68, 240, 0, 0, 0, 0,
        57, 251, 90, 112, 0, 0, 0, 0, 58, 189, 38, 240, 0, 0, 0, 0, 59, 219, 60, 112, 0, 0, 0, 0,
        60, 166, 67, 112, 0, 0, 0, 0, 61, 187, 30, 112, 0, 0, 0, 0, 62, 134, 37, 112, 0, 0, 0, 0,
        63, 155, 0, 112, 0, 0, 0, 0, 64, 102, 7, 112, 0, 0, 0, 0, 65, 132, 28, 240, 0, 0, 0, 0, 66,
        69, 233, 112, 0, 0, 0, 0, 67, 99, 254, 240, 0, 0, 0, 0, 68, 37, 203, 112, 0, 0, 0, 0, 69,
        67, 224, 240, 0, 0, 0, 0, 70, 5, 173, 112, 0, 0, 0, 0, 71, 35, 194, 240, 0, 0, 0, 0, 71,
        238, 201, 240, 0, 0, 0, 0, 73, 3, 164, 240, 0, 0, 0, 0, 73, 206, 171, 240, 0, 0, 0, 0, 74,
        227, 134, 240, 0, 0, 0, 0, 75, 174, 141, 240, 0, 0, 0, 0, 76, 204, 163, 112, 0, 0, 0, 0,
        77, 142, 111, 240, 0, 0, 0, 0, 84, 76, 29, 96, 0, 0, 0, 0, 91, 212, 237, 240, 0, 0, 0, 0,
        95, 231, 178, 96, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 1, 4, 1, 4, 1, 2, 4,
        1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
        1, 4, 1, 4, 1, 4, 1, 2, 1, 2, 1, 0, 0, 41, 164, 0, 0, 0, 0, 42, 48, 0, 4, 0, 0, 56, 64, 0,
        8, 0, 0, 70, 80, 1, 12, 0, 0, 56, 64, 1, 8, 76, 77, 84, 0, 43, 48, 51, 0, 43, 48, 52, 0,
        43, 48, 53, 0, 10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const EUROPE_ZAGREB: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        36, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 94, 60, 244, 136, 255, 255, 255, 255, 202,
        2, 53, 224, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144,
        255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52, 16, 255, 255, 255,
        255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 210, 78,
        64, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0, 0, 0, 26, 195,
        145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0, 29, 156,
        159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0, 0, 0, 32, 108,
        114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35, 60, 69,
        16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12, 24, 16, 0,
        0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37, 144, 0, 0,
        0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248, 144, 0, 0,
        0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132, 203, 144, 0,
        0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93, 217, 16, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 0, 0, 14, 248, 0, 0, 0, 0, 14, 16, 0, 4, 0, 0, 28, 32, 1, 8, 76, 77, 84, 0,
        67, 69, 84, 0, 67, 69, 83, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46,
        53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const EUROPE_ZAPOROZHYE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        40, 0, 0, 0, 8, 0, 0, 0, 36, 255, 255, 255, 255, 86, 182, 195, 8, 255, 255, 255, 255, 170,
        25, 163, 48, 255, 255, 255, 255, 181, 164, 25, 96, 255, 255, 255, 255, 202, 170, 231, 208,
        255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255, 205, 169, 23, 144, 255, 255, 255,
        255, 206, 162, 67, 16, 255, 255, 255, 255, 206, 189, 214, 112, 0, 0, 0, 0, 21, 39, 167,
        208, 0, 0, 0, 0, 22, 24, 220, 64, 0, 0, 0, 0, 23, 8, 219, 80, 0, 0, 0, 0, 23, 250, 15, 192,
        0, 0, 0, 0, 24, 234, 14, 208, 0, 0, 0, 0, 25, 219, 67, 64, 0, 0, 0, 0, 26, 204, 147, 208,
        0, 0, 0, 0, 27, 188, 160, 240, 0, 0, 0, 0, 28, 172, 145, 240, 0, 0, 0, 0, 29, 156, 130,
        240, 0, 0, 0, 0, 30, 140, 115, 240, 0, 0, 0, 0, 31, 124, 100, 240, 0, 0, 0, 0, 32, 108, 85,
        240, 0, 0, 0, 0, 33, 92, 70, 240, 0, 0, 0, 0, 34, 76, 55, 240, 0, 0, 0, 0, 35, 60, 40, 240,
        0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 10, 240, 0, 0, 0, 0, 38, 11, 251, 240, 0,
        0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 245, 24, 112, 0, 0, 0, 0, 40, 228, 237, 80, 0, 0,
        0, 0, 41, 213, 8, 128, 0, 0, 0, 0, 42, 196, 249, 128, 0, 0, 0, 0, 43, 180, 234, 128, 0, 0,
        0, 0, 44, 164, 219, 128, 0, 0, 0, 0, 45, 148, 204, 128, 0, 0, 0, 0, 46, 132, 189, 128, 0,
        0, 0, 0, 47, 116, 174, 128, 0, 0, 0, 0, 48, 100, 159, 128, 0, 0, 0, 0, 49, 93, 203, 0, 0,
        0, 0, 0, 50, 114, 180, 16, 1, 2, 3, 5, 4, 5, 4, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
        3, 6, 3, 6, 3, 6, 3, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 0, 0, 32, 248, 0, 0, 0, 0, 32,
        208, 0, 4, 0, 0, 28, 32, 0, 10, 0, 0, 42, 48, 0, 14, 0, 0, 14, 16, 0, 18, 0, 0, 28, 32, 1,
        22, 0, 0, 56, 64, 1, 27, 0, 0, 42, 48, 1, 31, 76, 77, 84, 0, 43, 48, 50, 50, 48, 0, 69, 69,
        84, 0, 77, 83, 75, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 77, 83, 68, 0, 69, 69, 83, 84, 0,
        10, 69, 69, 84, 45, 50, 69, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 51, 44, 77, 49, 48,
        46, 53, 46, 48, 47, 52, 10,
    ];
    pub(crate) const FACTORY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 45, 48, 48, 0, 10, 60, 45, 48, 48, 62, 48, 10,
    ];
    pub(crate) const GB: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        159, 0, 0, 0, 5, 0, 0, 0, 17, 255, 255, 255, 255, 26, 93, 9, 203, 255, 255, 255, 255, 155,
        38, 173, 160, 255, 255, 255, 255, 155, 214, 5, 32, 255, 255, 255, 255, 156, 207, 48, 160,
        255, 255, 255, 255, 157, 164, 195, 160, 255, 255, 255, 255, 158, 156, 157, 160, 255, 255,
        255, 255, 159, 151, 26, 160, 255, 255, 255, 255, 160, 133, 186, 32, 255, 255, 255, 255,
        161, 118, 252, 160, 255, 255, 255, 255, 162, 101, 156, 32, 255, 255, 255, 255, 163, 123,
        200, 160, 255, 255, 255, 255, 164, 78, 184, 160, 255, 255, 255, 255, 165, 63, 251, 32, 255,
        255, 255, 255, 166, 37, 96, 32, 255, 255, 255, 255, 167, 39, 198, 32, 255, 255, 255, 255,
        168, 42, 44, 32, 255, 255, 255, 255, 168, 235, 248, 160, 255, 255, 255, 255, 170, 0, 211,
        160, 255, 255, 255, 255, 170, 213, 21, 32, 255, 255, 255, 255, 171, 233, 240, 32, 255, 255,
        255, 255, 172, 199, 108, 32, 255, 255, 255, 255, 173, 201, 210, 32, 255, 255, 255, 255,
        174, 167, 78, 32, 255, 255, 255, 255, 175, 160, 121, 160, 255, 255, 255, 255, 176, 135, 48,
        32, 255, 255, 255, 255, 177, 146, 208, 160, 255, 255, 255, 255, 178, 112, 76, 160, 255,
        255, 255, 255, 179, 114, 178, 160, 255, 255, 255, 255, 180, 80, 46, 160, 255, 255, 255,
        255, 181, 73, 90, 32, 255, 255, 255, 255, 182, 48, 16, 160, 255, 255, 255, 255, 183, 50,
        118, 160, 255, 255, 255, 255, 184, 15, 242, 160, 255, 255, 255, 255, 185, 18, 88, 160, 255,
        255, 255, 255, 185, 239, 212, 160, 255, 255, 255, 255, 186, 233, 0, 32, 255, 255, 255, 255,
        187, 216, 241, 32, 255, 255, 255, 255, 188, 219, 87, 32, 255, 255, 255, 255, 189, 184, 211,
        32, 255, 255, 255, 255, 190, 177, 254, 160, 255, 255, 255, 255, 191, 152, 181, 32, 255,
        255, 255, 255, 192, 155, 27, 32, 255, 255, 255, 255, 193, 120, 151, 32, 255, 255, 255, 255,
        194, 122, 253, 32, 255, 255, 255, 255, 195, 88, 121, 32, 255, 255, 255, 255, 196, 81, 164,
        160, 255, 255, 255, 255, 197, 56, 91, 32, 255, 255, 255, 255, 198, 58, 193, 32, 255, 255,
        255, 255, 199, 88, 214, 160, 255, 255, 255, 255, 199, 218, 9, 160, 255, 255, 255, 255, 202,
        22, 38, 144, 255, 255, 255, 255, 202, 151, 89, 144, 255, 255, 255, 255, 203, 209, 30, 144,
        255, 255, 255, 255, 204, 119, 59, 144, 255, 255, 255, 255, 205, 177, 0, 144, 255, 255, 255,
        255, 206, 96, 88, 16, 255, 255, 255, 255, 207, 144, 226, 144, 255, 255, 255, 255, 208, 110,
        94, 144, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255, 255, 255, 209, 251, 50, 16, 255,
        255, 255, 255, 210, 105, 254, 32, 255, 255, 255, 255, 211, 99, 41, 160, 255, 255, 255, 255,
        212, 73, 224, 32, 255, 255, 255, 255, 213, 30, 33, 160, 255, 255, 255, 255, 213, 66, 253,
        144, 255, 255, 255, 255, 213, 223, 224, 16, 255, 255, 255, 255, 214, 78, 172, 32, 255, 255,
        255, 255, 214, 254, 3, 160, 255, 255, 255, 255, 216, 46, 142, 32, 255, 255, 255, 255, 216,
        249, 149, 32, 255, 255, 255, 255, 218, 14, 112, 32, 255, 255, 255, 255, 218, 235, 236, 32,
        255, 255, 255, 255, 219, 229, 23, 160, 255, 255, 255, 255, 220, 203, 206, 32, 255, 255,
        255, 255, 221, 196, 249, 160, 255, 255, 255, 255, 222, 180, 234, 160, 255, 255, 255, 255,
        223, 174, 22, 32, 255, 255, 255, 255, 224, 148, 204, 160, 255, 255, 255, 255, 225, 114, 72,
        160, 255, 255, 255, 255, 226, 107, 116, 32, 255, 255, 255, 255, 227, 82, 42, 160, 255, 255,
        255, 255, 228, 84, 144, 160, 255, 255, 255, 255, 229, 50, 12, 160, 255, 255, 255, 255, 230,
        61, 173, 32, 255, 255, 255, 255, 231, 27, 41, 32, 255, 255, 255, 255, 232, 20, 84, 160,
        255, 255, 255, 255, 232, 251, 11, 32, 255, 255, 255, 255, 233, 253, 113, 32, 255, 255, 255,
        255, 234, 218, 237, 32, 255, 255, 255, 255, 235, 221, 83, 32, 255, 255, 255, 255, 236, 186,
        207, 32, 255, 255, 255, 255, 237, 179, 250, 160, 255, 255, 255, 255, 238, 154, 177, 32,
        255, 255, 255, 255, 239, 129, 103, 160, 255, 255, 255, 255, 240, 159, 125, 32, 255, 255,
        255, 255, 241, 97, 73, 160, 255, 255, 255, 255, 242, 127, 95, 32, 255, 255, 255, 255, 243,
        74, 102, 32, 255, 255, 255, 255, 244, 95, 65, 32, 255, 255, 255, 255, 245, 33, 13, 160,
        255, 255, 255, 255, 246, 63, 35, 32, 255, 255, 255, 255, 247, 0, 239, 160, 255, 255, 255,
        255, 248, 31, 5, 32, 255, 255, 255, 255, 248, 224, 209, 160, 255, 255, 255, 255, 249, 254,
        231, 32, 255, 255, 255, 255, 250, 192, 179, 160, 255, 255, 255, 255, 251, 232, 3, 160, 255,
        255, 255, 255, 252, 123, 171, 160, 255, 255, 255, 255, 253, 199, 187, 112, 0, 0, 0, 0, 3,
        112, 198, 32, 0, 0, 0, 0, 4, 41, 88, 32, 0, 0, 0, 0, 5, 80, 168, 32, 0, 0, 0, 0, 6, 9, 58,
        32, 0, 0, 0, 0, 7, 48, 138, 32, 0, 0, 0, 0, 7, 233, 28, 32, 0, 0, 0, 0, 9, 16, 108, 32, 0,
        0, 0, 0, 9, 200, 254, 32, 0, 0, 0, 0, 10, 240, 78, 32, 0, 0, 0, 0, 11, 178, 26, 160, 0, 0,
        0, 0, 12, 208, 48, 32, 0, 0, 0, 0, 13, 145, 252, 160, 0, 0, 0, 0, 14, 176, 18, 32, 0, 0, 0,
        0, 15, 113, 222, 160, 0, 0, 0, 0, 16, 153, 46, 160, 0, 0, 0, 0, 17, 81, 192, 160, 0, 0, 0,
        0, 18, 121, 16, 160, 0, 0, 0, 0, 19, 49, 162, 160, 0, 0, 0, 0, 20, 88, 242, 160, 0, 0, 0,
        0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 56, 198, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0, 0,
        24, 24, 168, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 248, 138, 144, 0, 0, 0, 0,
        26, 195, 145, 144, 0, 0, 0, 0, 27, 225, 167, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0, 0, 0,
        29, 193, 137, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 161, 107, 16, 0, 0, 0, 0,
        32, 108, 114, 16, 0, 0, 0, 0, 33, 129, 77, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0, 35,
        97, 47, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 74, 75, 144, 0, 0, 0, 0, 38, 12,
        24, 16, 0, 0, 0, 0, 39, 42, 45, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 41, 10, 15,
        144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 233, 241, 144, 0, 0, 0, 0, 43, 180, 248,
        144, 0, 0, 0, 0, 44, 201, 211, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 169,
        181, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 137, 151, 144, 0, 0, 0, 0, 49, 93,
        217, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3,
        1, 3, 1, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 4, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 255, 255, 255, 181, 0, 0, 0, 0, 14, 16, 1, 4, 0, 0, 0,
        0, 0, 8, 0, 0, 28, 32, 1, 12, 0, 0, 14, 16, 0, 4, 76, 77, 84, 0, 66, 83, 84, 0, 71, 77, 84,
        0, 66, 68, 83, 84, 0, 10, 71, 77, 84, 48, 66, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 49,
        44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const GMT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const HONGKONG: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        69, 0, 0, 0, 5, 0, 0, 0, 22, 255, 255, 255, 255, 133, 105, 99, 144, 255, 255, 255, 255,
        202, 77, 49, 48, 255, 255, 255, 255, 202, 219, 147, 48, 255, 255, 255, 255, 203, 75, 113,
        120, 255, 255, 255, 255, 210, 160, 222, 144, 255, 255, 255, 255, 211, 107, 215, 128, 255,
        255, 255, 255, 212, 147, 88, 184, 255, 255, 255, 255, 213, 66, 176, 56, 255, 255, 255, 255,
        214, 115, 58, 184, 255, 255, 255, 255, 215, 62, 65, 184, 255, 255, 255, 255, 216, 46, 50,
        184, 255, 255, 255, 255, 216, 249, 57, 184, 255, 255, 255, 255, 218, 14, 20, 184, 255, 255,
        255, 255, 218, 217, 27, 184, 255, 255, 255, 255, 219, 237, 246, 184, 255, 255, 255, 255,
        220, 184, 253, 184, 255, 255, 255, 255, 221, 205, 216, 184, 255, 255, 255, 255, 222, 162,
        26, 56, 255, 255, 255, 255, 223, 182, 245, 56, 255, 255, 255, 255, 224, 129, 252, 56, 255,
        255, 255, 255, 225, 150, 201, 40, 255, 255, 255, 255, 226, 79, 105, 56, 255, 255, 255, 255,
        227, 118, 171, 40, 255, 255, 255, 255, 228, 47, 75, 56, 255, 255, 255, 255, 229, 95, 199,
        168, 255, 255, 255, 255, 230, 15, 45, 56, 255, 255, 255, 255, 231, 63, 169, 168, 255, 255,
        255, 255, 231, 248, 73, 184, 255, 255, 255, 255, 233, 31, 139, 168, 255, 255, 255, 255,
        233, 216, 43, 184, 255, 255, 255, 255, 234, 255, 109, 168, 255, 255, 255, 255, 235, 184,
        13, 184, 255, 255, 255, 255, 236, 223, 79, 168, 255, 255, 255, 255, 237, 151, 239, 184,
        255, 255, 255, 255, 238, 200, 108, 40, 255, 255, 255, 255, 239, 119, 209, 184, 255, 255,
        255, 255, 240, 168, 78, 40, 255, 255, 255, 255, 241, 87, 179, 184, 255, 255, 255, 255, 242,
        136, 48, 40, 255, 255, 255, 255, 243, 64, 208, 56, 255, 255, 255, 255, 244, 104, 18, 40,
        255, 255, 255, 255, 245, 32, 178, 56, 255, 255, 255, 255, 246, 71, 244, 40, 255, 255, 255,
        255, 247, 37, 126, 56, 255, 255, 255, 255, 248, 21, 97, 40, 255, 255, 255, 255, 249, 5, 96,
        56, 255, 255, 255, 255, 249, 245, 67, 40, 255, 255, 255, 255, 250, 229, 66, 56, 255, 255,
        255, 255, 251, 222, 95, 168, 255, 255, 255, 255, 252, 206, 94, 184, 255, 255, 255, 255,
        253, 190, 65, 168, 255, 255, 255, 255, 254, 174, 64, 184, 255, 255, 255, 255, 255, 158, 35,
        168, 0, 0, 0, 0, 0, 142, 34, 184, 0, 0, 0, 0, 1, 126, 5, 168, 0, 0, 0, 0, 2, 110, 4, 184,
        0, 0, 0, 0, 3, 93, 231, 168, 0, 0, 0, 0, 4, 77, 230, 184, 0, 0, 0, 0, 5, 71, 4, 40, 0, 0,
        0, 0, 6, 55, 3, 56, 0, 0, 0, 0, 7, 38, 230, 40, 0, 0, 0, 0, 7, 131, 61, 56, 0, 0, 0, 0, 9,
        6, 200, 40, 0, 0, 0, 0, 9, 246, 199, 56, 0, 0, 0, 0, 10, 230, 170, 40, 0, 0, 0, 0, 11, 214,
        169, 56, 0, 0, 0, 0, 12, 198, 140, 40, 0, 0, 0, 0, 17, 155, 57, 56, 0, 0, 0, 0, 18, 111,
        108, 168, 1, 2, 3, 4, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 107, 10, 0, 0, 0, 0, 112, 128, 0, 4, 0, 0, 126,
        144, 1, 8, 0, 0, 119, 136, 1, 13, 0, 0, 126, 144, 0, 18, 76, 77, 84, 0, 72, 75, 84, 0, 72,
        75, 83, 84, 0, 72, 75, 87, 84, 0, 74, 83, 84, 0, 10, 72, 75, 84, 45, 56, 10,
    ];
    pub(crate) const HST: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 115, 96, 0, 0, 72, 83, 84, 0, 10, 72, 83, 84, 49, 48,
        10,
    ];
    pub(crate) const ICELAND: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        68, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 139, 96, 131, 160, 255, 255, 255, 255,
        156, 145, 30, 0, 255, 255, 255, 255, 157, 209, 136, 144, 255, 255, 255, 255, 158, 114, 81,
        128, 255, 255, 255, 255, 159, 213, 3, 16, 255, 255, 255, 255, 160, 83, 133, 0, 255, 255,
        255, 255, 161, 182, 54, 144, 255, 255, 255, 255, 164, 60, 39, 128, 255, 255, 255, 255, 164,
        185, 116, 16, 255, 255, 255, 255, 198, 77, 26, 0, 255, 255, 255, 255, 199, 61, 39, 32, 255,
        255, 255, 255, 199, 218, 23, 176, 255, 255, 255, 255, 201, 38, 67, 160, 255, 255, 255, 255,
        201, 195, 38, 32, 255, 255, 255, 255, 203, 6, 37, 160, 255, 255, 255, 255, 203, 172, 66,
        160, 255, 255, 255, 255, 204, 220, 205, 32, 255, 255, 255, 255, 205, 140, 36, 160, 255,
        255, 255, 255, 206, 188, 175, 32, 255, 255, 255, 255, 207, 108, 6, 160, 255, 255, 255, 255,
        208, 156, 145, 32, 255, 255, 255, 255, 209, 75, 232, 160, 255, 255, 255, 255, 210, 133,
        173, 160, 255, 255, 255, 255, 211, 43, 202, 160, 255, 255, 255, 255, 212, 101, 143, 160,
        255, 255, 255, 255, 213, 57, 209, 32, 255, 255, 255, 255, 214, 69, 113, 160, 255, 255, 255,
        255, 215, 25, 179, 32, 255, 255, 255, 255, 216, 37, 83, 160, 255, 255, 255, 255, 216, 249,
        149, 32, 255, 255, 255, 255, 218, 14, 112, 32, 255, 255, 255, 255, 218, 217, 119, 32, 255,
        255, 255, 255, 219, 229, 23, 160, 255, 255, 255, 255, 220, 185, 89, 32, 255, 255, 255, 255,
        221, 206, 52, 32, 255, 255, 255, 255, 222, 162, 117, 160, 255, 255, 255, 255, 223, 174, 22,
        32, 255, 255, 255, 255, 224, 130, 87, 160, 255, 255, 255, 255, 225, 141, 248, 32, 255, 255,
        255, 255, 226, 98, 57, 160, 255, 255, 255, 255, 227, 109, 218, 32, 255, 255, 255, 255, 228,
        66, 27, 160, 255, 255, 255, 255, 229, 77, 188, 32, 255, 255, 255, 255, 230, 33, 253, 160,
        255, 255, 255, 255, 231, 54, 216, 160, 255, 255, 255, 255, 232, 11, 26, 32, 255, 255, 255,
        255, 233, 22, 186, 160, 255, 255, 255, 255, 233, 234, 252, 32, 255, 255, 255, 255, 234,
        246, 156, 160, 255, 255, 255, 255, 235, 202, 222, 32, 255, 255, 255, 255, 236, 214, 126,
        160, 255, 255, 255, 255, 237, 170, 192, 32, 255, 255, 255, 255, 238, 182, 96, 160, 255,
        255, 255, 255, 239, 138, 162, 32, 255, 255, 255, 255, 240, 150, 66, 160, 255, 255, 255,
        255, 241, 106, 132, 32, 255, 255, 255, 255, 242, 127, 95, 32, 255, 255, 255, 255, 243, 83,
        160, 160, 255, 255, 255, 255, 244, 95, 65, 32, 255, 255, 255, 255, 245, 51, 130, 160, 255,
        255, 255, 255, 246, 63, 35, 32, 255, 255, 255, 255, 247, 19, 100, 160, 255, 255, 255, 255,
        248, 31, 5, 32, 255, 255, 255, 255, 248, 243, 70, 160, 255, 255, 255, 255, 249, 254, 231,
        32, 255, 255, 255, 255, 250, 211, 40, 160, 255, 255, 255, 255, 251, 232, 3, 160, 255, 255,
        255, 255, 252, 188, 69, 32, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 255, 255, 235, 96, 0, 0, 0, 0, 0, 0, 1,
        4, 255, 255, 241, 240, 0, 8, 0, 0, 0, 0, 0, 12, 76, 77, 84, 0, 43, 48, 48, 0, 45, 48, 49,
        0, 71, 77, 84, 0, 10, 71, 77, 84, 48, 10,
    ];
    pub(crate) const INDIAN_ANTANANARIVO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 145, 243, 205, 244, 255, 255, 255, 255,
        226, 51, 192, 192, 255, 255, 255, 255, 226, 171, 185, 64, 1, 2, 1, 0, 0, 44, 140, 0, 0, 0,
        0, 42, 48, 0, 4, 0, 0, 56, 64, 1, 8, 76, 77, 84, 0, 69, 65, 84, 0, 69, 65, 83, 84, 0, 10,
        69, 65, 84, 45, 51, 10,
    ];
    pub(crate) const INDIAN_CHAGOS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 137, 126, 247, 156, 0, 0, 0, 0, 48, 230,
        221, 176, 1, 2, 0, 0, 67, 228, 0, 0, 0, 0, 70, 80, 0, 4, 0, 0, 84, 96, 0, 8, 76, 77, 84, 0,
        43, 48, 53, 0, 43, 48, 54, 0, 10, 60, 43, 48, 54, 62, 45, 54, 10,
    ];
    pub(crate) const INDIAN_CHRISTMAS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 115, 22, 169, 228, 1, 0, 0, 99, 28, 0, 0, 0,
        0, 98, 112, 0, 4, 76, 77, 84, 0, 43, 48, 55, 0, 10, 60, 43, 48, 55, 62, 45, 55, 10,
    ];
    pub(crate) const INDIAN_COCOS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 10, 255, 255, 255, 255, 124, 85, 38, 164, 1, 0, 0, 90, 220, 0, 0,
        0, 0, 91, 104, 0, 4, 76, 77, 84, 0, 43, 48, 54, 51, 48, 0, 10, 60, 43, 48, 54, 51, 48, 62,
        45, 54, 58, 51, 48, 10,
    ];
    pub(crate) const INDIAN_COMORO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 243, 209, 240, 1, 0, 0, 40, 144, 0, 0,
        0, 0, 42, 48, 0, 4, 76, 77, 84, 0, 69, 65, 84, 0, 10, 69, 65, 84, 45, 51, 10,
    ];
    pub(crate) const INDIAN_KERGUELEN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 218, 97, 98, 128, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        70, 80, 0, 4, 45, 48, 48, 0, 43, 48, 53, 0, 10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const INDIAN_MAHE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 137, 127, 7, 132, 1, 0, 0, 51, 252, 0, 0, 0,
        0, 56, 64, 0, 4, 76, 77, 84, 0, 43, 48, 52, 0, 10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const INDIAN_MALDIVES: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 86, 182, 159, 24, 255, 255, 255, 255, 237,
        47, 195, 152, 1, 2, 0, 0, 68, 232, 0, 0, 0, 0, 68, 232, 0, 4, 0, 0, 70, 80, 0, 8, 76, 77,
        84, 0, 77, 77, 84, 0, 43, 48, 53, 0, 10, 60, 43, 48, 53, 62, 45, 53, 10,
    ];
    pub(crate) const INDIAN_MAURITIUS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        5, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 137, 127, 5, 152, 0, 0, 0, 0, 24, 5, 237,
        64, 0, 0, 0, 0, 24, 219, 114, 48, 0, 0, 0, 0, 73, 3, 150, 224, 0, 0, 0, 0, 73, 206, 143,
        208, 2, 1, 2, 1, 2, 0, 0, 53, 232, 0, 0, 0, 0, 70, 80, 1, 4, 0, 0, 56, 64, 0, 8, 76, 77,
        84, 0, 43, 48, 53, 0, 43, 48, 52, 0, 10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const INDIAN_MAYOTTE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 243, 208, 24, 1, 0, 0, 42, 104, 0, 0,
        0, 0, 42, 48, 0, 4, 76, 77, 84, 0, 69, 65, 84, 0, 10, 69, 65, 84, 45, 51, 10,
    ];
    pub(crate) const INDIAN_REUNION: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 145, 204, 57, 128, 1, 0, 0, 52, 0, 0, 0, 0,
        0, 56, 64, 0, 4, 76, 77, 84, 0, 43, 48, 52, 0, 10, 60, 43, 48, 52, 62, 45, 52, 10,
    ];
    pub(crate) const IRAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        201, 0, 0, 0, 6, 0, 0, 0, 28, 255, 255, 255, 255, 154, 108, 125, 200, 255, 255, 255, 255,
        210, 219, 18, 200, 0, 0, 0, 0, 14, 187, 162, 72, 0, 0, 0, 0, 15, 116, 45, 64, 0, 0, 0, 0,
        16, 142, 64, 48, 0, 0, 0, 0, 16, 237, 58, 64, 0, 0, 0, 0, 17, 85, 103, 200, 0, 0, 0, 0, 18,
        69, 74, 184, 0, 0, 0, 0, 19, 55, 236, 200, 0, 0, 0, 0, 20, 45, 21, 184, 0, 0, 0, 0, 40, 32,
        118, 200, 0, 0, 0, 0, 40, 219, 157, 184, 0, 0, 0, 0, 41, 203, 156, 200, 0, 0, 0, 0, 42,
        190, 34, 184, 0, 0, 0, 0, 43, 172, 208, 72, 0, 0, 0, 0, 44, 159, 86, 56, 0, 0, 0, 0, 45,
        142, 3, 200, 0, 0, 0, 0, 46, 128, 137, 184, 0, 0, 0, 0, 47, 111, 55, 72, 0, 0, 0, 0, 48,
        97, 189, 56, 0, 0, 0, 0, 49, 80, 106, 200, 0, 0, 0, 0, 50, 66, 240, 184, 0, 0, 0, 0, 51,
        50, 239, 200, 0, 0, 0, 0, 52, 37, 117, 184, 0, 0, 0, 0, 53, 20, 35, 72, 0, 0, 0, 0, 54, 6,
        169, 56, 0, 0, 0, 0, 54, 245, 86, 200, 0, 0, 0, 0, 55, 231, 220, 184, 0, 0, 0, 0, 56, 214,
        138, 72, 0, 0, 0, 0, 57, 201, 16, 56, 0, 0, 0, 0, 58, 185, 15, 72, 0, 0, 0, 0, 59, 171,
        149, 56, 0, 0, 0, 0, 60, 154, 66, 200, 0, 0, 0, 0, 61, 140, 200, 184, 0, 0, 0, 0, 62, 123,
        118, 72, 0, 0, 0, 0, 63, 109, 252, 56, 0, 0, 0, 0, 64, 92, 169, 200, 0, 0, 0, 0, 65, 79,
        47, 184, 0, 0, 0, 0, 66, 63, 46, 200, 0, 0, 0, 0, 67, 49, 180, 184, 0, 0, 0, 0, 71, 226,
        201, 72, 0, 0, 0, 0, 72, 213, 79, 56, 0, 0, 0, 0, 73, 197, 78, 72, 0, 0, 0, 0, 74, 183,
        212, 56, 0, 0, 0, 0, 75, 166, 129, 200, 0, 0, 0, 0, 76, 153, 7, 184, 0, 0, 0, 0, 77, 135,
        181, 72, 0, 0, 0, 0, 78, 122, 59, 56, 0, 0, 0, 0, 79, 104, 232, 200, 0, 0, 0, 0, 80, 91,
        110, 184, 0, 0, 0, 0, 81, 75, 109, 200, 0, 0, 0, 0, 82, 61, 243, 184, 0, 0, 0, 0, 83, 44,
        161, 72, 0, 0, 0, 0, 84, 31, 39, 56, 0, 0, 0, 0, 85, 13, 212, 200, 0, 0, 0, 0, 86, 0, 90,
        184, 0, 0, 0, 0, 86, 239, 8, 72, 0, 0, 0, 0, 87, 225, 142, 56, 0, 0, 0, 0, 88, 209, 141,
        72, 0, 0, 0, 0, 89, 196, 19, 56, 0, 0, 0, 0, 90, 178, 192, 200, 0, 0, 0, 0, 91, 165, 70,
        184, 0, 0, 0, 0, 92, 147, 244, 72, 0, 0, 0, 0, 93, 134, 122, 56, 0, 0, 0, 0, 94, 117, 39,
        200, 0, 0, 0, 0, 95, 103, 173, 184, 0, 0, 0, 0, 96, 87, 172, 200, 0, 0, 0, 0, 97, 74, 50,
        184, 0, 0, 0, 0, 98, 56, 224, 72, 0, 0, 0, 0, 99, 43, 102, 56, 0, 0, 0, 0, 100, 26, 19,
        200, 0, 0, 0, 0, 101, 12, 153, 184, 0, 0, 0, 0, 101, 251, 71, 72, 0, 0, 0, 0, 102, 237,
        205, 56, 0, 0, 0, 0, 103, 221, 204, 72, 0, 0, 0, 0, 104, 208, 82, 56, 0, 0, 0, 0, 105, 190,
        255, 200, 0, 0, 0, 0, 106, 177, 133, 184, 0, 0, 0, 0, 107, 160, 51, 72, 0, 0, 0, 0, 108,
        146, 185, 56, 0, 0, 0, 0, 109, 129, 102, 200, 0, 0, 0, 0, 110, 115, 236, 184, 0, 0, 0, 0,
        111, 98, 154, 72, 0, 0, 0, 0, 112, 85, 32, 56, 0, 0, 0, 0, 113, 69, 31, 72, 0, 0, 0, 0,
        114, 55, 165, 56, 0, 0, 0, 0, 115, 38, 82, 200, 0, 0, 0, 0, 116, 24, 216, 184, 0, 0, 0, 0,
        117, 7, 134, 72, 0, 0, 0, 0, 117, 250, 12, 56, 0, 0, 0, 0, 118, 232, 185, 200, 0, 0, 0, 0,
        119, 219, 63, 184, 0, 0, 0, 0, 120, 203, 62, 200, 0, 0, 0, 0, 121, 189, 196, 184, 0, 0, 0,
        0, 122, 172, 114, 72, 0, 0, 0, 0, 123, 158, 248, 56, 0, 0, 0, 0, 124, 141, 165, 200, 0, 0,
        0, 0, 125, 128, 43, 184, 0, 0, 0, 0, 126, 110, 217, 72, 0, 0, 0, 0, 127, 97, 95, 56, 0, 0,
        0, 0, 128, 81, 94, 72, 0, 0, 0, 0, 129, 67, 228, 56, 0, 0, 0, 0, 130, 50, 145, 200, 0, 0,
        0, 0, 131, 37, 23, 184, 0, 0, 0, 0, 132, 19, 197, 72, 0, 0, 0, 0, 133, 6, 75, 56, 0, 0, 0,
        0, 133, 244, 248, 200, 0, 0, 0, 0, 134, 231, 126, 184, 0, 0, 0, 0, 135, 215, 125, 200, 0,
        0, 0, 0, 136, 202, 3, 184, 0, 0, 0, 0, 137, 184, 177, 72, 0, 0, 0, 0, 138, 171, 55, 56, 0,
        0, 0, 0, 139, 153, 228, 200, 0, 0, 0, 0, 140, 140, 106, 184, 0, 0, 0, 0, 141, 123, 24, 72,
        0, 0, 0, 0, 142, 109, 158, 56, 0, 0, 0, 0, 143, 93, 157, 72, 0, 0, 0, 0, 144, 80, 35, 56,
        0, 0, 0, 0, 145, 62, 208, 200, 0, 0, 0, 0, 146, 49, 86, 184, 0, 0, 0, 0, 147, 32, 4, 72, 0,
        0, 0, 0, 148, 18, 138, 56, 0, 0, 0, 0, 149, 1, 55, 200, 0, 0, 0, 0, 149, 243, 189, 184, 0,
        0, 0, 0, 150, 227, 188, 200, 0, 0, 0, 0, 151, 214, 66, 184, 0, 0, 0, 0, 152, 196, 240, 72,
        0, 0, 0, 0, 153, 183, 118, 56, 0, 0, 0, 0, 154, 166, 35, 200, 0, 0, 0, 0, 155, 152, 169,
        184, 0, 0, 0, 0, 156, 135, 87, 72, 0, 0, 0, 0, 157, 121, 221, 56, 0, 0, 0, 0, 158, 105,
        220, 72, 0, 0, 0, 0, 159, 92, 98, 56, 0, 0, 0, 0, 160, 75, 15, 200, 0, 0, 0, 0, 161, 61,
        149, 184, 0, 0, 0, 0, 162, 44, 67, 72, 0, 0, 0, 0, 163, 30, 201, 56, 0, 0, 0, 0, 164, 13,
        118, 200, 0, 0, 0, 0, 164, 255, 252, 184, 0, 0, 0, 0, 165, 239, 251, 200, 0, 0, 0, 0, 166,
        226, 129, 184, 0, 0, 0, 0, 167, 209, 47, 72, 0, 0, 0, 0, 168, 195, 181, 56, 0, 0, 0, 0,
        169, 178, 98, 200, 0, 0, 0, 0, 170, 164, 232, 184, 0, 0, 0, 0, 171, 147, 150, 72, 0, 0, 0,
        0, 172, 134, 28, 56, 0, 0, 0, 0, 173, 116, 201, 200, 0, 0, 0, 0, 174, 103, 79, 184, 0, 0,
        0, 0, 175, 87, 78, 200, 0, 0, 0, 0, 176, 73, 212, 184, 0, 0, 0, 0, 177, 56, 130, 72, 0, 0,
        0, 0, 178, 43, 8, 56, 0, 0, 0, 0, 179, 25, 181, 200, 0, 0, 0, 0, 180, 12, 59, 184, 0, 0, 0,
        0, 180, 250, 233, 72, 0, 0, 0, 0, 181, 237, 111, 56, 0, 0, 0, 0, 182, 221, 110, 72, 0, 0,
        0, 0, 183, 207, 244, 56, 0, 0, 0, 0, 184, 190, 161, 200, 0, 0, 0, 0, 185, 177, 39, 184, 0,
        0, 0, 0, 186, 159, 213, 72, 0, 0, 0, 0, 187, 146, 91, 56, 0, 0, 0, 0, 188, 129, 8, 200, 0,
        0, 0, 0, 189, 115, 142, 184, 0, 0, 0, 0, 190, 99, 141, 200, 0, 0, 0, 0, 191, 86, 19, 184,
        0, 0, 0, 0, 192, 68, 193, 72, 0, 0, 0, 0, 193, 55, 71, 56, 0, 0, 0, 0, 194, 37, 244, 200,
        0, 0, 0, 0, 195, 24, 122, 184, 0, 0, 0, 0, 196, 7, 40, 72, 0, 0, 0, 0, 196, 249, 174, 56,
        0, 0, 0, 0, 197, 233, 173, 72, 0, 0, 0, 0, 198, 220, 51, 56, 0, 0, 0, 0, 199, 202, 224,
        200, 0, 0, 0, 0, 200, 189, 102, 184, 0, 0, 0, 0, 201, 172, 20, 72, 0, 0, 0, 0, 202, 158,
        154, 56, 0, 0, 0, 0, 203, 141, 71, 200, 0, 0, 0, 0, 204, 127, 205, 184, 0, 0, 0, 0, 205,
        111, 204, 200, 0, 0, 0, 0, 206, 98, 82, 184, 0, 0, 0, 0, 207, 81, 0, 72, 0, 0, 0, 0, 208,
        67, 134, 56, 0, 0, 0, 0, 209, 50, 51, 200, 0, 0, 0, 0, 210, 36, 185, 184, 0, 0, 0, 0, 211,
        19, 103, 72, 0, 0, 0, 0, 212, 5, 237, 56, 0, 0, 0, 0, 212, 245, 236, 72, 0, 0, 0, 0, 213,
        232, 114, 56, 0, 0, 0, 0, 214, 215, 31, 200, 0, 0, 0, 0, 215, 201, 165, 184, 0, 0, 0, 0,
        216, 184, 83, 72, 0, 0, 0, 0, 217, 170, 217, 56, 0, 0, 0, 0, 218, 153, 134, 200, 0, 0, 0,
        0, 219, 140, 12, 184, 0, 0, 0, 0, 220, 124, 11, 200, 0, 0, 0, 0, 221, 110, 145, 184, 0, 0,
        0, 0, 222, 93, 63, 72, 1, 2, 4, 3, 4, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
        2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 0, 0,
        48, 56, 0, 0, 0, 0, 48, 56, 0, 4, 0, 0, 49, 56, 0, 8, 0, 0, 70, 80, 1, 14, 0, 0, 56, 64, 0,
        18, 0, 0, 63, 72, 1, 22, 76, 77, 84, 0, 84, 77, 84, 0, 43, 48, 51, 51, 48, 0, 43, 48, 53,
        0, 43, 48, 52, 0, 43, 48, 52, 51, 48, 0, 10, 60, 43, 48, 51, 51, 48, 62, 45, 51, 58, 51,
        48, 60, 43, 48, 52, 51, 48, 62, 44, 74, 55, 57, 47, 50, 52, 44, 74, 50, 54, 51, 47, 50, 52,
        10,
    ];
    pub(crate) const ISRAEL: &[u8] = &[
        84, 90, 105, 102, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 51,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        100, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 86, 182, 194, 250, 255, 255, 255, 255,
        158, 48, 69, 136, 255, 255, 255, 255, 200, 89, 207, 0, 255, 255, 255, 255, 200, 250, 166,
        0, 255, 255, 255, 255, 201, 56, 156, 128, 255, 255, 255, 255, 204, 229, 235, 128, 255, 255,
        255, 255, 205, 172, 254, 0, 255, 255, 255, 255, 206, 199, 31, 0, 255, 255, 255, 255, 207,
        143, 131, 0, 255, 255, 255, 255, 208, 169, 164, 0, 255, 255, 255, 255, 209, 132, 125, 0,
        255, 255, 255, 255, 210, 138, 215, 128, 255, 255, 255, 255, 211, 101, 176, 128, 255, 255,
        255, 255, 212, 108, 11, 0, 255, 255, 255, 255, 215, 90, 48, 128, 255, 255, 255, 255, 215,
        223, 88, 0, 255, 255, 255, 255, 216, 47, 195, 128, 255, 255, 255, 255, 217, 30, 99, 0, 255,
        255, 255, 255, 218, 16, 247, 0, 255, 255, 255, 255, 218, 235, 208, 0, 255, 255, 255, 255,
        219, 180, 52, 0, 255, 255, 255, 255, 220, 185, 61, 0, 255, 255, 255, 255, 221, 224, 141, 0,
        255, 255, 255, 255, 222, 180, 206, 128, 255, 255, 255, 255, 223, 164, 191, 128, 255, 255,
        255, 255, 224, 139, 118, 0, 255, 255, 255, 255, 225, 86, 125, 0, 255, 255, 255, 255, 226,
        190, 102, 128, 255, 255, 255, 255, 227, 54, 95, 0, 255, 255, 255, 255, 228, 158, 72, 128,
        255, 255, 255, 255, 229, 22, 65, 0, 255, 255, 255, 255, 230, 116, 240, 0, 255, 255, 255,
        255, 231, 17, 210, 128, 255, 255, 255, 255, 232, 38, 173, 128, 255, 255, 255, 255, 232,
        232, 122, 0, 0, 0, 0, 0, 8, 124, 139, 224, 0, 0, 0, 0, 8, 253, 176, 208, 0, 0, 0, 0, 9,
        246, 234, 96, 0, 0, 0, 0, 10, 166, 51, 208, 0, 0, 0, 0, 19, 233, 252, 96, 0, 0, 0, 0, 20,
        33, 91, 96, 0, 0, 0, 0, 26, 250, 198, 96, 0, 0, 0, 0, 27, 142, 110, 96, 0, 0, 0, 0, 28,
        190, 248, 224, 0, 0, 0, 0, 29, 119, 124, 208, 0, 0, 0, 0, 30, 204, 255, 96, 0, 0, 0, 0, 31,
        96, 153, 80, 0, 0, 0, 0, 32, 130, 177, 96, 0, 0, 0, 0, 33, 73, 181, 208, 0, 0, 0, 0, 34,
        94, 158, 224, 0, 0, 0, 0, 35, 32, 93, 80, 0, 0, 0, 0, 36, 90, 48, 96, 0, 0, 0, 0, 37, 0,
        63, 80, 0, 0, 0, 0, 38, 11, 237, 224, 0, 0, 0, 0, 38, 214, 230, 208, 0, 0, 0, 0, 39, 235,
        207, 224, 0, 0, 0, 0, 40, 192, 3, 80, 0, 0, 0, 0, 41, 212, 236, 96, 0, 0, 0, 0, 42, 169,
        31, 208, 0, 0, 0, 0, 43, 187, 101, 224, 0, 0, 0, 0, 44, 137, 1, 208, 0, 0, 0, 0, 45, 155,
        71, 224, 0, 0, 0, 0, 46, 95, 169, 80, 0, 0, 0, 0, 47, 123, 41, 224, 0, 0, 0, 0, 48, 72,
        197, 208, 0, 0, 0, 0, 49, 72, 150, 224, 0, 0, 0, 0, 50, 60, 110, 80, 0, 0, 0, 0, 51, 49,
        179, 96, 0, 0, 0, 0, 52, 26, 254, 208, 0, 0, 0, 0, 53, 17, 149, 96, 0, 0, 0, 0, 53, 241,
        166, 80, 0, 0, 0, 0, 55, 4, 8, 128, 0, 0, 0, 0, 55, 207, 1, 112, 0, 0, 0, 0, 56, 246, 95,
        128, 0, 0, 0, 0, 57, 220, 249, 224, 0, 0, 0, 0, 58, 208, 237, 112, 0, 0, 0, 0, 59, 174, 91,
        96, 0, 0, 0, 0, 60, 163, 160, 112, 0, 0, 0, 0, 61, 160, 178, 96, 0, 0, 0, 0, 62, 131, 130,
        112, 0, 0, 0, 0, 63, 124, 159, 224, 0, 0, 0, 0, 64, 115, 54, 112, 0, 0, 0, 0, 65, 80, 164,
        96, 0, 0, 0, 0, 66, 76, 143, 0, 0, 0, 0, 0, 67, 72, 79, 112, 0, 0, 0, 0, 68, 44, 113, 0, 0,
        0, 0, 0, 69, 30, 246, 240, 0, 0, 0, 0, 70, 12, 83, 0, 0, 0, 0, 0, 70, 236, 99, 240, 0, 0,
        0, 0, 71, 236, 53, 0, 0, 0, 0, 0, 72, 231, 245, 112, 0, 0, 0, 0, 73, 204, 23, 0, 0, 0, 0,
        0, 74, 190, 156, 240, 0, 0, 0, 0, 75, 171, 249, 0, 0, 0, 0, 0, 76, 140, 9, 240, 0, 0, 0, 0,
        77, 149, 21, 128, 0, 0, 0, 0, 78, 135, 155, 112, 0, 0, 0, 0, 79, 116, 247, 128, 0, 0, 0, 0,
        80, 94, 66, 240, 0, 0, 0, 0, 81, 84, 217, 128, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 4,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0, 33, 6, 0,
        0, 0, 0, 32, 248, 0, 4, 0, 0, 42, 48, 1, 8, 0, 0, 28, 32, 0, 12, 0, 0, 56, 64, 1, 16, 76,
        77, 84, 0, 74, 77, 84, 0, 73, 68, 84, 0, 73, 83, 84, 0, 73, 68, 68, 84, 0, 10, 73, 83, 84,
        45, 50, 73, 68, 84, 44, 77, 51, 46, 52, 46, 52, 47, 50, 54, 44, 77, 49, 48, 46, 53, 46, 48,
        10,
    ];
    pub(crate) const JAMAICA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        22, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 105, 135, 35, 126, 255, 255, 255, 255,
        147, 15, 180, 254, 0, 0, 0, 0, 7, 141, 25, 112, 0, 0, 0, 0, 9, 16, 164, 96, 0, 0, 0, 0, 9,
        173, 148, 240, 0, 0, 0, 0, 10, 240, 134, 96, 0, 0, 0, 0, 11, 224, 133, 112, 0, 0, 0, 0, 12,
        217, 162, 224, 0, 0, 0, 0, 13, 192, 103, 112, 0, 0, 0, 0, 14, 185, 132, 224, 0, 0, 0, 0,
        15, 169, 131, 240, 0, 0, 0, 0, 16, 153, 102, 224, 0, 0, 0, 0, 17, 137, 101, 240, 0, 0, 0,
        0, 18, 121, 72, 224, 0, 0, 0, 0, 19, 105, 71, 240, 0, 0, 0, 0, 20, 89, 42, 224, 0, 0, 0, 0,
        21, 73, 41, 240, 0, 0, 0, 0, 22, 57, 12, 224, 0, 0, 0, 0, 23, 41, 11, 240, 0, 0, 0, 0, 24,
        34, 41, 96, 0, 0, 0, 0, 25, 8, 237, 240, 0, 0, 0, 0, 26, 2, 11, 96, 1, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 255, 255, 184, 2, 0, 0, 255, 255, 184, 2, 0, 4,
        255, 255, 185, 176, 0, 8, 255, 255, 199, 192, 1, 12, 76, 77, 84, 0, 75, 77, 84, 0, 69, 83,
        84, 0, 69, 68, 84, 0, 10, 69, 83, 84, 53, 10,
    ];
    pub(crate) const JAPAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        9, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 101, 194, 164, 112, 255, 255, 255, 255,
        215, 62, 2, 112, 255, 255, 255, 255, 215, 237, 89, 240, 255, 255, 255, 255, 216, 248, 250,
        112, 255, 255, 255, 255, 217, 205, 59, 240, 255, 255, 255, 255, 219, 7, 0, 240, 255, 255,
        255, 255, 219, 173, 29, 240, 255, 255, 255, 255, 220, 230, 226, 240, 255, 255, 255, 255,
        221, 140, 255, 240, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 131, 3, 0, 0, 0, 0, 140, 160, 1, 4, 0,
        0, 126, 144, 0, 8, 76, 77, 84, 0, 74, 68, 84, 0, 74, 83, 84, 0, 10, 74, 83, 84, 45, 57, 10,
    ];
    pub(crate) const KWAJALEIN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        6, 0, 0, 0, 6, 0, 0, 0, 24, 255, 255, 255, 255, 126, 54, 24, 32, 255, 255, 255, 255, 193,
        237, 53, 208, 255, 255, 255, 255, 201, 234, 10, 96, 255, 255, 255, 255, 207, 70, 129, 240,
        255, 255, 255, 255, 255, 134, 27, 80, 0, 0, 0, 0, 44, 118, 14, 64, 1, 2, 3, 1, 4, 5, 0, 0,
        156, 224, 0, 0, 0, 0, 154, 176, 0, 4, 0, 0, 140, 160, 0, 8, 0, 0, 126, 144, 0, 12, 255,
        255, 87, 64, 0, 16, 0, 0, 168, 192, 0, 20, 76, 77, 84, 0, 43, 49, 49, 0, 43, 49, 48, 0, 43,
        48, 57, 0, 45, 49, 50, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50, 62, 45, 49, 50, 10,
    ];
    pub(crate) const LIBYA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        32, 0, 0, 0, 4, 0, 0, 0, 17, 255, 255, 255, 255, 161, 242, 193, 36, 255, 255, 255, 255,
        221, 187, 177, 16, 255, 255, 255, 255, 222, 35, 173, 96, 255, 255, 255, 255, 225, 120, 210,
        16, 255, 255, 255, 255, 225, 231, 101, 224, 255, 255, 255, 255, 229, 47, 63, 112, 255, 255,
        255, 255, 229, 169, 204, 224, 255, 255, 255, 255, 235, 78, 198, 240, 0, 0, 0, 0, 22, 146,
        66, 96, 0, 0, 0, 0, 23, 8, 247, 112, 0, 0, 0, 0, 23, 250, 43, 224, 0, 0, 0, 0, 24, 234, 42,
        240, 0, 0, 0, 0, 25, 219, 95, 96, 0, 0, 0, 0, 26, 204, 175, 240, 0, 0, 0, 0, 27, 189, 228,
        96, 0, 0, 0, 0, 28, 180, 122, 240, 0, 0, 0, 0, 29, 159, 23, 224, 0, 0, 0, 0, 30, 147, 11,
        112, 0, 0, 0, 0, 31, 130, 238, 96, 0, 0, 0, 0, 32, 112, 74, 112, 0, 0, 0, 0, 33, 97, 126,
        224, 0, 0, 0, 0, 34, 82, 207, 112, 0, 0, 0, 0, 35, 68, 3, 224, 0, 0, 0, 0, 36, 52, 2, 240,
        0, 0, 0, 0, 37, 37, 55, 96, 0, 0, 0, 0, 38, 64, 183, 240, 0, 0, 0, 0, 50, 78, 241, 96, 0,
        0, 0, 0, 51, 68, 54, 112, 0, 0, 0, 0, 52, 53, 106, 224, 0, 0, 0, 0, 80, 157, 153, 0, 0, 0,
        0, 0, 81, 84, 217, 128, 0, 0, 0, 0, 82, 105, 180, 128, 2, 1, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 1, 3, 2, 1, 3, 0, 0, 12, 92, 0, 0, 0, 0, 28,
        32, 1, 4, 0, 0, 14, 16, 0, 9, 0, 0, 28, 32, 0, 13, 76, 77, 84, 0, 67, 69, 83, 84, 0, 67,
        69, 84, 0, 69, 69, 84, 0, 10, 69, 69, 84, 45, 50, 10,
    ];
    pub(crate) const MET: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        53, 0, 0, 0, 2, 0, 0, 0, 9, 255, 255, 255, 255, 155, 12, 23, 96, 255, 255, 255, 255, 155,
        213, 218, 240, 255, 255, 255, 255, 156, 217, 174, 144, 255, 255, 255, 255, 157, 164, 181,
        144, 255, 255, 255, 255, 158, 185, 144, 144, 255, 255, 255, 255, 159, 132, 151, 144, 255,
        255, 255, 255, 200, 9, 113, 144, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255, 255, 255,
        205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207, 146, 52,
        16, 255, 255, 255, 255, 208, 130, 37, 16, 255, 255, 255, 255, 209, 114, 22, 16, 255, 255,
        255, 255, 210, 78, 64, 144, 0, 0, 0, 0, 13, 164, 99, 144, 0, 0, 0, 0, 14, 139, 26, 16, 0,
        0, 0, 0, 15, 132, 69, 144, 0, 0, 0, 0, 16, 116, 54, 144, 0, 0, 0, 0, 17, 100, 39, 144, 0,
        0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0,
        0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0,
        0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0,
        0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0,
        0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0,
        0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0,
        35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12,
        24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37,
        144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248,
        144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132,
        203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93,
        217, 16, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 14, 16,
        0, 5, 0, 0, 28, 32, 1, 0, 77, 69, 83, 84, 0, 77, 69, 84, 0, 10, 77, 69, 84, 45, 49, 77, 69,
        83, 84, 44, 77, 51, 46, 53, 46, 48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const MST: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 255, 255, 157, 144, 0, 0, 77, 83, 84, 0, 10, 77, 83, 84, 55, 10,
    ];
    pub(crate) const MST_7_MDT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        88, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 158, 166, 58, 144, 255, 255, 255, 255,
        159, 187, 7, 128, 255, 255, 255, 255, 160, 134, 28, 144, 255, 255, 255, 255, 161, 154, 233,
        128, 255, 255, 255, 255, 203, 137, 12, 144, 255, 255, 255, 255, 210, 35, 244, 112, 255,
        255, 255, 255, 210, 97, 24, 0, 255, 255, 255, 255, 250, 248, 117, 16, 255, 255, 255, 255,
        251, 232, 88, 0, 255, 255, 255, 255, 252, 216, 87, 16, 255, 255, 255, 255, 253, 200, 58, 0,
        255, 255, 255, 255, 254, 184, 57, 16, 255, 255, 255, 255, 255, 168, 28, 0, 0, 0, 0, 0, 0,
        152, 27, 16, 0, 0, 0, 0, 1, 135, 254, 0, 0, 0, 0, 0, 2, 119, 253, 16, 0, 0, 0, 0, 3, 113,
        26, 128, 0, 0, 0, 0, 4, 97, 25, 144, 0, 0, 0, 0, 5, 80, 252, 128, 0, 0, 0, 0, 6, 64, 251,
        144, 0, 0, 0, 0, 7, 48, 222, 128, 0, 0, 0, 0, 7, 141, 53, 144, 0, 0, 0, 0, 9, 16, 192, 128,
        0, 0, 0, 0, 9, 173, 177, 16, 0, 0, 0, 0, 10, 240, 162, 128, 0, 0, 0, 0, 11, 224, 161, 144,
        0, 0, 0, 0, 12, 217, 191, 0, 0, 0, 0, 0, 13, 192, 131, 144, 0, 0, 0, 0, 14, 185, 161, 0, 0,
        0, 0, 0, 15, 169, 160, 16, 0, 0, 0, 0, 16, 153, 131, 0, 0, 0, 0, 0, 17, 137, 130, 16, 0, 0,
        0, 0, 18, 121, 101, 0, 0, 0, 0, 0, 19, 105, 100, 16, 0, 0, 0, 0, 20, 89, 71, 0, 0, 0, 0, 0,
        21, 73, 70, 16, 0, 0, 0, 0, 22, 57, 41, 0, 0, 0, 0, 0, 23, 41, 40, 16, 0, 0, 0, 0, 24, 34,
        69, 128, 0, 0, 0, 0, 25, 9, 10, 16, 0, 0, 0, 0, 26, 2, 39, 128, 0, 0, 0, 0, 26, 242, 38,
        144, 0, 0, 0, 0, 27, 226, 9, 128, 0, 0, 0, 0, 28, 210, 8, 144, 0, 0, 0, 0, 29, 193, 235,
        128, 0, 0, 0, 0, 30, 177, 234, 144, 0, 0, 0, 0, 31, 161, 205, 128, 0, 0, 0, 0, 32, 118, 29,
        16, 0, 0, 0, 0, 33, 129, 175, 128, 0, 0, 0, 0, 34, 85, 255, 16, 0, 0, 0, 0, 35, 106, 204,
        0, 0, 0, 0, 0, 36, 53, 225, 16, 0, 0, 0, 0, 37, 74, 174, 0, 0, 0, 0, 0, 38, 21, 195, 16, 0,
        0, 0, 0, 39, 42, 144, 0, 0, 0, 0, 0, 39, 254, 223, 144, 0, 0, 0, 0, 41, 10, 114, 0, 0, 0,
        0, 0, 41, 222, 193, 144, 0, 0, 0, 0, 42, 234, 84, 0, 0, 0, 0, 0, 43, 190, 163, 144, 0, 0,
        0, 0, 44, 211, 112, 128, 0, 0, 0, 0, 45, 158, 133, 144, 0, 0, 0, 0, 46, 179, 82, 128, 0, 0,
        0, 0, 47, 126, 103, 144, 0, 0, 0, 0, 48, 147, 52, 128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0,
        0, 0, 50, 115, 22, 128, 0, 0, 0, 0, 51, 71, 102, 16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0,
        0, 53, 39, 72, 16, 0, 0, 0, 0, 54, 50, 218, 128, 0, 0, 0, 0, 55, 7, 42, 16, 0, 0, 0, 0, 56,
        27, 247, 0, 0, 0, 0, 0, 56, 231, 12, 16, 0, 0, 0, 0, 57, 251, 217, 0, 0, 0, 0, 0, 58, 198,
        238, 16, 0, 0, 0, 0, 59, 219, 187, 0, 0, 0, 0, 0, 60, 176, 10, 144, 0, 0, 0, 0, 61, 187,
        157, 0, 0, 0, 0, 0, 62, 143, 236, 144, 0, 0, 0, 0, 63, 155, 127, 0, 0, 0, 0, 0, 64, 111,
        206, 144, 0, 0, 0, 0, 65, 132, 155, 128, 0, 0, 0, 0, 66, 79, 176, 144, 0, 0, 0, 0, 67, 100,
        125, 128, 0, 0, 0, 0, 68, 47, 146, 144, 0, 0, 0, 0, 69, 68, 95, 128, 0, 0, 0, 0, 69, 243,
        197, 16, 1, 0, 1, 0, 2, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        1, 255, 255, 157, 144, 0, 4, 255, 255, 171, 160, 1, 0, 255, 255, 171, 160, 1, 8, 255, 255,
        171, 160, 1, 12, 77, 68, 84, 0, 77, 83, 84, 0, 77, 87, 84, 0, 77, 80, 84, 0, 10, 77, 83,
        84, 55, 77, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const NAVAJO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        97, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 94, 4, 12, 176, 255, 255, 255, 255, 158,
        166, 58, 144, 255, 255, 255, 255, 159, 187, 7, 128, 255, 255, 255, 255, 160, 134, 28, 144,
        255, 255, 255, 255, 161, 154, 233, 128, 255, 255, 255, 255, 162, 101, 254, 144, 255, 255,
        255, 255, 163, 132, 6, 0, 255, 255, 255, 255, 164, 69, 224, 144, 255, 255, 255, 255, 164,
        143, 166, 128, 255, 255, 255, 255, 203, 137, 12, 144, 255, 255, 255, 255, 210, 35, 244,
        112, 255, 255, 255, 255, 210, 97, 24, 0, 255, 255, 255, 255, 247, 47, 118, 144, 255, 255,
        255, 255, 248, 40, 148, 0, 255, 255, 255, 255, 249, 15, 88, 144, 255, 255, 255, 255, 250,
        8, 118, 0, 255, 255, 255, 255, 250, 248, 117, 16, 255, 255, 255, 255, 251, 232, 88, 0, 255,
        255, 255, 255, 252, 216, 87, 16, 255, 255, 255, 255, 253, 200, 58, 0, 255, 255, 255, 255,
        254, 184, 57, 16, 255, 255, 255, 255, 255, 168, 28, 0, 0, 0, 0, 0, 0, 152, 27, 16, 0, 0, 0,
        0, 1, 135, 254, 0, 0, 0, 0, 0, 2, 119, 253, 16, 0, 0, 0, 0, 3, 113, 26, 128, 0, 0, 0, 0, 4,
        97, 25, 144, 0, 0, 0, 0, 5, 80, 252, 128, 0, 0, 0, 0, 6, 64, 251, 144, 0, 0, 0, 0, 7, 48,
        222, 128, 0, 0, 0, 0, 7, 141, 53, 144, 0, 0, 0, 0, 9, 16, 192, 128, 0, 0, 0, 0, 9, 173,
        177, 16, 0, 0, 0, 0, 10, 240, 162, 128, 0, 0, 0, 0, 11, 224, 161, 144, 0, 0, 0, 0, 12, 217,
        191, 0, 0, 0, 0, 0, 13, 192, 131, 144, 0, 0, 0, 0, 14, 185, 161, 0, 0, 0, 0, 0, 15, 169,
        160, 16, 0, 0, 0, 0, 16, 153, 131, 0, 0, 0, 0, 0, 17, 137, 130, 16, 0, 0, 0, 0, 18, 121,
        101, 0, 0, 0, 0, 0, 19, 105, 100, 16, 0, 0, 0, 0, 20, 89, 71, 0, 0, 0, 0, 0, 21, 73, 70,
        16, 0, 0, 0, 0, 22, 57, 41, 0, 0, 0, 0, 0, 23, 41, 40, 16, 0, 0, 0, 0, 24, 34, 69, 128, 0,
        0, 0, 0, 25, 9, 10, 16, 0, 0, 0, 0, 26, 2, 39, 128, 0, 0, 0, 0, 26, 242, 38, 144, 0, 0, 0,
        0, 27, 226, 9, 128, 0, 0, 0, 0, 28, 210, 8, 144, 0, 0, 0, 0, 29, 193, 235, 128, 0, 0, 0, 0,
        30, 177, 234, 144, 0, 0, 0, 0, 31, 161, 205, 128, 0, 0, 0, 0, 32, 118, 29, 16, 0, 0, 0, 0,
        33, 129, 175, 128, 0, 0, 0, 0, 34, 85, 255, 16, 0, 0, 0, 0, 35, 106, 204, 0, 0, 0, 0, 0,
        36, 53, 225, 16, 0, 0, 0, 0, 37, 74, 174, 0, 0, 0, 0, 0, 38, 21, 195, 16, 0, 0, 0, 0, 39,
        42, 144, 0, 0, 0, 0, 0, 39, 254, 223, 144, 0, 0, 0, 0, 41, 10, 114, 0, 0, 0, 0, 0, 41, 222,
        193, 144, 0, 0, 0, 0, 42, 234, 84, 0, 0, 0, 0, 0, 43, 190, 163, 144, 0, 0, 0, 0, 44, 211,
        112, 128, 0, 0, 0, 0, 45, 158, 133, 144, 0, 0, 0, 0, 46, 179, 82, 128, 0, 0, 0, 0, 47, 126,
        103, 144, 0, 0, 0, 0, 48, 147, 52, 128, 0, 0, 0, 0, 49, 103, 132, 16, 0, 0, 0, 0, 50, 115,
        22, 128, 0, 0, 0, 0, 51, 71, 102, 16, 0, 0, 0, 0, 52, 82, 248, 128, 0, 0, 0, 0, 53, 39, 72,
        16, 0, 0, 0, 0, 54, 50, 218, 128, 0, 0, 0, 0, 55, 7, 42, 16, 0, 0, 0, 0, 56, 27, 247, 0, 0,
        0, 0, 0, 56, 231, 12, 16, 0, 0, 0, 0, 57, 251, 217, 0, 0, 0, 0, 0, 58, 198, 238, 16, 0, 0,
        0, 0, 59, 219, 187, 0, 0, 0, 0, 0, 60, 176, 10, 144, 0, 0, 0, 0, 61, 187, 157, 0, 0, 0, 0,
        0, 62, 143, 236, 144, 0, 0, 0, 0, 63, 155, 127, 0, 0, 0, 0, 0, 64, 111, 206, 144, 0, 0, 0,
        0, 65, 132, 155, 128, 0, 0, 0, 0, 66, 79, 176, 144, 0, 0, 0, 0, 67, 100, 125, 128, 0, 0, 0,
        0, 68, 47, 146, 144, 0, 0, 0, 0, 69, 68, 95, 128, 0, 0, 0, 0, 69, 243, 197, 16, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 3, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 255, 255, 157, 148, 0, 0, 255, 255, 171, 160, 1, 4, 255, 255, 157, 144, 0, 8, 255,
        255, 171, 160, 1, 12, 255, 255, 171, 160, 1, 16, 76, 77, 84, 0, 77, 68, 84, 0, 77, 83, 84,
        0, 77, 87, 84, 0, 77, 80, 84, 0, 10, 77, 83, 84, 55, 77, 68, 84, 44, 77, 51, 46, 50, 46,
        48, 44, 77, 49, 49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const NZ: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        96, 0, 0, 0, 6, 0, 0, 0, 19, 255, 255, 255, 255, 65, 183, 76, 168, 255, 255, 255, 255, 176,
        180, 178, 232, 255, 255, 255, 255, 177, 81, 135, 88, 255, 255, 255, 255, 178, 120, 229,
        104, 255, 255, 255, 255, 179, 67, 229, 96, 255, 255, 255, 255, 180, 88, 199, 104, 255, 255,
        255, 255, 181, 35, 199, 96, 255, 255, 255, 255, 182, 56, 169, 104, 255, 255, 255, 255, 183,
        3, 169, 96, 255, 255, 255, 255, 184, 24, 139, 104, 255, 255, 255, 255, 184, 236, 197, 224,
        255, 255, 255, 255, 185, 248, 109, 104, 255, 255, 255, 255, 186, 204, 167, 224, 255, 255,
        255, 255, 187, 216, 79, 104, 255, 255, 255, 255, 188, 227, 232, 224, 255, 255, 255, 255,
        189, 174, 246, 232, 255, 255, 255, 255, 190, 195, 202, 224, 255, 255, 255, 255, 191, 142,
        216, 232, 255, 255, 255, 255, 192, 163, 172, 224, 255, 255, 255, 255, 193, 110, 186, 232,
        255, 255, 255, 255, 194, 131, 142, 224, 255, 255, 255, 255, 195, 78, 156, 232, 255, 255,
        255, 255, 196, 99, 112, 224, 255, 255, 255, 255, 197, 46, 126, 232, 255, 255, 255, 255,
        198, 76, 141, 96, 255, 255, 255, 255, 199, 14, 96, 232, 255, 255, 255, 255, 200, 44, 111,
        96, 255, 255, 255, 255, 200, 247, 125, 104, 255, 255, 255, 255, 210, 218, 154, 64, 0, 0, 0,
        0, 9, 24, 253, 224, 0, 0, 0, 0, 9, 172, 165, 224, 0, 0, 0, 0, 10, 239, 165, 96, 0, 0, 0, 0,
        11, 158, 252, 224, 0, 0, 0, 0, 12, 216, 193, 224, 0, 0, 0, 0, 13, 126, 222, 224, 0, 0, 0,
        0, 14, 184, 163, 224, 0, 0, 0, 0, 15, 94, 192, 224, 0, 0, 0, 0, 16, 152, 133, 224, 0, 0, 0,
        0, 17, 62, 162, 224, 0, 0, 0, 0, 18, 120, 103, 224, 0, 0, 0, 0, 19, 30, 132, 224, 0, 0, 0,
        0, 20, 88, 73, 224, 0, 0, 0, 0, 20, 254, 102, 224, 0, 0, 0, 0, 22, 56, 43, 224, 0, 0, 0, 0,
        22, 231, 131, 96, 0, 0, 0, 0, 24, 33, 72, 96, 0, 0, 0, 0, 24, 199, 101, 96, 0, 0, 0, 0, 26,
        1, 42, 96, 0, 0, 0, 0, 26, 167, 71, 96, 0, 0, 0, 0, 27, 225, 12, 96, 0, 0, 0, 0, 28, 135,
        41, 96, 0, 0, 0, 0, 29, 192, 238, 96, 0, 0, 0, 0, 30, 103, 11, 96, 0, 0, 0, 0, 31, 160,
        208, 96, 0, 0, 0, 0, 32, 70, 237, 96, 0, 0, 0, 0, 33, 128, 178, 96, 0, 0, 0, 0, 34, 48, 9,
        224, 0, 0, 0, 0, 35, 105, 206, 224, 0, 0, 0, 0, 36, 15, 235, 224, 0, 0, 0, 0, 37, 46, 1,
        96, 0, 0, 0, 0, 38, 2, 66, 224, 0, 0, 0, 0, 39, 13, 227, 96, 0, 0, 0, 0, 39, 226, 36, 224,
        0, 0, 0, 0, 40, 237, 197, 96, 0, 0, 0, 0, 41, 194, 6, 224, 0, 0, 0, 0, 42, 205, 167, 96, 0,
        0, 0, 0, 43, 171, 35, 96, 0, 0, 0, 0, 44, 173, 137, 96, 0, 0, 0, 0, 45, 139, 5, 96, 0, 0,
        0, 0, 46, 141, 107, 96, 0, 0, 0, 0, 47, 106, 231, 96, 0, 0, 0, 0, 48, 109, 77, 96, 0, 0, 0,
        0, 49, 74, 201, 96, 0, 0, 0, 0, 50, 86, 105, 224, 0, 0, 0, 0, 51, 42, 171, 96, 0, 0, 0, 0,
        52, 54, 75, 224, 0, 0, 0, 0, 53, 10, 141, 96, 0, 0, 0, 0, 54, 22, 45, 224, 0, 0, 0, 0, 54,
        243, 169, 224, 0, 0, 0, 0, 55, 246, 15, 224, 0, 0, 0, 0, 56, 211, 139, 224, 0, 0, 0, 0, 57,
        213, 241, 224, 0, 0, 0, 0, 58, 179, 109, 224, 0, 0, 0, 0, 59, 191, 14, 96, 0, 0, 0, 0, 60,
        147, 79, 224, 0, 0, 0, 0, 61, 158, 240, 96, 0, 0, 0, 0, 62, 115, 49, 224, 0, 0, 0, 0, 63,
        126, 210, 96, 0, 0, 0, 0, 64, 92, 78, 96, 0, 0, 0, 0, 65, 94, 180, 96, 0, 0, 0, 0, 66, 60,
        48, 96, 0, 0, 0, 0, 67, 62, 150, 96, 0, 0, 0, 0, 68, 28, 18, 96, 0, 0, 0, 0, 69, 30, 120,
        96, 0, 0, 0, 0, 69, 251, 244, 96, 0, 0, 0, 0, 70, 254, 90, 96, 2, 1, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5,
        4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 0, 0, 163,
        216, 0, 0, 0, 0, 175, 200, 1, 4, 0, 0, 161, 184, 0, 9, 0, 0, 168, 192, 1, 4, 0, 0, 182,
        208, 1, 14, 0, 0, 168, 192, 0, 4, 76, 77, 84, 0, 78, 90, 83, 84, 0, 78, 90, 77, 84, 0, 78,
        90, 68, 84, 0, 10, 78, 90, 83, 84, 45, 49, 50, 78, 90, 68, 84, 44, 77, 57, 46, 53, 46, 48,
        44, 77, 52, 46, 49, 46, 48, 47, 51, 10,
    ];
    pub(crate) const NZ_CHAT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        69, 0, 0, 0, 4, 0, 0, 0, 22, 255, 255, 255, 255, 65, 183, 68, 132, 255, 255, 255, 255, 210,
        218, 150, 188, 0, 0, 0, 0, 9, 24, 253, 224, 0, 0, 0, 0, 9, 172, 165, 224, 0, 0, 0, 0, 10,
        239, 165, 96, 0, 0, 0, 0, 11, 158, 252, 224, 0, 0, 0, 0, 12, 216, 193, 224, 0, 0, 0, 0, 13,
        126, 222, 224, 0, 0, 0, 0, 14, 184, 163, 224, 0, 0, 0, 0, 15, 94, 192, 224, 0, 0, 0, 0, 16,
        152, 133, 224, 0, 0, 0, 0, 17, 62, 162, 224, 0, 0, 0, 0, 18, 120, 103, 224, 0, 0, 0, 0, 19,
        30, 132, 224, 0, 0, 0, 0, 20, 88, 73, 224, 0, 0, 0, 0, 20, 254, 102, 224, 0, 0, 0, 0, 22,
        56, 43, 224, 0, 0, 0, 0, 22, 231, 131, 96, 0, 0, 0, 0, 24, 33, 72, 96, 0, 0, 0, 0, 24, 199,
        101, 96, 0, 0, 0, 0, 26, 1, 42, 96, 0, 0, 0, 0, 26, 167, 71, 96, 0, 0, 0, 0, 27, 225, 12,
        96, 0, 0, 0, 0, 28, 135, 41, 96, 0, 0, 0, 0, 29, 192, 238, 96, 0, 0, 0, 0, 30, 103, 11, 96,
        0, 0, 0, 0, 31, 160, 208, 96, 0, 0, 0, 0, 32, 70, 237, 96, 0, 0, 0, 0, 33, 128, 178, 96, 0,
        0, 0, 0, 34, 48, 9, 224, 0, 0, 0, 0, 35, 105, 206, 224, 0, 0, 0, 0, 36, 15, 235, 224, 0, 0,
        0, 0, 37, 46, 1, 96, 0, 0, 0, 0, 38, 2, 66, 224, 0, 0, 0, 0, 39, 13, 227, 96, 0, 0, 0, 0,
        39, 226, 36, 224, 0, 0, 0, 0, 40, 237, 197, 96, 0, 0, 0, 0, 41, 194, 6, 224, 0, 0, 0, 0,
        42, 205, 167, 96, 0, 0, 0, 0, 43, 171, 35, 96, 0, 0, 0, 0, 44, 173, 137, 96, 0, 0, 0, 0,
        45, 139, 5, 96, 0, 0, 0, 0, 46, 141, 107, 96, 0, 0, 0, 0, 47, 106, 231, 96, 0, 0, 0, 0, 48,
        109, 77, 96, 0, 0, 0, 0, 49, 74, 201, 96, 0, 0, 0, 0, 50, 86, 105, 224, 0, 0, 0, 0, 51, 42,
        171, 96, 0, 0, 0, 0, 52, 54, 75, 224, 0, 0, 0, 0, 53, 10, 141, 96, 0, 0, 0, 0, 54, 22, 45,
        224, 0, 0, 0, 0, 54, 243, 169, 224, 0, 0, 0, 0, 55, 246, 15, 224, 0, 0, 0, 0, 56, 211, 139,
        224, 0, 0, 0, 0, 57, 213, 241, 224, 0, 0, 0, 0, 58, 179, 109, 224, 0, 0, 0, 0, 59, 191, 14,
        96, 0, 0, 0, 0, 60, 147, 79, 224, 0, 0, 0, 0, 61, 158, 240, 96, 0, 0, 0, 0, 62, 115, 49,
        224, 0, 0, 0, 0, 63, 126, 210, 96, 0, 0, 0, 0, 64, 92, 78, 96, 0, 0, 0, 0, 65, 94, 180, 96,
        0, 0, 0, 0, 66, 60, 48, 96, 0, 0, 0, 0, 67, 62, 150, 96, 0, 0, 0, 0, 68, 28, 18, 96, 0, 0,
        0, 0, 69, 30, 120, 96, 0, 0, 0, 0, 69, 251, 244, 96, 0, 0, 0, 0, 70, 254, 90, 96, 1, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 0, 0, 171, 252, 0, 0, 0, 0, 172, 68, 0, 4, 0, 0, 193, 92, 1, 10, 0, 0,
        179, 76, 0, 16, 76, 77, 84, 0, 43, 49, 50, 49, 53, 0, 43, 49, 51, 52, 53, 0, 43, 49, 50,
        52, 53, 0, 10, 60, 43, 49, 50, 52, 53, 62, 45, 49, 50, 58, 52, 53, 60, 43, 49, 51, 52, 53,
        62, 44, 77, 57, 46, 53, 46, 48, 47, 50, 58, 52, 53, 44, 77, 52, 46, 49, 46, 48, 47, 51, 58,
        52, 53, 10,
    ];
    pub(crate) const PACIFIC_APIA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        26, 0, 0, 0, 7, 0, 0, 0, 26, 255, 255, 255, 255, 110, 61, 201, 0, 255, 255, 255, 255, 145,
        5, 252, 0, 255, 255, 255, 255, 218, 98, 4, 56, 0, 0, 0, 0, 76, 159, 39, 176, 0, 0, 0, 0,
        77, 151, 43, 224, 0, 0, 0, 0, 78, 125, 226, 96, 0, 0, 0, 0, 78, 253, 139, 160, 0, 0, 0, 0,
        79, 119, 13, 224, 0, 0, 0, 0, 80, 102, 254, 224, 0, 0, 0, 0, 81, 96, 42, 96, 0, 0, 0, 0,
        82, 70, 224, 224, 0, 0, 0, 0, 83, 64, 12, 96, 0, 0, 0, 0, 84, 38, 194, 224, 0, 0, 0, 0, 85,
        31, 238, 96, 0, 0, 0, 0, 86, 6, 164, 224, 0, 0, 0, 0, 86, 255, 208, 96, 0, 0, 0, 0, 87,
        230, 134, 224, 0, 0, 0, 0, 88, 223, 178, 96, 0, 0, 0, 0, 89, 198, 104, 224, 0, 0, 0, 0, 90,
        191, 148, 96, 0, 0, 0, 0, 91, 175, 133, 96, 0, 0, 0, 0, 92, 168, 176, 224, 0, 0, 0, 0, 93,
        143, 103, 96, 0, 0, 0, 0, 94, 136, 146, 224, 0, 0, 0, 0, 95, 111, 73, 96, 0, 0, 0, 0, 96,
        104, 116, 224, 1, 2, 4, 3, 4, 3, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6,
        5, 0, 0, 176, 128, 0, 0, 255, 255, 95, 0, 0, 0, 255, 255, 94, 72, 0, 4, 255, 255, 115, 96,
        1, 10, 255, 255, 101, 80, 0, 14, 0, 0, 182, 208, 0, 18, 0, 0, 196, 224, 1, 22, 76, 77, 84,
        0, 45, 49, 49, 51, 48, 0, 45, 49, 48, 0, 45, 49, 49, 0, 43, 49, 51, 0, 43, 49, 52, 0, 10,
        60, 43, 49, 51, 62, 45, 49, 51, 10,
    ];
    pub(crate) const PACIFIC_BOUGAINVILLE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        5, 0, 0, 0, 5, 0, 0, 0, 21, 255, 255, 255, 255, 86, 182, 82, 40, 255, 255, 255, 255, 114,
        237, 164, 144, 255, 255, 255, 255, 204, 67, 54, 96, 255, 255, 255, 255, 210, 43, 108, 240,
        0, 0, 0, 0, 84, 158, 215, 128, 1, 2, 3, 2, 4, 0, 0, 145, 216, 0, 0, 0, 0, 137, 240, 0, 4,
        0, 0, 140, 160, 0, 9, 0, 0, 126, 144, 0, 13, 0, 0, 154, 176, 0, 17, 76, 77, 84, 0, 80, 77,
        77, 84, 0, 43, 49, 48, 0, 43, 48, 57, 0, 43, 49, 49, 0, 10, 60, 43, 49, 49, 62, 45, 49, 49,
        10,
    ];
    pub(crate) const PACIFIC_CHUUK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        6, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 20, 225, 191, 52, 255, 255, 255, 255, 126,
        54, 38, 180, 255, 255, 255, 255, 152, 17, 163, 224, 255, 255, 255, 255, 160, 57, 249, 240,
        255, 255, 255, 255, 201, 234, 10, 96, 255, 255, 255, 255, 210, 17, 14, 240, 1, 2, 3, 2, 3,
        2, 255, 255, 60, 204, 0, 0, 0, 0, 142, 76, 0, 0, 0, 0, 140, 160, 0, 4, 0, 0, 126, 144, 0,
        8, 76, 77, 84, 0, 43, 49, 48, 0, 43, 48, 57, 0, 10, 60, 43, 49, 48, 62, 45, 49, 48, 10,
    ];
    pub(crate) const PACIFIC_EFATE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        23, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 245, 194, 180, 0, 0, 0, 0, 7, 121,
        153, 64, 0, 0, 0, 0, 7, 250, 204, 64, 0, 0, 0, 0, 25, 210, 247, 208, 0, 0, 0, 0, 26, 194,
        218, 192, 0, 0, 0, 0, 27, 178, 217, 208, 0, 0, 0, 0, 28, 162, 188, 192, 0, 0, 0, 0, 29,
        155, 246, 80, 0, 0, 0, 0, 30, 130, 158, 192, 0, 0, 0, 0, 31, 123, 216, 80, 0, 0, 0, 0, 32,
        107, 187, 64, 0, 0, 0, 0, 33, 91, 186, 80, 0, 0, 0, 0, 34, 75, 157, 64, 0, 0, 0, 0, 35, 59,
        156, 80, 0, 0, 0, 0, 36, 43, 127, 64, 0, 0, 0, 0, 37, 27, 126, 80, 0, 0, 0, 0, 38, 11, 97,
        64, 0, 0, 0, 0, 38, 251, 96, 80, 0, 0, 0, 0, 39, 235, 67, 64, 0, 0, 0, 0, 40, 228, 124,
        208, 0, 0, 0, 0, 41, 129, 81, 64, 0, 0, 0, 0, 42, 233, 72, 208, 0, 0, 0, 0, 43, 97, 51, 64,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 157, 204, 0, 0,
        0, 0, 168, 192, 1, 4, 0, 0, 154, 176, 0, 8, 76, 77, 84, 0, 43, 49, 50, 0, 43, 49, 49, 0,
        10, 60, 43, 49, 49, 62, 45, 49, 49, 10,
    ];
    pub(crate) const PACIFIC_ENDERBURY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 49, 24, 70, 128, 255, 255, 255, 255, 96,
        32, 40, 228, 255, 255, 255, 255, 196, 35, 100, 0, 255, 255, 255, 255, 203, 137, 54, 192, 1,
        0, 2, 0, 0, 0, 0, 0, 0, 0, 255, 255, 95, 156, 0, 4, 255, 255, 87, 64, 0, 8, 45, 48, 48, 0,
        76, 77, 84, 0, 45, 49, 50, 0, 10, 60, 45, 48, 48, 62, 48, 10,
    ];
    pub(crate) const PACIFIC_FAKAOFO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 126, 55, 85, 136, 0, 0, 0, 0, 78, 253, 153,
        176, 1, 2, 255, 255, 95, 120, 0, 0, 255, 255, 101, 80, 0, 4, 0, 0, 182, 208, 0, 8, 76, 77,
        84, 0, 45, 49, 49, 0, 43, 49, 51, 0, 10, 60, 43, 49, 51, 62, 45, 49, 51, 10,
    ];
    pub(crate) const PACIFIC_FIJI: &[u8] = &[
        84, 90, 105, 102, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 51,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        30, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 154, 19, 177, 192, 0, 0, 0, 0, 54, 59, 23,
        224, 0, 0, 0, 0, 54, 215, 250, 96, 0, 0, 0, 0, 56, 36, 52, 96, 0, 0, 0, 0, 56, 183, 220,
        96, 0, 0, 0, 0, 75, 17, 44, 224, 0, 0, 0, 0, 75, 174, 15, 96, 0, 0, 0, 0, 76, 194, 234, 96,
        0, 0, 0, 0, 77, 114, 65, 224, 0, 0, 0, 0, 78, 162, 204, 96, 0, 0, 0, 0, 79, 26, 196, 224,
        0, 0, 0, 0, 80, 130, 174, 96, 0, 0, 0, 0, 80, 250, 166, 224, 0, 0, 0, 0, 82, 107, 202, 224,
        0, 0, 0, 0, 82, 218, 122, 208, 0, 0, 0, 0, 84, 84, 231, 96, 0, 0, 0, 0, 84, 186, 106, 224,
        0, 0, 0, 0, 86, 52, 201, 96, 0, 0, 0, 0, 86, 154, 76, 224, 0, 0, 0, 0, 88, 29, 229, 224, 0,
        0, 0, 0, 88, 122, 46, 224, 0, 0, 0, 0, 89, 253, 199, 224, 0, 0, 0, 0, 90, 90, 16, 224, 0,
        0, 0, 0, 91, 221, 169, 224, 0, 0, 0, 0, 92, 57, 242, 224, 0, 0, 0, 0, 93, 198, 198, 96, 0,
        0, 0, 0, 94, 25, 212, 224, 0, 0, 0, 0, 95, 222, 7, 96, 0, 0, 0, 0, 96, 2, 241, 96, 0, 0, 0,
        0, 99, 111, 166, 224, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 1, 0, 0, 167, 192, 0, 0, 0, 0, 182, 208, 1, 4, 0, 0, 168, 192, 0, 8, 76,
        77, 84, 0, 43, 49, 51, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50, 62, 45, 49, 50, 60, 43, 49,
        51, 62, 44, 77, 49, 49, 46, 50, 46, 48, 44, 77, 49, 46, 50, 46, 51, 47, 57, 57, 10,
    ];
    pub(crate) const PACIFIC_FUNAFUTI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 126, 54, 12, 252, 1, 0, 0, 168, 4, 0, 0, 0,
        0, 168, 192, 0, 4, 76, 77, 84, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50, 62, 45, 49, 50, 10,
    ];
    pub(crate) const PACIFIC_GALAPAGOS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 12, 255, 255, 255, 255, 182, 164, 76, 128, 0, 0, 0, 0, 30, 24, 196,
        80, 0, 0, 0, 0, 43, 23, 10, 224, 0, 0, 0, 0, 43, 113, 244, 80, 1, 3, 2, 3, 255, 255, 172,
        0, 0, 0, 255, 255, 185, 176, 0, 4, 255, 255, 185, 176, 1, 4, 255, 255, 171, 160, 0, 8, 76,
        77, 84, 0, 45, 48, 53, 0, 45, 48, 54, 0, 10, 60, 45, 48, 54, 62, 54, 10,
    ];
    pub(crate) const PACIFIC_GAMBIER: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 148, 80, 72, 4, 1, 255, 255, 129, 124, 0, 0,
        255, 255, 129, 112, 0, 4, 76, 77, 84, 0, 45, 48, 57, 0, 10, 60, 45, 48, 57, 62, 57, 10,
    ];
    pub(crate) const PACIFIC_GUADALCANAL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 148, 79, 51, 140, 1, 0, 0, 149, 244, 0, 0,
        0, 0, 154, 176, 0, 4, 76, 77, 84, 0, 43, 49, 49, 0, 10, 60, 43, 49, 49, 62, 45, 49, 49, 10,
    ];
    pub(crate) const PACIFIC_GUAM: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        21, 0, 0, 0, 6, 0, 0, 0, 21, 255, 255, 255, 255, 20, 225, 197, 204, 255, 255, 255, 255,
        126, 54, 45, 76, 255, 255, 255, 255, 203, 55, 149, 224, 255, 255, 255, 255, 208, 46, 137,
        240, 255, 255, 255, 255, 236, 55, 190, 0, 255, 255, 255, 255, 239, 54, 248, 240, 255, 255,
        255, 255, 251, 155, 0, 0, 255, 255, 255, 255, 254, 63, 39, 140, 255, 255, 255, 255, 255, 1,
        30, 0, 255, 255, 255, 255, 255, 93, 88, 240, 0, 0, 0, 0, 0, 151, 44, 0, 0, 0, 0, 0, 1, 70,
        117, 112, 0, 0, 0, 0, 2, 119, 14, 0, 0, 0, 0, 0, 3, 38, 87, 112, 0, 0, 0, 0, 7, 112, 151,
        0, 0, 0, 0, 0, 7, 204, 209, 240, 0, 0, 0, 0, 12, 8, 145, 0, 0, 0, 0, 0, 12, 124, 135, 44,
        0, 0, 0, 0, 13, 191, 148, 128, 0, 0, 0, 0, 14, 101, 163, 112, 0, 0, 0, 0, 58, 67, 94, 96,
        1, 2, 3, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 5, 255, 255, 54, 52, 0, 0, 0,
        0, 135, 180, 0, 0, 0, 0, 140, 160, 0, 4, 0, 0, 126, 144, 0, 8, 0, 0, 154, 176, 1, 12, 0, 0,
        140, 160, 0, 16, 76, 77, 84, 0, 71, 83, 84, 0, 43, 48, 57, 0, 71, 68, 84, 0, 67, 104, 83,
        84, 0, 10, 67, 104, 83, 84, 45, 49, 48, 10,
    ];
    pub(crate) const PACIFIC_HONOLULU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 116, 224, 112, 190, 255, 255, 255, 255,
        187, 5, 67, 72, 255, 255, 255, 255, 187, 33, 113, 88, 255, 255, 255, 255, 203, 137, 61,
        200, 255, 255, 255, 255, 210, 35, 244, 112, 255, 255, 255, 255, 210, 97, 73, 56, 255, 255,
        255, 255, 213, 141, 115, 72, 1, 2, 1, 3, 4, 1, 5, 255, 255, 108, 2, 0, 0, 255, 255, 108,
        88, 0, 4, 255, 255, 122, 104, 1, 8, 255, 255, 122, 104, 1, 12, 255, 255, 122, 104, 1, 16,
        255, 255, 115, 96, 0, 4, 76, 77, 84, 0, 72, 83, 84, 0, 72, 68, 84, 0, 72, 87, 84, 0, 72,
        80, 84, 0, 10, 72, 83, 84, 49, 48, 10,
    ];
    pub(crate) const PACIFIC_KANTON: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 195, 44, 219, 128, 0, 0, 0, 0, 18, 86, 4,
        192, 0, 0, 0, 0, 47, 5, 57, 176, 1, 2, 3, 0, 0, 0, 0, 0, 0, 255, 255, 87, 64, 0, 4, 255,
        255, 101, 80, 0, 8, 0, 0, 182, 208, 0, 12, 45, 48, 48, 0, 45, 49, 50, 0, 45, 49, 49, 0, 43,
        49, 51, 0, 10, 60, 43, 49, 51, 62, 45, 49, 51, 10,
    ];
    pub(crate) const PACIFIC_KIRITIMATI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 126, 55, 72, 128, 0, 0, 0, 0, 18, 85, 242,
        0, 0, 0, 0, 0, 47, 5, 43, 160, 1, 2, 3, 255, 255, 108, 128, 0, 0, 255, 255, 106, 0, 0, 4,
        255, 255, 115, 96, 0, 10, 0, 0, 196, 224, 0, 14, 76, 77, 84, 0, 45, 49, 48, 52, 48, 0, 45,
        49, 48, 0, 43, 49, 52, 0, 10, 60, 43, 49, 52, 62, 45, 49, 52, 10,
    ];
    pub(crate) const PACIFIC_KOSRAE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        9, 0, 0, 0, 6, 0, 0, 0, 20, 255, 255, 255, 255, 20, 225, 180, 180, 255, 255, 255, 255, 126,
        54, 28, 52, 255, 255, 255, 255, 152, 17, 149, 208, 255, 255, 255, 255, 160, 57, 249, 240,
        255, 255, 255, 255, 193, 237, 53, 208, 255, 255, 255, 255, 201, 234, 10, 96, 255, 255, 255,
        255, 210, 17, 14, 240, 255, 255, 255, 255, 255, 134, 27, 80, 0, 0, 0, 0, 54, 139, 103, 64,
        1, 2, 3, 2, 4, 3, 2, 5, 2, 255, 255, 71, 76, 0, 0, 0, 0, 152, 204, 0, 0, 0, 0, 154, 176, 0,
        4, 0, 0, 126, 144, 0, 8, 0, 0, 140, 160, 0, 12, 0, 0, 168, 192, 0, 16, 76, 77, 84, 0, 43,
        49, 49, 0, 43, 48, 57, 0, 43, 49, 48, 0, 43, 49, 50, 0, 10, 60, 43, 49, 49, 62, 45, 49, 49,
        10,
    ];
    pub(crate) const PACIFIC_MAJURO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 126, 54, 20, 128, 255, 255, 255, 255, 152,
        17, 149, 208, 255, 255, 255, 255, 160, 57, 249, 240, 255, 255, 255, 255, 193, 237, 53, 208,
        255, 255, 255, 255, 201, 234, 10, 96, 255, 255, 255, 255, 207, 61, 71, 112, 255, 255, 255,
        255, 255, 134, 27, 80, 1, 2, 1, 3, 2, 1, 4, 0, 0, 160, 128, 0, 0, 0, 0, 154, 176, 0, 4, 0,
        0, 126, 144, 0, 8, 0, 0, 140, 160, 0, 12, 0, 0, 168, 192, 0, 16, 76, 77, 84, 0, 43, 49, 49,
        0, 43, 48, 57, 0, 43, 49, 48, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50, 62, 45, 49, 50, 10,
    ];
    pub(crate) const PACIFIC_MARQUESAS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 10, 255, 255, 255, 255, 148, 80, 76, 72, 1, 255, 255, 125, 56, 0,
        0, 255, 255, 122, 104, 0, 4, 76, 77, 84, 0, 45, 48, 57, 51, 48, 0, 10, 60, 45, 48, 57, 51,
        48, 62, 57, 58, 51, 48, 10,
    ];
    pub(crate) const PACIFIC_MIDWAY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 126, 55, 91, 72, 255, 255, 255, 255, 230,
        117, 138, 176, 255, 255, 255, 255, 230, 237, 117, 32, 1, 2, 1, 255, 255, 89, 184, 0, 0,
        255, 255, 101, 80, 0, 4, 255, 255, 115, 96, 1, 8, 76, 77, 84, 0, 45, 49, 49, 0, 45, 49, 48,
        0, 10, 60, 45, 49, 49, 62, 49, 49, 10,
    ];
    pub(crate) const PACIFIC_NAURU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 163, 231, 43, 4, 255, 255, 255, 255, 204,
        144, 233, 200, 255, 255, 255, 255, 210, 67, 39, 240, 0, 0, 0, 0, 17, 33, 168, 232, 1, 2, 1,
        3, 0, 0, 156, 124, 0, 0, 0, 0, 161, 184, 0, 4, 0, 0, 126, 144, 0, 10, 0, 0, 168, 192, 0,
        14, 76, 77, 84, 0, 43, 49, 49, 51, 48, 0, 43, 48, 57, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50,
        62, 45, 49, 50, 10,
    ];
    pub(crate) const PACIFIC_NIUE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 223, 161, 106, 76, 255, 255, 255, 255, 245,
        166, 184, 96, 1, 2, 255, 255, 96, 180, 0, 0, 255, 255, 96, 160, 0, 4, 255, 255, 101, 80, 0,
        10, 76, 77, 84, 0, 45, 49, 49, 50, 48, 0, 45, 49, 49, 0, 10, 60, 45, 49, 49, 62, 49, 49,
        10,
    ];
    pub(crate) const PACIFIC_NORFOLK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        6, 0, 0, 0, 6, 0, 0, 0, 30, 255, 255, 255, 255, 126, 54, 23, 136, 255, 255, 255, 255, 220,
        65, 248, 128, 0, 0, 0, 0, 9, 15, 202, 104, 0, 0, 0, 0, 9, 181, 231, 104, 0, 0, 0, 0, 86,
        15, 230, 104, 0, 0, 0, 0, 93, 152, 175, 240, 1, 2, 3, 2, 4, 5, 0, 0, 157, 120, 0, 0, 0, 0,
        157, 128, 0, 4, 0, 0, 161, 184, 0, 10, 0, 0, 175, 200, 1, 16, 0, 0, 154, 176, 0, 22, 0, 0,
        168, 192, 1, 26, 76, 77, 84, 0, 43, 49, 49, 49, 50, 0, 43, 49, 49, 51, 48, 0, 43, 49, 50,
        51, 48, 0, 43, 49, 49, 0, 43, 49, 50, 0, 10, 60, 43, 49, 49, 62, 45, 49, 49, 60, 43, 49,
        50, 62, 44, 77, 49, 48, 46, 49, 46, 48, 44, 77, 52, 46, 49, 46, 48, 47, 51, 10,
    ];
    pub(crate) const PACIFIC_NOUMEA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 146, 245, 196, 116, 0, 0, 0, 0, 14, 230,
        186, 80, 0, 0, 0, 0, 15, 86, 187, 192, 0, 0, 0, 0, 16, 198, 156, 80, 0, 0, 0, 0, 17, 55,
        239, 64, 0, 0, 0, 0, 50, 160, 75, 240, 0, 0, 0, 0, 51, 24, 68, 112, 2, 1, 2, 1, 2, 1, 2, 0,
        0, 156, 12, 0, 0, 0, 0, 168, 192, 1, 4, 0, 0, 154, 176, 0, 8, 76, 77, 84, 0, 43, 49, 50, 0,
        43, 49, 49, 0, 10, 60, 43, 49, 49, 62, 45, 49, 49, 10,
    ];
    pub(crate) const PACIFIC_PAGO_PAGO: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 8, 255, 255, 255, 255, 110, 61, 200, 8, 255, 255, 255, 255, 145, 5,
        251, 8, 1, 2, 0, 0, 177, 120, 0, 0, 255, 255, 95, 248, 0, 0, 255, 255, 101, 80, 0, 4, 76,
        77, 84, 0, 83, 83, 84, 0, 10, 83, 83, 84, 49, 49, 10,
    ];
    pub(crate) const PACIFIC_PALAU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 8, 255, 255, 255, 255, 20, 225, 207, 108, 255, 255, 255, 255, 126,
        54, 54, 236, 1, 2, 255, 255, 44, 148, 0, 0, 0, 0, 126, 20, 0, 0, 0, 0, 126, 144, 0, 4, 76,
        77, 84, 0, 43, 48, 57, 0, 10, 60, 43, 48, 57, 62, 45, 57, 10,
    ];
    pub(crate) const PACIFIC_PITCAIRN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 14, 255, 255, 255, 255, 126, 55, 46, 244, 0, 0, 0, 0, 53, 68, 66,
        8, 1, 2, 255, 255, 134, 12, 0, 0, 255, 255, 136, 120, 0, 4, 255, 255, 143, 128, 0, 10, 76,
        77, 84, 0, 45, 48, 56, 51, 48, 0, 45, 48, 56, 0, 10, 60, 45, 48, 56, 62, 56, 10,
    ];
    pub(crate) const PACIFIC_POHNPEI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 0, 0, 0, 5, 0, 0, 0, 16, 255, 255, 255, 255, 20, 225, 185, 44, 255, 255, 255, 255, 126,
        54, 32, 172, 255, 255, 255, 255, 152, 17, 149, 208, 255, 255, 255, 255, 160, 57, 249, 240,
        255, 255, 255, 255, 193, 237, 53, 208, 255, 255, 255, 255, 201, 234, 10, 96, 255, 255, 255,
        255, 210, 17, 14, 240, 1, 2, 3, 2, 4, 3, 2, 255, 255, 66, 212, 0, 0, 0, 0, 148, 84, 0, 0,
        0, 0, 154, 176, 0, 4, 0, 0, 126, 144, 0, 8, 0, 0, 140, 160, 0, 12, 76, 77, 84, 0, 43, 49,
        49, 0, 43, 48, 57, 0, 43, 49, 48, 0, 10, 60, 43, 49, 49, 62, 45, 49, 49, 10,
    ];
    pub(crate) const PACIFIC_PORT_MORESBY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 3, 0, 0, 0, 13, 255, 255, 255, 255, 86, 182, 90, 8, 255, 255, 255, 255, 114,
        237, 164, 144, 1, 2, 0, 0, 137, 248, 0, 0, 0, 0, 137, 240, 0, 4, 0, 0, 140, 160, 0, 9, 76,
        77, 84, 0, 80, 77, 77, 84, 0, 43, 49, 48, 0, 10, 60, 43, 49, 48, 62, 45, 49, 48, 10,
    ];
    pub(crate) const PACIFIC_RAROTONGA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        28, 0, 0, 0, 5, 0, 0, 0, 20, 255, 255, 255, 255, 124, 76, 220, 200, 255, 255, 255, 255,
        223, 161, 96, 200, 0, 0, 0, 0, 16, 172, 27, 40, 0, 0, 0, 0, 17, 63, 181, 24, 0, 0, 0, 0,
        18, 121, 129, 32, 0, 0, 0, 0, 19, 31, 151, 24, 0, 0, 0, 0, 20, 89, 99, 32, 0, 0, 0, 0, 20,
        255, 121, 24, 0, 0, 0, 0, 22, 57, 69, 32, 0, 0, 0, 0, 22, 232, 149, 152, 0, 0, 0, 0, 24,
        34, 97, 160, 0, 0, 0, 0, 24, 200, 119, 152, 0, 0, 0, 0, 26, 2, 67, 160, 0, 0, 0, 0, 26,
        168, 89, 152, 0, 0, 0, 0, 27, 226, 37, 160, 0, 0, 0, 0, 28, 136, 59, 152, 0, 0, 0, 0, 29,
        194, 7, 160, 0, 0, 0, 0, 30, 104, 29, 152, 0, 0, 0, 0, 31, 161, 233, 160, 0, 0, 0, 0, 32,
        71, 255, 152, 0, 0, 0, 0, 33, 129, 203, 160, 0, 0, 0, 0, 34, 49, 28, 24, 0, 0, 0, 0, 35,
        106, 232, 32, 0, 0, 0, 0, 36, 16, 254, 24, 0, 0, 0, 0, 37, 74, 202, 32, 0, 0, 0, 0, 37,
        240, 224, 24, 0, 0, 0, 0, 39, 42, 172, 32, 0, 0, 0, 0, 39, 208, 194, 24, 1, 2, 4, 3, 4, 3,
        4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 0, 0, 187, 184, 0, 0,
        255, 255, 106, 56, 0, 0, 255, 255, 108, 88, 0, 4, 255, 255, 115, 96, 0, 10, 255, 255, 122,
        104, 1, 14, 76, 77, 84, 0, 45, 49, 48, 51, 48, 0, 45, 49, 48, 0, 45, 48, 57, 51, 48, 0, 10,
        60, 45, 49, 48, 62, 49, 48, 10,
    ];
    pub(crate) const PACIFIC_SAIPAN: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 5, 0, 0, 0, 17, 255, 255, 255, 255, 20, 225, 196, 220, 255, 255, 255, 255, 126,
        54, 44, 92, 255, 255, 255, 255, 255, 134, 55, 112, 0, 0, 0, 0, 58, 67, 94, 96, 1, 2, 3, 4,
        255, 255, 55, 36, 0, 0, 0, 0, 136, 164, 0, 0, 0, 0, 126, 144, 0, 4, 0, 0, 140, 160, 0, 8,
        0, 0, 140, 160, 0, 12, 76, 77, 84, 0, 43, 48, 57, 0, 43, 49, 48, 0, 67, 104, 83, 84, 0, 10,
        67, 104, 83, 84, 45, 49, 48, 10,
    ];
    pub(crate) const PACIFIC_TAHITI: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 148, 80, 85, 184, 1, 255, 255, 115, 200, 0,
        0, 255, 255, 115, 96, 0, 4, 76, 77, 84, 0, 45, 49, 48, 0, 10, 60, 45, 49, 48, 62, 49, 48,
        10,
    ];
    pub(crate) const PACIFIC_TARAWA: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 126, 54, 18, 204, 1, 0, 0, 162, 52, 0, 0, 0,
        0, 168, 192, 0, 4, 76, 77, 84, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50, 62, 45, 49, 50, 10,
    ];
    pub(crate) const PACIFIC_TONGATAPU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10, 0, 0, 0, 4, 0, 0, 0, 18, 255, 255, 255, 255, 210, 69, 156, 64, 255, 255, 255, 255, 239,
        17, 224, 16, 0, 0, 0, 0, 55, 251, 71, 208, 0, 0, 0, 0, 56, 211, 125, 208, 0, 0, 0, 0, 58,
        4, 8, 80, 0, 0, 0, 0, 58, 114, 184, 64, 0, 0, 0, 0, 59, 227, 234, 80, 0, 0, 0, 0, 60, 82,
        154, 64, 0, 0, 0, 0, 88, 29, 215, 208, 0, 0, 0, 0, 88, 122, 32, 208, 1, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 0, 0, 173, 64, 0, 0, 0, 0, 173, 112, 0, 4, 0, 0, 182, 208, 0, 10, 0, 0, 196, 224,
        1, 14, 76, 77, 84, 0, 43, 49, 50, 50, 48, 0, 43, 49, 51, 0, 43, 49, 52, 0, 10, 60, 43, 49,
        51, 62, 45, 49, 51, 10,
    ];
    pub(crate) const PACIFIC_WAKE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 126, 54, 24, 204, 1, 0, 0, 156, 52, 0, 0, 0,
        0, 168, 192, 0, 4, 76, 77, 84, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50, 62, 45, 49, 50, 10,
    ];
    pub(crate) const PACIFIC_WALLIS: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 8, 255, 255, 255, 255, 126, 54, 8, 168, 1, 0, 0, 172, 88, 0, 0, 0,
        0, 168, 192, 0, 4, 76, 77, 84, 0, 43, 49, 50, 0, 10, 60, 43, 49, 50, 62, 45, 49, 50, 10,
    ];
    pub(crate) const POLAND: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        82, 0, 0, 0, 6, 0, 0, 0, 26, 255, 255, 255, 255, 86, 182, 208, 80, 255, 255, 255, 255, 153,
        168, 42, 208, 255, 255, 255, 255, 155, 12, 23, 96, 255, 255, 255, 255, 155, 213, 218, 240,
        255, 255, 255, 255, 156, 217, 174, 144, 255, 255, 255, 255, 157, 164, 181, 144, 255, 255,
        255, 255, 158, 185, 144, 144, 255, 255, 255, 255, 159, 132, 151, 144, 255, 255, 255, 255,
        160, 154, 182, 0, 255, 255, 255, 255, 161, 101, 189, 0, 255, 255, 255, 255, 166, 125, 124,
        96, 255, 255, 255, 255, 200, 118, 222, 16, 255, 255, 255, 255, 204, 231, 75, 16, 255, 255,
        255, 255, 205, 169, 23, 144, 255, 255, 255, 255, 206, 162, 67, 16, 255, 255, 255, 255, 207,
        146, 52, 16, 255, 255, 255, 255, 208, 132, 186, 0, 255, 255, 255, 255, 209, 149, 146, 112,
        255, 255, 255, 255, 210, 138, 187, 96, 255, 255, 255, 255, 211, 98, 255, 112, 255, 255,
        255, 255, 212, 75, 35, 144, 255, 255, 255, 255, 213, 94, 173, 16, 255, 255, 255, 255, 214,
        41, 180, 16, 255, 255, 255, 255, 215, 44, 26, 16, 255, 255, 255, 255, 216, 9, 150, 16, 255,
        255, 255, 255, 217, 2, 193, 144, 255, 255, 255, 255, 217, 233, 120, 16, 255, 255, 255, 255,
        232, 84, 210, 0, 255, 255, 255, 255, 232, 241, 180, 128, 255, 255, 255, 255, 233, 225, 165,
        128, 255, 255, 255, 255, 234, 209, 150, 128, 255, 255, 255, 255, 236, 20, 150, 0, 255, 255,
        255, 255, 236, 186, 179, 0, 255, 255, 255, 255, 237, 170, 164, 0, 255, 255, 255, 255, 238,
        154, 149, 0, 255, 255, 255, 255, 239, 212, 90, 0, 255, 255, 255, 255, 240, 122, 119, 0,
        255, 255, 255, 255, 241, 180, 60, 0, 255, 255, 255, 255, 242, 90, 89, 0, 255, 255, 255,
        255, 243, 148, 30, 0, 255, 255, 255, 255, 244, 58, 59, 0, 255, 255, 255, 255, 245, 125, 58,
        128, 255, 255, 255, 255, 246, 26, 29, 0, 0, 0, 0, 0, 13, 164, 85, 128, 0, 0, 0, 0, 14, 139,
        12, 0, 0, 0, 0, 0, 15, 132, 55, 128, 0, 0, 0, 0, 16, 116, 40, 128, 0, 0, 0, 0, 17, 100, 25,
        128, 0, 0, 0, 0, 18, 84, 10, 128, 0, 0, 0, 0, 19, 77, 54, 0, 0, 0, 0, 0, 20, 51, 236, 128,
        0, 0, 0, 0, 21, 35, 221, 128, 0, 0, 0, 0, 22, 19, 206, 128, 0, 0, 0, 0, 23, 3, 191, 128, 0,
        0, 0, 0, 23, 243, 176, 128, 0, 0, 0, 0, 24, 227, 161, 128, 0, 0, 0, 0, 25, 211, 146, 128,
        0, 0, 0, 0, 26, 195, 131, 128, 0, 0, 0, 0, 27, 188, 175, 0, 0, 0, 0, 0, 28, 172, 160, 0, 0,
        0, 0, 0, 29, 156, 145, 0, 0, 0, 0, 0, 30, 140, 130, 0, 0, 0, 0, 0, 31, 124, 115, 0, 0, 0,
        0, 0, 32, 108, 100, 0, 0, 0, 0, 0, 33, 92, 85, 0, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0,
        35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12,
        24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37,
        144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248,
        144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132,
        203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93,
        217, 16, 1, 3, 2, 3, 2, 3, 2, 5, 4, 5, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0, 19, 176,
        0, 0, 0, 0, 19, 176, 0, 4, 0, 0, 28, 32, 1, 8, 0, 0, 14, 16, 0, 13, 0, 0, 42, 48, 1, 17, 0,
        0, 28, 32, 0, 22, 76, 77, 84, 0, 87, 77, 84, 0, 67, 69, 83, 84, 0, 67, 69, 84, 0, 69, 69,
        83, 84, 0, 69, 69, 84, 0, 10, 67, 69, 84, 45, 49, 67, 69, 83, 84, 44, 77, 51, 46, 53, 46,
        48, 44, 77, 49, 48, 46, 53, 46, 48, 47, 51, 10,
    ];
    pub(crate) const PORTUGAL: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        141, 0, 0, 0, 6, 0, 0, 0, 27, 255, 255, 255, 255, 94, 61, 12, 29, 255, 255, 255, 255, 146,
        230, 142, 128, 255, 255, 255, 255, 155, 75, 109, 112, 255, 255, 255, 255, 155, 254, 199,
        128, 255, 255, 255, 255, 156, 156, 237, 112, 255, 255, 255, 255, 157, 201, 131, 112, 255,
        255, 255, 255, 158, 127, 114, 112, 255, 255, 255, 255, 159, 170, 182, 240, 255, 255, 255,
        255, 160, 95, 84, 112, 255, 255, 255, 255, 161, 139, 234, 112, 255, 255, 255, 255, 162, 65,
        217, 112, 255, 255, 255, 255, 163, 110, 111, 112, 255, 255, 255, 255, 164, 35, 12, 240,
        255, 255, 255, 255, 165, 79, 162, 240, 255, 255, 255, 255, 170, 5, 239, 112, 255, 255, 255,
        255, 170, 244, 142, 240, 255, 255, 255, 255, 173, 201, 167, 240, 255, 255, 255, 255, 174,
        167, 35, 240, 255, 255, 255, 255, 175, 160, 79, 112, 255, 255, 255, 255, 176, 135, 5, 240,
        255, 255, 255, 255, 177, 137, 107, 240, 255, 255, 255, 255, 178, 112, 34, 112, 255, 255,
        255, 255, 179, 114, 136, 112, 255, 255, 255, 255, 180, 80, 4, 112, 255, 255, 255, 255, 183,
        50, 76, 112, 255, 255, 255, 255, 184, 15, 200, 112, 255, 255, 255, 255, 184, 255, 185, 112,
        255, 255, 255, 255, 185, 239, 170, 112, 255, 255, 255, 255, 188, 200, 183, 240, 255, 255,
        255, 255, 189, 184, 168, 240, 255, 255, 255, 255, 190, 159, 95, 112, 255, 255, 255, 255,
        191, 152, 138, 240, 255, 255, 255, 255, 192, 154, 240, 240, 255, 255, 255, 255, 193, 120,
        108, 240, 255, 255, 255, 255, 194, 104, 93, 240, 255, 255, 255, 255, 195, 88, 78, 240, 255,
        255, 255, 255, 196, 63, 5, 112, 255, 255, 255, 255, 197, 56, 48, 240, 255, 255, 255, 255,
        198, 58, 150, 240, 255, 255, 255, 255, 199, 88, 172, 112, 255, 255, 255, 255, 199, 217,
        223, 112, 255, 255, 255, 255, 201, 1, 47, 112, 255, 255, 255, 255, 201, 241, 32, 112, 255,
        255, 255, 255, 202, 226, 98, 240, 255, 255, 255, 255, 203, 181, 82, 240, 255, 255, 255,
        255, 203, 236, 163, 224, 255, 255, 255, 255, 204, 128, 75, 224, 255, 255, 255, 255, 204,
        220, 162, 240, 255, 255, 255, 255, 205, 149, 52, 240, 255, 255, 255, 255, 205, 195, 75, 96,
        255, 255, 255, 255, 206, 114, 162, 224, 255, 255, 255, 255, 206, 197, 191, 112, 255, 255,
        255, 255, 207, 117, 22, 240, 255, 255, 255, 255, 207, 172, 103, 224, 255, 255, 255, 255,
        208, 82, 132, 224, 255, 255, 255, 255, 208, 165, 161, 112, 255, 255, 255, 255, 209, 84,
        248, 240, 255, 255, 255, 255, 209, 140, 73, 224, 255, 255, 255, 255, 210, 50, 102, 224,
        255, 255, 255, 255, 210, 133, 131, 112, 255, 255, 255, 255, 211, 89, 196, 240, 255, 255,
        255, 255, 212, 73, 181, 240, 255, 255, 255, 255, 213, 57, 209, 32, 255, 255, 255, 255, 214,
        41, 194, 32, 255, 255, 255, 255, 215, 25, 179, 32, 255, 255, 255, 255, 216, 9, 164, 32,
        255, 255, 255, 255, 216, 249, 149, 32, 255, 255, 255, 255, 217, 233, 134, 32, 255, 255,
        255, 255, 218, 217, 119, 32, 255, 255, 255, 255, 219, 201, 104, 32, 255, 255, 255, 255,
        220, 185, 89, 32, 255, 255, 255, 255, 221, 178, 132, 160, 255, 255, 255, 255, 222, 162,
        117, 160, 255, 255, 255, 255, 223, 146, 102, 160, 255, 255, 255, 255, 224, 130, 87, 160,
        255, 255, 255, 255, 225, 114, 72, 160, 255, 255, 255, 255, 226, 98, 57, 160, 255, 255, 255,
        255, 227, 82, 42, 160, 255, 255, 255, 255, 228, 66, 27, 160, 255, 255, 255, 255, 229, 50,
        12, 160, 255, 255, 255, 255, 230, 33, 253, 160, 255, 255, 255, 255, 231, 27, 41, 32, 255,
        255, 255, 255, 232, 11, 26, 32, 255, 255, 255, 255, 232, 251, 11, 32, 255, 255, 255, 255,
        233, 234, 252, 32, 255, 255, 255, 255, 234, 218, 237, 32, 255, 255, 255, 255, 235, 202,
        222, 32, 255, 255, 255, 255, 236, 186, 207, 32, 255, 255, 255, 255, 237, 170, 192, 32, 255,
        255, 255, 255, 238, 154, 177, 32, 255, 255, 255, 255, 239, 138, 162, 32, 255, 255, 255,
        255, 240, 122, 147, 32, 255, 255, 255, 255, 241, 106, 132, 32, 255, 255, 255, 255, 242, 99,
        175, 160, 255, 255, 255, 255, 243, 83, 160, 160, 255, 255, 255, 255, 244, 67, 145, 160,
        255, 255, 255, 255, 245, 51, 130, 160, 255, 255, 255, 255, 246, 35, 115, 160, 255, 255,
        255, 255, 247, 19, 100, 160, 255, 255, 255, 255, 248, 3, 85, 160, 255, 255, 255, 255, 248,
        243, 70, 160, 0, 0, 0, 0, 12, 171, 42, 0, 0, 0, 0, 0, 13, 155, 27, 0, 0, 0, 0, 0, 14, 139,
        12, 0, 0, 0, 0, 0, 15, 132, 55, 128, 0, 0, 0, 0, 16, 116, 40, 128, 0, 0, 0, 0, 17, 100, 25,
        128, 0, 0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0, 19, 67, 251, 128, 0, 0, 0, 0, 20, 51, 250,
        144, 0, 0, 0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205,
        144, 0, 0, 0, 0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 189, 160, 0, 0, 0, 0, 25, 211,
        160, 144, 0, 0, 0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172,
        174, 16, 0, 0, 0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124,
        129, 16, 0, 0, 0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84,
        16, 0, 0, 0, 0, 35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0,
        0, 0, 0, 38, 12, 24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0,
        0, 40, 229, 37, 144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0,
        43, 180, 248, 144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0,
        0, 46, 132, 203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0,
        0, 0, 49, 93, 217, 16, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1,
        3, 1, 2, 1, 3, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 4, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 4, 5, 4, 5, 4, 5, 4, 1, 255,
        255, 247, 99, 0, 0, 0, 0, 14, 16, 1, 4, 0, 0, 0, 0, 0, 9, 0, 0, 28, 32, 1, 13, 0, 0, 14,
        16, 0, 18, 0, 0, 28, 32, 1, 22, 76, 77, 84, 0, 87, 69, 83, 84, 0, 87, 69, 84, 0, 87, 69,
        77, 84, 0, 67, 69, 84, 0, 67, 69, 83, 84, 0, 10, 87, 69, 84, 48, 87, 69, 83, 84, 44, 77,
        51, 46, 53, 46, 48, 47, 49, 44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const PRC: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        29, 0, 0, 0, 3, 0, 0, 0, 12, 255, 255, 255, 255, 126, 54, 67, 41, 255, 255, 255, 255, 160,
        151, 162, 128, 255, 255, 255, 255, 161, 121, 4, 240, 255, 255, 255, 255, 200, 89, 94, 128,
        255, 255, 255, 255, 201, 9, 249, 112, 255, 255, 255, 255, 201, 211, 189, 0, 255, 255, 255,
        255, 203, 5, 138, 240, 255, 255, 255, 255, 203, 124, 64, 0, 255, 255, 255, 255, 210, 59,
        62, 240, 255, 255, 255, 255, 211, 139, 123, 128, 255, 255, 255, 255, 212, 66, 173, 240,
        255, 255, 255, 255, 213, 69, 34, 0, 255, 255, 255, 255, 214, 76, 191, 240, 255, 255, 255,
        255, 215, 60, 191, 0, 255, 255, 255, 255, 216, 6, 102, 112, 255, 255, 255, 255, 217, 29,
        242, 128, 255, 255, 255, 255, 217, 65, 124, 240, 0, 0, 0, 0, 30, 186, 82, 32, 0, 0, 0, 0,
        31, 105, 155, 144, 0, 0, 0, 0, 32, 126, 132, 160, 0, 0, 0, 0, 33, 73, 125, 144, 0, 0, 0, 0,
        34, 103, 161, 32, 0, 0, 0, 0, 35, 41, 95, 144, 0, 0, 0, 0, 36, 71, 131, 32, 0, 0, 0, 0, 37,
        18, 124, 16, 0, 0, 0, 0, 38, 39, 101, 32, 0, 0, 0, 0, 38, 242, 94, 16, 0, 0, 0, 0, 40, 7,
        71, 32, 0, 0, 0, 0, 40, 210, 64, 16, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 113, 215, 0, 0, 0, 0, 126, 144, 1, 4, 0, 0, 112,
        128, 0, 8, 76, 77, 84, 0, 67, 68, 84, 0, 67, 83, 84, 0, 10, 67, 83, 84, 45, 56, 10,
    ];
    pub(crate) const PST_8_PDT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        88, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 158, 166, 72, 160, 255, 255, 255, 255,
        159, 187, 21, 144, 255, 255, 255, 255, 160, 134, 42, 160, 255, 255, 255, 255, 161, 154,
        247, 144, 255, 255, 255, 255, 203, 137, 26, 160, 255, 255, 255, 255, 210, 35, 244, 112,
        255, 255, 255, 255, 210, 97, 38, 16, 255, 255, 255, 255, 250, 248, 131, 32, 255, 255, 255,
        255, 251, 232, 102, 16, 255, 255, 255, 255, 252, 216, 101, 32, 255, 255, 255, 255, 253,
        200, 72, 16, 255, 255, 255, 255, 254, 184, 71, 32, 255, 255, 255, 255, 255, 168, 42, 16, 0,
        0, 0, 0, 0, 152, 41, 32, 0, 0, 0, 0, 1, 136, 12, 16, 0, 0, 0, 0, 2, 120, 11, 32, 0, 0, 0,
        0, 3, 113, 40, 144, 0, 0, 0, 0, 4, 97, 39, 160, 0, 0, 0, 0, 5, 81, 10, 144, 0, 0, 0, 0, 6,
        65, 9, 160, 0, 0, 0, 0, 7, 48, 236, 144, 0, 0, 0, 0, 7, 141, 67, 160, 0, 0, 0, 0, 9, 16,
        206, 144, 0, 0, 0, 0, 9, 173, 191, 32, 0, 0, 0, 0, 10, 240, 176, 144, 0, 0, 0, 0, 11, 224,
        175, 160, 0, 0, 0, 0, 12, 217, 205, 16, 0, 0, 0, 0, 13, 192, 145, 160, 0, 0, 0, 0, 14, 185,
        175, 16, 0, 0, 0, 0, 15, 169, 174, 32, 0, 0, 0, 0, 16, 153, 145, 16, 0, 0, 0, 0, 17, 137,
        144, 32, 0, 0, 0, 0, 18, 121, 115, 16, 0, 0, 0, 0, 19, 105, 114, 32, 0, 0, 0, 0, 20, 89,
        85, 16, 0, 0, 0, 0, 21, 73, 84, 32, 0, 0, 0, 0, 22, 57, 55, 16, 0, 0, 0, 0, 23, 41, 54, 32,
        0, 0, 0, 0, 24, 34, 83, 144, 0, 0, 0, 0, 25, 9, 24, 32, 0, 0, 0, 0, 26, 2, 53, 144, 0, 0,
        0, 0, 26, 242, 52, 160, 0, 0, 0, 0, 27, 226, 23, 144, 0, 0, 0, 0, 28, 210, 22, 160, 0, 0,
        0, 0, 29, 193, 249, 144, 0, 0, 0, 0, 30, 177, 248, 160, 0, 0, 0, 0, 31, 161, 219, 144, 0,
        0, 0, 0, 32, 118, 43, 32, 0, 0, 0, 0, 33, 129, 189, 144, 0, 0, 0, 0, 34, 86, 13, 32, 0, 0,
        0, 0, 35, 106, 218, 16, 0, 0, 0, 0, 36, 53, 239, 32, 0, 0, 0, 0, 37, 74, 188, 16, 0, 0, 0,
        0, 38, 21, 209, 32, 0, 0, 0, 0, 39, 42, 158, 16, 0, 0, 0, 0, 39, 254, 237, 160, 0, 0, 0, 0,
        41, 10, 128, 16, 0, 0, 0, 0, 41, 222, 207, 160, 0, 0, 0, 0, 42, 234, 98, 16, 0, 0, 0, 0,
        43, 190, 177, 160, 0, 0, 0, 0, 44, 211, 126, 144, 0, 0, 0, 0, 45, 158, 147, 160, 0, 0, 0,
        0, 46, 179, 96, 144, 0, 0, 0, 0, 47, 126, 117, 160, 0, 0, 0, 0, 48, 147, 66, 144, 0, 0, 0,
        0, 49, 103, 146, 32, 0, 0, 0, 0, 50, 115, 36, 144, 0, 0, 0, 0, 51, 71, 116, 32, 0, 0, 0, 0,
        52, 83, 6, 144, 0, 0, 0, 0, 53, 39, 86, 32, 0, 0, 0, 0, 54, 50, 232, 144, 0, 0, 0, 0, 55,
        7, 56, 32, 0, 0, 0, 0, 56, 28, 5, 16, 0, 0, 0, 0, 56, 231, 26, 32, 0, 0, 0, 0, 57, 251,
        231, 16, 0, 0, 0, 0, 58, 198, 252, 32, 0, 0, 0, 0, 59, 219, 201, 16, 0, 0, 0, 0, 60, 176,
        24, 160, 0, 0, 0, 0, 61, 187, 171, 16, 0, 0, 0, 0, 62, 143, 250, 160, 0, 0, 0, 0, 63, 155,
        141, 16, 0, 0, 0, 0, 64, 111, 220, 160, 0, 0, 0, 0, 65, 132, 169, 144, 0, 0, 0, 0, 66, 79,
        190, 160, 0, 0, 0, 0, 67, 100, 139, 144, 0, 0, 0, 0, 68, 47, 160, 160, 0, 0, 0, 0, 69, 68,
        109, 144, 0, 0, 0, 0, 69, 243, 211, 32, 1, 0, 1, 0, 2, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 255, 255, 143, 128, 0, 4, 255, 255, 157, 144, 1, 0, 255,
        255, 157, 144, 1, 8, 255, 255, 157, 144, 1, 12, 80, 68, 84, 0, 80, 83, 84, 0, 80, 87, 84,
        0, 80, 80, 84, 0, 10, 80, 83, 84, 56, 80, 68, 84, 44, 77, 51, 46, 50, 46, 48, 44, 77, 49,
        49, 46, 49, 46, 48, 10,
    ];
    pub(crate) const ROC: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        41, 0, 0, 0, 4, 0, 0, 0, 16, 255, 255, 255, 255, 116, 206, 240, 24, 255, 255, 255, 255,
        195, 85, 73, 128, 255, 255, 255, 255, 210, 84, 89, 128, 255, 255, 255, 255, 211, 139, 123,
        128, 255, 255, 255, 255, 212, 66, 173, 240, 255, 255, 255, 255, 213, 69, 34, 0, 255, 255,
        255, 255, 214, 76, 191, 240, 255, 255, 255, 255, 215, 60, 191, 0, 255, 255, 255, 255, 216,
        6, 102, 112, 255, 255, 255, 255, 217, 29, 242, 128, 255, 255, 255, 255, 217, 231, 153, 240,
        255, 255, 255, 255, 218, 255, 38, 0, 255, 255, 255, 255, 219, 200, 205, 112, 255, 255, 255,
        255, 220, 224, 89, 128, 255, 255, 255, 255, 221, 170, 0, 240, 255, 255, 255, 255, 222, 114,
        115, 0, 255, 255, 255, 255, 223, 181, 100, 112, 255, 255, 255, 255, 224, 124, 133, 0, 255,
        255, 255, 255, 225, 150, 151, 240, 255, 255, 255, 255, 226, 93, 184, 128, 255, 255, 255,
        255, 227, 119, 203, 112, 255, 255, 255, 255, 228, 62, 236, 0, 255, 255, 255, 255, 229, 48,
        32, 112, 255, 255, 255, 255, 230, 33, 113, 0, 255, 255, 255, 255, 231, 18, 165, 112, 255,
        255, 255, 255, 232, 2, 164, 128, 255, 255, 255, 255, 232, 243, 216, 240, 255, 255, 255,
        255, 233, 227, 216, 0, 255, 255, 255, 255, 234, 213, 12, 112, 255, 255, 255, 255, 235, 197,
        11, 128, 255, 255, 255, 255, 236, 182, 63, 240, 255, 255, 255, 255, 237, 247, 252, 0, 255,
        255, 255, 255, 238, 152, 196, 240, 255, 255, 255, 255, 239, 217, 47, 128, 255, 255, 255,
        255, 240, 121, 248, 112, 0, 0, 0, 0, 7, 252, 86, 0, 0, 0, 0, 0, 8, 237, 138, 112, 0, 0, 0,
        0, 9, 221, 137, 128, 0, 0, 0, 0, 10, 206, 189, 240, 0, 0, 0, 0, 17, 219, 161, 128, 0, 0, 0,
        0, 18, 84, 221, 112, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
        3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 0, 0, 113, 232, 0, 0, 0, 0, 112, 128,
        0, 4, 0, 0, 126, 144, 0, 8, 0, 0, 126, 144, 1, 12, 76, 77, 84, 0, 67, 83, 84, 0, 74, 83,
        84, 0, 67, 68, 84, 0, 10, 67, 83, 84, 45, 56, 10,
    ];
    pub(crate) const ROK: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        29, 0, 0, 0, 6, 0, 0, 0, 16, 255, 255, 255, 255, 139, 215, 240, 120, 255, 255, 255, 255,
        146, 230, 22, 248, 255, 255, 255, 255, 210, 67, 39, 240, 255, 255, 255, 255, 215, 101, 143,
        112, 255, 255, 255, 255, 215, 238, 157, 96, 255, 255, 255, 255, 216, 248, 250, 112, 255,
        255, 255, 255, 217, 205, 45, 224, 255, 255, 255, 255, 218, 215, 138, 240, 255, 255, 255,
        255, 219, 173, 15, 224, 255, 255, 255, 255, 220, 230, 226, 240, 255, 255, 255, 255, 221,
        140, 241, 224, 255, 255, 255, 255, 226, 79, 41, 240, 255, 255, 255, 255, 228, 107, 183,
        248, 255, 255, 255, 255, 229, 19, 24, 104, 255, 255, 255, 255, 230, 98, 3, 120, 255, 255,
        255, 255, 231, 17, 76, 232, 255, 255, 255, 255, 232, 47, 112, 120, 255, 255, 255, 255, 232,
        231, 244, 104, 255, 255, 255, 255, 234, 15, 82, 120, 255, 255, 255, 255, 234, 199, 214,
        104, 255, 255, 255, 255, 235, 239, 52, 120, 255, 255, 255, 255, 236, 167, 184, 104, 255,
        255, 255, 255, 237, 207, 22, 120, 255, 255, 255, 255, 238, 135, 154, 104, 255, 255, 255,
        255, 240, 53, 113, 120, 0, 0, 0, 0, 32, 163, 96, 144, 0, 0, 0, 0, 33, 110, 103, 144, 0, 0,
        0, 0, 34, 131, 66, 144, 0, 0, 0, 0, 35, 78, 73, 144, 1, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 1, 5,
        1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 4, 3, 4, 3, 4, 0, 0, 119, 8, 0, 0, 0, 0, 119, 136, 0, 4,
        0, 0, 126, 144, 0, 8, 0, 0, 140, 160, 1, 12, 0, 0, 126, 144, 0, 4, 0, 0, 133, 152, 1, 12,
        76, 77, 84, 0, 75, 83, 84, 0, 74, 83, 84, 0, 75, 68, 84, 0, 10, 75, 83, 84, 45, 57, 10,
    ];
    pub(crate) const SINGAPORE: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 8, 0, 0, 0, 32, 255, 255, 255, 255, 126, 54, 83, 163, 255, 255, 255, 255, 134,
        131, 133, 163, 255, 255, 255, 255, 186, 103, 78, 144, 255, 255, 255, 255, 192, 10, 228, 96,
        255, 255, 255, 255, 202, 179, 229, 96, 255, 255, 255, 255, 203, 145, 95, 8, 255, 255, 255,
        255, 210, 72, 109, 240, 0, 0, 0, 0, 22, 145, 245, 8, 1, 2, 3, 4, 5, 6, 5, 7, 0, 0, 97, 93,
        0, 0, 0, 0, 97, 93, 0, 4, 0, 0, 98, 112, 0, 8, 0, 0, 103, 32, 1, 12, 0, 0, 103, 32, 0, 12,
        0, 0, 105, 120, 0, 18, 0, 0, 126, 144, 0, 24, 0, 0, 112, 128, 0, 28, 76, 77, 84, 0, 83, 77,
        84, 0, 43, 48, 55, 0, 43, 48, 55, 50, 48, 0, 43, 48, 55, 51, 48, 0, 43, 48, 57, 0, 43, 48,
        56, 0, 10, 60, 43, 48, 56, 62, 45, 56, 10,
    ];
    pub(crate) const TURKEY: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        115, 0, 0, 0, 6, 0, 0, 0, 25, 255, 255, 255, 255, 86, 182, 200, 216, 255, 255, 255, 255,
        144, 139, 245, 152, 255, 255, 255, 255, 155, 12, 23, 96, 255, 255, 255, 255, 155, 213, 190,
        208, 255, 255, 255, 255, 162, 101, 99, 224, 255, 255, 255, 255, 163, 123, 130, 80, 255,
        255, 255, 255, 164, 78, 128, 96, 255, 255, 255, 255, 165, 63, 180, 208, 255, 255, 255, 255,
        166, 37, 39, 224, 255, 255, 255, 255, 167, 39, 127, 208, 255, 255, 255, 255, 170, 40, 40,
        96, 255, 255, 255, 255, 170, 225, 253, 208, 255, 255, 255, 255, 171, 249, 137, 224, 255,
        255, 255, 255, 172, 195, 49, 80, 255, 255, 255, 255, 200, 129, 63, 224, 255, 255, 255, 255,
        201, 1, 19, 80, 255, 255, 255, 255, 201, 74, 245, 96, 255, 255, 255, 255, 202, 206, 128,
        80, 255, 255, 255, 255, 203, 203, 174, 96, 255, 255, 255, 255, 210, 107, 9, 80, 255, 255,
        255, 255, 211, 162, 57, 96, 255, 255, 255, 255, 212, 67, 2, 80, 255, 255, 255, 255, 213,
        76, 13, 224, 255, 255, 255, 255, 214, 41, 123, 208, 255, 255, 255, 255, 215, 43, 239, 224,
        255, 255, 255, 255, 216, 9, 93, 208, 255, 255, 255, 255, 217, 2, 151, 96, 255, 255, 255,
        255, 217, 233, 63, 208, 255, 255, 255, 255, 218, 235, 179, 224, 255, 255, 255, 255, 219,
        210, 92, 80, 255, 255, 255, 255, 220, 212, 208, 96, 255, 255, 255, 255, 221, 178, 62, 80,
        255, 255, 255, 255, 241, 244, 185, 96, 255, 255, 255, 255, 244, 98, 239, 80, 255, 255, 255,
        255, 245, 104, 6, 96, 255, 255, 255, 255, 246, 31, 56, 208, 0, 0, 0, 0, 6, 110, 147, 112,
        0, 0, 0, 0, 7, 57, 154, 112, 0, 0, 0, 0, 7, 251, 117, 0, 0, 0, 0, 0, 9, 25, 124, 112, 0, 0,
        0, 0, 9, 208, 203, 0, 0, 0, 0, 0, 10, 249, 94, 112, 0, 0, 0, 0, 11, 177, 254, 128, 0, 0, 0,
        0, 12, 217, 64, 112, 0, 0, 0, 0, 13, 164, 85, 128, 0, 0, 0, 0, 14, 166, 173, 112, 0, 0, 0,
        0, 15, 132, 55, 128, 0, 0, 0, 0, 15, 248, 17, 80, 0, 0, 0, 0, 25, 137, 176, 112, 0, 0, 0,
        0, 25, 220, 176, 224, 0, 0, 0, 0, 27, 230, 208, 240, 0, 0, 0, 0, 28, 198, 239, 240, 0, 0,
        0, 0, 29, 155, 49, 112, 0, 0, 0, 0, 30, 140, 115, 240, 0, 0, 0, 0, 31, 124, 100, 240, 0, 0,
        0, 0, 32, 108, 85, 240, 0, 0, 0, 0, 33, 92, 70, 240, 0, 0, 0, 0, 34, 76, 55, 240, 0, 0, 0,
        0, 35, 60, 40, 240, 0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 10, 240, 0, 0, 0, 0,
        38, 11, 251, 240, 0, 0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 245, 24, 112, 0, 0, 0, 0, 40,
        229, 9, 112, 0, 0, 0, 0, 41, 212, 250, 112, 0, 0, 0, 0, 42, 196, 235, 112, 0, 0, 0, 0, 43,
        180, 220, 112, 0, 0, 0, 0, 44, 164, 205, 112, 0, 0, 0, 0, 45, 139, 131, 240, 0, 0, 0, 0,
        46, 132, 175, 112, 0, 0, 0, 0, 47, 116, 160, 112, 0, 0, 0, 0, 48, 100, 145, 112, 0, 0, 0,
        0, 49, 93, 188, 240, 0, 0, 0, 0, 50, 114, 151, 240, 0, 0, 0, 0, 51, 61, 158, 240, 0, 0, 0,
        0, 52, 82, 121, 240, 0, 0, 0, 0, 53, 29, 128, 240, 0, 0, 0, 0, 54, 50, 91, 240, 0, 0, 0, 0,
        54, 253, 98, 240, 0, 0, 0, 0, 56, 27, 120, 112, 0, 0, 0, 0, 56, 221, 68, 240, 0, 0, 0, 0,
        57, 251, 90, 112, 0, 0, 0, 0, 58, 189, 38, 240, 0, 0, 0, 0, 59, 219, 60, 112, 0, 0, 0, 0,
        60, 166, 67, 112, 0, 0, 0, 0, 61, 187, 30, 112, 0, 0, 0, 0, 62, 134, 37, 112, 0, 0, 0, 0,
        63, 155, 0, 112, 0, 0, 0, 0, 64, 102, 7, 112, 0, 0, 0, 0, 65, 132, 28, 240, 0, 0, 0, 0, 66,
        69, 233, 112, 0, 0, 0, 0, 67, 99, 254, 240, 0, 0, 0, 0, 68, 37, 203, 112, 0, 0, 0, 0, 69,
        67, 224, 240, 0, 0, 0, 0, 70, 5, 201, 144, 0, 0, 0, 0, 71, 35, 223, 16, 0, 0, 0, 0, 71,
        238, 230, 16, 0, 0, 0, 0, 73, 3, 193, 16, 0, 0, 0, 0, 73, 206, 200, 16, 0, 0, 0, 0, 74,
        227, 163, 16, 0, 0, 0, 0, 75, 174, 170, 16, 0, 0, 0, 0, 76, 204, 191, 144, 0, 0, 0, 0, 77,
        143, 221, 144, 0, 0, 0, 0, 78, 172, 161, 144, 0, 0, 0, 0, 79, 110, 110, 16, 0, 0, 0, 0, 80,
        140, 131, 144, 0, 0, 0, 0, 81, 87, 138, 144, 0, 0, 0, 0, 82, 108, 101, 144, 0, 0, 0, 0, 83,
        56, 190, 16, 0, 0, 0, 0, 84, 76, 71, 144, 0, 0, 0, 0, 85, 23, 78, 144, 0, 0, 0, 0, 86, 62,
        158, 144, 0, 0, 0, 0, 86, 247, 48, 144, 0, 0, 0, 0, 87, 207, 46, 80, 1, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
        3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 5, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
        2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 0, 0, 27, 40, 0, 0, 0, 0, 27, 104, 0,
        4, 0, 0, 42, 48, 1, 8, 0, 0, 28, 32, 0, 13, 0, 0, 42, 48, 0, 17, 0, 0, 56, 64, 1, 21, 76,
        77, 84, 0, 73, 77, 84, 0, 69, 69, 83, 84, 0, 69, 69, 84, 0, 43, 48, 51, 0, 43, 48, 52, 0,
        10, 60, 43, 48, 51, 62, 45, 51, 10,
    ];
    pub(crate) const UCT: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 85, 84, 67, 0, 10, 85, 84, 67, 48, 10,
    ];
    pub(crate) const WET: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        39, 0, 0, 0, 2, 0, 0, 0, 9, 0, 0, 0, 0, 13, 164, 99, 144, 0, 0, 0, 0, 14, 139, 26, 16, 0,
        0, 0, 0, 15, 132, 69, 144, 0, 0, 0, 0, 16, 116, 54, 144, 0, 0, 0, 0, 17, 100, 39, 144, 0,
        0, 0, 0, 18, 84, 24, 144, 0, 0, 0, 0, 19, 77, 68, 16, 0, 0, 0, 0, 20, 51, 250, 144, 0, 0,
        0, 0, 21, 35, 235, 144, 0, 0, 0, 0, 22, 19, 220, 144, 0, 0, 0, 0, 23, 3, 205, 144, 0, 0, 0,
        0, 23, 243, 190, 144, 0, 0, 0, 0, 24, 227, 175, 144, 0, 0, 0, 0, 25, 211, 160, 144, 0, 0,
        0, 0, 26, 195, 145, 144, 0, 0, 0, 0, 27, 188, 189, 16, 0, 0, 0, 0, 28, 172, 174, 16, 0, 0,
        0, 0, 29, 156, 159, 16, 0, 0, 0, 0, 30, 140, 144, 16, 0, 0, 0, 0, 31, 124, 129, 16, 0, 0,
        0, 0, 32, 108, 114, 16, 0, 0, 0, 0, 33, 92, 99, 16, 0, 0, 0, 0, 34, 76, 84, 16, 0, 0, 0, 0,
        35, 60, 69, 16, 0, 0, 0, 0, 36, 44, 54, 16, 0, 0, 0, 0, 37, 28, 39, 16, 0, 0, 0, 0, 38, 12,
        24, 16, 0, 0, 0, 0, 39, 5, 67, 144, 0, 0, 0, 0, 39, 245, 52, 144, 0, 0, 0, 0, 40, 229, 37,
        144, 0, 0, 0, 0, 41, 213, 22, 144, 0, 0, 0, 0, 42, 197, 7, 144, 0, 0, 0, 0, 43, 180, 248,
        144, 0, 0, 0, 0, 44, 164, 233, 144, 0, 0, 0, 0, 45, 148, 218, 144, 0, 0, 0, 0, 46, 132,
        203, 144, 0, 0, 0, 0, 47, 116, 188, 144, 0, 0, 0, 0, 48, 100, 173, 144, 0, 0, 0, 0, 49, 93,
        217, 16, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 14, 16, 1, 0, 87, 69, 83, 84,
        0, 87, 69, 84, 0, 10, 87, 69, 84, 48, 87, 69, 83, 84, 44, 77, 51, 46, 53, 46, 48, 47, 49,
        44, 77, 49, 48, 46, 53, 46, 48, 10,
    ];
    pub(crate) const W_SU: &[u8] = &[
        84, 90, 105, 102, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 90, 105, 102, 50,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        78, 0, 0, 0, 11, 0, 0, 0, 38, 255, 255, 255, 255, 86, 182, 192, 199, 255, 255, 255, 255,
        155, 95, 30, 199, 255, 255, 255, 255, 157, 62, 242, 121, 255, 255, 255, 255, 158, 42, 238,
        249, 255, 255, 255, 255, 158, 247, 57, 105, 255, 255, 255, 255, 159, 132, 87, 249, 255,
        255, 255, 255, 160, 216, 108, 233, 255, 255, 255, 255, 161, 0, 57, 128, 255, 255, 255, 255,
        161, 60, 166, 64, 255, 255, 255, 255, 164, 16, 109, 192, 255, 255, 255, 255, 164, 61, 50,
        176, 255, 255, 255, 255, 165, 21, 104, 176, 255, 255, 255, 255, 165, 61, 3, 192, 255, 255,
        255, 255, 167, 30, 69, 80, 255, 255, 255, 255, 181, 164, 25, 96, 0, 0, 0, 0, 21, 39, 167,
        208, 0, 0, 0, 0, 22, 24, 220, 64, 0, 0, 0, 0, 23, 8, 219, 80, 0, 0, 0, 0, 23, 250, 15, 192,
        0, 0, 0, 0, 24, 234, 14, 208, 0, 0, 0, 0, 25, 219, 67, 64, 0, 0, 0, 0, 26, 204, 147, 208,
        0, 0, 0, 0, 27, 188, 160, 240, 0, 0, 0, 0, 28, 172, 145, 240, 0, 0, 0, 0, 29, 156, 130,
        240, 0, 0, 0, 0, 30, 140, 115, 240, 0, 0, 0, 0, 31, 124, 100, 240, 0, 0, 0, 0, 32, 108, 85,
        240, 0, 0, 0, 0, 33, 92, 70, 240, 0, 0, 0, 0, 34, 76, 55, 240, 0, 0, 0, 0, 35, 60, 40, 240,
        0, 0, 0, 0, 36, 44, 25, 240, 0, 0, 0, 0, 37, 28, 10, 240, 0, 0, 0, 0, 38, 11, 251, 240, 0,
        0, 0, 0, 39, 5, 39, 112, 0, 0, 0, 0, 39, 245, 24, 112, 0, 0, 0, 0, 40, 229, 23, 128, 0, 0,
        0, 0, 41, 120, 191, 128, 0, 0, 0, 0, 41, 212, 250, 112, 0, 0, 0, 0, 42, 196, 235, 112, 0,
        0, 0, 0, 43, 180, 220, 112, 0, 0, 0, 0, 44, 164, 205, 112, 0, 0, 0, 0, 45, 148, 190, 112,
        0, 0, 0, 0, 46, 132, 175, 112, 0, 0, 0, 0, 47, 116, 160, 112, 0, 0, 0, 0, 48, 100, 145,
        112, 0, 0, 0, 0, 49, 93, 188, 240, 0, 0, 0, 0, 50, 114, 151, 240, 0, 0, 0, 0, 51, 61, 158,
        240, 0, 0, 0, 0, 52, 82, 121, 240, 0, 0, 0, 0, 53, 29, 128, 240, 0, 0, 0, 0, 54, 50, 91,
        240, 0, 0, 0, 0, 54, 253, 98, 240, 0, 0, 0, 0, 56, 27, 120, 112, 0, 0, 0, 0, 56, 221, 68,
        240, 0, 0, 0, 0, 57, 251, 90, 112, 0, 0, 0, 0, 58, 189, 38, 240, 0, 0, 0, 0, 59, 219, 60,
        112, 0, 0, 0, 0, 60, 166, 67, 112, 0, 0, 0, 0, 61, 187, 30, 112, 0, 0, 0, 0, 62, 134, 37,
        112, 0, 0, 0, 0, 63, 155, 0, 112, 0, 0, 0, 0, 64, 102, 7, 112, 0, 0, 0, 0, 65, 132, 28,
        240, 0, 0, 0, 0, 66, 69, 233, 112, 0, 0, 0, 0, 67, 99, 254, 240, 0, 0, 0, 0, 68, 37, 203,
        112, 0, 0, 0, 0, 69, 67, 224, 240, 0, 0, 0, 0, 70, 5, 173, 112, 0, 0, 0, 0, 71, 35, 194,
        240, 0, 0, 0, 0, 71, 238, 201, 240, 0, 0, 0, 0, 73, 3, 164, 240, 0, 0, 0, 0, 73, 206, 171,
        240, 0, 0, 0, 0, 74, 227, 134, 240, 0, 0, 0, 0, 75, 174, 141, 240, 0, 0, 0, 0, 76, 204,
        163, 112, 0, 0, 0, 0, 77, 142, 111, 240, 0, 0, 0, 0, 84, 76, 29, 96, 1, 3, 2, 3, 4, 2, 4,
        5, 6, 5, 7, 5, 6, 8, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 9, 8,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5,
        6, 5, 6, 5, 6, 5, 6, 5, 6, 10, 6, 0, 0, 35, 57, 0, 0, 0, 0, 35, 57, 0, 4, 0, 0, 49, 135, 1,
        8, 0, 0, 35, 119, 0, 4, 0, 0, 63, 151, 1, 12, 0, 0, 56, 64, 1, 17, 0, 0, 42, 48, 0, 21, 0,
        0, 70, 80, 1, 25, 0, 0, 28, 32, 0, 29, 0, 0, 42, 48, 1, 33, 0, 0, 56, 64, 0, 21, 76, 77,
        84, 0, 77, 77, 84, 0, 77, 83, 84, 0, 77, 68, 83, 84, 0, 77, 83, 68, 0, 77, 83, 75, 0, 43,
        48, 53, 0, 69, 69, 84, 0, 69, 69, 83, 84, 0, 10, 77, 83, 75, 45, 51, 10,
    ];
}
