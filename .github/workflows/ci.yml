name: CI

on:
  push:
    branches: ['main', 'v0.1.x']
  pull_request:
    branches: ['main', 'v0.1.x']
  schedule:
    - cron: "58 7 * * 3"

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: fmt
          toolchain: nightly
          components: rustfmt

      - run: cargo +nightly fmt --all -- --check

  check:
    strategy:
      matrix:
        toolchain:
          - "1.55"
          - stable
          - nightly

    name: "Check/${{ matrix.toolchain }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: check
          toolchain: ${{ matrix.toolchain }}
          components: clippy

      - name: Check
        run: cargo +${{ matrix.toolchain }} check --package tzdb --all-targets

      - name: Lint
        run: cargo +${{ matrix.toolchain }} clippy --package tzdb --all-targets -- -D warnings

  test:
    strategy:
      matrix:
        toolchain:
          - "1.55"
          - stable
          - nightly
        platform:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    name: "Test/${{ matrix.toolchain }} (${{ matrix.platform }})"
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: test
          toolchain: ${{ matrix.toolchain }}

      - name: Test
        run: cargo +${{ matrix.toolchain }} test --package tzdb --all-targets -- --show-output

  minimum-versions:
    name: "Minimal versions"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: minimum-versions
          toolchain: nightly

      - name: Update lockfile
        run: cargo generate-lockfile -Zminimal-versions

      - name: Test
        run: cargo +nightly test --all-targets -- --show-output

  miri:
    name: "Miri"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: miri
          toolchain: nightly
          components: miri

      - name: Test
        run: cargo +nightly miri test --package tzdb --all-targets -- --show-output

  doc:
    name: "Documentation"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: name
          toolchain: nightly
          components: rust-docs

      - run: RUSTDOCFLAGS="-D warnings" cargo +nightly doc --package tzdb --features docsrs --all-features --no-deps

  audit:
    name: "Cargo audit"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: audit

      - run: cargo update

      - name: Audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  powerset:
    strategy:
      matrix:
        toolchain:
          - "1.55"
          - stable
          - nightly
        platform:
          - ubuntu-latest

    name: "Feature powerset/${{ matrix.toolchain }} (${{ matrix.platform }})"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: powerset
          toolchain: ${{ matrix.toolchain }}

      - name: Install hack
        run: cargo +stable install cargo-hack --force

      - name: Powerset
        run: cargo +${{ matrix.toolchain }} hack test --feature-powerset --exclude-features docsrs --ignore-private --tests --lib
