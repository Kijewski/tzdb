name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "58 7 * * 3"

jobs:
  fmt:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: fmt
          toolchain: nightly
          components: rustfmt

      - run: cargo fmt --all -- --check

  test:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - "1.55"
          - stable
          - nightly
        platform:
          - ubuntu-20.04
          - windows-2022
          - macos-12

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: test
          toolchain: ${{ matrix.toolchain }}
          components: clippy

      - run: cargo check --package tzdb --all-targets
      - run: cargo clippy --package tzdb --all-targets -- -D warnings
      - run: cargo test --package tzdb --all-targets -- --show-output

  minimum-versions:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - "1.55"
          - stable
          - nightly
        platform:
          - ubuntu-20.04
          - windows-2022
          - macos-12

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: minimum-versions
          toolchain: ${{ matrix.toolchain }}

      - name: Update lockfile
        env:
          RUSTC_BOOTSTRAP: 1
        run: cargo generate-lockfile -Zminimal-versions

      - name: Test
        run: cargo test --all-targets -- --show-output

  miri:
    name: "Miri"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: miri
          toolchain: nightly
          components: miri

      - name: Test
        run: cargo miri test --package tzdb --all-targets -- --show-output

  doc:
    name: "Documentation"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: name
          toolchain: nightly
          components: rust-docs

      - run: RUSTDOCFLAGS="-D warnings --cfg docsrs" cargo doc --package tzdb --all-features --no-deps

  audit:
    name: "Cargo audit"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: audit

      - name: Update lockfile
        run: cargo generate-lockfile

      - name: Audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  powerset-docs:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - "1.55"
          - stable
          - nightly
        platform:
          - ubuntu-20.04
          - windows-2022
          - macos-12

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: powerset-docs
          toolchain: ${{ matrix.toolchain }}

      - name: Install hack
        run: cargo hack --version || cargo +stable install cargo-hack --force

      - name: Powerset
        run: cargo hack test --feature-powerset --ignore-private --doc

  powerset-tests:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - "1.55"
          - stable
          - nightly
        platform:
          - ubuntu-20.04
          - windows-2022
          - macos-12

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: powerset-tests
          toolchain: ${{ matrix.toolchain }}

      - name: Install hack
        run: cargo hack --version || cargo +stable install cargo-hack --force

      - name: Powerset
        run: cargo hack test --feature-powerset --ignore-private --tests --lib

  build-cross:
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-freebsd
          - x86_64-unknown-illumos
          - x86_64-unknown-netbsd
          - x86_64-linux-android
          - i686-linux-android
          - arm-linux-androideabi
          - aarch64-linux-android
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: cross
          toolchain: stable
          target: ${{ matrix.target }}
          components: clippy

      - run: cross rustc --target ${{ matrix.target }} -- --version || cargo +stable install cross --force
      - run: cross check --target ${{ matrix.target }} --package tzdb --all-targets
      - run: cross clippy --target ${{ matrix.target }} --package tzdb --all-targets -- -D warnings
      - run: cross build --target ${{ matrix.target }} --package tzdb --lib
      - run: cross build --target ${{ matrix.target }} --examples

  build-cross-ios:
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-apple-ios-sim
          - aarch64-apple-ios
          - x86_64-apple-ios
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: ios
          toolchain: stable
          target: ${{ matrix.target }}
          components: clippy

      - run: cross rustc --target ${{ matrix.target }} -- --version || cargo +stable install cross --force
      - run: cross check --target ${{ matrix.target }} --package tzdb --all-targets
      - run: cross clippy --target ${{ matrix.target }} --package tzdb --all-targets -- -D warnings
      - run: cross build --target ${{ matrix.target }} --package tzdb --lib
      - run: cross build --target ${{ matrix.target }} --examples

  package:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          key: package
          toolchain: stable

      - run: cargo package --package tzdb

  devskim:
    name: DevSkim
    runs-on: ubuntu-20.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run DevSkim scanner
        uses: microsoft/DevSkim-Action@v1

      - name: Upload DevSkim scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: devskim-results.sarif
